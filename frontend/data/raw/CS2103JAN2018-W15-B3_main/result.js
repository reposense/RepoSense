var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Fastis-Meetup Manager - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"By: `Team W15-B3`      Since: `February 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"image:FASTIS.png[ align\u003d\"center\"] +"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"Fastis is a stand-alone desktop application that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively. The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos and schedule suitable meetup time. +"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"Fastis has a graphical user interface (GUI), but most of the user interactions happen using a command line interface (CLI). Users with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"This User Guide is meant to provide the necessary information for users, whether new or experienced, who would like to gain more insights about how to use Fastis effectively. The guide consists of the overview of the application and descriptions of its current features."},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":30,"author":{"gitID":"-"},"content":"+"},{"lineNumber":31,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":".  Download the latest `Fastis.jar` link:{repoURL}/releases[here]."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":".  Copy the file to the folder you want to use as the home folder for your Fastis."},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds. The GUI and its components are displayed in Figure 1 below."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"image:Ui.png[width\u003d\"800\"] +"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 1:* GUI upon start and its components."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":".  Type any command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"Some example commands you can try:"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"* *`list`* : lists all contacts."},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"* *`add`*`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Fastis."},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"* *`delete`*`3` : deletes the 3rd contact shown in the current person list panel."},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"* *`exit`* : exits the app."},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e below for details of each command."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"* Most commands have an alias, which is just the acronym of the command. You can use either the command\u0027s name or its alias to execute any command. +"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* Alias of `add` command is `a`. To add a person named John Doe to Fastis, you can type either `add n/John Doe` or `a n/John Doe`."},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* in the command `add n/NAME p/PHONE`, `NAME` and `PHONE` are parameters which you can supply to add a person to Fastis."},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"* Items in square brackets are optional. +"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g_* for `n/NAME [t/TAG]`, you can type `n/John Doe t/friend` or `n/John Doe` as `t/TAG` is optional, but you must not omit `n/NAME`."},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"* Items with `…`​ after them can be used multiple times including zero times. +"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"* Parameters can be in any order. +"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* if the command specifies `n/NAME p/PHONE e/EMAIL`, `p/PHONE e/EMAIL n/NAME` is also acceptable."},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"Displays the help window. +"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"Format: `help` +"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"* This command is equivalent to pressing the F1 key, or click on Help -\u003e Help on the Menu bar."},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"Adds a person to Fastis +"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"Alias: `a` +"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS l/TIMETABLE_LINK d/DETAIL [t/TAG]...`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"* A person can have any number of tags (including 0)."},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"* Timetable link refers to the \u003c\u003cTimetableLinks,NUSMods link\u003e\u003e of the person."},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 l/http://modsn.us/MYwiD d/Likes tennis` +"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"Adds a person named John Doe with the attributes listed. +"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 2 for results of this command."},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"image:personAdded.png[width\u003d\"800\"] +"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 2:* Example of `add` command."},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 l/http://modsn.us/56Dn9 d/Likes chocolate t/criminal` +"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"Adds a friend named Betsy Crowe with the attributes listed."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"Shows a list of all persons in Fastis. +"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"Alias: `l` +"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"Edits an existing person in Fastis. +"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"Alias: `e` +"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [l/TIMETABLE_LINK] [d/DETAIL] [t/TAG]...`"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"****"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":125,"author":{"gitID":"-"},"content":"****"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"Edits the phone number and email address of the 1st person shown in the list to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"* `e 2 n/Betsy Crower t/` +"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"Finds persons whose name contains any of the given keywords. +"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"Alias: `f` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"* The search is case insensitive. Upper case and lower case letters are considered the same. +"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `hans` will match `Hans`."},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"* The order of the keywords does not matter. +"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `Hans Bo` will match `Bo Hans`."},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"* Only full words will be matched. +"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `Han` will not match `Hans`."},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). +"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":150,"author":{"gitID":"-"},"content":"****"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"Returns `john` and `John Doe`."},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"* `find betsy john Tim` +"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"Returns any person named `Betsy`, `Tim`, or `John`."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"Deletes the specified person from Fastis. +"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"Alias: `d` +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"****"},{"lineNumber":167,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":168,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":169,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":170,"author":{"gitID":"-"},"content":"****"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":175,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"Deletes the 2nd person in Fastis."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":178,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":179,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person to show timetable : `select`"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"Alias: `s` +"},{"lineNumber":185,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"****"},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Selects the person and loads the NUSMods timetable of the person at the specified `INDEX`."},{"lineNumber":189,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":190,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"* This command is equivalent to clicking on the person in the list."},{"lineNumber":192,"author":{"gitID":"-"},"content":"****"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":197,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"Selects the 2nd person in Fastis. +"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 3 for results of this command."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":202,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"image:SelectCommandExample.png[width\u003d\"800\"] +"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 3:* Example of showing the timetable when selecting the 2nd person"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"Alias: `h` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Changing a  tag\u0027s color: `changeTagColor`"},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"Changes a specific group color to one of the supported colors. +"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `color` +"},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"Format `changeTagColor TAG COLOR`"},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"* The `TAG` specified must belong to one of the people in Fastis"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"* Supported `COLORS` are: aqua, black, blue, brown, gold, green, grey, lime, magenta, navy, orange, pink, purple, red, teal, yellow, white."},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"Examples:"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"* `changeTagColor friends pink` +"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":"Changes the color of the tag `friends` to pink."},{"lineNumber":234,"author":{"gitID":"LeonidAgarth"},"content":"* `color family yellow` +"},{"lineNumber":235,"author":{"gitID":"LeonidAgarth"},"content":"Changes the color of the tag `family` to yellow."},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":237,"author":{"gitID":"jas5469"},"content":"// group::undoredo[]"},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"Restores Fastis to the state before the previous _undoable_ command was executed. +"},{"lineNumber":241,"author":{"gitID":"nhatquang3112"},"content":"Alias: `u` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"* Undoable commands: those commands that modify Fastis\u0027s content."},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"* All undoable commands are: `add`, `addEvent`, `addGroup`, `addGroupMember`, `addToDo`, `changeTagColor`, `check`, `clear`,"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"`delete`, `deleteGroup`, `deleteGroupMember`, `deleteToDo`, `edit`, `uncheck`."},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"LeonidAgarth"},"content":"* `check 1` +"},{"lineNumber":262,"author":{"gitID":"LeonidAgarth"},"content":"`changeTagColor friends pink` +"},{"lineNumber":263,"author":{"gitID":"LeonidAgarth"},"content":"`undo` (reverses the `changeTagColor` command) +"},{"lineNumber":264,"author":{"gitID":"LeonidAgarth"},"content":"`undo` (reverses the `check 1` command) +"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":269,"author":{"gitID":"nhatquang3112"},"content":"Alias: `r` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":275,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"* `uncheck 1` +"},{"lineNumber":279,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":280,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"LeonidAgarth"},"content":"* `check 1` +"},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":"`changeTagColor friends pink` +"},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"`undo` (reverses the `changeTagColor` command) +"},{"lineNumber":285,"author":{"gitID":"LeonidAgarth"},"content":"`undo` (reverses the `check 1` command) +"},{"lineNumber":286,"author":{"gitID":"LeonidAgarth"},"content":"`redo` (reapplies the `check 1` command) +"},{"lineNumber":287,"author":{"gitID":"LeonidAgarth"},"content":"`redo` (reapplies the `changeTagColor` command) +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an event: `addEvent`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"LeonidAgarth"},"content":"Adds an event to Fastis and displays it on the calendar. +"},{"lineNumber":293,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `aE` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Format: `addEvent n/NAME v/VENUE d/DATE st/STARTTIME et/ENDTIME`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":298,"author":{"gitID":"LeonidAgarth"},"content":"* DATE must be in the format of DD/MM/YYYY"},{"lineNumber":299,"author":{"gitID":"LeonidAgarth"},"content":"* TIME must be in the 24-hour time format of HHmm"},{"lineNumber":300,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":"* `addEvent n/CS2103 Meetup v/School of Computing d/07/04/2018 st/1000 et/1300` +"},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"Adds an event called CS2103 Meetup to the calendar. +"},{"lineNumber":306,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 4 for results of this command."},{"lineNumber":307,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":308,"author":{"gitID":"LeonidAgarth"},"content":"image:AddEventCommandExample.png[width\u003d\"800\"] +"},{"lineNumber":309,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 4:* Example of an event added on the calendar"},{"lineNumber":310,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":311,"author":{"gitID":"nhatquang3112"},"content":"// group::toDoList[]"},{"lineNumber":312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a to-do: `addToDo`"},{"lineNumber":313,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"Adds a to-do to Fastis. +"},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":316,"author":{"gitID":"jas5469"},"content":"Alias: `aTD` +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"Format: `addToDo CONTENT`"},{"lineNumber":318,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":319,"author":{"gitID":"LeonidAgarth"},"content":"Examples: +"},{"lineNumber":320,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 5 for results of the following 2 commands. +"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"* `addToDo Do homework before next Wednesday`"},{"lineNumber":323,"author":{"gitID":"-"},"content":"* `aTD Swim like a fish`"},{"lineNumber":324,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":325,"author":{"gitID":"LeonidAgarth"},"content":"image:AddToDoCommandExample.png[width\u003d\"250\"] +"},{"lineNumber":326,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 5:* Example of adding to-dos"},{"lineNumber":327,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":328,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Marking a to-do as done: `check`"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"LeonidAgarth"},"content":"Marks a to-do in Fastis as done. +"},{"lineNumber":331,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"Format: `check INDEX`"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":335,"author":{"gitID":"LeonidAgarth"},"content":"* Marks the to-do at the specified `INDEX` as done."},{"lineNumber":336,"author":{"gitID":"LeonidAgarth"},"content":"* The to-do progress will update accordingly"},{"lineNumber":337,"author":{"gitID":"LeonidAgarth"},"content":"* The index refers to the index number shown in to-do list panel."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":339,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"LeonidAgarth"},"content":"* `check 1` +"},{"lineNumber":344,"author":{"gitID":"LeonidAgarth"},"content":"Marks the first to-do in the list as done. +"},{"lineNumber":345,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 6 for results of this command."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Marking a to-do as undone: `uncheck`"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"LeonidAgarth"},"content":"Marks a to-do in Fastis as undone. +"},{"lineNumber":350,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"Format: `uncheck INDEX`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":354,"author":{"gitID":"LeonidAgarth"},"content":"* Marks the to-do at the specified `INDEX` as undone."},{"lineNumber":355,"author":{"gitID":"LeonidAgarth"},"content":"* The to-do progress will update accordingly"},{"lineNumber":356,"author":{"gitID":"LeonidAgarth"},"content":"* The index refers to the index number shown in to-do list panel."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":358,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"LeonidAgarth"},"content":"* `uncheck 2` +"},{"lineNumber":363,"author":{"gitID":"LeonidAgarth"},"content":"Marks the second to-do in the list as done. +"},{"lineNumber":364,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 6 for results of this command."},{"lineNumber":365,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":366,"author":{"gitID":"LeonidAgarth"},"content":"image:CheckToDoExample.png[width\u003d\"250\"] +"},{"lineNumber":367,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 6:* Example of checking/unchecking to-dos"},{"lineNumber":368,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a to-do\u0027s content : `editToDo`"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"LeonidAgarth"},"content":"Edits an existing to-do\u0027s content in Fastis. +"},{"lineNumber":372,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":373,"author":{"gitID":"-"},"content":"Alias: `eTD` +"},{"lineNumber":374,"author":{"gitID":"LeonidAgarth"},"content":"Format: `editToDo INDEX c/CONTENT`"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"****"},{"lineNumber":377,"author":{"gitID":"LeonidAgarth"},"content":"* Edits the to-do\u0027s content at the specified `INDEX`."},{"lineNumber":378,"author":{"gitID":"LeonidAgarth"},"content":"* Existing content will be updated to the input value."},{"lineNumber":379,"author":{"gitID":"LeonidAgarth"},"content":"* The index refers to the index number shown in the last to-do listing."},{"lineNumber":380,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":381,"author":{"gitID":"-"},"content":"****"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"* `editToDo 1 c/Swim like a fish` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"Edits the content of the 1st to-do to be `Swim like a fish`."},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a to-do : `deleteToDo`"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"LeonidAgarth"},"content":"Deletes the specified to-do from Fastis. +"},{"lineNumber":391,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"Alias: `dTD` +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"Format: `deleteToDo INDEX`"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"****"},{"lineNumber":396,"author":{"gitID":"-"},"content":"* Deletes the to-do at the specified `INDEX`."},{"lineNumber":397,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":398,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":399,"author":{"gitID":"-"},"content":"****"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"LeonidAgarth"},"content":"* `deleteToDo 2` +"},{"lineNumber":404,"author":{"gitID":"LeonidAgarth"},"content":"Deletes the 2nd to-do in Fastis."},{"lineNumber":405,"author":{"gitID":"nhatquang3112"},"content":"// end::toDoList[]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"jas5469"},"content":"// tag::listTag[]"},{"lineNumber":408,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Listing Tag Members: `listTagMembers`"},{"lineNumber":409,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":410,"author":{"gitID":"LeonidAgarth"},"content":"Lists out all persons with the given tags. +"},{"lineNumber":411,"author":{"gitID":"jas5469"},"content":"Alias: `lTM` +"},{"lineNumber":412,"author":{"gitID":"LeonidAgarth"},"content":"Format: `listTagMembers TAG [MORE_TAGS]...`"},{"lineNumber":413,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":414,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":415,"author":{"gitID":"LeonidAgarth"},"content":"* The search is case insensitive. Upper case and lower case letters are considered the same. +"},{"lineNumber":416,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `FriEndS` will match `friends`."},{"lineNumber":417,"author":{"gitID":"LeonidAgarth"},"content":"* The order of the keywords does not matter. +"},{"lineNumber":418,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `friends CS2103` will match `CS2103 friends`."},{"lineNumber":419,"author":{"gitID":"LeonidAgarth"},"content":"* Only the tag is searched."},{"lineNumber":420,"author":{"gitID":"LeonidAgarth"},"content":"* Only full words will be matched. +"},{"lineNumber":421,"author":{"gitID":"LeonidAgarth"},"content":"*_E.g._* `friend` will not match `friends` and vice versa."},{"lineNumber":422,"author":{"gitID":"LeonidAgarth"},"content":"* Persons with at least one of the specified tags will be returned (i.e. `OR` search)."},{"lineNumber":423,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":424,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":425,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":426,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":427,"author":{"gitID":"jas5469"},"content":"* `listTagMembers CS3230 CS1010` +"},{"lineNumber":428,"author":{"gitID":"LeonidAgarth"},"content":"Returns any person having group tags `CS3230`, `CS1010`. +"},{"lineNumber":429,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 7 for results of this command. +"},{"lineNumber":430,"author":{"gitID":"LeonidAgarth"},"content":"image:ListTagMembersCommandExample.png[width\u003d\"500\"] +"},{"lineNumber":431,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 7:* Example of ListTagMembers +"},{"lineNumber":432,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":433,"author":{"gitID":"jas5469"},"content":"// end::listTag[]"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"jas5469"},"content":"// tag::addGroup[]"},{"lineNumber":436,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Adding a Group: `addGroup`"},{"lineNumber":437,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":438,"author":{"gitID":"LeonidAgarth"},"content":"Adds a group to Fastis +"},{"lineNumber":439,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":440,"author":{"gitID":"jas5469"},"content":"Alias: `aG` +"},{"lineNumber":441,"author":{"gitID":"LeonidAgarth"},"content":"Format: `addGroup NAME`"},{"lineNumber":442,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":443,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":444,"author":{"gitID":"LeonidAgarth"},"content":"* There is no limit to the length of a group\u0027s name"},{"lineNumber":445,"author":{"gitID":"LeonidAgarth"},"content":"* However, the name must contain only alphanumeric characters and spaces, and it must not be blank"},{"lineNumber":446,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":447,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":448,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":449,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"* `addGroup CS2101 Oral Presentation` +"},{"lineNumber":451,"author":{"gitID":"LeonidAgarth"},"content":"Adds a group named `CS2101 Oral Presentation` to Fastis. +"},{"lineNumber":452,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 8 for results of this command. +"},{"lineNumber":453,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":454,"author":{"gitID":"jas5469"},"content":"image:addGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":455,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 8:* Example of adding a group"},{"lineNumber":456,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":457,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Adding Member To Group: `addGroupMember`"},{"lineNumber":458,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":459,"author":{"gitID":"LeonidAgarth"},"content":"Adds an existing person in Fastis to a group. +"},{"lineNumber":460,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":461,"author":{"gitID":"jas5469"},"content":"Alias: `aGM` +"},{"lineNumber":462,"author":{"gitID":"LeonidAgarth"},"content":"Format: `addGroupMember INDEX g/GROUP`"},{"lineNumber":463,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":464,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":465,"author":{"gitID":"LeonidAgarth"},"content":"* Adds the person at the specified `INDEX` in person list to `GROUP`."},{"lineNumber":466,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":467,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":468,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":469,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":470,"author":{"gitID":"LeonidAgarth"},"content":"* The person specified at `INDEX` must not already be in the `GROUP` specified."},{"lineNumber":471,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":472,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":473,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":474,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":475,"author":{"gitID":"LeonidAgarth"},"content":"* `addGroupMember 4 g/CS2101 Oral Presentation` +"},{"lineNumber":476,"author":{"gitID":"LeonidAgarth"},"content":"Adds the 4th person in the list into group `CS2101 Oral Presentation`. +"},{"lineNumber":477,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 9 for results of this command. +"},{"lineNumber":478,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":479,"author":{"gitID":"LeonidAgarth"},"content":"image:addGroupMembersToGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":480,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 9:* Example of addMembersToGroup +"},{"lineNumber":481,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":482,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Deleting a Member from a Group: `deleteGroupMember`"},{"lineNumber":483,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":484,"author":{"gitID":"LeonidAgarth"},"content":"Removes a member from a group. +"},{"lineNumber":485,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":486,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `dGM` +"},{"lineNumber":487,"author":{"gitID":"LeonidAgarth"},"content":"Format: `deleteGroupMember INDEX g/GROUP`"},{"lineNumber":488,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":489,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":490,"author":{"gitID":"LeonidAgarth"},"content":"* Removes the person at the specified `INDEX` in the most recent person list from `GROUP`, *_not_* the `INDEX`-th person in a group."},{"lineNumber":491,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":492,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":493,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":494,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":495,"author":{"gitID":"LeonidAgarth"},"content":"* The person specified at `INDEX` must be within the `GROUP` specified."},{"lineNumber":496,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":497,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":498,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":499,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":500,"author":{"gitID":"LeonidAgarth"},"content":"* `deleteGroupMember 2 g/CS2101 Oral Presentation` +"},{"lineNumber":501,"author":{"gitID":"LeonidAgarth"},"content":"Adds the 2nd person shown in the person list from group `CS2101 Oral Presentation`."},{"lineNumber":502,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":503,"author":{"gitID":"jas5469"},"content":"Refer to Figure 10 for results of this command. +"},{"lineNumber":504,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":505,"author":{"gitID":"jas5469"},"content":"image:deleteGroupMemberExample.png[width \u003d\"500\"] +"},{"lineNumber":506,"author":{"gitID":"jas5469"},"content":"*Figure 10:* Example of deleteMembersFromGroup +"},{"lineNumber":507,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":508,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":509,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Listing Group Members : `listGroupMembers`"},{"lineNumber":510,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":511,"author":{"gitID":"LeonidAgarth"},"content":"Lists all the members in the group that already exists in Fastis. +"},{"lineNumber":512,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `lGM` +"},{"lineNumber":513,"author":{"gitID":"LeonidAgarth"},"content":"Format: `listGroupMembers GROUP`"},{"lineNumber":514,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":515,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":516,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":517,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":518,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":519,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":520,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":521,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":522,"author":{"gitID":"jas5469"},"content":"* `listGroupMembers CS2101 Oral Presentation`  +"},{"lineNumber":523,"author":{"gitID":"LeonidAgarth"},"content":"Lists all members of group CS2101 Oral Presentation. +"},{"lineNumber":524,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 11 for results of this command."},{"lineNumber":525,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":526,"author":{"gitID":"LeonidAgarth"},"content":"image:listGroupMembersExample.png[width \u003d \"500\"] +"},{"lineNumber":527,"author":{"gitID":"jas5469"},"content":"*Figure 11:* Example of ListGroupMembers. +"},{"lineNumber":528,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":529,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Deleting a Group : `deleteGroup`"},{"lineNumber":530,"author":{"gitID":"LeonidAgarth"},"content":"Deletes a group from Fastis. +"},{"lineNumber":531,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":532,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `dG` +"},{"lineNumber":533,"author":{"gitID":"LeonidAgarth"},"content":"Format: `deleteGroup GROUP`"},{"lineNumber":534,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":535,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":536,"author":{"gitID":"LeonidAgarth"},"content":"* Deletes the information of `GROUP` from Fastis, but keep the information about its members."},{"lineNumber":537,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":538,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":539,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":540,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":541,"author":{"gitID":"LeonidAgarth"},"content":"Examples:"},{"lineNumber":542,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":543,"author":{"gitID":"LeonidAgarth"},"content":"* `deleteGroup CS2101 Oral Presentation`  +"},{"lineNumber":544,"author":{"gitID":"-"},"content":"Deletes group `CS2101 Oral Presentation` from Fastis. +"},{"lineNumber":545,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":546,"author":{"gitID":"jas5469"},"content":"Refer to Figure 12 for results of this command. +"},{"lineNumber":547,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":548,"author":{"gitID":"jas5469"},"content":"image:deleteGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":549,"author":{"gitID":"jas5469"},"content":"*Figure 12:* Example of deleteGroup +"},{"lineNumber":550,"author":{"gitID":"LeonidAgarth"},"content":"//end::addGroup[]"},{"lineNumber":551,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":552,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Scheduling a suitable meetup time : `scheduleGroup`"},{"lineNumber":553,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":554,"author":{"gitID":"LeonidAgarth"},"content":"Finds all common free time slots for all group members to meet. +"},{"lineNumber":555,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `sG` +"},{"lineNumber":556,"author":{"gitID":"LeonidAgarth"},"content":"Format: `scheduleGroup GROUP`"},{"lineNumber":557,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":558,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":559,"author":{"gitID":"LeonidAgarth"},"content":"* Computes all time slots when all members in a `GROUP` are free based on each member\u0027s timetable."},{"lineNumber":560,"author":{"gitID":"LeonidAgarth"},"content":"* Results are displayed as free \"modules\" on the GUI timetable."},{"lineNumber":561,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":562,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":563,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":564,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":565,"author":{"gitID":"LeonidAgarth"},"content":"Examples:"},{"lineNumber":566,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":567,"author":{"gitID":"LeonidAgarth"},"content":"* `scheduleGroup CS2101 Oral Presentation`  +"},{"lineNumber":568,"author":{"gitID":"LeonidAgarth"},"content":"Displays all free time slots for group CS2101 Oral Presentation. +"},{"lineNumber":569,"author":{"gitID":"jas5469"},"content":"Refer to Figure 13 for results of this command."},{"lineNumber":570,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":571,"author":{"gitID":"LeonidAgarth"},"content":"image:scheduleGroupExample.png[width \u003d \"800\"] +"},{"lineNumber":572,"author":{"gitID":"jas5469"},"content":"*Figure 13:* Example of scheduleGroup. +"},{"lineNumber":573,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":574,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Switching between Calendar and Timetable : `switch`"},{"lineNumber":575,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":576,"author":{"gitID":"LeonidAgarth"},"content":"Switches between Calendar view and Timetable view. +"},{"lineNumber":577,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `sw` +"},{"lineNumber":578,"author":{"gitID":"LeonidAgarth"},"content":"Format: `switch`"},{"lineNumber":579,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":580,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":581,"author":{"gitID":"LeonidAgarth"},"content":"* Switches to Timetable view if Fastis is currently in Calendar view, and vice versa."},{"lineNumber":582,"author":{"gitID":"LeonidAgarth"},"content":"* Upon switching to timetable, the default timetable is blank."},{"lineNumber":583,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":584,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"LeonidAgarth"},"content":"Clears all entries from Fastis. +"},{"lineNumber":588,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":589,"author":{"gitID":"nhatquang3112"},"content":"Alias: `c` +"},{"lineNumber":590,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":595,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"LeonidAgarth"},"content":"Fastis\u0027 data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":600,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Displaying all events : `display` `[coming in v2.0]`"},{"lineNumber":603,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":604,"author":{"gitID":"LeonidAgarth"},"content":"Shows all events in list in Fastis in chronological order. +"},{"lineNumber":605,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `d` +"},{"lineNumber":606,"author":{"gitID":"LeonidAgarth"},"content":"Format: `display`"},{"lineNumber":607,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":608,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Editing a person\u0027s group : `modify` `[coming in v2.0]`"},{"lineNumber":609,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":610,"author":{"gitID":"LeonidAgarth"},"content":"Modifies the group that the person belongs to. +"},{"lineNumber":611,"author":{"gitID":"jas5469"},"content":"Alias: `m` +"},{"lineNumber":612,"author":{"gitID":"jas5469"},"content":"Format: `modify INDEX`"},{"lineNumber":613,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":614,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":615,"author":{"gitID":"jas5469"},"content":"* INDEX refers to the index of the person you are trying to update his group."},{"lineNumber":616,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":617,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":618,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":619,"author":{"gitID":"jas5469"},"content":"// group::dataencryption[]"},{"lineNumber":620,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"LeonidAgarth"},"content":"* Personal log in page that requires saved password. +"},{"lineNumber":623,"author":{"gitID":"LeonidAgarth"},"content":"* Sign up with `username` and `password`. +"},{"lineNumber":624,"author":{"gitID":"LeonidAgarth"},"content":"* Creation of password should use at least 1 lower case ,1 upper case and 1 number. +"},{"lineNumber":625,"author":{"gitID":"LeonidAgarth"},"content":"* Sign in with saved username and password to be able to use the secured application. +"},{"lineNumber":626,"author":{"gitID":"LeonidAgarth"},"content":"* Data files created by Fastis will be encrypted using the `password` you have provided. +"},{"lineNumber":627,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"LeonidAgarth"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":632,"author":{"gitID":"LeonidAgarth"},"content":"*A*: All Fastis data is stored in `addressbook.xml` file in the data folder. Overwrite that file in your other computer with the file that contains the data from your previous computer."},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"Isaaaca"},"content":"//tag::TimetableLinks[]"},{"lineNumber":635,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d Appendix"},{"lineNumber":636,"author":{"gitID":"Isaaaca"},"content":"[[TimetableLinks]]"},{"lineNumber":637,"author":{"gitID":"LeonidAgarth"},"content":"[big]#*Timetable Links*#"},{"lineNumber":638,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":639,"author":{"gitID":"jas5469"},"content":"Timetable links can be retrieved from the https://nusmods.com/[NUSMods Website]. To retrieve it simply go the website and click the *Share/Sync* button, circled in Figure 14. +"},{"lineNumber":640,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":641,"author":{"gitID":"LeonidAgarth"},"content":"image:nusModsShare.PNG[width \u003d\"500\"] +"},{"lineNumber":642,"author":{"gitID":"jas5469"},"content":"*Figure 14:* Share/Sync button on NUSMods website. +"},{"lineNumber":643,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":644,"author":{"gitID":"jas5469"},"content":"The link in the box indicated in Figure 15 below is the TimetableLink for Fastis. Copy it into your commands. +"},{"lineNumber":645,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":646,"author":{"gitID":"LeonidAgarth"},"content":"image:nusModsLinkResult.PNG[width \u003d\"500\"] +"},{"lineNumber":647,"author":{"gitID":"jas5469"},"content":"*Figure 15:* The TimetableLink to copy to Fastis commands."},{"lineNumber":648,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":649,"author":{"gitID":"Isaaaca"},"content":"//end::TimetableLinks[]"},{"lineNumber":650,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"LeonidAgarth"},"content":"[width\u003d\"80%\",cols\u003d\"2,10,2,10,2\",options\u003d\"header\"]"},{"lineNumber":654,"author":{"gitID":"LeonidAgarth"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":655,"author":{"gitID":"LeonidAgarth"},"content":"|Command |Usage |Alias |Format |Undoable?"},{"lineNumber":656,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":657,"author":{"gitID":"LeonidAgarth"},"content":"|`add` |Adds a person to Fastis |`a` |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS l/TIMETABLE_LINK d/DETAIL [t/TAG]...` |X"},{"lineNumber":658,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":659,"author":{"gitID":"LeonidAgarth"},"content":"|`addEvent` |Adds an event to Fastis and display it on the calendar |`aE` |`addEvent n/NAME v/VENUE d/DATE st/STARTTIME et/ENDTIME` |X"},{"lineNumber":660,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":661,"author":{"gitID":"LeonidAgarth"},"content":"|`addGroup` |Adds a group to Fastis |`aG` |`addGroup NAME` |X"},{"lineNumber":662,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":663,"author":{"gitID":"LeonidAgarth"},"content":"|`addGroupMembers` |Adds an existing person in Fastis to a group |`aGM` |`addGroupMember INDEX g/GROUP` |X"},{"lineNumber":664,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":665,"author":{"gitID":"LeonidAgarth"},"content":"|`addToDo` |Adds a to-do to Fastis |`aTD` |`addToDo CONTENT` |X"},{"lineNumber":666,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":667,"author":{"gitID":"LeonidAgarth"},"content":"|`changeTagColor` |Changes a specific group color to one of the supported colors |`color` |`changeTagColor TAG COLOR` |X"},{"lineNumber":668,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":669,"author":{"gitID":"LeonidAgarth"},"content":"|`check` |Marks a to-do in Fastis as done |{nbsp} |`check INDEX` |X"},{"lineNumber":670,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":671,"author":{"gitID":"LeonidAgarth"},"content":"|`clear` |Clears all entries from Fastis |`c` |`clear` |X"},{"lineNumber":672,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":673,"author":{"gitID":"LeonidAgarth"},"content":"|`delete` |Deletes the specified person from Fastis |`d` |`delete INDEX` |X"},{"lineNumber":674,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":675,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteGroup` |Deletes a group from Fastis |`dG` |`deleteGroup GROUP` |X"},{"lineNumber":676,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":677,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteGroupMember` |Removes a member from a group |`dGM` |`deleteGroupMember INDEX g/GROUP` |X"},{"lineNumber":678,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":679,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteToDo` |Deletes the specified to-do from Fastis |`dTD` |`deleteToDo INDEX` |X"},{"lineNumber":680,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":681,"author":{"gitID":"LeonidAgarth"},"content":"|`edit` |Edits an existing person in Fastis |`e` |`edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [l/TIMETABLE_LINK] [d/DETAIL] [t/TAG]...` |X"},{"lineNumber":682,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":683,"author":{"gitID":"LeonidAgarth"},"content":"|`editToDo` |Edits an existing to-do\u0027s content in Fastis |`eTD` |`editToDo INDEX c/CONTENT` |X"},{"lineNumber":684,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":685,"author":{"gitID":"LeonidAgarth"},"content":"|`exit` |Exits the program |{nbsp} |`exit` |{nbsp}"},{"lineNumber":686,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":687,"author":{"gitID":"LeonidAgarth"},"content":"|`find` |Finds persons whose name contains any of the given keywords |`f` |`find KEYWORD [MORE_KEYWORDS]` |{nbsp}"},{"lineNumber":688,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":689,"author":{"gitID":"LeonidAgarth"},"content":"|`help` |Displays the help window |{nbsp} |`help` |{nbsp}"},{"lineNumber":690,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":691,"author":{"gitID":"LeonidAgarth"},"content":"|`history` |Lists all the commands that you have entered in reverse chronological order |`h` |`history` |{nbsp}"},{"lineNumber":692,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":693,"author":{"gitID":"LeonidAgarth"},"content":"|`list` |Shows a list of all persons in Fastis |`l` |`list` |{nbsp}"},{"lineNumber":694,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":695,"author":{"gitID":"LeonidAgarth"},"content":"|`listGroupMembers` |Lists all the members in the group that already exists in Fastis |`lGM` |`listGroupMembers GROUP` |{nbsp}"},{"lineNumber":696,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":697,"author":{"gitID":"LeonidAgarth"},"content":"|`listTagMembers` |Lists out all persons with the given tags |`lTM` |`listTagMembers TAG [MORE_TAGS]...` |{nbsp}"},{"lineNumber":698,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":699,"author":{"gitID":"LeonidAgarth"},"content":"|`redo` |Reverses the most recent `undo` command |`r` |`redo` |{nbsp}"},{"lineNumber":700,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":701,"author":{"gitID":"LeonidAgarth"},"content":"|`scheduleGroup` |Finds all common free time slots for all group members to meet |`sG` |`scheduleGroup GROUP` |{nbsp}"},{"lineNumber":702,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":703,"author":{"gitID":"LeonidAgarth"},"content":"|`select` |Selects the person identified by the index number used in the last person listing |`s` |`select INDEX` |{nbsp}"},{"lineNumber":704,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":705,"author":{"gitID":"LeonidAgarth"},"content":"|`switch` |Switches between Calendar view and Timetable view |`sw` |`switch` |{nbsp}"},{"lineNumber":706,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":707,"author":{"gitID":"LeonidAgarth"},"content":"|`uncheck` |Marks a to-do in Fastis as undone |{nbsp} |`uncheck INDEX` |X"},{"lineNumber":708,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":709,"author":{"gitID":"LeonidAgarth"},"content":"|`undo` |Restores Fastis to the state before the previous _undoable_ command was executed |`u` |`undo` |{nbsp}"},{"lineNumber":710,"author":{"gitID":"LeonidAgarth"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"}],"authorContributionMap":{"nhatquang3112":14,"Isaaaca":9,"jas5469":87,"LeonidAgarth":357,"-":243}},{"path":"docs/team/isaaclau.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"\u003d Isaac Lau - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d PROJECT: Fastis - MeetUp Manager"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"---"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"Fastis is a desktop application that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively. The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos and schedule suitable meetup time."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"* *Major enhancement*: NUSmods integration"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"** What it does: allows the user to add a link from a NUSmods page (e.g. http://modsn.us/MYwiD) to a person. The app uses the link to display the person\u0027s timetable."},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"** Justification: This feature allows the user to see their group members\u0027 timetable easily, enabling them to better schedule plans and events."},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"** Highlights: This enhancement has the potential to be expanded upon greatly. Because the feature is removed from the existing architecture, it required deep understanding of the application architecture to figure out where and how the enhancement could be added in."},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"** Credits: https://github.com/nusmodifications/nusmods/tree/master/api/data[NUSmods API] was used to retrieve module information."},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"* *Minor enhancement*: improved functionality of `find` command to work with partial words and approximate words."},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"** Credits: https://github.com/xdrop/fuzzywuzzy[fuzzywuzzy] library was used to enable better string comparison functionality."},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"* *Code contributed*:"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"** https://github.com/CS2103JAN2018-W15-B3/main/tree/master/collated/functional/Isaaaca.md[Functional code]"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"** https://github.com/CS2103JAN2018-W15-B3/main/blob/master/collated/test/Isaaaca.md[Test code]"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"* *Other contributions*:"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"** Project management:"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"*** Managed releases `v1.2` on GitHub"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"*** Updated class diagrams in Developer Guide"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"*** Added substantial segments to Developer Guide"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"** Community:"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"*** Help team members fix bugs https://github.com/CS2103JAN2018-W15-B3/main/issues/167[#167]"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"*** Reported bugs and suggestions https://github.com/CS2103JAN2018-W15-B3/main/issues/96[#96]"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"//tag::TimetableLinks[]"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d Appendix"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"[[TimetableLinks]]"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"[big]#*Timetable Links*#"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"Timetable links can be retrieved from the https://nusmods.com/[NUSMods Website]. To retrieve it simply go the website and click the *Share/Sync* button, circled in Figure 12. +"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"image:nusModsShare.PNG[width \u003d\"500\"] +"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"*Figure 12:* Share/Sync button on NUSMods website. +"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"The link in the box indicated in Figure 13 below is the TimetableLink for Fastis. Copy it into your commands. +"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"image:nusModsLinkResult.PNG[width \u003d\"500\"] +"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"*Figure 13:* The TimetableLink to copy to Fastis commands."},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"//end::TimetableLinks[]"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":68,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":69,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"[[Design-Database]]"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Database component"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"The Database component is in charge of connections to the web."},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"The `Database` component:"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"* downloads module information from the `NUSmods API`."},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"* retrieves modules given a NUSmods timetable link."},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"[NOTE]"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"NUSmods timetable links are the sharable short URL from a NUSmods page."},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"E.g. http://modsn.us/MYwiD"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"The sturucture of the Database component is shown in \u003c\u003cfig11, Figure 1\u003e\u003e"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"[[fig11]]"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":".Structure of the Database Component."},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"image::DatabaseClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"//tag::ModuleDatabase[]"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Module database feature"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"The database feature enables Fastis to store and quickly find lesson schedules."},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"Fastis uses the available `NUSmods API` to retrieve module information from the API server."},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"The sequence diagram (\u003c\u003cfig20, Figure 2\u003e\u003e) for the instantiation of DatabaseManager is shown below."},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":".Sequence diagram for the instantianion of DatabaseManager."},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"image::DatabaseComponentSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"On startup, the network component makes a connection to the API server and checks the `lastmodified` field of the `JSON` file on the server. If the `lastmodified` date is more recent that the `JSON` file held in storage, the network component will download and overwrite the existing file on disk."},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"The `Storage` component then converts the JSON file into a hashMap of modules to be held in the `Database` component."},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":108,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storage of Module information"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":112,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 1 (current choice):** Store a complete dataset of all modules"},{"lineNumber":113,"author":{"gitID":"Isaaaca"},"content":"** Pros: This implementation allows Fastis to access information even when used offline."},{"lineNumber":114,"author":{"gitID":"Isaaaca"},"content":"** Cons: This implementation requires more memory space."},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 2:** Store nothing, retrieve only module information of single module each time."},{"lineNumber":116,"author":{"gitID":"Isaaaca"},"content":"** Pros: This implementation does not require any storage space."},{"lineNumber":117,"author":{"gitID":"Isaaaca"},"content":"** Cons: This implementation requires Fastis to constantly download information from the web, making the app reliant on good internet connection."},{"lineNumber":118,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":119,"author":{"gitID":"Isaaaca"},"content":"// end::ModuleDatabase[]"},{"lineNumber":120,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":121,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":122,"author":{"gitID":"Isaaaca"},"content":"//tag::showingTimetable[]"},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"[[showingTimetable]]"},{"lineNumber":124,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Showing the timetable"},{"lineNumber":125,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":126,"author":{"gitID":"Isaaaca"},"content":"This feature allows users to see a person\u0027s timetable by selecting him/her."},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"When a person is selected, either by the `select` command or by mouse click via the GUI, a `PersonPanelSelectionChangedEvent` is raised. The flow of operation thereafter is shown \u003c\u003cfig23, Figure 3\u003e\u003e below."},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":".Sequence digaram for PersonPanelSelectionChangedEvent."},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"image::nusModsSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"Upon receiving the event, the `UI` component takes the `Person` within the `PersonPanelSelectionChangedEvent` and calls the `parseEvents()` method of `DataBaseManager`, passing the `TimetableLink` of the `Person` as an argument."},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"The result of the `parseEvents()` is an `ArrayList` of `WeeklyEvents`. This result is used to form a `TimeTableChangedEvent`, which ultimately tells the `UI` component to display the result."},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"The implementation of `parseEvents()` is as follows:"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"[source,java]"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":"----"},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"public static ArrayList\u003cWeeklyEvent\u003e parseEvents(TimeTableLink link) {"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"        if (!isCurrentSem(link)) {"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"           // ... display and log warning messages ..."},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":"        String query \u003d getQuery(link);"},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":"       // ... parse query into WeeklyEvents ..."},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":153,"author":{"gitID":"Isaaaca"},"content":"        return eventList;"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"----"},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":"The `parseEvents()` method firsts checks if the `TimetableLink` points to a schedule that is in the same semester as Fatis\u0027 database. It then calls the `getQuery` helper method, which a `URLconnection` to the shortened URL in `TimetableLink` and returns the `query` part of the full-length URL."},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":159,"author":{"gitID":"Isaaaca"},"content":"The method then takes the `query` and parses them into modules and lessons, which are used to form `WeeklyEvents`."},{"lineNumber":160,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":161,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":162,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":163,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storage of a person\u0027s schedule"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 1 (current choice):** Store only the link to a NUSmods page for each person"},{"lineNumber":166,"author":{"gitID":"Isaaaca"},"content":"** Pros: This implementation requires very little space. The schedule of a person can easily be changed by editing the `TimetableLink`."},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":"** Cons: This implementation requires Fastis to make a connection to the web each time a person is selected."},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 2:** Store the schedule of each person in the `AddressBook`"},{"lineNumber":169,"author":{"gitID":"Isaaaca"},"content":"** Pros: This implementation will require much more space, and there will be a dilemma between whether to store it as `WeeklyEvent`, or `Module` and `schedule`"},{"lineNumber":170,"author":{"gitID":"Isaaaca"},"content":"** Cons: This implementation requires Fastis to make a connection to the web only when a person is added or edited."},{"lineNumber":171,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":172,"author":{"gitID":"Isaaaca"},"content":"//end::showingTimetable[]"},{"lineNumber":173,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":174,"author":{"gitID":"Isaaaca"},"content":"---"}],"authorContributionMap":{"nhatquang3112":13,"Isaaaca":146,"-":15}},{"path":"docs/team/trannhatquang.adoc","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"\u003d Tran Nhat Quang - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d PROJECT: Fastis - MeetUp Manager"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"---"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"Fastis is a desktop application that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively. The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos and schedule suitable meetup time."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"* *Major enhancement*: added *the to-do list*"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"** What it does: allows the user to add to-dos and manage the to-dos with various commands: check/uncheck to-dos as done/undone, edit content of to-dos and delete to-dos. The percentage of completed to-dos is shown with a pie chart."},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"** Justification: This feature helps the user keep track of deliverable and agendas in group meetings, which aims to improve team management."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Highlights: This enhancement makes the application be more customised and focused towards group meetings. It required an in-depth understanding of the four main components of Fastis, which are `Model`, `UI`, `Logic` and `Storage`."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"* *Minor enhancement*: added a detail field for a person, which displays additional information and remark for the person."},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W15-B3/main/tree/master/collated/functional/nhatquang3112.md[Functional code]] [https://github.com/CS2103JAN2018-W15-B3/main/blob/master/collated/test/nhatquang3112.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"*** Managed weekly milestones on GitHub"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"** Enhancements to existing features:"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"*** Wrote additional tests for existing features to increase coverage"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"** Documentation:"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"*** Update new screenshots of new commands for the User Guide"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"** Community:"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"*** Create weekly issues for team members"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"*** Help team members fix bugs"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"*** Reported bugs and suggestions"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a to-do: `addToDo`"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"Adds a to-do to Fastis. +"},{"lineNumber":48,"author":{"gitID":"-"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Alias: `aTD` +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Format: `addToDo CONTENT`"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"Examples: +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"Refer to Figure 5 for results of the following 2 commands. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"* `addToDo Do homework before next Wednesday`"},{"lineNumber":56,"author":{"gitID":"-"},"content":"* `aTD Swim like a fish`"},{"lineNumber":57,"author":{"gitID":"-"},"content":"+"},{"lineNumber":58,"author":{"gitID":"-"},"content":"image:AddToDoCommandExample.png[width\u003d\"250\"] +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"*Figure 5:* Example of adding to-dos"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Marking a to-do as done: `check`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"Marks a to-do in Fastis as done. +"},{"lineNumber":64,"author":{"gitID":"-"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"Format: `check INDEX`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"****"},{"lineNumber":68,"author":{"gitID":"-"},"content":"* Marks the to-do at the specified `INDEX` as done."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* The to-do progress will update accordingly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in to-do list panel."},{"lineNumber":71,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":72,"author":{"gitID":"-"},"content":"****"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* `check 1` +"},{"lineNumber":77,"author":{"gitID":"-"},"content":"Marks the first to-do in the list as done. +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Refer to Figure 6 for results of this command."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Marking a to-do as undone: `uncheck`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Marks a to-do in Fastis as undone. +"},{"lineNumber":83,"author":{"gitID":"-"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Format: `uncheck INDEX`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"****"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Marks the to-do at the specified `INDEX` as undone."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* The to-do progress will update accordingly"},{"lineNumber":89,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in to-do list panel."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":91,"author":{"gitID":"-"},"content":"****"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"* `uncheck 2` +"},{"lineNumber":96,"author":{"gitID":"-"},"content":"Marks the second to-do in the list as done. +"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Refer to Figure 6 for results of this command."},{"lineNumber":98,"author":{"gitID":"-"},"content":"+"},{"lineNumber":99,"author":{"gitID":"-"},"content":"image:CheckToDoExample.png[width\u003d\"250\"] +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"*Figure 6:* Example of checking/unchecking to-dos"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a to-do\u0027s content : `editToDo`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"Edits an existing to-do\u0027s content in Fastis. +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"Alias: `eTD` +"},{"lineNumber":107,"author":{"gitID":"-"},"content":"Format: `editToDo INDEX c/CONTENT`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"****"},{"lineNumber":110,"author":{"gitID":"-"},"content":"* Edits the to-do\u0027s content at the specified `INDEX`."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Existing content will be updated to the input value."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last to-do listing."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":114,"author":{"gitID":"-"},"content":"****"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"* `editToDo 1 c/Swim like a fish` +"},{"lineNumber":119,"author":{"gitID":"-"},"content":"Edits the content of the 1st to-do to be `Swim like a fish`."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a to-do : `deleteToDo`"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Deletes the specified to-do from Fastis. +"},{"lineNumber":124,"author":{"gitID":"-"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":125,"author":{"gitID":"-"},"content":"Alias: `dTD` +"},{"lineNumber":126,"author":{"gitID":"-"},"content":"Format: `deleteToDo INDEX`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Deletes the to-do at the specified `INDEX`."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":132,"author":{"gitID":"-"},"content":"****"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `deleteToDo 2` +"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Deletes the 2nd to-do in Fastis."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":142,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":143,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add ToDo feature"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Adds a to-do."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The add to-dos mechanism is facilitated by `AddToDoCommand`, which resides inside `Logic` component. It supports adding ToDo objects to the address book. AddToDoCommand inherits from `UndoableCommand`."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"Hence, AddToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":153,"author":{"gitID":"-"},"content":"With the extra layer, the AddToDoCommand that is undoable is implemented this way:"},{"lineNumber":154,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":155,"author":{"gitID":"-"},"content":"----"},{"lineNumber":156,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"}"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"public class AddToDoCommand extends UndoableCommand {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // ... add to-do logic ..."},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"},{"lineNumber":171,"author":{"gitID":"-"},"content":"----"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The to-dos in the to-do list are facilitated by `ToDo` class. Each `ToDo` object have a `Content` object and a `Status` object, representing the content and status of the to-do."},{"lineNumber":174,"author":{"gitID":"-"},"content":"Address book stores all to-dos in `UniqueToDoList`."},{"lineNumber":175,"author":{"gitID":"-"},"content":"`ToDo`,`Content` and `UniqueToDoList` class reside inside `AddressBook`. \u003c\u003cfig43,Figure 43\u003e\u003e is the class diagram showing the relationship between `ToDo`,`Content`, `Status`, `UniqueToDoList` and `AddressBook`:"},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig43]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Class Diagram for UniqueToDoList."},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::AddressBookUniqueToDoListToDoClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"On a smaller scale, \u003c\u003cfig44, Figure 44\u003e\u003e is a class diagram showing the relationship between `ToDo`,`Content` and `Status`:"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[[fig44]]"},{"lineNumber":183,"author":{"gitID":"-"},"content":".Class Diagram for To-Do."},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::ToDoStatusContentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UniqueToDoList` in the address book will be empty if no to-dos have been added previously."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"The user executes a new `AddToDoCommand` with `Content`, to add a new to-do to the address book."},{"lineNumber":189,"author":{"gitID":"-"},"content":"The `Status` of the to-do is \"undone\" by default."},{"lineNumber":190,"author":{"gitID":"-"},"content":"The new to-do with content and status is added to the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003c\u003cfig45, Figure 45\u003e\u003e shows how the addToDo operation works:"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"[[fig45]]"},{"lineNumber":194,"author":{"gitID":"-"},"content":".Sequence Diagram for addToDo."},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::AddToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddToDoCommand`"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Restrict the constructor of ToDo to be ToDo(Content content, Status status)`"},{"lineNumber":202,"author":{"gitID":"-"},"content":"** Pros: This implementation allows ToDo class to be easier to maintain and debug."},{"lineNumber":203,"author":{"gitID":"-"},"content":"** Cons: This implementation requires extensive refactor of existing tests."},{"lineNumber":204,"author":{"gitID":"-"},"content":"// end::addToDo[]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"// tag::checkToDo[]"},{"lineNumber":207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Check/UnCheck ToDo feature"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Checks or unchecks a To-do"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"The check/uncheck to-dos mechanism is facilitated by `CheckToDoCommand` and `UnCheckToDoCommand`, which resides inside `Logic` component. It supports modifying Status objects within ToDo objects. CheckToDoCommand and UnCheckToDoCommand inherit from `UndoableCommand`."},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"Hence, CheckToDoCommand and UnCheckToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Similar to `Content` object, each `ToDo` object have a `Status` object, representing the status of the to-do."},{"lineNumber":218,"author":{"gitID":"-"},"content":"The status of a to-do can be either `done` or `undone`."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"When user check/uncheck an existing to-do of specific `Index`, a new `ToDo` is created, with the existing `ToDo`\u0027s `Content` and appropriate new `Status`."},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"The existing to-do is replaced by the new to-do in the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":223,"author":{"gitID":"-"},"content":"\u003c\u003cfig46, Figure 46\u003e\u003e shows how the checkToDo operation works:"},{"lineNumber":224,"author":{"gitID":"-"},"content":"[[fig46]]"},{"lineNumber":225,"author":{"gitID":"-"},"content":".Sequence Diagram for checkToDo."},{"lineNumber":226,"author":{"gitID":"-"},"content":"image::CheckToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003c\u003cfig47, Figure 47\u003e\u003e shows how the unCheckToDo operation works:"},{"lineNumber":229,"author":{"gitID":"-"},"content":"[[fig47]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":".Sequence Diagram for unCheckToDo."},{"lineNumber":231,"author":{"gitID":"-"},"content":"image::UnCheckToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `CheckToDoCommand` and `UnCheckToDoCommand`"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new method `setStatus(Status newStatus)` in `ToDo`"},{"lineNumber":238,"author":{"gitID":"-"},"content":"** Pros: This implementation do not require a new `ToDo` object to be created to replace the existing to-do."},{"lineNumber":239,"author":{"gitID":"-"},"content":"** Cons: This implementation does not follow the Single Responsibility Principle."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"// end::checkToDo[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"// tag::editToDo[]"},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Edit ToDo feature"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Edits a To-do."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"The edit to-dos mechanism is facilitated by `EditToDoCommand`, which resides inside `Logic` component. It supports modifying Content objects within ToDo objects. EditToDoCommand inherit from `UndoableCommand`."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Hence, EditToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"When user edit an existing to-do of specific `Index`, a new `ToDo` is created, with the new `Content` and a new `Status` of \"undone\" value."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"The existing to-do is replaced by the new to-do in the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003c\u003cfig48, Figure 48\u003e\u003e shows how the editToDo operation works:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"[[fig48]]"},{"lineNumber":259,"author":{"gitID":"-"},"content":".Sequence Diagram for EditToDo."},{"lineNumber":260,"author":{"gitID":"-"},"content":"image::EditToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `EditToDoCommand`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new method `setContentAndStatus(Content content, Status newStatus)` in `ToDo`"},{"lineNumber":267,"author":{"gitID":"-"},"content":"** Pros: This implementation do not require a new `ToDo` object to be created to replace the existing to-do."},{"lineNumber":268,"author":{"gitID":"-"},"content":"** Cons: This implementation does not follow the Single Responsibility Principle."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"// end::editToDo[]"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"// tag::deleteToDo[]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete ToDo feature"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"Deletes a To-Do."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"The delete to-dos mechanism is facilitated by `DeleteToDoCommand`, which resides inside `Logic` component. It supports deleting ToDo objects. DeleteToDoCommand inherit from `UndoableCommand`."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Hence, DeleteToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"When user delete an existing to-do of specific `Index`, the `UniqueToDoList` within `AddressBook` is updated and stored in the `StorageManager`."},{"lineNumber":284,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"\u003c\u003cfig49, Figure 49\u003e\u003e shows how the deleteToDo operation works:"},{"lineNumber":286,"author":{"gitID":"-"},"content":"[[fig49]]"},{"lineNumber":287,"author":{"gitID":"-"},"content":".Sequence Diagram for DeleteToDo."},{"lineNumber":288,"author":{"gitID":"-"},"content":"image::DeleteToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":289,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":290,"author":{"gitID":"nhatquang3112"},"content":"---"}],"authorContributionMap":{"nhatquang3112":33,"-":257}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"Fastis - Meetup Manager was developed by the https://github.com/CS2103JAN2018-W15-B3[W15-B3] team, improved upon"},{"lineNumber":7,"author":{"gitID":"-"},"content":" https://github.com/nus-cs2103-AY1718S2/addressbook-level4[AddressBook-Level4] by the https://se-edu.github.io/docs/Team.html[se-edu]"},{"lineNumber":8,"author":{"gitID":"-"},"content":" team. +"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore],"},{"lineNumber":11,"author":{"gitID":"-"},"content":"formed during the course of CS2103T: Software Engineering module."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Tran Nhat Quang"},{"lineNumber":16,"author":{"gitID":"-"},"content":"image::TranNhatQuang.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"{empty}[https://github.com/nhatquang3112[github]] [\u003c\u003ctrannhatquang#, portfolio\u003e\u003e]"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Role: Team Lead, Developer +"},{"lineNumber":20,"author":{"gitID":"-"},"content":"Responsibility: Model, in charge of implementing To-do list"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Pham Vu Hung"},{"lineNumber":25,"author":{"gitID":"-"},"content":"image::PhamVuHung.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"{empty}[https://github.com/LeonidAgarth[github]] [\u003c\u003cphamvuhung#, portfolio\u003e\u003e]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"Responsibilities: Logic, Storage, in charge of implementing Calendar and Timetable"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Jason Leo"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::JasonLeo.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"{empty}[https://github.com/jas5469[github]] [\u003c\u003cjasonleo#, portfolio\u003e\u003e]"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Responsibilities: Logic, Model , in charge of implementation of grouping"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Isaac Lau"},{"lineNumber":43,"author":{"gitID":"-"},"content":"image::IsaacLau.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"{empty}[https://github.com/Isaaaca[github]] [\u003c\u003cisaaclau#, portfolio\u003e\u003e]"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"Responsibilities: Integrating NUSMods"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"LeonidAgarth":3,"-":46}},{"path":"docs/team/jasonleo.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"\u003d Jason Leo - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d PROJECT: Fastis - MeetUp Manager"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"---"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"Fastis is a desktop application that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively. The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos and schedule suitable meetup time."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"* *Major enhancement*: added *group* feature"},{"lineNumber":16,"author":{"gitID":"-"},"content":"** What it does: It allows users to create a group class, which allows users to add members to the group, delete members from the group abd list them out and delete the group."},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"** Justification: This feature allows the user to keep track of members of a certain group project , which allows him to find the person of contact quickly and more easily. It also helps users to better manage members of his group project."},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"** Highlights: This enhancement adds many new commands to make the application more convenient for the users to organise their groups. It required an in-depth analysis of model and logic component. The implementation too was challenging as it required adding new commands and required understanding of the model to implement the group features."},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Added command to list members of the same tags. Also added colours to the tags."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W15-B3/main/tree/master/collated/functional/jas5469.md[Functional code]] [https://github.com/CS2103JAN2018-W15-B3/main/blob/master/collated/test/jas5469.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"*** Managed releases `v1.4`, `v1.5rc` and `v1.5` on GitHub"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"*** Added Colours to tags."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"*** Update new screenshots of new commands for the User Guide"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"*** Update new screenshots of new commands for the Developer Guide"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Included manual testing cases."},{"lineNumber":34,"author":{"gitID":"-"},"content":"*** Update formatting of the Developer Guide"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"** Community:"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Help team members find bugs for their implementation"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"*** Reported bugs and suggestions for other teams"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"*** Organised team meetings"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"// tag::listTag[]"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Listing Tag Members: `listTagMembers`"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"Lists out all persons with the given tags. +"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"Alias: `lTM` +"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"Format: `listTagMembers TAG [MORE_TAGS]...`"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"* The search is case insensitive. Upper case and lower case letters are considered the same. +"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"*_E.g._* `FriEndS` will match `friends`."},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"* The order of the keywords does not matter. +"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"*_E.g._* `friends CS2103` will match `CS2103 friends`."},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"* Only the tag is searched."},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"* Only full words will be matched. +"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"*_E.g._* `friend` will not match `friends` and vice versa."},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"* Persons with at least one of the specified tags will be returned (i.e. `OR` search)."},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"* `listTagMembers CS3230 CS1010` +"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"Returns any person having group tags `CS3230`, `CS1010`. +"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"Refer to Figure 7 for results of this command. +"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"image:ListTagMembersCommandExample.png[width\u003d\"500\"] +"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"*Figure 7:* Example of ListTagMembers +"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"// end::listTag[]"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"// tag::addGroup[]"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Adding a Group: `addGroup`"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"Adds a group to Fastis +"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"Alias: `aG` +"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"Format: `addGroup NAME`"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"* There is no limit to the length of a group\u0027s name"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"* However, the name must contain only alphanumeric characters and spaces, and it must not be blank"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"* `addGroup CS2101 Oral Presentation` +"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"Adds a group named `CS2101 Oral Presentation` to Fastis. +"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"Refer to Figure 8 for results of this command. +"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"image:addGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"*Figure 8:* Example of adding a group"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Adding Member To Group: `addGroupMember`"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"Adds an existing person in Fastis to a group. +"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"Alias: `aGM` +"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"Format: `addGroupMember INDEX g/GROUP`"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"* Adds the person at the specified `INDEX` in person list to `GROUP`."},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"* The person specified at `INDEX` must not already be in the `GROUP` specified."},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"* `addGroupMember 4 g/CS2101 Oral Presentation` +"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"Adds the 4th person in the list into group `CS2101 Oral Presentation`. +"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"Refer to Figure 9 for results of this command. +"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"image:addGroupMembersToGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"*Figure 9:* Example of addMembersToGroup +"},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Deleting a Member from a Group: `deleteGroupMember`"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"Removes a member from a group. +"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"Alias: `dGM` +"},{"lineNumber":128,"author":{"gitID":"jas5469"},"content":"Format: `deleteGroupMember INDEX g/GROUP`"},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"* Removes the person at the specified `INDEX` in the most recent person list from `GROUP`, *_not_* the `INDEX`-th person in a group."},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"* The person specified at `INDEX` must be within the `GROUP` specified."},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"* `deleteGroupMember 2 g/CS2101 Oral Presentation` +"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"Adds the 2nd person shown in the person list from group `CS2101 Oral Presentation`."},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"Refer to Figure 10 for results of this command. +"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"image:deleteGroupMemberExample.png[width \u003d\"500\"] +"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"*Figure 10:* Example of deleteMembersFromGroup +"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Listing Group Members : `listGroupMembers`"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"Lists all the members in the group that already exists in Fastis. +"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"Alias: `lGM` +"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"Format: `listGroupMembers GROUP`"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"* `listGroupMembers CS2101 Oral Presentation`  +"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"Lists all members of group CS2101 Oral Presentation. +"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"Refer to Figure 11 for results of this command."},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"image:listGroupMembersExample.png[width \u003d \"500\"] +"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":"*Figure 11:* Example of ListGroupMembers. +"},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Deleting a Group : `deleteGroup`"},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"Deletes a group from Fastis. +"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"Alias: `dG` +"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"Format: `deleteGroup GROUP`"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"* Deletes the information of `GROUP` from Fastis, but keep the information about its members."},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":179,"author":{"gitID":"jas5469"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":181,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"Examples:"},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"* `deleteGroup CS2101 Oral Presentation`  +"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"Deletes group `CS2101 Oral Presentation` from Fastis. +"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"Refer to Figure 12 for results of this command. +"},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":"+"},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"image:deleteGroupExample.png[width \u003d\"500\"] +"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":"*Figure 12:* Example of deleteGroup +"},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"//end::addGroup[]"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":196,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":197,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"jas5469"},"content":"// tag::listTagMembers[]"},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Tag Members feature"},{"lineNumber":201,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":202,"author":{"gitID":"jas5469"},"content":"Fastis lists all persons in Fastis that have tags similar to input."},{"lineNumber":203,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":204,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":206,"author":{"gitID":"jas5469"},"content":"Fastis uses `ListTagMembersCommand`, which resides under `Logic` to facilitate the listing of members under the same"},{"lineNumber":207,"author":{"gitID":"jas5469"},"content":"tag. \u003c\u003cfig25, Figure 25\u003e\u003e shows the sequence diagram of the `listTagMembers` command"},{"lineNumber":208,"author":{"gitID":"jas5469"},"content":"[[fig25]]"},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":".Sequence diagram of `listTagMembers` command."},{"lineNumber":210,"author":{"gitID":"jas5469"},"content":"image::listTagMemberSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":212,"author":{"gitID":"jas5469"},"content":"When user types in command line `listTagMembers` or `lTM` , Fastis will use the keyword provided to search for the"},{"lineNumber":213,"author":{"gitID":"jas5469"},"content":"tag and list out all members with the same  tag."},{"lineNumber":214,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":215,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command `listTagMembersCommand()` to list out the members with same tag."},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it is easy to change the methods called by command."},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":219,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Change existing find command to include finding person with same tags."},{"lineNumber":220,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation can reduce number of commands required to be remembered."},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation can affect the functionality of existing commands."},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":"// end::listTagMembers[]"},{"lineNumber":224,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":225,"author":{"gitID":"jas5469"},"content":"// tag::addGroup[]"},{"lineNumber":226,"author":{"gitID":"jas5469"},"content":"[[Group]]"},{"lineNumber":227,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Group feature"},{"lineNumber":228,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":229,"author":{"gitID":"jas5469"},"content":"Fastis has a group feature that can:"},{"lineNumber":230,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":231,"author":{"gitID":"jas5469"},"content":"* add a group with information that was stated by user input."},{"lineNumber":232,"author":{"gitID":"jas5469"},"content":"* delete a group with information that was stated  by user input."},{"lineNumber":233,"author":{"gitID":"jas5469"},"content":"* add a person into the group with information that was stated by user input."},{"lineNumber":234,"author":{"gitID":"jas5469"},"content":"* delete a person from the group with information that was stated by user input."},{"lineNumber":235,"author":{"gitID":"jas5469"},"content":"* list all the members in the group with information that was stated by user input."},{"lineNumber":236,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":237,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":239,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":240,"author":{"gitID":"jas5469"},"content":"The group mechanism is facilitated by `UniqueGroupList`, which resides inside `Model` component. Address book stores all groups in `UniqueGroupList`."},{"lineNumber":241,"author":{"gitID":"jas5469"},"content":"The groups in the group list are facilitated by `Group` class. Each `Group` object have a `Information` object, representing the information of the group."},{"lineNumber":242,"author":{"gitID":"jas5469"},"content":"`Group`,`Information` and `UniqueGroupList` class reside inside `Model` component. \u003c\u003cfig26, Figure 26\u003e\u003e  is the class diagram showing the relationship between `Group`, `Information` and `UniqueGroupList`:"},{"lineNumber":243,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"[[fig26]]"},{"lineNumber":245,"author":{"gitID":"jas5469"},"content":".Group Class Diagram."},{"lineNumber":246,"author":{"gitID":"jas5469"},"content":"image::GroupClassDiagram.png[width \u003d\"800\"]"},{"lineNumber":247,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig27, Figure 27\u003e\u003e  is a object diagram of Group Class."},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":"[[fig27]]"},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":".Object Diagram of `Group`."},{"lineNumber":252,"author":{"gitID":"jas5469"},"content":"image::GroupObjectDiagram.png[width\u003d\"600\"]"},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"Suppose that the user has just launched the application . The `UniqueGroupList` in the address book will include few groups that are declared in SampleDataUtil."},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"A Group consists of the following:"},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":"* Information: Represents the information of the group."},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"* PersonList: Represents the list of persons in a group."},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"The add group feature adds a group with information named by user in input into Fastis."},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"The add group mechanism is facilitated by `AddGroupCommand`, which resides inside `Logic` component. It supports adding `Group` object to the address book. `AddGroupCommand` inherits from `UndoableCommand`."},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"Hence, `AddGroupCommand` can be undone using `UndoRedoStack`."},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"With the extra layer, the `AddGroupCommand` that is undoable is implemented this way:"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"[source,java]"},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() {"},{"lineNumber":273,"author":{"gitID":"jas5469"},"content":"        // ... undo logic ..."},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"        executeUndoableCommand();"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommand extends UndoableCommand {"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":282,"author":{"gitID":"jas5469"},"content":"        // ... AddGroup logic ..."},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":285,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":287,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig28, Figure 28\u003e\u003e shows the interaction of `AddGroup` Command class."},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":289,"author":{"gitID":"jas5469"},"content":"[[fig28]]"},{"lineNumber":290,"author":{"gitID":"jas5469"},"content":".Class Diagram of add group Command."},{"lineNumber":291,"author":{"gitID":"jas5469"},"content":"image::AddGroupCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":292,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":"The user executes a new `AddGroupCommand` with `Information`, to add a new group to the address book."},{"lineNumber":294,"author":{"gitID":"jas5469"},"content":"The new group is added to the `UniqueGroupList` and the current state of the address book is saved."},{"lineNumber":295,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":296,"author":{"gitID":"jas5469"},"content":"The `AddGroupCommand` is facilitated by `AddGroupCommandParser` to parse `AddGroupCommand`."},{"lineNumber":297,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig29, Figure 29\u003e\u003e  shows the flow of parsing of `AddGroupCommand` object."},{"lineNumber":298,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":299,"author":{"gitID":"jas5469"},"content":"[[fig29]]"},{"lineNumber":300,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for AddGroupParser."},{"lineNumber":301,"author":{"gitID":"jas5469"},"content":"image::AddGroupParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":303,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig30, Figure 30\u003e\u003e diagram shows how the add group operation works:"},{"lineNumber":304,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":305,"author":{"gitID":"jas5469"},"content":"[[fig30]]"},{"lineNumber":306,"author":{"gitID":"jas5469"},"content":".AddGroup Sequence Diagram."},{"lineNumber":307,"author":{"gitID":"jas5469"},"content":"image::AddGroupSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":308,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":309,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":310,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":311,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddGroupCommand`"},{"lineNumber":312,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `AddGroupCommand()`"},{"lineNumber":313,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want"},{"lineNumber":314,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":315,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `executeAddGroupCommand()`"},{"lineNumber":316,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation preserves `addGroup` functionality as it is now part of the default behaviour. Classes that deal with `AddGroupCommand` do not have to know that `executeAddGroupCommand()` exist."},{"lineNumber":317,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard for new developers to understand the template pattern."},{"lineNumber":318,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":319,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Member To Group feature"},{"lineNumber":320,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":321,"author":{"gitID":"jas5469"},"content":"Fastis adds a person from the existing contact list to an existing group."},{"lineNumber":322,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":323,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":324,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":325,"author":{"gitID":"jas5469"},"content":"The add member to group mechanism is facilitated by `AddMemberToGroupCommand`, which resides inside `Logic` component."},{"lineNumber":326,"author":{"gitID":"jas5469"},"content":"It supports adding a member to `Group` objects to the address book. `AddMemberToGroupCommand` inherits from `UndoableCommand`."},{"lineNumber":327,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":328,"author":{"gitID":"jas5469"},"content":"Hence, AddMemberToGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":329,"author":{"gitID":"jas5469"},"content":"With the extra layer, the AddGroupCommand that is undoable is implemented this way:"},{"lineNumber":330,"author":{"gitID":"jas5469"},"content":"[source,java]"},{"lineNumber":331,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":332,"author":{"gitID":"jas5469"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":333,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":334,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() {"},{"lineNumber":335,"author":{"gitID":"jas5469"},"content":"        // ... undo logic ..."},{"lineNumber":336,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":337,"author":{"gitID":"jas5469"},"content":"        executeUndoableCommand();"},{"lineNumber":338,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":340,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":341,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommand extends UndoableCommand {"},{"lineNumber":342,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":343,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":344,"author":{"gitID":"jas5469"},"content":"        // ... AddMemberToGroup logic ..."},{"lineNumber":345,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":347,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":348,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":349,"author":{"gitID":"jas5469"},"content":"The list of members in the group list are facilitated by `Group` class. Each `Group` object have a `UniquePersonList` object, representing the list of persons in the group."},{"lineNumber":350,"author":{"gitID":"jas5469"},"content":"Address book stores all members added to the group using XmlAdaptedPersons as person object storage as shown in  the following sequence diagram where  the storage saves to file in XmlAdaptedGroups."},{"lineNumber":351,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":352,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":353,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig31, Figure 31\u003e\u003e shows the interaction of `AddMemberToGroup` Command class."},{"lineNumber":354,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":355,"author":{"gitID":"jas5469"},"content":"[[fig31]]"},{"lineNumber":356,"author":{"gitID":"jas5469"},"content":".Class Diagram of AddMemberToGroup Command."},{"lineNumber":357,"author":{"gitID":"jas5469"},"content":"image::aGMCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":358,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":359,"author":{"gitID":"jas5469"},"content":"The `AddMemberToGroupCommand` is facilitated by `AddMemberToGroupCommandParser` to parse `AddMemberToGroupCommand`."},{"lineNumber":360,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig32, Figure 32\u003e\u003e shows the flow of parsing of `AddMemberToGroupCommand` object."},{"lineNumber":361,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":362,"author":{"gitID":"jas5469"},"content":"[[fig32]]"},{"lineNumber":363,"author":{"gitID":"jas5469"},"content":".Sequence diagram for AddMemberToGroupCommandParser."},{"lineNumber":364,"author":{"gitID":"jas5469"},"content":"image::aGMParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":365,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":366,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig33, Figure 33\u003e\u003e diagram shows how the addMembersToGroup operates."},{"lineNumber":367,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":368,"author":{"gitID":"jas5469"},"content":"[[fig33]]"},{"lineNumber":369,"author":{"gitID":"jas5469"},"content":".AddMemberToGroup sequence diagram."},{"lineNumber":370,"author":{"gitID":"jas5469"},"content":"image::aGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":371,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":372,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":373,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":374,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddMemberToGroupCommand`"},{"lineNumber":375,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `AddMemberToGroupCommand()`."},{"lineNumber":376,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want."},{"lineNumber":377,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":378,"author":{"gitID":"jas5469"},"content":"* **Alternative 2 :** Add a new interface `EditGroupMemberCommand()` to handle adding members to group."},{"lineNumber":379,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not require a new command to be created."},{"lineNumber":380,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation is less flexible."},{"lineNumber":381,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":382,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Delete Member From Group feature"},{"lineNumber":383,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":384,"author":{"gitID":"jas5469"},"content":"Fastis deletes a person from the existing contact list to an existing group."},{"lineNumber":385,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":386,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":387,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":388,"author":{"gitID":"jas5469"},"content":"The delete member from groups mechanism is facilitated by `DeleteMemberFromGroupCommand`, which resides inside `Logic` component."},{"lineNumber":389,"author":{"gitID":"jas5469"},"content":"It supports deleting a member to Group objects to the address book. `DeleteMemberFromGroupCommand` from `UndoableCommand`."},{"lineNumber":390,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":391,"author":{"gitID":"jas5469"},"content":"Hence, DeleteMemberFromGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":392,"author":{"gitID":"jas5469"},"content":"With the extra layer, the AddGroupCommand that is undoable is implemented this way:"},{"lineNumber":393,"author":{"gitID":"jas5469"},"content":"[source,java]"},{"lineNumber":394,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":395,"author":{"gitID":"jas5469"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":396,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":397,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() {"},{"lineNumber":398,"author":{"gitID":"jas5469"},"content":"        // ... undo logic ..."},{"lineNumber":399,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":400,"author":{"gitID":"jas5469"},"content":"        executeUndoableCommand();"},{"lineNumber":401,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":403,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":404,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommand extends UndoableCommand {"},{"lineNumber":405,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":406,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":407,"author":{"gitID":"jas5469"},"content":"        // ... DeleteMemberFromGroup logic ..."},{"lineNumber":408,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":409,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":410,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":411,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":412,"author":{"gitID":"jas5469"},"content":"The list of members in the group list are facilitated by `Group` class. Each `Group` object have a `UniquePersonList` object, representing the list of persons in the group."},{"lineNumber":413,"author":{"gitID":"jas5469"},"content":"Address book stores all members added to the group using XmlAdaptedPersons as person object storage."},{"lineNumber":414,"author":{"gitID":"jas5469"},"content":"The `DeleteMemberFromGroupCommand` will retrieve the input, which is the index of the person of the last updated person list, and deletes that person from the list if the person exists in the `UniquePersonList` in the specified group."},{"lineNumber":415,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":416,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":417,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig34, Figure 34\u003e\u003e  shows the interaction of `DeleteMemberFromGroup` Command class."},{"lineNumber":418,"author":{"gitID":"jas5469"},"content":"[[fig34]]"},{"lineNumber":419,"author":{"gitID":"jas5469"},"content":".Class Diagram of `DeleteMemberFromGroup` Command."},{"lineNumber":420,"author":{"gitID":"jas5469"},"content":"image::dGMCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":421,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":422,"author":{"gitID":"jas5469"},"content":"The `DeleteMemberFromGroupCommand` is facilitated by `DeleteMemberFromGroupCommandParser` to parse `DeleteMemberFromGroupCommand`."},{"lineNumber":423,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig35, Figure 35\u003e\u003e  shows the flow of parsing of `DeleteMemberFromGroupCommand` object."},{"lineNumber":424,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":425,"author":{"gitID":"jas5469"},"content":"[[fig35]]"},{"lineNumber":426,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteMemberFromGroupCommandParser."},{"lineNumber":427,"author":{"gitID":"jas5469"},"content":"image::dGMParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":428,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":429,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig36, Figure 36\u003e\u003e diagram shows how the deleteMembersFromGroup operates."},{"lineNumber":430,"author":{"gitID":"jas5469"},"content":"[[fig36]]"},{"lineNumber":431,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteMemberFromGroupCommand."},{"lineNumber":432,"author":{"gitID":"jas5469"},"content":"image::dGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":433,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":434,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":435,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":436,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteMemberToGroupCommand`"},{"lineNumber":437,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `DeleteMemberFromGroupCommand()`"},{"lineNumber":438,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is easy for developers to modify method to suit what they want."},{"lineNumber":439,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":440,"author":{"gitID":"jas5469"},"content":"* **Alternative 2 :** Add a new interface `EditGroupMemberCommand()`."},{"lineNumber":441,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not require a new command to be created."},{"lineNumber":442,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation is less flexible."},{"lineNumber":443,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":444,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Group Members Feature"},{"lineNumber":445,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":446,"author":{"gitID":"jas5469"},"content":"Fastis lists all persons under the group keyed by user."},{"lineNumber":447,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":448,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":449,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":450,"author":{"gitID":"jas5469"},"content":"Fastis uses `ListGroupMembersCommand` ,which resides under `Logic` to facilitate the listing of members under the same"},{"lineNumber":451,"author":{"gitID":"jas5469"},"content":"group."},{"lineNumber":452,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":453,"author":{"gitID":"jas5469"},"content":"When user types in command line `listGroupMembers` or `lGM` , Fastis will use the keyword provided to search for the"},{"lineNumber":454,"author":{"gitID":"jas5469"},"content":"group and list out all members under the specified group in the `PersonListPanel`."},{"lineNumber":455,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":456,"author":{"gitID":"jas5469"},"content":"The `ListGroupMembersCommand` is facilitated by `ListGroupMembersCommandParser` to parse `ListGroupMembersCommand`."},{"lineNumber":457,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig37, Figure 37\u003e\u003e shows the flow of parsing of `ListGroupMembersCommand` object."},{"lineNumber":458,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":459,"author":{"gitID":"jas5469"},"content":"[[fig37]]"},{"lineNumber":460,"author":{"gitID":"jas5469"},"content":".Sequence diagram for ListGroupMemberCommandParser."},{"lineNumber":461,"author":{"gitID":"jas5469"},"content":"image::ParserlGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":462,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":463,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig38, Figure 38\u003e\u003e diagram shows how `ListGroupMembersCommand` operates."},{"lineNumber":464,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":465,"author":{"gitID":"jas5469"},"content":"[[fig38]]"},{"lineNumber":466,"author":{"gitID":"jas5469"},"content":".Sequence diagram for ListGroupMembers."},{"lineNumber":467,"author":{"gitID":"jas5469"},"content":"image::lGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":468,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":469,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":470,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":471,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":472,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ListGroupMembersCommand`"},{"lineNumber":473,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Use a command to list out the members with same group."},{"lineNumber":474,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes the methods called by command easily modifiable."},{"lineNumber":475,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":476,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `ListGroupMembersCommand()`"},{"lineNumber":477,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy to edit `ListGroupMembersCommand()` easily to suit our needs"},{"lineNumber":478,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard for new developers to understand the template pattern."},{"lineNumber":479,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":480,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Delete Group feature"},{"lineNumber":481,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":482,"author":{"gitID":"jas5469"},"content":"Fastis deletes a group named by the user from input."},{"lineNumber":483,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":484,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":485,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":486,"author":{"gitID":"jas5469"},"content":"The delete groups mechanism is facilitated by `DeleteGroupCommand`, which resides inside `Logic` component. It supports deleting Group objects to the address book. DeleteGroupCommand inherits from `UndoableCommand`."},{"lineNumber":487,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":488,"author":{"gitID":"jas5469"},"content":"Hence, DeleteGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":489,"author":{"gitID":"jas5469"},"content":"With the extra layer, the DeleteGroupCommand that is undoable is implemented this way:"},{"lineNumber":490,"author":{"gitID":"jas5469"},"content":"[source,java]"},{"lineNumber":491,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":492,"author":{"gitID":"jas5469"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":493,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":494,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() {"},{"lineNumber":495,"author":{"gitID":"jas5469"},"content":"        // ... undo logic ..."},{"lineNumber":496,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":497,"author":{"gitID":"jas5469"},"content":"        executeUndoableCommand();"},{"lineNumber":498,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":499,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":500,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":501,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":502,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":503,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":504,"author":{"gitID":"jas5469"},"content":"        // ... DeleteGroup logic ..."},{"lineNumber":505,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":507,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":508,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":509,"author":{"gitID":"jas5469"},"content":"The user executes a new `DeleteGroupCommand` with `Information`, to delete a existing group with the same information to the address book."},{"lineNumber":510,"author":{"gitID":"jas5469"},"content":"The group is deleted from the `UniqueGroupList` and the current state of the address book is saved."},{"lineNumber":511,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":512,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":513,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig39, Figure 39\u003e\u003e shows the interaction of `DeleteGroup` Command class."},{"lineNumber":514,"author":{"gitID":"jas5469"},"content":"[[fig39]]"},{"lineNumber":515,"author":{"gitID":"jas5469"},"content":".Class Diagram of `DeleteGroup` Command."},{"lineNumber":516,"author":{"gitID":"jas5469"},"content":"image::dGCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":517,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":518,"author":{"gitID":"jas5469"},"content":"The `DeleteGroupCommand` is facilitated by `DeleteGroupCommandParser` to parse `DeleteGroupCommand`."},{"lineNumber":519,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig40, Figure 40\u003e\u003e shows the flow of parsing of `DeleteGroupCommand` object."},{"lineNumber":520,"author":{"gitID":"jas5469"},"content":"[[fig40]]"},{"lineNumber":521,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteGroupCommandParser."},{"lineNumber":522,"author":{"gitID":"jas5469"},"content":"image::dGParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":523,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":524,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig41, Figure 41\u003e\u003e shows how the deleteGroup operation works:"},{"lineNumber":525,"author":{"gitID":"jas5469"},"content":"[[fig41]]"},{"lineNumber":526,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteGroupCommand."},{"lineNumber":527,"author":{"gitID":"jas5469"},"content":"image::dGSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":528,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":529,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":530,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":531,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteGroupCommand`"},{"lineNumber":532,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `deleteGroupCommand()`"},{"lineNumber":533,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want"},{"lineNumber":534,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":535,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `executeDeleteGroupCommand()`"},{"lineNumber":536,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation preserves `deleteGroup` functionality as it is now part of the default behaviour. Classes that deal with `DeleteGroupCommand` do not have to know that `executeDeleteGroupCommand()` exist."},{"lineNumber":537,"author":{"gitID":"jas5469"},"content":"** Cons: This implemetation makes it hard for new developers to understand the template pattern."},{"lineNumber":538,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":539,"author":{"gitID":"jas5469"},"content":"// end::addGroup[]"}],"authorContributionMap":{"nhatquang3112":15,"jas5469":504,"-":20}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Fastis-Meetup Manager"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"image:https://travis-ci.org/CS2103JAN2018-W15-B3/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103JAN2018-W15-B3/main\"]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/nhatquang3112/main/branch/master[image:https://ci.appveyor.com/api/projects/status/97h6icp88c07h38b/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W15-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W15-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"image::docs/images/UiReadme.png[width\u003d\"800\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"image::images/UiReadme.png[width\u003d\"800\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"* This is a desktop MeetUp Manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"-"},"content":"* This application is for students with group projects to keep track of their teammates\u0027 timetable and schedule the most suitable meetup time."},{"lineNumber":20,"author":{"gitID":"-"},"content":"* Users can store person\u0027s timetables, arrange persons in groups, manage group projects\u0027 to-dos and show meetups on the calendar."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":32,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/xdrop/fuzzywuzzy[fuzzywuzzy]"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"* Third-party APIs used: https://github.com/nusmodifications/nusmods/tree/master/api/data[NUSmods]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Isaaaca":2,"LeonidAgarth":2,"-":32}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":24,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + ClearCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and verifies that the command node displays an empty string, the result display"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"     * node displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"     * Also verifies that the command node has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result node displays"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and verifies that the command node displays {@code command}, the result display"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"     * node displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command node has the"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":2,"jas5469":3,"LeonidAgarth":7,"-":90}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_LINK_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":78,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TIMETABLE_LINK_DESC_AMY + \" \" + DETAIL_DESC_AMY"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"                + \" \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"        except Timetable link -\u003e added */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_BOB).withDetail(VALID_DETAIL_AMY)"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"        /* Case: add a person with all fields same as another person in the address book"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        except Detail -\u003e added */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_BOB)"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":202,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + AddCommand.COMMAND_WORD);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":216,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":220,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"                + INVALID_ADDRESS_DESC + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"Isaaaca"},"content":"        /* Case: invalid timetable link -\u003e rejected */"},{"lineNumber":225,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + INVALID_TIMETABLE_LINK_DESC + DETAIL_DESC_AMY;"},{"lineNumber":227,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(command, TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":228,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":229,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid detail -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + INVALID_DETAIL_DESC;"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":235,"author":{"gitID":"Isaaaca"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":236,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays an empty string.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the default style class.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":289,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the error style class.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":309,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":32,"Isaaaca":27,"jas5469":3,"LeonidAgarth":7,"-":243}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        /*getBrowserPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertHelpWindowNotOpen();*/"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        //use command node"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":1,"LeonidAgarth":4,"-":88}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + DeleteCommand.COMMAND_WORD);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":141,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays an empty string.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that the result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"     * 6. Asserts that the command node has the default style class.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"     * 5. Asserts that the command node has the error style.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":2,"jas5469":3,"LeonidAgarth":6,"-":190}},{"path":"src/test/java/systemtests/AddToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_E;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_E;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoUtil;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public void addToDo() throws Exception {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        /* ------------------------ Perform addToDo operations on the shown unfiltered list ---------------------- */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: add a to-do to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e added"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toAdd \u003d TODO_E;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \"   \" + AddToDoCommand.COMMAND_WORD + \"  \" + CONTENT_E + \" \";"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d \"addsToDo \" + ToDoUtil.getToDoDetails(toAdd);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command,"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_UNKNOWN_COMMAND + Messages.MESSAGE_DID_YOU_MEAN + AddToDoCommand.COMMAND_WORD);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: add a duplicate to-do -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d ToDoUtil.getAddToDoCommand(TODO_E);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"     * Executes the {@code AddToDoCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Command node displays an empty string.\u003cbr\u003e"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Command node has the default style class.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Result display node displays the success message of executing {@code AddToDoCommand} with the details of"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"     * 4. {@code Model}, {@code Storage} and {@code ToDoListPanel} equal to the corresponding components in"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(ToDo toAdd) {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(ToDoUtil.getAddToDoCommand(toAdd), toAdd);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(ToDo)}. Executes {@code command}"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"     * instead."},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddToDoCommandSystemTest#assertCommandSuccess(ToDo)"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, ToDo toAdd) {"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.addToDo(toAdd);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dpt) {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d String.format(AddToDoCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, ToDo)} except asserts that"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     * 2. {@code Model}, {@code Storage} and {@code ToDoListPanel} equal to the corresponding components in"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddToDoCommandSystemTest#assertCommandSuccess(String, ToDo)"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Command node has the error style class.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"     * 4. {@code Model}, {@code Storage} and {@code ToDoListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":108}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    /*public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"    }*/"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        //waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"        //getBrowserPanel().rememberUrl();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"        statusBarFooterHandle.rememberTotalPersonsStatus();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /*try {"},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":"            expectedUrl \u003d new URL(BrowserPanel.GOOGLE_SEARCH_URL_PREFIX + selectedCardName.replaceAll(\" \","},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"                    \"%20\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }*/"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"        //assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":"        //assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":"     * Asserts that the command node and result display shows the default style."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":"     * Asserts that the command node\u0027s shows the error style."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location and the total person"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"     * list remains the same."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"        assertFalse(handle.isTotalPersonsStatusChanged());"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"     * Asserts that the sync status in the status bar was changed to the timing of"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"     * {@code ClockRule#getInjectedClock()}, and total persons was changed to match the total"},{"lineNumber":282,"author":{"gitID":"jas5469"},"content":"     * number of persons in the address book, while the save location remains the same."},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"jas5469"},"content":"    protected void assertStatusBarChangedExceptSaveLocation() {"},{"lineNumber":285,"author":{"gitID":"jas5469"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":287,"author":{"gitID":"jas5469"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":289,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":290,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":291,"author":{"gitID":"jas5469"},"content":"        final int totalPersons \u003d testApp.getModel().getAddressBook().getPersonList().size();"},{"lineNumber":292,"author":{"gitID":"jas5469"},"content":"        assertEquals(String.format(TOTAL_PERSONS_STATUS, totalPersons), handle.getTotalPersonsStatus());"},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":294,"author":{"gitID":"jas5469"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":295,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":307,"author":{"gitID":"jas5469"},"content":"            assertEquals(String.format(TOTAL_PERSONS_STATUS, getModel().getAddressBook().getPersonList().size()),"},{"lineNumber":308,"author":{"gitID":"jas5469"},"content":"                    getStatusBarFooter().getTotalPersonsStatus());"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":40,"LeonidAgarth":10,"-":270}},{"path":"docs/team/phamvuhung.adoc","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"\u003d Pham Vu Hung - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d PROJECT: Fastis - MeetUp Manager"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"---"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"Fastis is a desktop application that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively."},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos and schedule suitable meetup time."},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"* *Major enhancement*: added *Calendar feature*"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"** What it does: shows a calendar that allows the user to add events, such as group meetings and job interviews, with `addEvent` command."},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"** Justification: This feature helps the user, at a glance, to know if there are any upcoming events in order to prepare for them as well as to avoid planning any events that might clash with other events."},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"** Highlights: This enhancement enables users to better plan and prepare for any events, including group meetings. It requires a solid understanding of many JavaFX components and interactions, as well as interactions between different components of the application, namely `Model`, `UI`, and `Logic`."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"* *Major enhancement*: added *Timetable feature*"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"** What it does: shows a timetable of any person in the address book, as long as their timetable link is imported. It also enables scheduling a suitable time slot for a group meeting based on the members\u0027 timetable."},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"** Justification: This feature helps the user quickly see their own timetable as well as others, and quickly plan a meeting time for the whole group, which helps a lot in group projects."},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"** Highlights: This enhancement enables users to better plan for group meetings, which works conjunction with the Calendar feature. For group meetings, once all members have their timetable link imported, all common free time slots for all members can be displayed with `scheduleGroup` command. Similarly, it requires a solid understanding of JavaFX components as well as the address book\u0027s components, namely `Model`, `UI`, and `Logic`."},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"* *Minor enhancement*: added *changing tags\u0027 color feature*: +"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"Allow users to better understand meaning of the tags at a glance, as well as better customize the application."},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W15-B3/main/tree/master/collated/functional/LeonidAgarth.md[Functional code]] [https://github.com/CS2103JAN2018-W15-B3/main/blob/master/collated/test/LeonidAgarth.md[Test code]]"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"* *Other contributions*:"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"** Project management:"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"*** Fixed and closed the most of the issues raised by peers from PE-round 1."},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"** Enhancements to existing features:"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"*** Wrote additional style classes for `DarkTheme.css` to customize the application"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"*** Wrote additional tests for multiple components and existing features to increase coverage."},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"** Documentation:"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"*** Format the entire User Guide."},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"*** Standardize language and structure for User Guide."},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"*** Updated class diagrams relevant to the enhancements above in Developer Guide."},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"*** Standardize language and structure for the Appendix section in Developer Guide."},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"** Community:"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"*** Help team members fix bugs"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"*** Reported bugs and suggestions"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Changing a  tag\u0027s color: `changeTagColor`"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"Changes a specific group color to one of the supported colors. +"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `color` +"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"Format `changeTagColor TAG COLOR`"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"* The `TAG` specified must belong to one of the people in Fastis"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"* Supported `COLORS` are: aqua, black, blue, brown, gold, green, grey, lime, magenta, navy, orange, pink, purple, red, teal, yellow, white."},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"Examples:"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"* `changeTagColor friends pink` +"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"Changes the color of the tag `friends` to pink."},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"* `color family yellow` +"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"Changes the color of the tag `family` to yellow."},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding an event: `addEvent`"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"Adds an event to Fastis and displays it on the calendar. +"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"[blue yellow-background]#*Undoable*# +"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `aE` +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Format: `addEvent n/NAME v/VENUE d/DATE st/STARTTIME et/ENDTIME`"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"* DATE must be in the format of DD/MM/YYYY"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"* TIME must be in the 24-hour time format of HHmm"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"****"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"* `addEvent n/CS2103 Meetup v/School of Computing d/07/04/2018 st/1000 et/1300` +"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"Adds an event called CS2103 Meetup to the calendar. +"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 4 for results of this command."},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"image:AddEventCommandExample.png[width\u003d\"800\"] +"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 4:* Example of an event added on the calendar"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Scheduling a suitable meetup time : `scheduleGroup`"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"Finds all common free time slots for all group members to meet. +"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `sG` +"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"Format: `scheduleGroup GROUP`"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"* Computes all time slots when all members in a `GROUP` are free based on each member\u0027s timetable."},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"* Results are displayed as free \"modules\" on the GUI timetable."},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` is case-sensitive. Upper case letters are considered different from lower case letters."},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"* `GROUP` must be an existing group in Fastis."},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"Examples:"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"* `scheduleGroup CS2101 Oral Presentation`  +"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"Displays all free time slots for group CS2101 Oral Presentation. +"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"Refer to Figure 11 for results of this command."},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"image:scheduleGroupExample.png[width \u003d \"800\"] +"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"*Figure 11:* Example of scheduleGroup. +"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Switching between Calendar and Timetable : `switch`"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"Switches between Calendar view and Timetable view. +"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"Alias: `sw` +"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"Format: `switch`"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"* Switches to Timetable view if Fastis is currently in Calendar view, and vice versa."},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"* Upon switching to timetable, the default timetable is blank."},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"****"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"[width\u003d\"80%\",cols\u003d\"2,10,2,10,2\",options\u003d\"header\"]"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"|Command |Usage |Alias |Format |Undoable?"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"|`add` |Adds a person to Fastis |`a` |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS l/TIMETABLE_LINK d/DETAIL [t/TAG]...` |X"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"|`addEvent` |Adds an event to Fastis and display it on the calendar |`aE` |`addEvent n/NAME v/VENUE d/DATE st/STARTTIME et/ENDTIME` |X"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"|`addGroup` |Adds a group to Fastis |`aG` |`addGroup NAME` |X"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"|`addGroupMembers` |Adds an existing person in Fastis to a group |`aGM` |`addGroupMember INDEX g/GROUP` |X"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"|`addToDo` |Adds a to-do to Fastis |`aTD` |`addToDo CONTENT` |X"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"|`changeTagColor` |Changes a specific group color to one of the supported colors |`color` |`changeTagColor TAG COLOR` |X"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"|`check` |Marks a to-do in Fastis as done |{nbsp} |`check INDEX` |X"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"|`clear` |Clears all entries from Fastis |`c` |`clear` |X"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"|`delete` |Deletes the specified person from Fastis |`d` |`delete INDEX` |X"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteGroup` |Deletes a group from Fastis |`dG` |`deleteGroup GROUP` |X"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteGroupMember` |Removes a member from a group |`dGM` |`deleteGroupMember INDEX g/GROUP` |X"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"|`deleteToDo` |Deletes the specified to-do from Fastis |`dTD` |`deleteToDo INDEX` |X"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"|`edit` |Edits an existing person in Fastis |`e` |`edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [l/TIMETABLE_LINK] [d/DETAIL] [t/TAG]...` |X"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"|`editToDo` |Edits an existing to-do\u0027s content in Fastis |`eTD` |`editToDo INDEX c/CONTENT` |X"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"|`exit` |Exits the program |{nbsp} |`exit` |{nbsp}"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"|`find` |Finds persons whose name contains any of the given keywords |`f` |`find KEYWORD [MORE_KEYWORDS]` |{nbsp}"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"|`help` |Displays the help window |{nbsp} |`help` |{nbsp}"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"|`history` |Lists all the commands that you have entered in reverse chronological order |`h` |`history` |{nbsp}"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"|`list` |Shows a list of all persons in Fastis |`l` |`list` |{nbsp}"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"|`listGroupMembers` |Lists all the members in the group that already exists in Fastis |`lGM` |`listGroupMembers GROUP` |{nbsp}"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"|`listTagMembers` |Lists out all persons with the given tags |`lTM` |`listTagMembers TAG [MORE_TAGS]...` |{nbsp}"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"|`redo` |Reverses the most recent `undo` command |`r` |`redo` |{nbsp}"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"|`scheduleGroup` |Finds all common free time slots for all group members to meet |`sG` |`scheduleGroup GROUP` |{nbsp}"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"|`select` |Selects the person identified by the index number used in the last person listing |`s` |`select INDEX` |{nbsp}"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"|`switch` |Switches between Calendar view and Timetable view |`sw` |`switch` |{nbsp}"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"|`uncheck` |Marks a to-do in Fastis as undone |{nbsp} |`uncheck INDEX` |X"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"|`undo` |Restores Fastis to the state before the previous _undoable_ command was executed |`u` |`undo` |{nbsp}"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":191,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":192,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":193,"author":{"gitID":"-"},"content":"//tag::Calendar[]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendar Feature"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"Fastis uses a stand-alone `Calendar` class, adapted from https://github.com/SirGoose3432/javafx-calendar[javafx-calendar] by SirGoose3432."},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"It is used to view the user\u0027s upcoming events, e.g. interviews, meetings, etc."},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":199,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"The calendar feature is facilitated by `Calendar` and `CalendarDate` classes,"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"both of which reside inside `Ui` component. Their sole purpose is to draw out the calendar"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"in the application when given a list of `Event` objects."},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"The calendar is drawn/redrawn whenever a `CalendarChangedEvent` is raised."},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"The flow of operation thereafter is shown the sequence diagram below."},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"image::CalendarSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"`Calendar` utilizes the `Event` class to determine which slots in the schedule are occupied."},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":"Hence, a list of events is passed to every calendar upon construction and saved as a private variable."},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"The details of these event, e.g. time, location, are saved locally in `.xml` file format."},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":"It is also retrieved upon start up by the `Storage` component and saved within the `Model` for the whole process."},{"lineNumber":214,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `Calendar` is as follows:"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":"public Calendar(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"    super(FXML);"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"    initCalendar();"},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"    registerAsAnEventHandler(this);"},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"private void initCalendar() {"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Create the calendar 7x6 GridPane ..."},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Construct 42 CalendarDate objects ..."},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":"    fillCalendar(currentYearMonth);"},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"    showEvents();"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":"    // ... show CalendarView ..."},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":234,"author":{"gitID":"LeonidAgarth"},"content":"private void fillCalendar(YearMonth yearMonth) {"},{"lineNumber":235,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Fill the calendar with the correct dates according to yearMonth ..."},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":238,"author":{"gitID":"LeonidAgarth"},"content":"private void showEvents() {"},{"lineNumber":239,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Show all events that are in the current yearMonth in the eventList ..."},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":241,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"The current time is retrieved upon startup, and the calendar base on that point in time to display the appropriate time frame."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"[[calendarImplementation]]"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Calendar`"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Implement a stand-alone `Calendar` class"},{"lineNumber":250,"author":{"gitID":"-"},"content":"** Pros:"},{"lineNumber":251,"author":{"gitID":"-"},"content":"*** Easy to manipulate data."},{"lineNumber":252,"author":{"gitID":"LeonidAgarth"},"content":"*** Easy to customize appearance."},{"lineNumber":253,"author":{"gitID":"LeonidAgarth"},"content":"** Cons:"},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"*** Likely not optimized implementation."},{"lineNumber":255,"author":{"gitID":"-"},"content":"*** Might not be aesthetically pleasing."},{"lineNumber":256,"author":{"gitID":"-"},"content":"* **Alternative 2:** Import external libraries/API"},{"lineNumber":257,"author":{"gitID":"-"},"content":"** Choices:"},{"lineNumber":258,"author":{"gitID":"-"},"content":"*** https://developers.google.com/calendar/[Google Calendar API]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"*** https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"** Pros:"},{"lineNumber":261,"author":{"gitID":"-"},"content":"*** Likely optimized algorithms."},{"lineNumber":262,"author":{"gitID":"-"},"content":"*** Aesthetically pleasing."},{"lineNumber":263,"author":{"gitID":"-"},"content":"** Cons:"},{"lineNumber":264,"author":{"gitID":"-"},"content":"*** Restricted to what the libraries/API offer."},{"lineNumber":265,"author":{"gitID":"-"},"content":"*** Need a firm understanding of the whole API to implement well."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing of the `eventList`"},{"lineNumber":268,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Stores the `eventList` within the `Calendar` object."},{"lineNumber":269,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Easy to show events and their details, even after the constructor returns."},{"lineNumber":270,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: Takes up some redundant memory if there are no commands for showing these events."},{"lineNumber":271,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Only passes the `eventList` as a parameter to the constructor and not storing it as a field within the `Calendar` object."},{"lineNumber":272,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Codes are less cluttered and less memory is used."},{"lineNumber":273,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: Hard to show events and their details outside of the constructor."},{"lineNumber":274,"author":{"gitID":"LeonidAgarth"},"content":"// end::Calendar[]"},{"lineNumber":275,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":276,"author":{"gitID":"LeonidAgarth"},"content":"//tag::Timetable[]"},{"lineNumber":277,"author":{"gitID":"LeonidAgarth"},"content":"[[Timetable]]"},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Timetable feature"},{"lineNumber":279,"author":{"gitID":"LeonidAgarth"},"content":"Fastis uses a stand-alone `Timetable` class, based largely on the `Calendar` class. It is used to view the user\u0027s own NUSMods timetable as well as that of other people in his address book."},{"lineNumber":280,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":282,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":"The timetable is the weekly equivalent to the monthly Calendar."},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"This feature is similarly facilitated by the analogous `Timetable` and `TimetableSlot` classes,"},{"lineNumber":285,"author":{"gitID":"LeonidAgarth"},"content":"both of which reside inside `Ui` component. Their sole purpose is to draw out the timetable"},{"lineNumber":286,"author":{"gitID":"LeonidAgarth"},"content":"in the application when given a list of `WeeklyEvent` objects."},{"lineNumber":287,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":288,"author":{"gitID":"LeonidAgarth"},"content":"The calendar is drawn/redrawn whenever a `TimetableChangedEvent` is raised."},{"lineNumber":289,"author":{"gitID":"LeonidAgarth"},"content":"This is done either by a precedent `PersonPanelSelectionChangedEvent` or a `ScheduleGroupCommand`."},{"lineNumber":290,"author":{"gitID":"LeonidAgarth"},"content":"The flow of operation thereafter is shown the sequence diagram below."},{"lineNumber":291,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":292,"author":{"gitID":"LeonidAgarth"},"content":"image::TimetableSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":293,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `Timetable` is as follows:"},{"lineNumber":295,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":296,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":297,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":298,"author":{"gitID":"LeonidAgarth"},"content":"public Timetable(ObservableList\u003cWeeklyEvent\u003e eventList) {"},{"lineNumber":299,"author":{"gitID":"LeonidAgarth"},"content":"    super(FXML);"},{"lineNumber":300,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":301,"author":{"gitID":"LeonidAgarth"},"content":"    initTimetable();"},{"lineNumber":302,"author":{"gitID":"LeonidAgarth"},"content":"    registerAsAnEventHandler(this);"},{"lineNumber":303,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"private void initTimetable() {"},{"lineNumber":306,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Create the calendar 6x11 GridPane ..."},{"lineNumber":307,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Construct 66 TimetableSlot objects ..."},{"lineNumber":308,"author":{"gitID":"LeonidAgarth"},"content":"    clearTimetable();"},{"lineNumber":309,"author":{"gitID":"LeonidAgarth"},"content":"    showSlots();"},{"lineNumber":310,"author":{"gitID":"LeonidAgarth"},"content":"    // ... show TimetableView ..."},{"lineNumber":311,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":312,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":313,"author":{"gitID":"LeonidAgarth"},"content":"private void clearTimetable() {"},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Draw all slots as blank ..."},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Draw the timeline on the left ..."},{"lineNumber":316,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":317,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":318,"author":{"gitID":"LeonidAgarth"},"content":"private void showSlots() {"},{"lineNumber":319,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Show all slots that are in the in the eventList ..."},{"lineNumber":320,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Make sure no 2 modules with different name would have the same color ..."},{"lineNumber":321,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":322,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":323,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Timetable` and Storing of the `eventList`"},{"lineNumber":327,"author":{"gitID":"LeonidAgarth"},"content":"As the weekly equivalent of `Calendar`, `Timetable` has the same aspect to consider. See \u003c\u003ccalendarImplementation, Implementation of the Calendar\u003e\u003e."},{"lineNumber":328,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":329,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Supporting modules on weekends and/or after 6pm"},{"lineNumber":330,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Don\u0027t support showing those modules"},{"lineNumber":331,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Make the GUI less cluttered and more readable"},{"lineNumber":332,"author":{"gitID":"LeonidAgarth"},"content":"** Cons:"},{"lineNumber":333,"author":{"gitID":"LeonidAgarth"},"content":"*** Cannot cater to users with those modules in their timetable"},{"lineNumber":334,"author":{"gitID":"LeonidAgarth"},"content":"*** Cannot schedule meetings on the weekends"},{"lineNumber":335,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Support showing those modules"},{"lineNumber":336,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Catering to users with those modules, and support scheduling for the weekends."},{"lineNumber":337,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: As the GUI already have 2 other main components which are the PersonListPanel and TodoListPanel, adding more columns to the Timetable makes it looks cluttered."},{"lineNumber":338,"author":{"gitID":"LeonidAgarth"},"content":"// end::Timetable[]"},{"lineNumber":339,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":340,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":341,"author":{"gitID":"LeonidAgarth"},"content":"//tag::Scheduling[]"},{"lineNumber":342,"author":{"gitID":"LeonidAgarth"},"content":"[[Scheduling]]"},{"lineNumber":343,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Scheduling meetings feature"},{"lineNumber":344,"author":{"gitID":"LeonidAgarth"},"content":"Fastis supports showing all the common free time slots for all members in based on their timetable."},{"lineNumber":345,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":346,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":347,"author":{"gitID":"LeonidAgarth"},"content":"Fastis utilizes a few components to schedule the meetings, namely the `Group` class and `WeeklyEvent` class in `Model`, `Timetable` in `UI`, and `parseEvents()` in `Database`."},{"lineNumber":348,"author":{"gitID":"LeonidAgarth"},"content":"The command to show the scheduled meetings is `ScheduleGroupCommand`, which resides in `Logic` component."},{"lineNumber":349,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":350,"author":{"gitID":"LeonidAgarth"},"content":"When a `ScheduleGroupCommand` is executed, it first gets all group members from `Model`."},{"lineNumber":351,"author":{"gitID":"LeonidAgarth"},"content":"For each member, it parses the `TimetableLink` to get all of his/her modules, and add them to an `occupied` list."},{"lineNumber":352,"author":{"gitID":"LeonidAgarth"},"content":"From that list, the command generates all free time slots in another list called `free`, and post that event to be handled by the `UI` component later."},{"lineNumber":353,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":354,"author":{"gitID":"LeonidAgarth"},"content":"The flow of operation is shown the sequence diagram below."},{"lineNumber":355,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":356,"author":{"gitID":"LeonidAgarth"},"content":"image::ScheduleGroupSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":357,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":358,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `ScheduleGroupCommand` is as follows:"},{"lineNumber":359,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":360,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":361,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":362,"author":{"gitID":"LeonidAgarth"},"content":"public ScheduleGroupCommand(Group group) {"},{"lineNumber":363,"author":{"gitID":"LeonidAgarth"},"content":"    requireNonNull(group);"},{"lineNumber":364,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":365,"author":{"gitID":"LeonidAgarth"},"content":"    EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":366,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":367,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":369,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Get the group\u0027s member from Model ..."},{"lineNumber":370,"author":{"gitID":"LeonidAgarth"},"content":"    fillTimeSlots(group);"},{"lineNumber":371,"author":{"gitID":"LeonidAgarth"},"content":"    generateFreeTimeSlots();"},{"lineNumber":372,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Post new TimetableChangedEvent ..."},{"lineNumber":373,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Return new CommandResult ..."},{"lineNumber":374,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":375,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":376,"author":{"gitID":"LeonidAgarth"},"content":"private void fillTimeSlots(Group group) {"},{"lineNumber":377,"author":{"gitID":"LeonidAgarth"},"content":"    for (Person member : group.getPersonList()) {"},{"lineNumber":378,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Parse the TimetableLink into moduleList"},{"lineNumber":379,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Add all modules in moduleList to occupied list"},{"lineNumber":380,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":382,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":383,"author":{"gitID":"LeonidAgarth"},"content":"private void generateFreeTimeSlots() {"},{"lineNumber":384,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Generate free time slots logic"},{"lineNumber":385,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":386,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":387,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Scheduling algorithm"},{"lineNumber":391,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Show all free time slots"},{"lineNumber":392,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Intuitive for users, and easy to read."},{"lineNumber":393,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: Slow, as there are a few extra steps to process."},{"lineNumber":394,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Show all occupied time slots"},{"lineNumber":395,"author":{"gitID":"LeonidAgarth"},"content":"** Pros: Very fast."},{"lineNumber":396,"author":{"gitID":"LeonidAgarth"},"content":"** Cons:"},{"lineNumber":397,"author":{"gitID":"LeonidAgarth"},"content":"*** Could become cluttered as there are normally more occupied slots than free slots."},{"lineNumber":398,"author":{"gitID":"LeonidAgarth"},"content":"*** Not intuitive for users."},{"lineNumber":399,"author":{"gitID":"LeonidAgarth"},"content":"// end::Scheduling[]"},{"lineNumber":400,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":401,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":402,"author":{"gitID":"LeonidAgarth"},"content":"// tag::ChangeTagColor[]"},{"lineNumber":403,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Tag Color feature"},{"lineNumber":404,"author":{"gitID":"LeonidAgarth"},"content":"Fastis supports changing the color of the tags given to people in the address book. There are up to 17 colors to choose from."},{"lineNumber":405,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":406,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":407,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":408,"author":{"gitID":"LeonidAgarth"},"content":"Changing a tag\u0027s color is facilitated by `ChangeTagColorCommand`, which resides inside `Logic` component."},{"lineNumber":409,"author":{"gitID":"LeonidAgarth"},"content":"It supports modifying the `color` field within `Tag` objects."},{"lineNumber":410,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":411,"author":{"gitID":"LeonidAgarth"},"content":"The flow of operation is shown the sequence diagram below."},{"lineNumber":412,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":413,"author":{"gitID":"LeonidAgarth"},"content":"image::ChangeTagColorSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":414,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":415,"author":{"gitID":"LeonidAgarth"},"content":"`ChangeTagColorCommand` inherit from `UndoableCommand`, therefore it can be undone and redone using `UndoRedoStack`."},{"lineNumber":416,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":417,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `ScheduleGroupCommand` is as follows:"},{"lineNumber":418,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":419,"author":{"gitID":"-"},"content":"----"},{"lineNumber":420,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":421,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":422,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":423,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":426,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"-"},"content":"}"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommand extends UndoableCommand {"},{"lineNumber":430,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":431,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":432,"author":{"gitID":"LeonidAgarth"},"content":"        // .. Get the tag\u0027s name and color from Model"},{"lineNumber":433,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":434,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":437,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Update tag in Model ..."},{"lineNumber":438,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Update Person list in Model ..."},{"lineNumber":439,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Return new CommandResult ..."},{"lineNumber":440,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":442,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":443,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":444,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":445,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":446,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Different tags with the same color"},{"lineNumber":447,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":448,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Allow"},{"lineNumber":449,"author":{"gitID":"LeonidAgarth"},"content":"** Pros:"},{"lineNumber":450,"author":{"gitID":"LeonidAgarth"},"content":"*** Users have more freedom."},{"lineNumber":451,"author":{"gitID":"LeonidAgarth"},"content":"*** Code is shorter."},{"lineNumber":452,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: Might result in aesthetically unpleasing GUI"},{"lineNumber":453,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Disallow"},{"lineNumber":454,"author":{"gitID":"LeonidAgarth"},"content":"** Pros:"},{"lineNumber":455,"author":{"gitID":"LeonidAgarth"},"content":"*** More intuitive."},{"lineNumber":456,"author":{"gitID":"LeonidAgarth"},"content":"*** Ensure aesthetic values for GUI."},{"lineNumber":457,"author":{"gitID":"LeonidAgarth"},"content":"** Cons: Code is longer."},{"lineNumber":458,"author":{"gitID":"LeonidAgarth"},"content":"// end::ChangeTagColor[]"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":461,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"Isaaaca"},"content":"(For all use cases below, the *System* is the `Fastis` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":466,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: Add an event"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"LeonidAgarth"},"content":"1.  User requests to add an event by entering information."},{"lineNumber":471,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis adds the event to the calendar."},{"lineNumber":472,"author":{"gitID":"-"},"content":"+"},{"lineNumber":473,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":478,"author":{"gitID":"Isaaaca"},"content":"* 2a. Meet up clashes with an existing event."},{"lineNumber":479,"author":{"gitID":"-"},"content":"+"},{"lineNumber":480,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":481,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis still adds the event, but it\u0027s not shown in the calendar."},{"lineNumber":482,"author":{"gitID":"-"},"content":"+"},{"lineNumber":483,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":486,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Show a person\u0027s timetable"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"LeonidAgarth"},"content":"1.  User selects a person, either by `select` command or by clicking on the person in the person list panel."},{"lineNumber":491,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis shows the timetable for the person."},{"lineNumber":492,"author":{"gitID":"-"},"content":"+"},{"lineNumber":493,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":498,"author":{"gitID":"Isaaaca"},"content":"* 2a. The specified person has no timetable"},{"lineNumber":499,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":500,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis shows an empty timetable"},{"lineNumber":501,"author":{"gitID":"-"},"content":"+"},{"lineNumber":502,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"LeonidAgarth"},"content":"[discrete]"},{"lineNumber":505,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Use case: Change Tag Color"},{"lineNumber":506,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":507,"author":{"gitID":"LeonidAgarth"},"content":"*MSS*"},{"lineNumber":508,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":509,"author":{"gitID":"LeonidAgarth"},"content":"1. User enters a command to change a specific tag color."},{"lineNumber":510,"author":{"gitID":"LeonidAgarth"},"content":"2. Fastis changes the color accordingly and displays it."},{"lineNumber":511,"author":{"gitID":"-"},"content":"+"},{"lineNumber":512,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":517,"author":{"gitID":"LeonidAgarth"},"content":"* 2a. The tag specified doesn\u0027t exist within the address book."},{"lineNumber":518,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis notifies the user."},{"lineNumber":519,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":520,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":521,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":522,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":523,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. The color specified is not supported by Fastis."},{"lineNumber":524,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis notifies the user."},{"lineNumber":525,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":526,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"LeonidAgarth"},"content":"[appendix]"},{"lineNumber":529,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d Glossary"},{"lineNumber":530,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":531,"author":{"gitID":"LeonidAgarth"},"content":"[[gui]] GUI::"},{"lineNumber":532,"author":{"gitID":"LeonidAgarth"},"content":"Acronym for Graphical User Interface. It is an interface (through which humans to interact with computers) that uses windows, icons and menus and which can be manipulated by a mouse and a keyboard. +"},{"lineNumber":533,"author":{"gitID":"LeonidAgarth"},"content":"GUI is used predominantly in Windows and iOS applications, including Fastis."},{"lineNumber":534,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":535,"author":{"gitID":"LeonidAgarth"},"content":"[[todo]] To-do::"},{"lineNumber":536,"author":{"gitID":"LeonidAgarth"},"content":"An objective that must be met by the user. May or may not have deadlines."},{"lineNumber":537,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":538,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":539,"author":{"gitID":"LeonidAgarth"},"content":"[appendix]"},{"lineNumber":540,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":541,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":542,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Adding an event"},{"lineNumber":543,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":544,"author":{"gitID":"LeonidAgarth"},"content":"Adding an event specified by command line input with required event prefixes."},{"lineNumber":545,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":546,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addEvent n/CS2101 meeting v/COM1 Hackerspace d/15/04/2018 st/1600 et/1800` +"},{"lineNumber":547,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: New event \"CS2101 meeting\" is added to Fastis. Details of the event added are shown in the result display box."},{"lineNumber":548,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addEvent v/COM1 Hackerspace d/15/04/2018 st/1600 et/1800` +"},{"lineNumber":549,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No event is added. Essential `NAME` field is missing. Error details are displayed in the result display box."},{"lineNumber":550,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect addEvent commands to try: `addEvent d/18/04/15`, `addEvent d/30/02/2018`, `addEvent st/1900 et/1700`, etc. +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":552,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":553,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Changing a tag\u0027s color"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"LeonidAgarth"},"content":" Changing a tag identified by `TAG` to have the color identified by `COLOR`."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: `TAG` already exists in Fastis. `COLOR` must be supported by Fastis."},{"lineNumber":558,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `changeTagColor friends pink` +"},{"lineNumber":559,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Color of all tags named \"friends\" changes to \"pink\". Successful message of the change will be displayed in the result display box."},{"lineNumber":560,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `changeTagColor friends rainbow` +"},{"lineNumber":561,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No tag is changed as an unsupported color \"rainbow\" was input. Error details are displayed in the result display box."},{"lineNumber":562,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect commands to try: `changeTagColor`, `changeTagColor pink friends` +"},{"lineNumber":563,"author":{"gitID":"jas5469"},"content":"   Expected: Same as previous."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":566,"author":{"gitID":"LeonidAgarth"},"content":"---"}],"authorContributionMap":{"nhatquang3112":13,"Isaaaca":5,"jas5469":23,"LeonidAgarth":419,"-":106}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"\u003d Fastis-Meetup Manager - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B3/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W15-B3`      Since: `February 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":"image:FASTIS.png[width\u003d\"500\"] +"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"Fastis is a desktop application which functions as an address book that aims to help students who are studying at National University of Singapore (NUS) manage their group projects effectively. The application enables students to keep track of group members’ timetables, information, meetups agendas, to-dos, and schedule suitable meetup time."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"This Developer Guide is meant to provides the necessary information for developers who are interested in contributing to this application."},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"New developers should begin with \u003c\u003cSettingUp\u003e\u003e. Experienced developers might want begin instead with the \u003c\u003cDesign\u003e\u003e section to learn more about how Fastis is structured."},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"Understanding the implementation of the features in Fastis will be crucial to be able to modify any feature for further improvements."},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"[[SettingUp]]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"This section provides information on setting up the project in order to work on Fastis."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"The following programs have to be installed on the computer system before setting up."},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":40,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":55,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":56,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":57,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":58,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":59,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":60,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":62,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"The following steps should be done to verify that the setup of Fastis is correct:"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":69,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"The following configurations should be done to ensure that Fastis future development follows good coding standards and practices."},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":80,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":81,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"* For `Import Layout`: Ensure that the import order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W15-B3/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W15-B3/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"You should set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":99,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":104,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"When you are ready to start coding, get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"[[Design]]"},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":112,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"This section describes how Fastis is built and how its different components interact and work with each other."},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"The *_Architecture_* Diagram given below (\u003c\u003cFigure1\u003e\u003e) explains the high-level design of Fastis. Given below is a quick overview of each component."},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"[[Figure1]]"},{"lineNumber":121,"author":{"gitID":"-"},"content":".Architecture Diagram."},{"lineNumber":122,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":125,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"The `Main` component has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"* Initializing the components in the correct sequence, and connects them up with each other during application launch."},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"* Shutting down the components and invokes cleanup method where necessary during shut down."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"The \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e component represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"The \u003c\u003cDesign-Database,*`Database`*\u003e\u003e component handles the downloading of module information via the https://github.com/nusmodifications/nusmods/tree/master/api/data[NUSmods API], as well as holding and retrieving the information. Because it is only accessed and never changed, the database component resides on its own outside of the `Model` component."},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"The rest of the App consists of these components:"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"\u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":"\u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The holder of the data of the App in-memory."},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"\u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The location on the hard disk where date is read from and written to."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"Each of the above four components"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"For example, the `Logic` component (see \u003c\u003clogicClassDiagram\u003e\u003e) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"[[logicClassDiagram]]"},{"lineNumber":154,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component."},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"_\u003c\u003cfigure3\u003e\u003e_  shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"[[figure3]]"},{"lineNumber":163,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)."},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfigure4\u003e\u003e shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"[[figure4]]"},{"lineNumber":172,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)."},{"lineNumber":173,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":"The UI component handles the inputs from and the outputs to the User Interface. It consists of a MainWindow that is made up of parts e.g. `CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class. Refer to \u003c\u003cfigure5\u003e\u003e."},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"[[figure5]]"},{"lineNumber":186,"author":{"gitID":"-"},"content":".Structure of the UI Component."},{"lineNumber":187,"author":{"gitID":"-"},"content":"image::UiClassDiagramV1.5.png[width\u003d\"800\"]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":197,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"jas5469"},"content":"The Logic component handles the commands from user and passes the command results to the User Interface."},{"lineNumber":204,"author":{"gitID":"jas5469"},"content":"Refer to \u003c\u003cfig-LogicClassDiagram, Figure 6\u003e\u003e and \u003c\u003cfig7, Figure 7\u003e\u003e for class diagrams on how the `Logic` component is structured."},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":207,"author":{"gitID":"-"},"content":".Structure of the Logic Component."},{"lineNumber":208,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":"[[fig7]]"},{"lineNumber":210,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e."},{"lineNumber":211,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":214,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":"Given below is the workflow of the Logic Component when the user inputs a command:"},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":".  The `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":219,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":220,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":221,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig8, Figure 8\u003e\u003e shows the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"jas5469"},"content":"[[fig8]]"},{"lineNumber":226,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command."},{"lineNumber":227,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":231,"author":{"gitID":"jas5469"},"content":"The model component stores and operates on the data held by Fastis as shown in \u003c\u003cfig9, Figure9\u003e\u003e."},{"lineNumber":232,"author":{"gitID":"jas5469"},"content":"[[fig9]]"},{"lineNumber":233,"author":{"gitID":"-"},"content":".Structure of the Model Component."},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":"The `Model` component:"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":243,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"The model component does not depend on any of the other three components, meaning that it does not rely on any functions outside of itself to operate."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":"The storage component saves processed data from Fastis on to the running machine’s hard-disk and reads from the stored data as shown in \u003c\u003cfig10, Figure 10\u003e\u003e."},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":"[[fig10]]"},{"lineNumber":251,"author":{"gitID":"-"},"content":".Structure of the Storage Component."},{"lineNumber":252,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"The `Storage` component:"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":"* saves `UserPref` objects in json format and reading it back on next startup."},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"* saves the Address Book data in xml format and read it back on next startup."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"Isaaaca"},"content":"//tag::Database[]"},{"lineNumber":262,"author":{"gitID":"Isaaaca"},"content":"[[Design-Database]]"},{"lineNumber":263,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Database component"},{"lineNumber":264,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":"The Database component is in charge of connections to the web."},{"lineNumber":266,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":267,"author":{"gitID":"Isaaaca"},"content":"The `Database` component:"},{"lineNumber":268,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":269,"author":{"gitID":"Isaaaca"},"content":"* downloads module information from the `NUSmods API`."},{"lineNumber":270,"author":{"gitID":"Isaaaca"},"content":"* retrieves modules given a NUSmods timetable link."},{"lineNumber":271,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":272,"author":{"gitID":"Isaaaca"},"content":"[NOTE]"},{"lineNumber":273,"author":{"gitID":"Isaaaca"},"content":"NUSmods timetable links are the sharable short URL from a NUSmods page."},{"lineNumber":274,"author":{"gitID":"Isaaaca"},"content":"E.g. http://modsn.us/MYwiD"},{"lineNumber":275,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"The sturucture of the Database component is shown in \u003c\u003cfig11, Figure 11\u003e\u003e"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"[[fig11]]"},{"lineNumber":278,"author":{"gitID":"-"},"content":".Structure of the Database Component."},{"lineNumber":279,"author":{"gitID":"Isaaaca"},"content":"image::DatabaseClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":280,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":281,"author":{"gitID":"Isaaaca"},"content":"//end::Database[]"},{"lineNumber":282,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":"Classes that are used by multiple components, such as `BaseEvent` and `JsonUtil`, are defined in the `seedu.addressbook.commons` package."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"jas5469"},"content":"// tag::undoredo[]"},{"lineNumber":293,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":294,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":295,"author":{"gitID":"jas5469"},"content":"The Undo feature allows users to restore the state before the latest command while the Redo feature reverses the Undo command."},{"lineNumber":296,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":297,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"jas5469"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. \u003c\u003cfig12, Figure 12\u003e\u003e shows the inheritance of commands:"},{"lineNumber":303,"author":{"gitID":"jas5469"},"content":"[[fig12]]"},{"lineNumber":304,"author":{"gitID":"-"},"content":".Execution of delete command."},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"jas5469"},"content":"As you can see from \u003c\u003cfig12, Figure 12\u003e\u003e, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":310,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"----"},{"lineNumber":312,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"},{"lineNumber":318,"author":{"gitID":"-"},"content":"----"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":321,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":322,"author":{"gitID":"-"},"content":"----"},{"lineNumber":323,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":"}"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":336,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"-"},"content":"}"},{"lineNumber":338,"author":{"gitID":"-"},"content":"----"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"jas5469"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command). Refer to \u003c\u003cfig13, Figure 13\u003e\u003e for an illustration."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":".Push of delete command into undoStack."},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"jas5469"},"content":"As the user continues to use the program, more commands are added into the `undoStack` (\u003c\u003cfig14, Figure 14\u003e\u003e). For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"jas5469"},"content":".Execution of Adding David."},{"lineNumber":350,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":353,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"jas5469"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed (\u003c\u003cfig15, Figure 15\u003e\u003e)."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"jas5469"},"content":".State before the add command restored."},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig16\u003e\u003e shows how the undo operation works:"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"jas5469"},"content":"[[fig16]]"},{"lineNumber":368,"author":{"gitID":"-"},"content":".Sequence diagram for Undo/Redo."},{"lineNumber":369,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"jas5469"},"content":"The redo does the exact opposite (pops from `redoStack`, pushes to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":374,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"jas5469"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack` (\u003c\u003cfig17, Figure 17\u003e\u003e). This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":377,"author":{"gitID":"jas5469"},"content":"[[fig17]]"},{"lineNumber":378,"author":{"gitID":"jas5469"},"content":".Execution of clear command."},{"lineNumber":379,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"jas5469"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution (as shown in \u003c\u003cfig18, Figure 18\u003e\u003e):"},{"lineNumber":382,"author":{"gitID":"jas5469"},"content":"[[fig18]]"},{"lineNumber":383,"author":{"gitID":"jas5469"},"content":".Execution of list command, which will not be added to undoStack after execution."},{"lineNumber":384,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig19\u003e\u003e summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":387,"author":{"gitID":"jas5469"},"content":"[[fig19]]"},{"lineNumber":388,"author":{"gitID":"jas5469"},"content":".Activity diagram of undo/redo."},{"lineNumber":389,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"jas5469"},"content":"The following considerations were taken into account during the design of this feature."},{"lineNumber":394,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":398,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation preserves undo/redo functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":399,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard for new developers to understand the template pattern."},{"lineNumber":400,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":401,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not involve the template pattern, and is easier for new developers to understand."},{"lineNumber":402,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it so that classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":407,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is easy to implement."},{"lineNumber":408,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation may have performance issues in terms of memory usage."},{"lineNumber":409,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":410,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation uses less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":411,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation reduces leeway for error and forces developers to ensure that the implementation of each individual command are correct."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the `AddressBook`."},{"lineNumber":417,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation only reverts changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":418,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation might confuse users as to whether the command also works when the list is modified (undoing filtering for example)."},{"lineNumber":419,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":420,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation might be more intuitive for the user."},{"lineNumber":421,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it harder for users who only want to revert changes to `AddressBook`."},{"lineNumber":422,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":428,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is easy to understand for new Computer Science undergraduates to understand, who are likely new developers."},{"lineNumber":429,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation duplicates `Logic`. For example, when a new command is executed, both `HistoryManager` and `UndoRedoStack`must be update."},{"lineNumber":430,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":431,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation  just reuses what is already in the codebase."},{"lineNumber":432,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to undo commands on top of keeping track of them."},{"lineNumber":433,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"Isaaaca"},"content":"//tag::ModuleDatabase[]"},{"lineNumber":436,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Module database feature"},{"lineNumber":437,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":438,"author":{"gitID":"jas5469"},"content":"The database feature enables Fastis to store and quickly find lesson schedules."},{"lineNumber":439,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":440,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":441,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":442,"author":{"gitID":"jas5469"},"content":"Fastis uses the available `NUSmods API` to retrieve module information from the API server."},{"lineNumber":443,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":444,"author":{"gitID":"jas5469"},"content":"The sequence diagram (\u003c\u003cfig20, Figure 20\u003e\u003e) for the instantiation of DatabaseManager is shown below."},{"lineNumber":445,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":446,"author":{"gitID":"jas5469"},"content":".Sequence diagram for the instantianion of DatabaseManager."},{"lineNumber":447,"author":{"gitID":"Isaaaca"},"content":"image::DatabaseComponentSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":448,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":449,"author":{"gitID":"Isaaaca"},"content":"On startup, the network component makes a connection to the API server and checks the `lastmodified` field of the `JSON` file on the server. If the `lastmodified` date is more recent that the `JSON` file held in storage, the network component will download and overwrite the existing file on disk."},{"lineNumber":450,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":451,"author":{"gitID":"Isaaaca"},"content":"The `Storage` component then converts the JSON file into a hashMap of modules to be held in the `Database` component."},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storage of Module information"},{"lineNumber":456,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":457,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 1 (current choice):** Store a complete dataset of all modules"},{"lineNumber":458,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation allows Fastis to access information even when used offline."},{"lineNumber":459,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires more memory space."},{"lineNumber":460,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 2:** Store nothing, retrieve only module information of single module each time."},{"lineNumber":461,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not require any storage space."},{"lineNumber":462,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires Fastis to constantly download information from the web, making the app reliant on good internet connection."},{"lineNumber":463,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":464,"author":{"gitID":"Isaaaca"},"content":"// end::ModuleDatabase[]"},{"lineNumber":465,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":466,"author":{"gitID":"LeonidAgarth"},"content":"//tag::Calendar[]"},{"lineNumber":467,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Calendar feature"},{"lineNumber":468,"author":{"gitID":"LeonidAgarth"},"content":"Fastis uses a stand-alone `Calendar` class, adapted from https://github.com/SirGoose3432/javafx-calendar[javafx-calendar] by SirGoose3432."},{"lineNumber":469,"author":{"gitID":"LeonidAgarth"},"content":"It is used to view the user\u0027s upcoming events, e.g. interviews, meetings, etc."},{"lineNumber":470,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":471,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":472,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":473,"author":{"gitID":"LeonidAgarth"},"content":"The calendar feature is facilitated by `Calendar` and `CalendarDate` classes,"},{"lineNumber":474,"author":{"gitID":"LeonidAgarth"},"content":"both of which reside inside `Ui` component. Their sole purpose is to draw out the calendar"},{"lineNumber":475,"author":{"gitID":"LeonidAgarth"},"content":"in the application when given a list of `Event` objects."},{"lineNumber":476,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":477,"author":{"gitID":"LeonidAgarth"},"content":"The calendar is drawn/redrawn whenever a `CalendarChangedEvent` is raised."},{"lineNumber":478,"author":{"gitID":"jas5469"},"content":"The flow of operation thereafter is shown is \u003c\u003cfig21, Figure 21\u003e\u003e below."},{"lineNumber":479,"author":{"gitID":"jas5469"},"content":"[[fig21]]"},{"lineNumber":480,"author":{"gitID":"jas5469"},"content":".Sequence diagram for CalendarChangedEvent"},{"lineNumber":481,"author":{"gitID":"LeonidAgarth"},"content":"image::CalendarSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":482,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":483,"author":{"gitID":"LeonidAgarth"},"content":"`Calendar` utilizes the `Event` class to determine which slots in the schedule are occupied."},{"lineNumber":484,"author":{"gitID":"LeonidAgarth"},"content":"Hence, a list of events is passed to every calendar upon construction and saved as a private variable."},{"lineNumber":485,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":486,"author":{"gitID":"LeonidAgarth"},"content":"The details of these event, e.g. time, location, are saved locally in `.xml` file format."},{"lineNumber":487,"author":{"gitID":"LeonidAgarth"},"content":"It is also retrieved upon start up by the `Storage` component and saved within the `Model` for the whole process."},{"lineNumber":488,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":489,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `Calendar` is as follows:"},{"lineNumber":490,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":491,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":492,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":493,"author":{"gitID":"LeonidAgarth"},"content":"public Calendar(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":494,"author":{"gitID":"LeonidAgarth"},"content":"    super(FXML);"},{"lineNumber":495,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":496,"author":{"gitID":"LeonidAgarth"},"content":"    initCalendar();"},{"lineNumber":497,"author":{"gitID":"LeonidAgarth"},"content":"    registerAsAnEventHandler(this);"},{"lineNumber":498,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":499,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":500,"author":{"gitID":"LeonidAgarth"},"content":"private void initCalendar() {"},{"lineNumber":501,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Create the calendar 7x6 GridPane ..."},{"lineNumber":502,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Construct 42 CalendarDate objects ..."},{"lineNumber":503,"author":{"gitID":"LeonidAgarth"},"content":"    fillCalendar(currentYearMonth);"},{"lineNumber":504,"author":{"gitID":"LeonidAgarth"},"content":"    showEvents();"},{"lineNumber":505,"author":{"gitID":"LeonidAgarth"},"content":"    // ... show CalendarView ..."},{"lineNumber":506,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":507,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":508,"author":{"gitID":"LeonidAgarth"},"content":"private void fillCalendar(YearMonth yearMonth) {"},{"lineNumber":509,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Fill the calendar with the correct dates according to yearMonth ..."},{"lineNumber":510,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":511,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":512,"author":{"gitID":"LeonidAgarth"},"content":"private void showEvents() {"},{"lineNumber":513,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Show all events that are in the current yearMonth in the eventList ..."},{"lineNumber":514,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":515,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":516,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":517,"author":{"gitID":"LeonidAgarth"},"content":"The current time is retrieved upon startup, and the calendar base on that point in time to display the appropriate time frame."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":520,"author":{"gitID":"LeonidAgarth"},"content":"[[calendarImplementation]]"},{"lineNumber":521,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Calendar`"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Implement a stand-alone `Calendar` class"},{"lineNumber":524,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes data manipulation and appearance customizing easy."},{"lineNumber":525,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation might lack functionalities available in external libraries."},{"lineNumber":526,"author":{"gitID":"-"},"content":"* **Alternative 2:** Import external libraries/API"},{"lineNumber":527,"author":{"gitID":"-"},"content":"** Choices:"},{"lineNumber":528,"author":{"gitID":"-"},"content":"*** https://developers.google.com/calendar/[Google Calendar API]"},{"lineNumber":529,"author":{"gitID":"-"},"content":"*** https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":530,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation would be likely be optimized and have more functionalities."},{"lineNumber":531,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation restricts developers to what the libraries offer, and require a firm understanding of these external APIs."},{"lineNumber":532,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":533,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing of the `eventList`"},{"lineNumber":534,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Stores the `eventList` within the `Calendar` object."},{"lineNumber":535,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy to show events and their details, even after the constructor returns."},{"lineNumber":536,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation takes up some memory even if there are no commands for showing these events."},{"lineNumber":537,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Only passes the `eventList` as a parameter to the constructor and not storing it as a field within the `Calendar` object."},{"lineNumber":538,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation uses less memory and makes code less cluttered."},{"lineNumber":539,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard to show events and their details outside of the constructor."},{"lineNumber":540,"author":{"gitID":"LeonidAgarth"},"content":"// end::Calendar[]"},{"lineNumber":541,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":542,"author":{"gitID":"LeonidAgarth"},"content":"//tag::Timetable[]"},{"lineNumber":543,"author":{"gitID":"LeonidAgarth"},"content":"[[Timetable]]"},{"lineNumber":544,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Timetable feature"},{"lineNumber":545,"author":{"gitID":"LeonidAgarth"},"content":"Fastis uses a stand-alone `Timetable` class, based largely on the `Calendar` class. It is used to view the user\u0027s own NUSMods timetable as well as that of other people in his address book."},{"lineNumber":546,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":547,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":548,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":549,"author":{"gitID":"LeonidAgarth"},"content":"The timetable is the weekly equivalent to the monthly Calendar."},{"lineNumber":550,"author":{"gitID":"LeonidAgarth"},"content":"This feature is similarly facilitated by the analogous `Timetable` and `TimetableSlot` classes,"},{"lineNumber":551,"author":{"gitID":"LeonidAgarth"},"content":"both of which reside inside `Ui` component. Their sole purpose is to draw out the timetable"},{"lineNumber":552,"author":{"gitID":"LeonidAgarth"},"content":"in the application when given a list of `WeeklyEvent` objects."},{"lineNumber":553,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":554,"author":{"gitID":"LeonidAgarth"},"content":"The calendar is drawn/redrawn whenever a `TimetableChangedEvent` is raised."},{"lineNumber":555,"author":{"gitID":"LeonidAgarth"},"content":"This is done either by a precedent `PersonPanelSelectionChangedEvent` or a `ScheduleGroupCommand`."},{"lineNumber":556,"author":{"gitID":"jas5469"},"content":"The flow of operation thereafter is shown \u003c\u003cfig22,Figure 22\u003e\u003e below."},{"lineNumber":557,"author":{"gitID":"jas5469"},"content":"[[fig22]]"},{"lineNumber":558,"author":{"gitID":"jas5469"},"content":".Sequence diagram for TimetableChangedEvent"},{"lineNumber":559,"author":{"gitID":"LeonidAgarth"},"content":"image::TimetableSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":560,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":561,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `Timetable` is as follows:"},{"lineNumber":562,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":563,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":564,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":565,"author":{"gitID":"LeonidAgarth"},"content":"public Timetable(ObservableList\u003cWeeklyEvent\u003e eventList) {"},{"lineNumber":566,"author":{"gitID":"LeonidAgarth"},"content":"    super(FXML);"},{"lineNumber":567,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":568,"author":{"gitID":"LeonidAgarth"},"content":"    initTimetable();"},{"lineNumber":569,"author":{"gitID":"LeonidAgarth"},"content":"    registerAsAnEventHandler(this);"},{"lineNumber":570,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":571,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":572,"author":{"gitID":"LeonidAgarth"},"content":"private void initTimetable() {"},{"lineNumber":573,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Create the calendar 6x11 GridPane ..."},{"lineNumber":574,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Construct 66 TimetableSlot objects ..."},{"lineNumber":575,"author":{"gitID":"LeonidAgarth"},"content":"    clearTimetable();"},{"lineNumber":576,"author":{"gitID":"LeonidAgarth"},"content":"    showSlots();"},{"lineNumber":577,"author":{"gitID":"LeonidAgarth"},"content":"    // ... show TimetableView ..."},{"lineNumber":578,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":579,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":580,"author":{"gitID":"LeonidAgarth"},"content":"private void clearTimetable() {"},{"lineNumber":581,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Draw all slots as blank ..."},{"lineNumber":582,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Draw the timeline on the left ..."},{"lineNumber":583,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":584,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":585,"author":{"gitID":"LeonidAgarth"},"content":"private void showSlots() {"},{"lineNumber":586,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Show all slots that are in the in the eventList ..."},{"lineNumber":587,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Make sure no 2 modules with different name would have the same color ..."},{"lineNumber":588,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":589,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":590,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the `Timetable` and Storing of the `eventList`"},{"lineNumber":594,"author":{"gitID":"LeonidAgarth"},"content":"As the weekly equivalent of `Calendar`, `Timetable` has the same aspect to consider. See \u003c\u003ccalendarImplementation, Implementation of the Calendar\u003e\u003e."},{"lineNumber":595,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":596,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Supporting modules on weekends and/or after 6pm"},{"lineNumber":597,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Don\u0027t support showing those modules"},{"lineNumber":598,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes the GUI less cluttered and more readable"},{"lineNumber":599,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation cannot cater to users with modules outside these times. Users cannot schedule events on weekends."},{"lineNumber":600,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Support showing those modules"},{"lineNumber":601,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation caters to users with those modules, and support scheduling for the weekends."},{"lineNumber":602,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes the GUI look cluttered, as the GUI already has other main components."},{"lineNumber":603,"author":{"gitID":"LeonidAgarth"},"content":"// end::Timetable[]"},{"lineNumber":604,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":605,"author":{"gitID":"Isaaaca"},"content":"//tag::showingTimetable[]"},{"lineNumber":606,"author":{"gitID":"Isaaaca"},"content":"[[showingTimetable]]"},{"lineNumber":607,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Showing the timetable"},{"lineNumber":608,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":609,"author":{"gitID":"jas5469"},"content":"This feature allows users to see a person\u0027s timetable by selecting him/her."},{"lineNumber":610,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":611,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":612,"author":{"gitID":"jas5469"},"content":"When a person is selected, either by the `select` command or by mouse click via the GUI, a `PersonPanelSelectionChangedEvent` is raised. The flow of operation thereafter is shown \u003c\u003cfig23, Figure 23\u003e\u003e below."},{"lineNumber":613,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":614,"author":{"gitID":"jas5469"},"content":".Sequence digaram for PersonPanelSelectionChangedEvent."},{"lineNumber":615,"author":{"gitID":"Isaaaca"},"content":"image::nusModsSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":616,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":617,"author":{"gitID":"Isaaaca"},"content":"Upon receiving the event, the `UI` component takes the `Person` within the `PersonPanelSelectionChangedEvent` and calls the `parseEvents()` method of `DataBaseManager`, passing the `TimetableLink` of the `Person` as an argument."},{"lineNumber":618,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":619,"author":{"gitID":"Isaaaca"},"content":"The result of the `parseEvents()` is an `ArrayList` of `WeeklyEvents`. This result is used to form a `TimeTableChangedEvent`, which ultimately tells the `UI` component to display the result."},{"lineNumber":620,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":621,"author":{"gitID":"Isaaaca"},"content":"The implementation of `parseEvents()` is as follows:"},{"lineNumber":622,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":623,"author":{"gitID":"Isaaaca"},"content":"[source,java]"},{"lineNumber":624,"author":{"gitID":"Isaaaca"},"content":"----"},{"lineNumber":625,"author":{"gitID":"Isaaaca"},"content":"public static ArrayList\u003cWeeklyEvent\u003e parseEvents(TimeTableLink link) {"},{"lineNumber":626,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":627,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":628,"author":{"gitID":"Isaaaca"},"content":"        if (!isCurrentSem(link)) {"},{"lineNumber":629,"author":{"gitID":"Isaaaca"},"content":"           // ... display and log warning messages ..."},{"lineNumber":630,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":631,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":632,"author":{"gitID":"Isaaaca"},"content":"        String query \u003d getQuery(link);"},{"lineNumber":633,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":634,"author":{"gitID":"Isaaaca"},"content":"       // ... parse query into WeeklyEvents ..."},{"lineNumber":635,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":636,"author":{"gitID":"Isaaaca"},"content":"        return eventList;"},{"lineNumber":637,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":638,"author":{"gitID":"Isaaaca"},"content":"----"},{"lineNumber":639,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":640,"author":{"gitID":"Isaaaca"},"content":"The `parseEvents()` method firsts checks if the `TimetableLink` points to a schedule that is in the same semester as Fatis\u0027 database. It then calls the `getQuery` helper method, which a `URLconnection` to the shortened URL in `TimetableLink` and returns the `query` part of the full-length URL."},{"lineNumber":641,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":642,"author":{"gitID":"Isaaaca"},"content":"The method then takes the `query` and parses them into modules and lessons, which are used to form `WeeklyEvents`."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":645,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":646,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storage of a person\u0027s schedule"},{"lineNumber":647,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":648,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 1 (current choice):** Store only the link to a NUSmods page for each person"},{"lineNumber":649,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation requires very little space. The schedule of a person can easily be changed by editing the `TimetableLink`."},{"lineNumber":650,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires Fastis to make a connection to the web each time a person is selected."},{"lineNumber":651,"author":{"gitID":"Isaaaca"},"content":"* **Alternative 2:** Store the schedule of each person in the `AddressBook`"},{"lineNumber":652,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation will require much more space, and there will be a dilemma between whether to store it as `WeeklyEvent`, or `Module` and `schedule`"},{"lineNumber":653,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires Fastis to make a connection to the web only when a person is added or edited."},{"lineNumber":654,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":655,"author":{"gitID":"Isaaaca"},"content":"//end::showingTimetable[]"},{"lineNumber":656,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":657,"author":{"gitID":"LeonidAgarth"},"content":"//tag::Scheduling[]"},{"lineNumber":658,"author":{"gitID":"LeonidAgarth"},"content":"[[Scheduling]]"},{"lineNumber":659,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Schedule meetings feature"},{"lineNumber":660,"author":{"gitID":"LeonidAgarth"},"content":"Fastis supports showing all the common free time slots for all members in based on their timetable."},{"lineNumber":661,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":662,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":663,"author":{"gitID":"LeonidAgarth"},"content":"Fastis utilizes a few components to schedule the meetings, namely the `Group` class and `WeeklyEvent` class in `Model`, `Timetable` in `UI`, and `parseEvents()` in `Database`."},{"lineNumber":664,"author":{"gitID":"LeonidAgarth"},"content":"The command to show the scheduled meetings is `ScheduleGroupCommand`, which resides in `Logic` component."},{"lineNumber":665,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":666,"author":{"gitID":"LeonidAgarth"},"content":"When a `ScheduleGroupCommand` is executed, it first gets all group members from `Model`."},{"lineNumber":667,"author":{"gitID":"LeonidAgarth"},"content":"For each member, it parses the `TimetableLink` to get all of his/her modules, and add them to an `occupied` list."},{"lineNumber":668,"author":{"gitID":"LeonidAgarth"},"content":"From that list, the command generates all free time slots in another list called `free`, and post that event to be handled by the `UI` component later."},{"lineNumber":669,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":670,"author":{"gitID":"jas5469"},"content":"The flow of operation is shown in \u003c\u003cfig24, Figure 24\u003e\u003e below."},{"lineNumber":671,"author":{"gitID":"jas5469"},"content":"[[fig24]]"},{"lineNumber":672,"author":{"gitID":"jas5469"},"content":".Sequence diagram for ScheduleGroupCommand()."},{"lineNumber":673,"author":{"gitID":"LeonidAgarth"},"content":"image::ScheduleGroupSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":674,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":675,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `ScheduleGroupCommand` is as follows:"},{"lineNumber":676,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":677,"author":{"gitID":"LeonidAgarth"},"content":"[source,java]"},{"lineNumber":678,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":679,"author":{"gitID":"LeonidAgarth"},"content":"public ScheduleGroupCommand(Group group) {"},{"lineNumber":680,"author":{"gitID":"LeonidAgarth"},"content":"    requireNonNull(group);"},{"lineNumber":681,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Assigning class fields ..."},{"lineNumber":682,"author":{"gitID":"LeonidAgarth"},"content":"    EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":683,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":684,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":685,"author":{"gitID":"LeonidAgarth"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":686,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Get the group\u0027s member from Model ..."},{"lineNumber":687,"author":{"gitID":"LeonidAgarth"},"content":"    fillTimeSlots(group);"},{"lineNumber":688,"author":{"gitID":"LeonidAgarth"},"content":"    generateFreeTimeSlots();"},{"lineNumber":689,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Post new TimetableChangedEvent ..."},{"lineNumber":690,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Return new CommandResult ..."},{"lineNumber":691,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":692,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":693,"author":{"gitID":"LeonidAgarth"},"content":"private void fillTimeSlots(Group group) {"},{"lineNumber":694,"author":{"gitID":"LeonidAgarth"},"content":"    for (Person member : group.getPersonList()) {"},{"lineNumber":695,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Parse the TimetableLink into moduleList"},{"lineNumber":696,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Add all modules in moduleList to occupied list"},{"lineNumber":697,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":698,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":699,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":700,"author":{"gitID":"LeonidAgarth"},"content":"private void generateFreeTimeSlots() {"},{"lineNumber":701,"author":{"gitID":"LeonidAgarth"},"content":"    // ... Generate free time slots logic"},{"lineNumber":702,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":703,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":704,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":706,"author":{"gitID":"-"},"content":""},{"lineNumber":707,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Scheduling algorithm"},{"lineNumber":708,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 1 (current choice):** Show all free time slots"},{"lineNumber":709,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is intuitive for users, and easy to read."},{"lineNumber":710,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation slow, as there are a few extra steps to process."},{"lineNumber":711,"author":{"gitID":"LeonidAgarth"},"content":"* **Alternative 2:** Show all occupied time slots"},{"lineNumber":712,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is very fast."},{"lineNumber":713,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation could make GUI cluttered as there are normally more occupied slots than free slots. Also, it might not be intuitive for users."},{"lineNumber":714,"author":{"gitID":"LeonidAgarth"},"content":"// end::Scheduling[]"},{"lineNumber":715,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":716,"author":{"gitID":"jas5469"},"content":"// tag::listTagMembers[]"},{"lineNumber":717,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Tag Members feature"},{"lineNumber":718,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":719,"author":{"gitID":"jas5469"},"content":"Fastis lists all persons in Fastis that have tags similar to input."},{"lineNumber":720,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":721,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":722,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":723,"author":{"gitID":"jas5469"},"content":"Fastis uses `ListTagMembersCommand`, which resides under `Logic` to facilitate the listing of members under the same"},{"lineNumber":724,"author":{"gitID":"jas5469"},"content":"tag. \u003c\u003cfig25, Figure 25\u003e\u003e shows the sequence diagram of the `listTagMembers` command"},{"lineNumber":725,"author":{"gitID":"jas5469"},"content":"[[fig25]]"},{"lineNumber":726,"author":{"gitID":"jas5469"},"content":".Sequence diagram of `listTagMembers` command."},{"lineNumber":727,"author":{"gitID":"jas5469"},"content":"image::listTagMemberSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":728,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":729,"author":{"gitID":"jas5469"},"content":"When user types in command line `listTagMembers` or `lTM` , Fastis will use the keyword provided to search for the"},{"lineNumber":730,"author":{"gitID":"jas5469"},"content":"tag and list out all members with the same  tag."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":733,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command `listTagMembersCommand()` to list out the members with same tag."},{"lineNumber":734,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it is easy to change the methods called by command."},{"lineNumber":735,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":736,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Change existing find command to include finding person with same tags."},{"lineNumber":737,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation can reduce number of commands required to be remembered."},{"lineNumber":738,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation can affect the functionality of existing commands."},{"lineNumber":739,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":740,"author":{"gitID":"jas5469"},"content":"// end::listTagMembers[]"},{"lineNumber":741,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":742,"author":{"gitID":"jas5469"},"content":"// tag::addGroup[]"},{"lineNumber":743,"author":{"gitID":"LeonidAgarth"},"content":"[[Group]]"},{"lineNumber":744,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Group feature"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"jas5469"},"content":"Fastis has a group feature that can:"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"jas5469"},"content":"* add a group with information that was stated by user input."},{"lineNumber":749,"author":{"gitID":"jas5469"},"content":"* delete a group with information that was stated  by user input."},{"lineNumber":750,"author":{"gitID":"jas5469"},"content":"* add a person into the group with information that was stated by user input."},{"lineNumber":751,"author":{"gitID":"jas5469"},"content":"* delete a person from the group with information that was stated by user input."},{"lineNumber":752,"author":{"gitID":"jas5469"},"content":"* list all the members in the group with information that was stated by user input."},{"lineNumber":753,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":754,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":755,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":756,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":757,"author":{"gitID":"jas5469"},"content":"The group mechanism is facilitated by `UniqueGroupList`, which resides inside `Model` component. Address book stores all groups in `UniqueGroupList`."},{"lineNumber":758,"author":{"gitID":"jas5469"},"content":"The groups in the group list are facilitated by `Group` class. Each `Group` object have a `Information` object, representing the information of the group."},{"lineNumber":759,"author":{"gitID":"jas5469"},"content":"`Group`,`Information` and `UniqueGroupList` class reside inside `Model` component. \u003c\u003cfig26, Figure 26\u003e\u003e  is the class diagram showing the relationship between `Group`, `Information` and `UniqueGroupList`:"},{"lineNumber":760,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":761,"author":{"gitID":"jas5469"},"content":"[[fig26]]"},{"lineNumber":762,"author":{"gitID":"jas5469"},"content":".Group Class Diagram."},{"lineNumber":763,"author":{"gitID":"jas5469"},"content":"image::GroupClassDiagram.png[width \u003d\"800\"]"},{"lineNumber":764,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":765,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig27, Figure 27\u003e\u003e  is a object diagram of Group Class."},{"lineNumber":766,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":767,"author":{"gitID":"jas5469"},"content":"[[fig27]]"},{"lineNumber":768,"author":{"gitID":"jas5469"},"content":".Object Diagram of `Group`."},{"lineNumber":769,"author":{"gitID":"jas5469"},"content":"image::GroupObjectDiagram.png[width\u003d\"600\"]"},{"lineNumber":770,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":771,"author":{"gitID":"jas5469"},"content":"Suppose that the user has just launched the application . The `UniqueGroupList` in the address book will include few groups that are declared in SampleDataUtil."},{"lineNumber":772,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":773,"author":{"gitID":"jas5469"},"content":"A Group consists of the following:"},{"lineNumber":774,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":775,"author":{"gitID":"jas5469"},"content":"* Information: Represents the information of the group."},{"lineNumber":776,"author":{"gitID":"jas5469"},"content":"* PersonList: Represents the list of persons in a group."},{"lineNumber":777,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"The add group feature adds a group with information named by user in input into Fastis."},{"lineNumber":779,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":780,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":781,"author":{"gitID":"jas5469"},"content":"The add group mechanism is facilitated by `AddGroupCommand`, which resides inside `Logic` component. It supports adding `Group` object to the address book. `AddGroupCommand` inherits from `UndoableCommand`."},{"lineNumber":782,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":783,"author":{"gitID":"jas5469"},"content":"Hence, `AddGroupCommand` can be undone using `UndoRedoStack`."},{"lineNumber":784,"author":{"gitID":"jas5469"},"content":"With the extra layer, the `AddGroupCommand` that is undoable is implemented this way:"},{"lineNumber":785,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":786,"author":{"gitID":"-"},"content":"----"},{"lineNumber":787,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":788,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":789,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":790,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":793,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":794,"author":{"gitID":"-"},"content":"}"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommand extends UndoableCommand {"},{"lineNumber":797,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":798,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":799,"author":{"gitID":"jas5469"},"content":"        // ... AddGroup logic ..."},{"lineNumber":800,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":801,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":802,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":803,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":804,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig28, Figure 28\u003e\u003e shows the interaction of `AddGroup` Command class."},{"lineNumber":805,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":806,"author":{"gitID":"jas5469"},"content":"[[fig28]]"},{"lineNumber":807,"author":{"gitID":"jas5469"},"content":".Class Diagram of add group Command."},{"lineNumber":808,"author":{"gitID":"jas5469"},"content":"image::AddGroupCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":809,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":810,"author":{"gitID":"jas5469"},"content":"The user executes a new `AddGroupCommand` with `Information`, to add a new group to the address book."},{"lineNumber":811,"author":{"gitID":"jas5469"},"content":"The new group is added to the `UniqueGroupList` and the current state of the address book is saved."},{"lineNumber":812,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":813,"author":{"gitID":"jas5469"},"content":"The `AddGroupCommand` is facilitated by `AddGroupCommandParser` to parse `AddGroupCommand`."},{"lineNumber":814,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig29, Figure 29\u003e\u003e  shows the flow of parsing of `AddGroupCommand` object."},{"lineNumber":815,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":816,"author":{"gitID":"jas5469"},"content":"[[fig29]]"},{"lineNumber":817,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for AddGroupParser."},{"lineNumber":818,"author":{"gitID":"jas5469"},"content":"image::AddGroupParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":819,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":820,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig30, Figure 30\u003e\u003e diagram shows how the add group operation works:"},{"lineNumber":821,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":822,"author":{"gitID":"jas5469"},"content":"[[fig30]]"},{"lineNumber":823,"author":{"gitID":"jas5469"},"content":".AddGroup Sequence Diagram."},{"lineNumber":824,"author":{"gitID":"jas5469"},"content":"image::AddGroupSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":825,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":827,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":828,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddGroupCommand`"},{"lineNumber":829,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new command method `AddGroupCommand()`"},{"lineNumber":830,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want"},{"lineNumber":831,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":832,"author":{"gitID":"-"},"content":"* **Alternative 2:** Add a new abstract method `executeAddGroupCommand()`"},{"lineNumber":833,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation preserves `addGroup` functionality as it is now part of the default behaviour. Classes that deal with `AddGroupCommand` do not have to know that `executeAddGroupCommand()` exist."},{"lineNumber":834,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard for new developers to understand the template pattern."},{"lineNumber":835,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":836,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Add Member To Group feature"},{"lineNumber":837,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":838,"author":{"gitID":"jas5469"},"content":"Fastis adds a person from the existing contact list to an existing group."},{"lineNumber":839,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":840,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":841,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":842,"author":{"gitID":"jas5469"},"content":"The add member to group mechanism is facilitated by `AddMemberToGroupCommand`, which resides inside `Logic` component."},{"lineNumber":843,"author":{"gitID":"jas5469"},"content":"It supports adding a member to `Group` objects to the address book. `AddMemberToGroupCommand` inherits from `UndoableCommand`."},{"lineNumber":844,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":845,"author":{"gitID":"jas5469"},"content":"Hence, AddMemberToGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":846,"author":{"gitID":"jas5469"},"content":"With the extra layer, the AddGroupCommand that is undoable is implemented this way:"},{"lineNumber":847,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":848,"author":{"gitID":"-"},"content":"----"},{"lineNumber":849,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":850,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":851,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":852,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":853,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":855,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":856,"author":{"gitID":"-"},"content":"}"},{"lineNumber":857,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":858,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommand extends UndoableCommand {"},{"lineNumber":859,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":860,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":861,"author":{"gitID":"jas5469"},"content":"        // ... AddMemberToGroup logic ..."},{"lineNumber":862,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":863,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":864,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":865,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":866,"author":{"gitID":"jas5469"},"content":"The list of members in the group list are facilitated by `Group` class. Each `Group` object have a `UniquePersonList` object, representing the list of persons in the group."},{"lineNumber":867,"author":{"gitID":"jas5469"},"content":"Address book stores all members added to the group using XmlAdaptedPersons as person object storage as shown in  the following sequence diagram where  the storage saves to file in XmlAdaptedGroups."},{"lineNumber":868,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":869,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":870,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig31, Figure 31\u003e\u003e shows the interaction of `AddMemberToGroup` Command class."},{"lineNumber":871,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":872,"author":{"gitID":"jas5469"},"content":"[[fig31]]"},{"lineNumber":873,"author":{"gitID":"jas5469"},"content":".Class Diagram of AddMemberToGroup Command."},{"lineNumber":874,"author":{"gitID":"jas5469"},"content":"image::aGMCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":875,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":876,"author":{"gitID":"jas5469"},"content":"The `AddMemberToGroupCommand` is facilitated by `AddMemberToGroupCommandParser` to parse `AddMemberToGroupCommand`."},{"lineNumber":877,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig32, Figure 32\u003e\u003e shows the flow of parsing of `AddMemberToGroupCommand` object."},{"lineNumber":878,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":879,"author":{"gitID":"jas5469"},"content":"[[fig32]]"},{"lineNumber":880,"author":{"gitID":"jas5469"},"content":".Sequence diagram for AddMemberToGroupCommandParser."},{"lineNumber":881,"author":{"gitID":"jas5469"},"content":"image::aGMParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":882,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":883,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig33, Figure 33\u003e\u003e diagram shows how the addMembersToGroup operates."},{"lineNumber":884,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":885,"author":{"gitID":"jas5469"},"content":"[[fig33]]"},{"lineNumber":886,"author":{"gitID":"jas5469"},"content":".AddMemberToGroup sequence diagram."},{"lineNumber":887,"author":{"gitID":"jas5469"},"content":"image::aGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":888,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddMemberToGroupCommand`"},{"lineNumber":892,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `AddMemberToGroupCommand()`."},{"lineNumber":893,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want."},{"lineNumber":894,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":895,"author":{"gitID":"jas5469"},"content":"* **Alternative 2 :** Add a new interface `EditGroupMemberCommand()` to handle adding members to group."},{"lineNumber":896,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not require a new command to be created."},{"lineNumber":897,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation is less flexible."},{"lineNumber":898,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":899,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Delete Member From Group feature"},{"lineNumber":900,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":901,"author":{"gitID":"jas5469"},"content":"Fastis deletes a person from the existing contact list to an existing group."},{"lineNumber":902,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":903,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":904,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":905,"author":{"gitID":"jas5469"},"content":"The delete member from groups mechanism is facilitated by `DeleteMemberFromGroupCommand`, which resides inside `Logic` component."},{"lineNumber":906,"author":{"gitID":"jas5469"},"content":"It supports deleting a member to Group objects to the address book. `DeleteMemberFromGroupCommand` from `UndoableCommand`."},{"lineNumber":907,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":908,"author":{"gitID":"jas5469"},"content":"Hence, DeleteMemberFromGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":909,"author":{"gitID":"jas5469"},"content":"With the extra layer, the AddGroupCommand that is undoable is implemented this way:"},{"lineNumber":910,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":911,"author":{"gitID":"-"},"content":"----"},{"lineNumber":912,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":913,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":914,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":915,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":916,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":918,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":919,"author":{"gitID":"-"},"content":"}"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommand extends UndoableCommand {"},{"lineNumber":922,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":923,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":924,"author":{"gitID":"jas5469"},"content":"        // ... DeleteMemberFromGroup logic ..."},{"lineNumber":925,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":926,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":927,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":928,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":929,"author":{"gitID":"jas5469"},"content":"The list of members in the group list are facilitated by `Group` class. Each `Group` object have a `UniquePersonList` object, representing the list of persons in the group."},{"lineNumber":930,"author":{"gitID":"jas5469"},"content":"Address book stores all members added to the group using XmlAdaptedPersons as person object storage."},{"lineNumber":931,"author":{"gitID":"jas5469"},"content":"The `DeleteMemberFromGroupCommand` will retrieve the input, which is the index of the person of the last updated person list, and deletes that person from the list if the person exists in the `UniquePersonList` in the specified group."},{"lineNumber":932,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":933,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":934,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig34, Figure 34\u003e\u003e  shows the interaction of `DeleteMemberFromGroup` Command class."},{"lineNumber":935,"author":{"gitID":"jas5469"},"content":"[[fig34]]"},{"lineNumber":936,"author":{"gitID":"jas5469"},"content":".Class Diagram of `DeleteMemberFromGroup` Command."},{"lineNumber":937,"author":{"gitID":"jas5469"},"content":"image::dGMCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":938,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":939,"author":{"gitID":"jas5469"},"content":"The `DeleteMemberFromGroupCommand` is facilitated by `DeleteMemberFromGroupCommandParser` to parse `DeleteMemberFromGroupCommand`."},{"lineNumber":940,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig35, Figure 35\u003e\u003e  shows the flow of parsing of `DeleteMemberFromGroupCommand` object."},{"lineNumber":941,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":942,"author":{"gitID":"jas5469"},"content":"[[fig35]]"},{"lineNumber":943,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteMemberFromGroupCommandParser."},{"lineNumber":944,"author":{"gitID":"jas5469"},"content":"image::dGMParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":945,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":946,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig36, Figure 36\u003e\u003e diagram shows how the deleteMembersFromGroup operates."},{"lineNumber":947,"author":{"gitID":"jas5469"},"content":"[[fig36]]"},{"lineNumber":948,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteMemberFromGroupCommand."},{"lineNumber":949,"author":{"gitID":"jas5469"},"content":"image::dGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":950,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteMemberToGroupCommand`"},{"lineNumber":954,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `DeleteMemberFromGroupCommand()`"},{"lineNumber":955,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is easy for developers to modify method to suit what they want."},{"lineNumber":956,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":957,"author":{"gitID":"jas5469"},"content":"* **Alternative 2 :** Add a new interface `EditGroupMemberCommand()`."},{"lineNumber":958,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation does not require a new command to be created."},{"lineNumber":959,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation is less flexible."},{"lineNumber":960,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":961,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d List Group Members Feature"},{"lineNumber":962,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":963,"author":{"gitID":"jas5469"},"content":"Fastis lists all persons under the group keyed by user."},{"lineNumber":964,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":965,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":966,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":967,"author":{"gitID":"jas5469"},"content":"Fastis uses `ListGroupMembersCommand` ,which resides under `Logic` to facilitate the listing of members under the same"},{"lineNumber":968,"author":{"gitID":"jas5469"},"content":"group."},{"lineNumber":969,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":970,"author":{"gitID":"jas5469"},"content":"When user types in command line `listGroupMembers` or `lGM` , Fastis will use the keyword provided to search for the"},{"lineNumber":971,"author":{"gitID":"jas5469"},"content":"group and list out all members under the specified group in the `PersonListPanel`."},{"lineNumber":972,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":973,"author":{"gitID":"jas5469"},"content":"The `ListGroupMembersCommand` is facilitated by `ListGroupMembersCommandParser` to parse `ListGroupMembersCommand`."},{"lineNumber":974,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig37, Figure 37\u003e\u003e shows the flow of parsing of `ListGroupMembersCommand` object."},{"lineNumber":975,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":976,"author":{"gitID":"jas5469"},"content":"[[fig37]]"},{"lineNumber":977,"author":{"gitID":"jas5469"},"content":".Sequence diagram for ListGroupMemberCommandParser."},{"lineNumber":978,"author":{"gitID":"jas5469"},"content":"image::ParserlGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":979,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":980,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig38, Figure 38\u003e\u003e diagram shows how `ListGroupMembersCommand` operates."},{"lineNumber":981,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":982,"author":{"gitID":"jas5469"},"content":"[[fig38]]"},{"lineNumber":983,"author":{"gitID":"jas5469"},"content":".Sequence diagram for ListGroupMembers."},{"lineNumber":984,"author":{"gitID":"jas5469"},"content":"image::lGMSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":985,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `ListGroupMembersCommand`"},{"lineNumber":990,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Use a command to list out the members with same group."},{"lineNumber":991,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes the methods called by command easily modifiable."},{"lineNumber":992,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":993,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `ListGroupMembersCommand()`"},{"lineNumber":994,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy to edit `ListGroupMembersCommand()` easily to suit our needs"},{"lineNumber":995,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes it hard for new developers to understand the template pattern."},{"lineNumber":996,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":997,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Delete Group feature"},{"lineNumber":998,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":999,"author":{"gitID":"jas5469"},"content":"Fastis deletes a group named by the user from input."},{"lineNumber":1000,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1001,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1002,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1003,"author":{"gitID":"jas5469"},"content":"The delete groups mechanism is facilitated by `DeleteGroupCommand`, which resides inside `Logic` component. It supports deleting Group objects to the address book. DeleteGroupCommand inherits from `UndoableCommand`."},{"lineNumber":1004,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1005,"author":{"gitID":"jas5469"},"content":"Hence, DeleteGroupCommand can be undone using `UndoRedoStack`."},{"lineNumber":1006,"author":{"gitID":"jas5469"},"content":"With the extra layer, the DeleteGroupCommand that is undoable is implemented this way:"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1012,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":1021,"author":{"gitID":"jas5469"},"content":"        // ... DeleteGroup logic ..."},{"lineNumber":1022,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":1023,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":1024,"author":{"gitID":"jas5469"},"content":"----"},{"lineNumber":1025,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1026,"author":{"gitID":"jas5469"},"content":"The user executes a new `DeleteGroupCommand` with `Information`, to delete a existing group with the same information to the address book."},{"lineNumber":1027,"author":{"gitID":"jas5469"},"content":"The group is deleted from the `UniqueGroupList` and the current state of the address book is saved."},{"lineNumber":1028,"author":{"gitID":"jas5469"},"content":"Fastis will then handle `addressBookChangedEvent` and update command result."},{"lineNumber":1029,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1030,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig39, Figure 39\u003e\u003e shows the interaction of `DeleteGroup` Command class."},{"lineNumber":1031,"author":{"gitID":"jas5469"},"content":"[[fig39]]"},{"lineNumber":1032,"author":{"gitID":"jas5469"},"content":".Class Diagram of `DeleteGroup` Command."},{"lineNumber":1033,"author":{"gitID":"jas5469"},"content":"image::dGCommandClassDiagram.png[width:\"600\"]"},{"lineNumber":1034,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1035,"author":{"gitID":"jas5469"},"content":"The `DeleteGroupCommand` is facilitated by `DeleteGroupCommandParser` to parse `DeleteGroupCommand`."},{"lineNumber":1036,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig40, Figure 40\u003e\u003e shows the flow of parsing of `DeleteGroupCommand` object."},{"lineNumber":1037,"author":{"gitID":"jas5469"},"content":"[[fig40]]"},{"lineNumber":1038,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteGroupCommandParser."},{"lineNumber":1039,"author":{"gitID":"jas5469"},"content":"image::dGParserSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1040,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1041,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig41, Figure 41\u003e\u003e shows how the deleteGroup operation works:"},{"lineNumber":1042,"author":{"gitID":"jas5469"},"content":"[[fig41]]"},{"lineNumber":1043,"author":{"gitID":"jas5469"},"content":".Sequence diagram for DeleteGroupCommand."},{"lineNumber":1044,"author":{"gitID":"jas5469"},"content":"image::dGSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1045,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `DeleteGroupCommand`"},{"lineNumber":1049,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Add a new command method `deleteGroupCommand()`"},{"lineNumber":1050,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation makes it easy for developers to modify method to suit what they want"},{"lineNumber":1051,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires users and developers to remember more commands."},{"lineNumber":1052,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Add a new abstract method `executeDeleteGroupCommand()`"},{"lineNumber":1053,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation preserves `deleteGroup` functionality as it is now part of the default behaviour. Classes that deal with `DeleteGroupCommand` do not have to know that `executeDeleteGroupCommand()` exist."},{"lineNumber":1054,"author":{"gitID":"jas5469"},"content":"** Cons: This implemetation makes it hard for new developers to understand the template pattern."},{"lineNumber":1055,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1056,"author":{"gitID":"jas5469"},"content":"// end::addGroup[]"},{"lineNumber":1057,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1058,"author":{"gitID":"LeonidAgarth"},"content":"// tag::ChangeTagColor[]"},{"lineNumber":1059,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Tag Color feature"},{"lineNumber":1060,"author":{"gitID":"LeonidAgarth"},"content":"Fastis supports changing the color of the tags given to people in the address book. There are up to 17 colors to choose from."},{"lineNumber":1061,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1062,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1063,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1064,"author":{"gitID":"LeonidAgarth"},"content":"Changing a tag\u0027s color is facilitated by `ChangeTagColorCommand`, which resides inside `Logic` component."},{"lineNumber":1065,"author":{"gitID":"LeonidAgarth"},"content":"It supports modifying the `color` field within `Tag` objects."},{"lineNumber":1066,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1067,"author":{"gitID":"jas5469"},"content":"The flow of operation is shown the \u003c\u003cfig42, Figure 42\u003e\u003e below."},{"lineNumber":1068,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1069,"author":{"gitID":"jas5469"},"content":"[[fig42]]"},{"lineNumber":1070,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for `ChangeTagColor`.`"},{"lineNumber":1071,"author":{"gitID":"LeonidAgarth"},"content":"image::ChangeTagColorSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1072,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1073,"author":{"gitID":"LeonidAgarth"},"content":"`ChangeTagColorCommand` inherit from `UndoableCommand`, therefore it can be undone and redone using `UndoRedoStack`."},{"lineNumber":1074,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1075,"author":{"gitID":"LeonidAgarth"},"content":"The implementation of `ScheduleGroupCommand` is as follows:"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1077,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommand extends UndoableCommand {"},{"lineNumber":1088,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":1089,"author":{"gitID":"LeonidAgarth"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":1090,"author":{"gitID":"LeonidAgarth"},"content":"        // .. Get the tag\u0027s name and color from Model"},{"lineNumber":1091,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":1092,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":1095,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Update tag in Model ..."},{"lineNumber":1096,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Update Person list in Model ..."},{"lineNumber":1097,"author":{"gitID":"LeonidAgarth"},"content":"        // ... Return new CommandResult ..."},{"lineNumber":1098,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":1099,"author":{"gitID":"LeonidAgarth"},"content":"}"},{"lineNumber":1100,"author":{"gitID":"LeonidAgarth"},"content":"----"},{"lineNumber":1101,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1103,"author":{"gitID":"-"},"content":""},{"lineNumber":1104,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Colouring the tags"},{"lineNumber":1105,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1106,"author":{"gitID":"jas5469"},"content":"* **Alternative 1 (current choice):** Allow different tags with the same color"},{"lineNumber":1107,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation allows users to have more freedom."},{"lineNumber":1108,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation might result in aesthetically unpleasing GUI."},{"lineNumber":1109,"author":{"gitID":"jas5469"},"content":"* **Alternative 2:** Disallow different tags with the same color"},{"lineNumber":1110,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation is more intuitive."},{"lineNumber":1111,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation makes the code longer."},{"lineNumber":1112,"author":{"gitID":"LeonidAgarth"},"content":"// end::ChangeTagColor[]"},{"lineNumber":1113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1114,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1115,"author":{"gitID":"nhatquang3112"},"content":"// tag::addToDo[]"},{"lineNumber":1116,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d\u003d Add ToDo feature"},{"lineNumber":1117,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1118,"author":{"gitID":"jas5469"},"content":"Adds a to-do."},{"lineNumber":1119,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1120,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1121,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1122,"author":{"gitID":"nhatquang3112"},"content":"The add to-dos mechanism is facilitated by `AddToDoCommand`, which resides inside `Logic` component. It supports adding ToDo objects to the address book. AddToDoCommand inherits from `UndoableCommand`."},{"lineNumber":1123,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1124,"author":{"gitID":"nhatquang3112"},"content":"Hence, AddToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":1125,"author":{"gitID":"nhatquang3112"},"content":"With the extra layer, the AddToDoCommand that is undoable is implemented this way:"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommand extends UndoableCommand {"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"        // ... add to-do logic ..."},{"lineNumber":1141,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":1142,"author":{"gitID":"Isaaaca"},"content":"}"},{"lineNumber":1143,"author":{"gitID":"Isaaaca"},"content":"----"},{"lineNumber":1144,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":"The to-dos in the to-do list are facilitated by `ToDo` class. Each `ToDo` object have a `Content` object and a `Status` object, representing the content and status of the to-do."},{"lineNumber":1146,"author":{"gitID":"nhatquang3112"},"content":"Address book stores all to-dos in `UniqueToDoList`."},{"lineNumber":1147,"author":{"gitID":"jas5469"},"content":"`ToDo`,`Content` and `UniqueToDoList` class reside inside `AddressBook`. \u003c\u003cfig43,Figure 43\u003e\u003e is the class diagram showing the relationship between `ToDo`,`Content`, `Status`, `UniqueToDoList` and `AddressBook`:"},{"lineNumber":1148,"author":{"gitID":"jas5469"},"content":"[[fig43]]"},{"lineNumber":1149,"author":{"gitID":"jas5469"},"content":".Class Diagram for UniqueToDoList."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"image::AddressBookUniqueToDoListToDoClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":1151,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1152,"author":{"gitID":"jas5469"},"content":"On a smaller scale, \u003c\u003cfig44, Figure 44\u003e\u003e is a class diagram showing the relationship between `ToDo`,`Content` and `Status`:"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"jas5469"},"content":"[[fig44]]"},{"lineNumber":1155,"author":{"gitID":"jas5469"},"content":".Class Diagram for To-Do."},{"lineNumber":1156,"author":{"gitID":"-"},"content":"image::ToDoStatusContentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":1157,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1158,"author":{"gitID":"nhatquang3112"},"content":"Suppose that the user has just launched the application. The `UniqueToDoList` in the address book will be empty if no to-dos have been added previously."},{"lineNumber":1159,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1160,"author":{"gitID":"nhatquang3112"},"content":"The user executes a new `AddToDoCommand` with `Content`, to add a new to-do to the address book."},{"lineNumber":1161,"author":{"gitID":"-"},"content":"The `Status` of the to-do is \"undone\" by default."},{"lineNumber":1162,"author":{"gitID":"-"},"content":"The new to-do with content and status is added to the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":1163,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig45, Figure 45\u003e\u003e shows how the addToDo operation works:"},{"lineNumber":1164,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1165,"author":{"gitID":"jas5469"},"content":"[[fig45]]"},{"lineNumber":1166,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for addToDo."},{"lineNumber":1167,"author":{"gitID":"nhatquang3112"},"content":"image::AddToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"nhatquang3112"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `AddToDoCommand`"},{"lineNumber":1172,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Restrict the constructor of ToDo to be ToDo(Content content, Status status)`"},{"lineNumber":1174,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation allows ToDo class to be easier to maintain and debug."},{"lineNumber":1175,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation requires extensive refactor of existing tests."},{"lineNumber":1176,"author":{"gitID":"nhatquang3112"},"content":"// end::addToDo[]"},{"lineNumber":1177,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"// tag::checkToDo[]"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Check/UnCheck ToDo feature"},{"lineNumber":1180,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1181,"author":{"gitID":"jas5469"},"content":"Checks or unchecks a To-do"},{"lineNumber":1182,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1183,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"nhatquang3112"},"content":"The check/uncheck to-dos mechanism is facilitated by `CheckToDoCommand` and `UnCheckToDoCommand`, which resides inside `Logic` component. It supports modifying Status objects within ToDo objects. CheckToDoCommand and UnCheckToDoCommand inherit from `UndoableCommand`."},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"Hence, CheckToDoCommand and UnCheckToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"Similar to `Content` object, each `ToDo` object have a `Status` object, representing the status of the to-do."},{"lineNumber":1190,"author":{"gitID":"-"},"content":"The status of a to-do can be either `done` or `undone`."},{"lineNumber":1191,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1192,"author":{"gitID":"-"},"content":"When user check/uncheck an existing to-do of specific `Index`, a new `ToDo` is created, with the existing `ToDo`\u0027s `Content` and appropriate new `Status`."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"The existing to-do is replaced by the new to-do in the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":1195,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig46, Figure 46\u003e\u003e shows how the checkToDo operation works:"},{"lineNumber":1196,"author":{"gitID":"jas5469"},"content":"[[fig46]]"},{"lineNumber":1197,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for checkToDo."},{"lineNumber":1198,"author":{"gitID":"-"},"content":"image::CheckToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig47, Figure 47\u003e\u003e shows how the unCheckToDo operation works:"},{"lineNumber":1201,"author":{"gitID":"jas5469"},"content":"[[fig47]]"},{"lineNumber":1202,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for unCheckToDo."},{"lineNumber":1203,"author":{"gitID":"-"},"content":"image::UnCheckToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1204,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `CheckToDoCommand` and `UnCheckToDoCommand`"},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new method `setStatus(Status newStatus)` in `ToDo`"},{"lineNumber":1210,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation do not require a new `ToDo` object to be created to replace the existing to-do."},{"lineNumber":1211,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation does not follow the Single Responsibility Principle."},{"lineNumber":1212,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1213,"author":{"gitID":"Isaaaca"},"content":"// end::checkToDo[]"},{"lineNumber":1214,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"// tag::editToDo[]"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Edit ToDo feature"},{"lineNumber":1217,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1218,"author":{"gitID":"jas5469"},"content":"Edits a To-do."},{"lineNumber":1219,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1220,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1221,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"The edit to-dos mechanism is facilitated by `EditToDoCommand`, which resides inside `Logic` component. It supports modifying Content objects within ToDo objects. EditToDoCommand inherit from `UndoableCommand`."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"Hence, EditToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":"When user edit an existing to-do of specific `Index`, a new `ToDo` is created, with the new `Content` and a new `Status` of \"undone\" value."},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"The existing to-do is replaced by the new to-do in the `UniqueToDoList` and the current state of the address book is saved."},{"lineNumber":1229,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig48, Figure 48\u003e\u003e shows how the editToDo operation works:"},{"lineNumber":1230,"author":{"gitID":"jas5469"},"content":"[[fig48]]"},{"lineNumber":1231,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for EditToDo."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"image::EditToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1233,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1234,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `EditToDoCommand`"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new method `setContentAndStatus(Content content, Status newStatus)` in `ToDo`"},{"lineNumber":1239,"author":{"gitID":"jas5469"},"content":"** Pros: This implementation do not require a new `ToDo` object to be created to replace the existing to-do."},{"lineNumber":1240,"author":{"gitID":"jas5469"},"content":"** Cons: This implementation does not follow the Single Responsibility Principle."},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"// end::editToDo[]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"-"},"content":"// tag::deleteToDo[]"},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete ToDo feature"},{"lineNumber":1246,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1247,"author":{"gitID":"jas5469"},"content":"Deletes a To-Do."},{"lineNumber":1248,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1249,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1250,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"The delete to-dos mechanism is facilitated by `DeleteToDoCommand`, which resides inside `Logic` component. It supports deleting ToDo objects. DeleteToDoCommand inherit from `UndoableCommand`."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"Hence, DeleteToDoCommand can be undone using `UndoRedoStack`."},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"When user delete an existing to-do of specific `Index`, the `UniqueToDoList` within `AddressBook` is updated and stored in the `StorageManager`."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"jas5469"},"content":"\u003c\u003cfig49, Figure 49\u003e\u003e shows how the deleteToDo operation works:"},{"lineNumber":1258,"author":{"gitID":"jas5469"},"content":"[[fig49]]"},{"lineNumber":1259,"author":{"gitID":"jas5469"},"content":".Sequence Diagram for DeleteToDo."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"image::DeleteToDoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"// end::deleteToDo[]"},{"lineNumber":1263,"author":{"gitID":"-"},"content":""},{"lineNumber":1264,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1265,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1266,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1267,"author":{"gitID":"jas5469"},"content":"Fastis uses the `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations:"},{"lineNumber":1268,"author":{"gitID":"-"},"content":""},{"lineNumber":1269,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"jas5469"},"content":"Listed below are the different logging levels:"},{"lineNumber":1274,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1275,"author":{"gitID":"jas5469"},"content":"* `SEVERE` : Critical problems detected which may possibly cause the termination of the application"},{"lineNumber":1276,"author":{"gitID":"jas5469"},"content":"* `WARNING` : Non-Critical problems that allows the application to continue, but with caution"},{"lineNumber":1277,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"jas5469"},"content":"This section provides necessary information for developers to edit and publish related documentations, such as User Guide and Developer Guide, for Fastis."},{"lineNumber":1288,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1289,"author":{"gitID":"jas5469"},"content":"Fastis uses asciidoc for documentation."},{"lineNumber":1290,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1293,"author":{"gitID":"jas5469"},"content":"Asciidoc is chosen over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Editing documentation"},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1298,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Publishing documentation"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1303,"author":{"gitID":"-"},"content":""},{"lineNumber":1304,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Converting documentation to PDF format"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"jas5469"},"content":"The project uses https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1311,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1312,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1313,"author":{"gitID":"jas5469"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"jas5469"},"content":"This section documents how to run the tests on Fastis."},{"lineNumber":1322,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1323,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Running tests"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"jas5469"},"content":"*Method 1: Using Gradle in headless mode (recommended)*"},{"lineNumber":1329,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1330,"author":{"gitID":"jas5469"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1331,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1332,"author":{"gitID":"jas5469"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1333,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1334,"author":{"gitID":"jas5469"},"content":"[TIP]"},{"lineNumber":1335,"author":{"gitID":"jas5469"},"content":"The above-mentioned method is the most reliable. The other two listed below might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"jas5469"},"content":"Using Gradle without the headless mode will cause GUI tests to show up on screen. The test functions will simulate mouse movement and keyboard keystrokes, and tests might fail if you move your mouse or type anything on the keyboard. Thus during the GUI tests it is recommended that you leave your machine alone."},{"lineNumber":1340,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1341,"author":{"gitID":"jas5469"},"content":"To run the tests, open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"jas5469"},"content":"*Method 3: Using IntelliJ JUnit test runner*"},{"lineNumber":1347,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1348,"author":{"gitID":"jas5469"},"content":"Using this method, GUI tests will also show up on screen, and will require you to stop mouse and keyboard activity in order to run successfully."},{"lineNumber":1349,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1350,"author":{"gitID":"jas5469"},"content":"This method requires you to have the project open on IntelliJ:"},{"lineNumber":1351,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1352,"author":{"gitID":"jas5469"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1353,"author":{"gitID":"jas5469"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"jas5469"},"content":"Fastis has two types of tests:"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1361,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1362,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1363,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1369,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Troubleshooting testing"},{"lineNumber":1373,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1376,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1377,"author":{"gitID":"-"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1379,"author":{"gitID":"-"},"content":""},{"lineNumber":1380,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Build automation"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Continuous integration"},{"lineNumber":1385,"author":{"gitID":"-"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Coverage reporting"},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1391,"author":{"gitID":"-"},"content":""},{"lineNumber":1392,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Documentation previews"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Making a release"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1400,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1401,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1402,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Managing dependencies"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1408,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1409,"author":{"gitID":"-"},"content":""},{"lineNumber":1410,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1411,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"LeonidAgarth"},"content":"*Target user profile*: NUS students with group projects that:"},{"lineNumber":1415,"author":{"gitID":"-"},"content":""},{"lineNumber":1416,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1417,"author":{"gitID":"LeonidAgarth"},"content":"* Have a number of events to keep track of. For example:"},{"lineNumber":1418,"author":{"gitID":"LeonidAgarth"},"content":"** Group meetings,"},{"lineNumber":1419,"author":{"gitID":"LeonidAgarth"},"content":"** Career Fair,"},{"lineNumber":1420,"author":{"gitID":"LeonidAgarth"},"content":"** Interviews,"},{"lineNumber":1421,"author":{"gitID":"LeonidAgarth"},"content":"** Consultations,"},{"lineNumber":1422,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1423,"author":{"gitID":"LeonidAgarth"},"content":"etc."},{"lineNumber":1424,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1425,"author":{"gitID":"LeonidAgarth"},"content":"* Prefer desktop apps over other types."},{"lineNumber":1426,"author":{"gitID":"LeonidAgarth"},"content":"* Can type fast."},{"lineNumber":1427,"author":{"gitID":"LeonidAgarth"},"content":"* Prefer typing over mouse input."},{"lineNumber":1428,"author":{"gitID":"LeonidAgarth"},"content":"* Are reasonably comfortable using CLI apps."},{"lineNumber":1429,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1430,"author":{"gitID":"LeonidAgarth"},"content":"*Value proposition*: Help students manage the humongous amount of events that they might have."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"LeonidAgarth"},"content":"*Feature contribution:*"},{"lineNumber":1433,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1434,"author":{"gitID":"LeonidAgarth"},"content":"* Personal To-do list (MAJOR):"},{"lineNumber":1435,"author":{"gitID":"LeonidAgarth"},"content":"** User can add to-dos, notes, upcoming tasks and organize them in a to-do list."},{"lineNumber":1436,"author":{"gitID":"LeonidAgarth"},"content":"** To-do list serves to remind the user of important tasks, events in group projects."},{"lineNumber":1437,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1438,"author":{"gitID":"LeonidAgarth"},"content":"* Meetup Time Generator (MAJOR):"},{"lineNumber":1439,"author":{"gitID":"LeonidAgarth"},"content":"** Generator parses information from persons\u0027 NUSMods timetables and generate a suitable project meetup time."},{"lineNumber":1440,"author":{"gitID":"LeonidAgarth"},"content":"** Meetup Time Generator allows user to quickly decide meetup time without manually checking timetables."},{"lineNumber":1441,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1442,"author":{"gitID":"LeonidAgarth"},"content":"* Meetup Calendar (MAJOR):"},{"lineNumber":1443,"author":{"gitID":"LeonidAgarth"},"content":"** User can add meetups with specific start, end time and display meetups on the calendar."},{"lineNumber":1444,"author":{"gitID":"LeonidAgarth"},"content":"** Meetup Calendar allows user to visualise and remember upcoming group events/meetups."},{"lineNumber":1445,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1446,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1447,"author":{"gitID":"LeonidAgarth"},"content":"* Organize persons in groups (MAJOR):"},{"lineNumber":1448,"author":{"gitID":"LeonidAgarth"},"content":"** User can store specific persons in project groups."},{"lineNumber":1449,"author":{"gitID":"LeonidAgarth"},"content":"** User can have a group list and display persons in each group."},{"lineNumber":1450,"author":{"gitID":"LeonidAgarth"},"content":"** Groups allows user to manage persons based on the project groups they belongs to."},{"lineNumber":1451,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1452,"author":{"gitID":"LeonidAgarth"},"content":"* Detail field for a person (Minor):"},{"lineNumber":1453,"author":{"gitID":"LeonidAgarth"},"content":"** Details for a person are additional information such as remark, hobbies, comments, etc."},{"lineNumber":1454,"author":{"gitID":"LeonidAgarth"},"content":"** Detail allows user to add information that does not fall under categories such as phone, email, etc."},{"lineNumber":1455,"author":{"gitID":"LeonidAgarth"},"content":"** Detail allows storing person information to become more flexible."},{"lineNumber":1456,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1457,"author":{"gitID":"LeonidAgarth"},"content":"* Timetable link field for a person (Minor):"},{"lineNumber":1458,"author":{"gitID":"LeonidAgarth"},"content":"** Timetable link for person is an NUSMods website link."},{"lineNumber":1459,"author":{"gitID":"LeonidAgarth"},"content":"** Timetable link displays the actual link of NUSMods website shown when a person is selected."},{"lineNumber":1460,"author":{"gitID":"LeonidAgarth"},"content":"** Timetable link allows the user to manage NUSMods link of a person."},{"lineNumber":1461,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1462,"author":{"gitID":"LeonidAgarth"},"content":"* Customizable tags\u0027 color (Minor):"},{"lineNumber":1463,"author":{"gitID":"LeonidAgarth"},"content":"** User can set color of specific tags."},{"lineNumber":1464,"author":{"gitID":"LeonidAgarth"},"content":"** Customizable tags\u0027 color allows user to better personalise the application."},{"lineNumber":1465,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1466,"author":{"gitID":"LeonidAgarth"},"content":"* Dark color theme for application bar and background (Minor):"},{"lineNumber":1467,"author":{"gitID":"LeonidAgarth"},"content":"** Application bar and background are changed to dark grey color."},{"lineNumber":1468,"author":{"gitID":"LeonidAgarth"},"content":"** Dark color theme makes the application comfortable to use in different light conditions."},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1471,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1472,"author":{"gitID":"-"},"content":""},{"lineNumber":1473,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1476,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1478,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student with group project |Add person with project group tag |I know which person belongs to which project groups"},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student that is finished with a group project |Delete the group tag of a finished group project| I will not see the group in the application anymore"},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who forget teammates’ information |Find a person by name|I can find out more details of the person such as location, contact number"},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who made a mistake in recording a group tag |Edit a person’s group tag|I can change the group tag accordingly"},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who recorded the wrong personal information |Edit a person|I can correct the details of the person"},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who wants to know which teammates are in the project group |Print out the list of teammates under the same group tag |I know which teammates I am meeting"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student with arranged meet-ups  |Add meet-ups with title, time, venue to the calendar |Have the summary of upcoming meet-ups in a quick glance"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student using CLI |Press up button to copy the previous command|I do not need to retype duplicate commands"},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student that is involved with multiple groups |search events by its title|I can get details of a particular meet-up"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who wants to arrange meet-ups |Search meet-ups by its title|I can get details such as time and place of a particular meet-up"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student adding teammates’ information |Add the link to teammates’ timetable |I can see teammates’ timetables to arrange meet-ups"},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student working with new teammates |Add their contact information |I can contact them if the need arises"},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"LeonidAgarth"},"content":"|`* * *` |user |add info of the members involved in events|So that I know who I would need to talk to"},{"lineNumber":1503,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1504,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student first time using the application |See the usage instructions |Learn how to use the application"},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who have unused contacts |Delete a teammate from the application |I can free up storage for my application"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"jas5469"},"content":"|`* * *` |Busy student with busy schedule |Have a reminder of the upcoming project meeting |I can be reminded of impending project with the details of group members printed on it"},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who created a group |Show teammates from a group |I can see the information of the teammates from the group"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who has multiple group projects |Retrieve a list of all my groups |I can see all my groups at once"},{"lineNumber":1513,"author":{"gitID":"-"},"content":""},{"lineNumber":1514,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who is finished with a project |Delete everyone in a group in one go |I do not have to delete contacts one by one"},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"jas5469"},"content":"|`* * *` |Student who is too lazy to type |Use a shorter version of a command |Use the app faster"},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"jas5469"},"content":"|`* *` |Student who wants to know the location of teammates |Find the location of teammates’ address via google maps |Decide on a appropriate meeting location for all teammates considering their home address"},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"jas5469"},"content":"|`* *` |Student that does not leave applications open |See an overview of the week’s meetup right away when the application opens |Do not have to type in any commands when I first open the application"},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"jas5469"},"content":"|`* *` |Student who would like different colours tag for different projects |Have customizable coloured tags for different groups |Easily differentiate the groups via colour tags"},{"lineNumber":1523,"author":{"gitID":"-"},"content":""},{"lineNumber":1524,"author":{"gitID":"jas5469"},"content":"|`* *` |User with accessibility problems |Increase the font size of the application |I can read and see more easily"},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"jas5469"},"content":"|`*` |Student who is too lazy to eyeball through the timetables |Have an appropriate meet-up time generated for a group |I do not have to manually come up with time for meetup"},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"LeonidAgarth"},"content":"|`*` |Student who uses NUSMods |Use my NUSMods link to add my schedule into Fastis |I don’t have to manually input my timetable"},{"lineNumber":1529,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1530,"author":{"gitID":"jas5469"},"content":"|`*` |Students who likes other colours on the interface |Change color scheme |Personalise the app"},{"lineNumber":1531,"author":{"gitID":"-"},"content":""},{"lineNumber":1532,"author":{"gitID":"LeonidAgarth"},"content":"|`*` |Student who wants to call an absent teammate |Open teammates’ Whatsapp page within the application e |I can alert teammates of the meeting"},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"jas5469"},"content":"|`*` |Student who do not how to reach the destination of the meet-up |Have the venue of the meet-up shown on google map |I can know the direction to the meetup"},{"lineNumber":1535,"author":{"gitID":"-"},"content":""},{"lineNumber":1536,"author":{"gitID":"LeonidAgarth"},"content":"|`*` |user |find the road that travels the shortest distance to the location of event|So that I can rely on the, map while driving"},{"lineNumber":1537,"author":{"gitID":"-"},"content":""},{"lineNumber":1538,"author":{"gitID":"-"},"content":"|`*` |user |link an event with another |So that events that are related can be linked together so that i know which events are related"},{"lineNumber":1539,"author":{"gitID":"-"},"content":""},{"lineNumber":1540,"author":{"gitID":"LeonidAgarth"},"content":"|`*` |user |play music from address book |So that I can listen to music i want"},{"lineNumber":1541,"author":{"gitID":"-"},"content":""},{"lineNumber":1542,"author":{"gitID":"-"},"content":"|`*` |user |play videos from youtube |So that I can watch videos i want"},{"lineNumber":1543,"author":{"gitID":"-"},"content":""},{"lineNumber":1544,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1545,"author":{"gitID":"-"},"content":""},{"lineNumber":1546,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1547,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1548,"author":{"gitID":"-"},"content":""},{"lineNumber":1549,"author":{"gitID":"Isaaaca"},"content":"(For all use cases below, the *System* is the `Fastis` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1550,"author":{"gitID":"-"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1552,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: Add an event"},{"lineNumber":1553,"author":{"gitID":"-"},"content":""},{"lineNumber":1554,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1555,"author":{"gitID":"-"},"content":""},{"lineNumber":1556,"author":{"gitID":"LeonidAgarth"},"content":"1.  User requests to add an event by entering information."},{"lineNumber":1557,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis adds the event to the calendar."},{"lineNumber":1558,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1559,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1560,"author":{"gitID":"-"},"content":""},{"lineNumber":1561,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1564,"author":{"gitID":"Isaaaca"},"content":"* 2a. Meet up clashes with an existing event."},{"lineNumber":1565,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1566,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1567,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis still adds the event, but it\u0027s not shown in the calendar."},{"lineNumber":1568,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1569,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1570,"author":{"gitID":"-"},"content":""},{"lineNumber":1571,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1572,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: Add a person into a group"},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1575,"author":{"gitID":"-"},"content":""},{"lineNumber":1576,"author":{"gitID":"Isaaaca"},"content":"1. User requests to list all persons."},{"lineNumber":1577,"author":{"gitID":"Isaaaca"},"content":"2. Fastis shows all persons, listed with an index."},{"lineNumber":1578,"author":{"gitID":"LeonidAgarth"},"content":"3. User requests to add a person, specified by an index, to a group, specified by name."},{"lineNumber":1579,"author":{"gitID":"LeonidAgarth"},"content":"4. Fastis adds the specified person to the specified group."},{"lineNumber":1580,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1581,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1582,"author":{"gitID":"-"},"content":""},{"lineNumber":1583,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1584,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1585,"author":{"gitID":"LeonidAgarth"},"content":"* 2a. Index given is invalid."},{"lineNumber":1586,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1587,"author":{"gitID":"Isaaaca"},"content":"** 2a1. Fastis notifies user that the index given was invalid."},{"lineNumber":1588,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1592,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. There is no such group in Fastis."},{"lineNumber":1593,"author":{"gitID":"Isaaaca"},"content":"+"},{"lineNumber":1594,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":1595,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis notifies the user that no group was found."},{"lineNumber":1596,"author":{"gitID":"Isaaaca"},"content":"+"},{"lineNumber":1597,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1598,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1599,"author":{"gitID":"Isaaaca"},"content":"[discrete]"},{"lineNumber":1600,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: List all persons"},{"lineNumber":1601,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1602,"author":{"gitID":"Isaaaca"},"content":"*MSS*"},{"lineNumber":1603,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":1604,"author":{"gitID":"LeonidAgarth"},"content":"1.  User requests to list all persons in Fastis."},{"lineNumber":1605,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis lists all persons."},{"lineNumber":1606,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1607,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1608,"author":{"gitID":"-"},"content":""},{"lineNumber":1609,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1610,"author":{"gitID":"-"},"content":""},{"lineNumber":1611,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1612,"author":{"gitID":"Isaaaca"},"content":"* 2a. The persons list is empty."},{"lineNumber":1613,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1614,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1615,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis shows an empty list."},{"lineNumber":1616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1617,"author":{"gitID":"Isaaaca"},"content":"Use case ends."},{"lineNumber":1618,"author":{"gitID":"-"},"content":""},{"lineNumber":1619,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1620,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: Delete a person from a group"},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1623,"author":{"gitID":"-"},"content":""},{"lineNumber":1624,"author":{"gitID":"Isaaaca"},"content":"1. User requests to list all persons."},{"lineNumber":1625,"author":{"gitID":"Isaaaca"},"content":"2. Fastis shows all persons, listed with an index."},{"lineNumber":1626,"author":{"gitID":"LeonidAgarth"},"content":"1. User requests to delete a person, specified by an index, from a group, specified by name."},{"lineNumber":1627,"author":{"gitID":"LeonidAgarth"},"content":"2. Fastis deletes the specified person from the specified group, and notifies the user."},{"lineNumber":1628,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1629,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1630,"author":{"gitID":"-"},"content":""},{"lineNumber":1631,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1632,"author":{"gitID":"-"},"content":""},{"lineNumber":1633,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1634,"author":{"gitID":"Isaaaca"},"content":"* 2a. There is no such group in Fastis."},{"lineNumber":1635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1637,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis notifies the user that no group was found."},{"lineNumber":1638,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":1642,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. The specified person is not in that group."},{"lineNumber":1643,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1644,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1645,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis notifies the user that there is no such person in the group specified."},{"lineNumber":1646,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1647,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1650,"author":{"gitID":"Isaaaca"},"content":"\u003d\u003d\u003d Use case: Show a person\u0027s timetable"},{"lineNumber":1651,"author":{"gitID":"-"},"content":""},{"lineNumber":1652,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1653,"author":{"gitID":"-"},"content":""},{"lineNumber":1654,"author":{"gitID":"LeonidAgarth"},"content":"1.  User selects a person, either by `select` command or by clicking on the person in the person list panel."},{"lineNumber":1655,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis shows the timetable for the person."},{"lineNumber":1656,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1658,"author":{"gitID":"-"},"content":""},{"lineNumber":1659,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1660,"author":{"gitID":"-"},"content":""},{"lineNumber":1661,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1662,"author":{"gitID":"Isaaaca"},"content":"* 2a. The specified person has no timetable"},{"lineNumber":1663,"author":{"gitID":"Isaaaca"},"content":"[none]"},{"lineNumber":1664,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis shows an empty timetable"},{"lineNumber":1665,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1666,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1667,"author":{"gitID":"-"},"content":""},{"lineNumber":1668,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1669,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Use case: Print out all groupmates in the same group"},{"lineNumber":1670,"author":{"gitID":"-"},"content":""},{"lineNumber":1671,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"LeonidAgarth"},"content":"1.  User requests to list the groupmates for a group, specified by name."},{"lineNumber":1674,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis lists all members in that group in the person list panel."},{"lineNumber":1675,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1677,"author":{"gitID":"-"},"content":""},{"lineNumber":1678,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1679,"author":{"gitID":"-"},"content":""},{"lineNumber":1680,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1681,"author":{"gitID":"Isaaaca"},"content":"* 2a. There is no such group in Fastis."},{"lineNumber":1682,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1683,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1684,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis notifies the user that no group was found."},{"lineNumber":1685,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1686,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1687,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1688,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":1689,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. There are no people in that group."},{"lineNumber":1690,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1691,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":1692,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis shows an empty list."},{"lineNumber":1693,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1695,"author":{"gitID":"-"},"content":""},{"lineNumber":1696,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1697,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Help"},{"lineNumber":1698,"author":{"gitID":"-"},"content":""},{"lineNumber":1699,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1700,"author":{"gitID":"-"},"content":""},{"lineNumber":1701,"author":{"gitID":"LeonidAgarth"},"content":"1.  User requests to see the help panel."},{"lineNumber":1702,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis shows the help panel in a separate window."},{"lineNumber":1703,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1704,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1705,"author":{"gitID":"-"},"content":""},{"lineNumber":1706,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1707,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Copy Previous Command"},{"lineNumber":1708,"author":{"gitID":"-"},"content":""},{"lineNumber":1709,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1710,"author":{"gitID":"-"},"content":""},{"lineNumber":1711,"author":{"gitID":"LeonidAgarth"},"content":"1.  User enters keystroke to navigate to previously entered command."},{"lineNumber":1712,"author":{"gitID":"LeonidAgarth"},"content":"2.  Fastis copies the previous command into the input field."},{"lineNumber":1713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"LeonidAgarth"},"content":"[discrete]"},{"lineNumber":1717,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Use case: Change Tag Color"},{"lineNumber":1718,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1719,"author":{"gitID":"LeonidAgarth"},"content":"*MSS*"},{"lineNumber":1720,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1721,"author":{"gitID":"LeonidAgarth"},"content":"1. User enters a command to change a specific tag color."},{"lineNumber":1722,"author":{"gitID":"LeonidAgarth"},"content":"2. Fastis changes the color accordingly and displays it."},{"lineNumber":1723,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1724,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1727,"author":{"gitID":"-"},"content":""},{"lineNumber":1728,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1729,"author":{"gitID":"LeonidAgarth"},"content":"* 2a. The tag specified doesn\u0027t exist within the address book."},{"lineNumber":1730,"author":{"gitID":"LeonidAgarth"},"content":"** 2a1. Fastis notifies the user."},{"lineNumber":1731,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1732,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1733,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1734,"author":{"gitID":"LeonidAgarth"},"content":"[none]"},{"lineNumber":1735,"author":{"gitID":"LeonidAgarth"},"content":"* 3a. The color specified is not supported by Fastis."},{"lineNumber":1736,"author":{"gitID":"LeonidAgarth"},"content":"** 3a1. Fastis notifies the user."},{"lineNumber":1737,"author":{"gitID":"LeonidAgarth"},"content":"+"},{"lineNumber":1738,"author":{"gitID":"LeonidAgarth"},"content":"Use case ends."},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1741,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1742,"author":{"gitID":"-"},"content":""},{"lineNumber":1743,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1744,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1745,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1746,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be usable without the need of a mouse."},{"lineNumber":1747,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be usable solely via a command line interface."},{"lineNumber":1748,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should respond within 2 seconds."},{"lineNumber":1749,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should have an easy to follow user guide."},{"lineNumber":1750,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should open the help page when user enters an invalid entry."},{"lineNumber":1751,"author":{"gitID":"LeonidAgarth"},"content":".  Fastis should be possible to fixed and debugged in the event of malfunction."},{"lineNumber":1752,"author":{"gitID":"-"},"content":""},{"lineNumber":1753,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1754,"author":{"gitID":"-"},"content":""},{"lineNumber":1755,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1756,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"jas5469"},"content":"[[abstraction]] Abstraction::"},{"lineNumber":1759,"author":{"gitID":"jas5469"},"content":"In Object-oriented Programming, abstraction is the mechanism by which users are provided with only the functionality, and not the implementation details."},{"lineNumber":1760,"author":{"gitID":"jas5469"},"content":"So, abstraction provides users with information on what an object does, rather than how it does it."},{"lineNumber":1761,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1762,"author":{"gitID":"LeonidAgarth"},"content":"[[gui]] GUI::"},{"lineNumber":1763,"author":{"gitID":"LeonidAgarth"},"content":"Acronym for Graphical User Interface. It is an interface (through which humans to interact with computers) that uses windows, icons and menus and which can be manipulated by a mouse and a keyboard. +"},{"lineNumber":1764,"author":{"gitID":"LeonidAgarth"},"content":"GUI is used predominantly in Windows and iOS applications, including Fastis."},{"lineNumber":1765,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1766,"author":{"gitID":"jas5469"},"content":"[[cli]] CLI::"},{"lineNumber":1767,"author":{"gitID":"jas5469"},"content":"Acronym for Command Line Interface. It is a purely text-based interface for software."},{"lineNumber":1768,"author":{"gitID":"jas5469"},"content":"User respond to visual prompts by typing single commands into the interface and receive results as text as well."},{"lineNumber":1769,"author":{"gitID":"jas5469"},"content":"An example of CLI would be MS-DOS."},{"lineNumber":1770,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1771,"author":{"gitID":"LeonidAgarth"},"content":"[[todo]] To-do::"},{"lineNumber":1772,"author":{"gitID":"LeonidAgarth"},"content":"An objective that must be met by the user. May or may not have deadlines."},{"lineNumber":1773,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1774,"author":{"gitID":"LeonidAgarth"},"content":"[[event]] Event::"},{"lineNumber":1775,"author":{"gitID":"LeonidAgarth"},"content":"A set of scheduled activity that user needs to attend at a specific time +"},{"lineNumber":1776,"author":{"gitID":"LeonidAgarth"},"content":"E.g. Interviews, parties, CCAs, talks, coding challenges, assignments, etc."},{"lineNumber":1777,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1779,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"jas5469"},"content":"[[member]] Member::"},{"lineNumber":1782,"author":{"gitID":"LeonidAgarth"},"content":"A person in the address book."},{"lineNumber":1783,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1784,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1785,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1786,"author":{"gitID":"-"},"content":""},{"lineNumber":1787,"author":{"gitID":"jas5469"},"content":"[[UI]] User Interface::"},{"lineNumber":1788,"author":{"gitID":"jas5469"},"content":"The means by which the user and a computer system interact, in particular the use of input devices and software."},{"lineNumber":1789,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1790,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1791,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1792,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1793,"author":{"gitID":"-"},"content":""},{"lineNumber":1794,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1801,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1802,"author":{"gitID":"-"},"content":""},{"lineNumber":1803,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1804,"author":{"gitID":"-"},"content":""},{"lineNumber":1805,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1806,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1807,"author":{"gitID":"-"},"content":""},{"lineNumber":1808,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1809,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1810,"author":{"gitID":"-"},"content":""},{"lineNumber":1811,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1815,"author":{"gitID":"-"},"content":""},{"lineNumber":1816,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1817,"author":{"gitID":"-"},"content":""},{"lineNumber":1818,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1819,"author":{"gitID":"-"},"content":""},{"lineNumber":1820,"author":{"gitID":"LeonidAgarth"},"content":".. Download the .jar file and copy into an empty folder"},{"lineNumber":1821,"author":{"gitID":"LeonidAgarth"},"content":".. Double-click the .jar file +"},{"lineNumber":1822,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Fastis shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1823,"author":{"gitID":"-"},"content":""},{"lineNumber":1824,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1825,"author":{"gitID":"-"},"content":""},{"lineNumber":1826,"author":{"gitID":"LeonidAgarth"},"content":".. Resize the window to an optimum size, preferably to maximum size. Move the window to a different location. Close the window."},{"lineNumber":1827,"author":{"gitID":"LeonidAgarth"},"content":".. Re-launch the app by double-clicking the .jar file. +"},{"lineNumber":1828,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: The most recent window size and location are retained."},{"lineNumber":1829,"author":{"gitID":"-"},"content":""},{"lineNumber":1830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1831,"author":{"gitID":"-"},"content":""},{"lineNumber":1832,"author":{"gitID":"LeonidAgarth"},"content":"Deleting a person while all persons are listed"},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: All persons are listed using the `list` command. Multiple persons exist in the list."},{"lineNumber":1835,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `delete 1` +"},{"lineNumber":1836,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact are shown in the result display box. Timestamp of the last update in the status bar is updated."},{"lineNumber":1837,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `delete 0` +"},{"lineNumber":1838,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No person is deleted. Error details are shown in the result display box. Status bar remains the same."},{"lineNumber":1839,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect delete commands to try: `delete John`, `delete x` (where `x` is larger than the list size) _{give more}_ +"},{"lineNumber":1840,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Adding a person"},{"lineNumber":1843,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1844,"author":{"gitID":"LeonidAgarth"},"content":"Adding a person specified by the command line input with required person prefixes."},{"lineNumber":1845,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1846,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 l/http://modsn.us/MYwiD d/Likes tennis t/friends t/owesMoney` +"},{"lineNumber":1847,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: A new person named John Doe is added to Fastis. Details of person added are shown in the result display box."},{"lineNumber":1848,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `add p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 l/http://modsn.us/MYwiD d/Likes tennis t/friends t/owesMoney` +"},{"lineNumber":1849,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No person is added. Essential `NAME` field is missing. Error details are displayed in result display box."},{"lineNumber":1850,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect add commands to try: `add`, `add x` (where x is any input) +"},{"lineNumber":1851,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1852,"author":{"gitID":"-"},"content":""},{"lineNumber":1853,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a to-do"},{"lineNumber":1854,"author":{"gitID":"-"},"content":""},{"lineNumber":1855,"author":{"gitID":"-"},"content":"Adding a to-do with content specified by the command line input."},{"lineNumber":1856,"author":{"gitID":"-"},"content":""},{"lineNumber":1857,"author":{"gitID":"-"},"content":". Prerequisites: To-do with the content specified by user must not already be in Fastis."},{"lineNumber":1858,"author":{"gitID":"-"},"content":". Test case: `addToDo Do homework` +"},{"lineNumber":1859,"author":{"gitID":"-"},"content":"   Expected: New to-do with content `Do homework` will be added to Fastis. Successful adding of to-do `Do homework` will be reflected in the result display box."},{"lineNumber":1860,"author":{"gitID":"-"},"content":". Test case: `addToDo Submit assignment - + -` +"},{"lineNumber":1861,"author":{"gitID":"-"},"content":"   Expected: No to-do is added. To-do content must be alphanumeric. Error details are displayed in the result display box."},{"lineNumber":1862,"author":{"gitID":"-"},"content":". Other incorrect commands: `addToDo Submit assignment!` +"},{"lineNumber":1863,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1864,"author":{"gitID":"-"},"content":". To-do `Do homework` already existed. +"},{"lineNumber":1865,"author":{"gitID":"-"},"content":"   Test case: `addToDo Do homework` +"},{"lineNumber":1866,"author":{"gitID":"-"},"content":"   Expected: Error details are displayed in status bar that to-do already exists."},{"lineNumber":1867,"author":{"gitID":"-"},"content":""},{"lineNumber":1868,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a to-do"},{"lineNumber":1869,"author":{"gitID":"-"},"content":""},{"lineNumber":1870,"author":{"gitID":"-"},"content":"Deleting a to-do while all to-dos are listed"},{"lineNumber":1871,"author":{"gitID":"-"},"content":""},{"lineNumber":1872,"author":{"gitID":"-"},"content":". Prerequisites: All to-dos are listed. Multiple to-dos exist in the list."},{"lineNumber":1873,"author":{"gitID":"-"},"content":". Test case: `deleteToDo 1` +"},{"lineNumber":1874,"author":{"gitID":"-"},"content":"   Expected: First to-do is deleted from the list. Details of the deleted to-do are shown in the result display box. Timestamp of the last update in the status bar is updated."},{"lineNumber":1875,"author":{"gitID":"-"},"content":". Test case: `deleteToDo 0` +"},{"lineNumber":1876,"author":{"gitID":"-"},"content":"   Expected: No to-do is deleted. Error details are shown in the result display box. Status bar remains the same."},{"lineNumber":1877,"author":{"gitID":"-"},"content":". Other incorrect deleteToDo commands to try: `deleteToDo Swim`, `deleteToDo x` (where `x` is larger than the list size) +"},{"lineNumber":1878,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1879,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1880,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Checking a to-do"},{"lineNumber":1881,"author":{"gitID":"-"},"content":""},{"lineNumber":1882,"author":{"gitID":"-"},"content":"Checking a to-do while all to-dos are listed"},{"lineNumber":1883,"author":{"gitID":"-"},"content":""},{"lineNumber":1884,"author":{"gitID":"-"},"content":". Prerequisites: All to-dos are listed. Multiple to-dos exist in the list."},{"lineNumber":1885,"author":{"gitID":"-"},"content":". Test case: `check 1` +"},{"lineNumber":1886,"author":{"gitID":"-"},"content":"   Expected: First to-do status is changed to \"done\". Details of the checked to-do are shown in the result display box. Timestamp of the last update in the status bar is updated."},{"lineNumber":1887,"author":{"gitID":"-"},"content":". Test case: `check 0` +"},{"lineNumber":1888,"author":{"gitID":"-"},"content":"   Expected: No to-do is checked. Error details are shown in the result display box. Status bar remains the same."},{"lineNumber":1889,"author":{"gitID":"-"},"content":". Other incorrect check commands to try: `check Swim`, `check x` (where `x` is larger than the list size) +"},{"lineNumber":1890,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1891,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1892,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Unchecking a to-do"},{"lineNumber":1893,"author":{"gitID":"-"},"content":""},{"lineNumber":1894,"author":{"gitID":"-"},"content":"Unchecking a to-do while all to-dos are listed"},{"lineNumber":1895,"author":{"gitID":"-"},"content":""},{"lineNumber":1896,"author":{"gitID":"-"},"content":". Prerequisites: All to-dos are listed. Multiple to-dos exist in the list."},{"lineNumber":1897,"author":{"gitID":"-"},"content":". Test case: `uncheck 1` +"},{"lineNumber":1898,"author":{"gitID":"-"},"content":"   Expected: First to-do status is changed to \"undone\". Details of the unchecked to-do are shown in the result display box. Timestamp of the last update in the status bar is updated."},{"lineNumber":1899,"author":{"gitID":"-"},"content":". Test case: `uncheck 0` +"},{"lineNumber":1900,"author":{"gitID":"-"},"content":"   Expected: No to-do is unchecked. Error details are shown in the result display box. Status bar remains the same."},{"lineNumber":1901,"author":{"gitID":"-"},"content":". Other incorrect uncheck commands to try: `uncheck Swim`, `uncheck x` (where `x` is larger than the list size) +"},{"lineNumber":1902,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1903,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1904,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a to-do"},{"lineNumber":1905,"author":{"gitID":"-"},"content":""},{"lineNumber":1906,"author":{"gitID":"-"},"content":"Editing a to-do while all to-dos are listed"},{"lineNumber":1907,"author":{"gitID":"-"},"content":""},{"lineNumber":1908,"author":{"gitID":"-"},"content":". Prerequisites: All to-dos are listed. Multiple to-dos exist in the list."},{"lineNumber":1909,"author":{"gitID":"-"},"content":". Test case: `editToDo 1 c/Do homework` +"},{"lineNumber":1910,"author":{"gitID":"-"},"content":"   Expected: First to-do content is changed to \"Do homework\". Details of the edited to-do are shown in the result display box. Timestamp of the last update in the status bar is updated."},{"lineNumber":1911,"author":{"gitID":"-"},"content":". Test case: `editToDo 0 c/Do homework` +"},{"lineNumber":1912,"author":{"gitID":"-"},"content":"   Expected: No to-do is edited. Error details are shown in the result display box. Status bar remains the same."},{"lineNumber":1913,"author":{"gitID":"-"},"content":". Other incorrect editToDo commands to try: `editToDo c/Swim`, `editToDo x c/Swim` (where `x` is larger than the list size) +"},{"lineNumber":1914,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1915,"author":{"gitID":"-"},"content":""},{"lineNumber":1916,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Adding a group"},{"lineNumber":1917,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1918,"author":{"gitID":"LeonidAgarth"},"content":"Adding a group with information specified by the command line input."},{"lineNumber":1919,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1920,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Group with the information specified by user must not already be in Fastis."},{"lineNumber":1921,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addGroup CS1010` +"},{"lineNumber":1922,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: New group with information `CS1010` will be added to Fastis. Successful adding of group `CS1010` will be reflected in the result display box."},{"lineNumber":1923,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addGroup CS1-1-` +"},{"lineNumber":1924,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No group is added. Group information must be alphanumeric. Error details are displayed in the result display box."},{"lineNumber":1925,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect commands: `addGroup CS!` +"},{"lineNumber":1926,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1927,"author":{"gitID":"LeonidAgarth"},"content":". Group `CS1010` already existed. +"},{"lineNumber":1928,"author":{"gitID":"jas5469"},"content":"   Test case: `addGroup CS1010` +"},{"lineNumber":1929,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Error details are displayed in status bar that group already exists."},{"lineNumber":1930,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1931,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Adding a member to group"},{"lineNumber":1932,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1933,"author":{"gitID":"LeonidAgarth"},"content":"Adding a member identified by `INDEX` to the group identified by `INFORMATION`."},{"lineNumber":1934,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1935,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Group and Person both exist in Fastis. Person must exist on the current Person List."},{"lineNumber":1936,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addGroupMember 1 g/CS1010` +"},{"lineNumber":1937,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Member that is first on Person List will be added to the group with information `CS1010`. Successful adding of the person will be displayed on the result display box."},{"lineNumber":1938,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addGroupMember 1 CS1010` +"},{"lineNumber":1939,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No member is added as command input is invalid since group field `g/` is missing. Error details are displayed in the result display box."},{"lineNumber":1940,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect commands to try: `addGroupMember`, `addGroupMember 1 t/` +"},{"lineNumber":1941,"author":{"gitID":"jas5469"},"content":"   Expected: Same as previous."},{"lineNumber":1942,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1943,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Deleting a member from group"},{"lineNumber":1944,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1945,"author":{"gitID":"LeonidAgarth"},"content":"Deleting a person from a group specified by the user. Often used after `listGroupMembers` command to see which members are in the group."},{"lineNumber":1946,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1947,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Group and Person both exist in Fastis. Person must exist on the current Person List."},{"lineNumber":1948,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `deleteGroupMember 1 g/CS1010` +"},{"lineNumber":1949,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Member is successfully deleted from the group `CS1010`. Successful deletion is displayed in the result display box."},{"lineNumber":1950,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `deleteGroupMember 1 CS1010` +"},{"lineNumber":1951,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No member is deleted due to missing field `g/` in command. Error details are displayed in the result display box."},{"lineNumber":1952,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect commands to try: `deleteGroupMember`, `deleteGroupMember 1 t/` +"},{"lineNumber":1953,"author":{"gitID":"jas5469"},"content":"   Expected: Same as previous."},{"lineNumber":1954,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1955,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Listing group members from a group"},{"lineNumber":1956,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1957,"author":{"gitID":"LeonidAgarth"},"content":"Listing all persons from a group specified by the user."},{"lineNumber":1958,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1959,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Group must exist in Fastis."},{"lineNumber":1960,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `listGroupMembers CS1010` +"},{"lineNumber":1961,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: All members in group with information `CS1010` are listed on Person List. Successful listing is displayed in the result display box."},{"lineNumber":1962,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `listGroupMembers !` +"},{"lineNumber":1963,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No person is listed. Error details are displayed in the result display box."},{"lineNumber":1964,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1965,"author":{"gitID":"jas5469"},"content":"\u003d\u003d\u003d Deleting a group"},{"lineNumber":1966,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1967,"author":{"gitID":"LeonidAgarth"},"content":"Deleting a group with information specified by the user from Fastis."},{"lineNumber":1968,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1969,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Group must exist in Fastis."},{"lineNumber":1970,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `deleteGroup CS1010` +"},{"lineNumber":1971,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Group with information `CS1010` is deleted. Successful deletion is displayed in the result display box."},{"lineNumber":1972,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `deleteGroup @` +"},{"lineNumber":1973,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No group is deleted. Error details are displayed in the the result display box."},{"lineNumber":1974,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1975,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Adding an event"},{"lineNumber":1976,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1977,"author":{"gitID":"LeonidAgarth"},"content":"Adding an event specified by command line input with required event prefixes."},{"lineNumber":1978,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1979,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addEvent n/CS2101 meeting v/COM1 Hackerspace d/15/04/2018 st/1600 et/1800` +"},{"lineNumber":1980,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: New event \"CS2101 meeting\" is added to Fastis. Details of the event added are shown in the result display box."},{"lineNumber":1981,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `addEvent v/COM1 Hackerspace d/15/04/2018 st/1600 et/1800` +"},{"lineNumber":1982,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No event is added. Essential `NAME` field is missing. Error details are displayed in the result display box."},{"lineNumber":1983,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect addEvent commands to try: `addEvent d/18/04/15`, `addEvent d/30/02/2018`, `addEvent st/1900 et/1700`, etc. +"},{"lineNumber":1984,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1985,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1986,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Listing persons with specified tags"},{"lineNumber":1987,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1988,"author":{"gitID":"LeonidAgarth"},"content":"Listing all persons that have any of the specified tag(s)."},{"lineNumber":1989,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":1990,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: Tag(s) must exist in Fastis."},{"lineNumber":1991,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `listTagMembers friends` +"},{"lineNumber":1992,"author":{"gitID":"jas5469"},"content":"   Expected: All members with tag `friends` will be listed on Person List. Number of person listed will be shown in status bar."},{"lineNumber":1993,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `listTagMembers 2131` (Tag 2131 does not exist in Fastis) +"},{"lineNumber":1994,"author":{"gitID":"jas5469"},"content":"   Expected: 0 persons listed."},{"lineNumber":1995,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":1996,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Changing a tag\u0027s color"},{"lineNumber":1997,"author":{"gitID":"-"},"content":""},{"lineNumber":1998,"author":{"gitID":"LeonidAgarth"},"content":" Changing a tag identified by `TAG` to have the color identified by `COLOR`."},{"lineNumber":1999,"author":{"gitID":"-"},"content":""},{"lineNumber":2000,"author":{"gitID":"LeonidAgarth"},"content":". Prerequisites: `TAG` already exists in Fastis. `COLOR` must be supported by Fastis."},{"lineNumber":2001,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `changeTagColor friends pink` +"},{"lineNumber":2002,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: Color of all tags named \"friends\" changes to \"pink\". Successful message of the change will be displayed in the result display box."},{"lineNumber":2003,"author":{"gitID":"LeonidAgarth"},"content":". Test case: `changeTagColor friends rainbow` +"},{"lineNumber":2004,"author":{"gitID":"LeonidAgarth"},"content":"   Expected: No tag is changed as an unsupported color \"rainbow\" was input. Error details are displayed in the result display box."},{"lineNumber":2005,"author":{"gitID":"LeonidAgarth"},"content":". Other incorrect commands to try: `changeTagColor`, `changeTagColor pink friends` +"},{"lineNumber":2006,"author":{"gitID":"jas5469"},"content":"   Expected: Same as previous."},{"lineNumber":2007,"author":{"gitID":"-"},"content":""},{"lineNumber":2008,"author":{"gitID":"LeonidAgarth"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":2009,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":2010,"author":{"gitID":"LeonidAgarth"},"content":"Dealing with missing/corrupted data files"},{"lineNumber":2011,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":2012,"author":{"gitID":"LeonidAgarth"},"content":". _{explain how to simulate a missing/corrupted file and the expected behavior}_"}],"authorContributionMap":{"nhatquang3112":19,"Isaaaca":113,"jas5469":637,"LeonidAgarth":392,"-":851}},{"path":"src/test/java/systemtests/CheckToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public void checkToDo() throws Exception {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        Model model \u003d getModel();"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing check operation while an unfiltered list is being shown --------------------- */"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: check the first to-do in the address book, command with leading space and trailing space and multiple"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        spaces between each field"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e checked"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        Index index \u003d INDEX_FIRST_TODO;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \" \" + CheckToDoCommand.COMMAND_WORD + \" \" + \" \" + index.getOneBased() + \" \";"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, checkedToDo);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo checking the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo checking the last to-do in the list -\u003e last to-do checked again */"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        model.updateToDo("},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased()), checkedToDo);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid checkToDo operation --------------------------------- */"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" 0\","},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" -1\","},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        int invalidIndex \u003d getModel().getFilteredToDoList().size() + 1;"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(CheckToDoCommand.COMMAND_WORD,"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ToDo, Index)} except that"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * @param toCheck the index of the current model\u0027s filtered list"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Index, ToDo, Index)"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toCheck, ToDo checkedToDo) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toCheck, checkedToDo, null);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that result display node displays the success message of executing {@code CheckToDoCommand}.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the model related components are updated to reflect the to-do at index {@code toCheck} being"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"     * updated to values specified {@code checkedToDo}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     * @param toCheck the index of the current model\u0027s filtered list."},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toCheck, ToDo checkedToDo,"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateToDo("},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"                    expectedModel.getFilteredToDoList().get(toCheck.getZeroBased()), checkedToDo);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException | ToDoNotFoundException e) {"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException("},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"                    \"checkedToDo is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                String.format(CheckToDoCommand.MESSAGE_CHECK_TODO_SUCCESS, checkedToDo), expectedSelectedCardIndex);"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command node displays an empty string.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"     * 6. Asserts that the command node has the default style class.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the command node has the error style.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":167}},{"path":"src/test/java/systemtests/DeleteGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GROUP_NAME;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TestUtil.getGroup;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TestUtil.getLastIndexGroup;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private static final String MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    public void deleteGroup() {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        /* Case: delete the first group in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        String command \u003d \"  \" + DeleteGroupCommand.COMMAND_WORD + \"  \" + \"Group A\" + \"  \";"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        Group deletedGroup \u003d removeGroup(expectedModel, INDEX_FIRST_GROUP);"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS,"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"                deletedGroup.getInformation().toString());"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        /* Case: delete the last group in the list -\u003e deleted */"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        Index lastGroupIndex \u003d getLastIndexGroup(modelBeforeDeletingLast);"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(lastGroupIndex);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        /* Case: undo deleting the last group in the list -\u003e last group restored */"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        /* Case: redo deleting the last group in the list -\u003e last group deleted again */"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        removeGroup(modelBeforeDeletingLast, lastGroupIndex);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        /* Case: invalid groupName (!) -\u003e rejected */"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" !\";"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        /* Case: group Not in Fastis -\u003e rejected */"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        Information information \u003d new Information(\"Group Z\");"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + information.toString();"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_GROUP_NAME);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        /* Case: invalid arguments (non - alphabets or numbers) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure("},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"                DeleteGroupCommand.COMMAND_WORD + \" #@!@\", MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(\"DelETEGroup Group A\","},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"                MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + DeleteGroupCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"     * Removes the {@code Group} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"     * @return the removed group"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"    private Group removeGroup(Model model, Index index) {"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        Group targetGroup \u003d getGroup(model, index);"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"            model.deleteGroup(targetGroup);"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        } catch (GroupNotFoundException tnfe) {"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"            throw new AssertionError(\"targetGroup is retrieved from model.\");"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        return targetGroup;"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"     * Deletes the group at {@code toDelete} by creating a default {@code DeleteGroupCommand} using {@code toDelete} and"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"     * @see DeleteGroupCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        Group deletedGroup \u003d removeGroup(expectedModel, toDelete);"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS,"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"                deletedGroup.getInformation().toString());"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(DeleteGroupCommand.COMMAND_WORD + \" \""},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"                        + \"Group H\", expectedModel, expectedResultMessage);"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":128,"author":{"gitID":"jas5469"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":"        executeCommand(command);"},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"        executeCommand(command);"},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":167}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":28,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":86,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":90,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + SelectCommand.COMMAND_WORD);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays an empty string.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the default style class.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays the success message of executing select command with the"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the error style class.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":2,"jas5469":2,"LeonidAgarth":6,"-":144}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"         * -\u003e 3 persons found"},{"lineNumber":32,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        // first names of Benson and Daniel are \"Meier\", first name of ELLE is Meier"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL, ELLE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"         * -\u003e 3 persons found"},{"lineNumber":42,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 2 person found */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL, ELLE);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 1 persons found */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).name;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + FindCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and verifies that the command node displays an empty string, the result display"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"     * node displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"     * Also verifies that the status bar remains unchanged, and the command node has the default style class, and the"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":173,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and verifies that the command node displays {@code command}, the result display"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"     * node displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command node has the"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":11,"jas5469":2,"LeonidAgarth":7,"-":179}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + \" \" + DETAIL_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":203,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that result display node displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":225,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":229,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":239,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that the result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"     * 6. Asserts that the command node has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"LeonidAgarth"},"content":"     * 5. Asserts that the command node has the error style.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23,"Isaaaca":9,"jas5469":2,"LeonidAgarth":7,"-":255}},{"path":"src/test/java/systemtests/AddGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INFORMATION_E;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_E;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupUtil;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public void addGroup() throws Exception {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        /* ------------------------ Perform addGroup operations on the shown unfiltered list ---------------------- */"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        /* Case: add a group to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"         * -\u003e added"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"         */"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        Group addGroup \u003d GROUP_E;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        String command \u003d \"   \" + AddGroupCommand.COMMAND_WORD + \"  \" + INFORMATION_E + \" \";"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, addGroup);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        command \u003d \"addsGroup \" + GroupUtil.getGroupDetails(addGroup);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command,"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"                Messages.MESSAGE_UNKNOWN_COMMAND + Messages.MESSAGE_DID_YOU_MEAN + AddGroupCommand.COMMAND_WORD);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        /* Case: add a duplicate group -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        command \u003d GroupUtil.getAddGroupCommand(GROUP_E);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command, AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"     * Executes the {@code AddGroupCommand} that adds {@code addGroup} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"     * 1. Command node displays an empty string.\u003cbr\u003e"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"     * 2. Command node has the default style class.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"     * 3. Result display node displays the success message of executing {@code AddGroupCommand} with the details of"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"     * {@code addGroup}.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"     * the current model added with {@code addGroup}.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(Group addGroup) {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(GroupUtil.getAddGroupCommand(addGroup), addGroup);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Group)}. Executes {@code command}"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     * instead."},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"     * @see AddGroupCommandSystemTest#assertCommandSuccess(Group)"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(String command, Group addGroup) {"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"            expectedModel.addGroup(addGroup);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException dpt) {"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"            throw new IllegalArgumentException(\"addGroup already exists in the model.\");"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        String expectedResultMessage \u003d String.format(AddGroupCommand.MESSAGE_SUCCESS, addGroup);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Group)} except asserts that"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"     * 1. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     * 2. {@code Model}, {@code Storage} and {@code GroupListPanel} equal to the corresponding components in"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"     * @see AddGroupCommandSystemTest#assertCommandSuccess(String, Group)"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        executeCommand(command);"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"     * 1. Command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"     * 2. Command node has the error style class.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"     * 3. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        executeCommand(command);"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":110}},{"path":"src/test/java/systemtests/SwitchCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Assert;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"public class SwitchCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public void switchView() {"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"        final Model calendarModel \u003d getModel();"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"        final Model timetableModel \u003d getModel();"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"        timetableModel.switchView();"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: Application in Calendar view -\u003e switched to Timetable view"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(\"   \" + SwitchCommand.COMMAND_WORD + \" view   \", calendarModel, timetableModel);"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(\"   \" + SwitchCommand.COMMAND_WORD + \" view   \", timetableModel, calendarModel);"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandSuccess(String command, Model model, Model expectedModel) {"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        executeCommand(command);"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        assertViewChanged(model, expectedModel);"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandFailure(String command, Model model, Model expectedModel) {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        executeCommand(command);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        assertViewDidNotChange(model, expectedModel);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertViewChanged(Model model, Model expectedModel) {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertEquals(model.calendarIsViewed(), expectedModel.calendarIsViewed());"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertViewDidNotChange(Model model, Model expectedModel) {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertNotEquals(model.calendarIsViewed(), expectedModel.calendarIsViewed());"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":42}},{"path":"src/test/java/systemtests/AddEventCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_F1;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_NDP;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_F1;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_NDP;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_F1;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_NDP;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_F1;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_NDP;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_F1;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_NDP;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_VENUE_DESC;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_F1;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_NDP;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalEvents.GSS;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalEvents.HARIRAYA;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.LocalDate;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventUtil;"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add an event to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"         * -\u003e added"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        LocalDate localDate \u003d LocalDate.now();"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        String today \u003d localDate.format(formatter);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        Event toAdd \u003d new EventBuilder().withDate(today).build();"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        String command \u003d \"   \" + AddEventCommand.COMMAND_WORD + \"  \" + EVENT_NAME_DESC_F1 + \"  \" + EVENT_VENUE_DESC_F1"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"                + \" d/\" + today + \"   \" + EVENT_START_TIME_DESC_F1 + \"   \" + EVENT_END_TIME_DESC_F1;"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: undo adding F1 to the list -\u003e F1 deleted */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: redo adding F1 to the list -\u003e F1 added again */"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        model.addEvent(toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event with all fields same as another event in the address book except name -\u003e added */"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).withVenue(VALID_EVENT_VENUE_F1)"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_F1).withStartTime(VALID_EVENT_START_TIME_F1)"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event with all fields same as another event in the address book except venue -\u003e added */"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withVenue(VALID_EVENT_VENUE_NDP)"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_F1).withStartTime(VALID_EVENT_START_TIME_F1)"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_F1"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event with all fields same as another event in the address book except date -\u003e added */"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withVenue(VALID_EVENT_VENUE_F1)"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_NDP).withStartTime(VALID_EVENT_START_TIME_F1)"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_NDP"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event with all fields same as another event in the address book except address -\u003e added */"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withVenue(VALID_EVENT_VENUE_F1)"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_F1).withStartTime(VALID_EVENT_START_TIME_NDP)"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_F1;"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event with all fields same as another event in the address book"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        except Timetable link -\u003e added */"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withVenue(VALID_EVENT_VENUE_F1)"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_F1).withStartTime(VALID_EVENT_START_TIME_F1)"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_NDP).build();"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_NDP;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(GSS);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a event, missing tags -\u003e added */"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(HARIRAYA);"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a duplicate event -\u003e rejected */"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d EventUtil.getAddEventCommand(HARIRAYA);"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: add a duplicate event except with different tags -\u003e rejected */"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalEvents#ALICE"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"        // AddressBook#addEvent(Event)"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d EventUtil.getAddEventCommand(HARIRAYA);"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1 + EVENT_START_TIME_DESC_F1;"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: missing venue -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_DATE_DESC_F1 + EVENT_START_TIME_DESC_F1;"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_START_TIME_DESC_F1;"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1;"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"        command \u003d \"addEvents \" + EventUtil.getEventDetails(toAdd);"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"        assertCommandFailure(command,"},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"                Messages.MESSAGE_UNKNOWN_COMMAND + Messages.MESSAGE_DID_YOU_MEAN + AddEventCommand.COMMAND_WORD);"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + INVALID_EVENT_NAME_DESC + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid venue -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + INVALID_EVENT_VENUE_DESC + EVENT_DATE_DESC_F1"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid date -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + INVALID_EVENT_DATE_DESC"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + EVENT_END_TIME_DESC_F1;"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"                + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_F1;"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: invalid end time -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d AddEventCommand.COMMAND_WORD + EVENT_NAME_DESC_F1 + EVENT_VENUE_DESC_F1 + EVENT_DATE_DESC_F1"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_F1 + INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes the {@code AddEventCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays an empty string.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the default style class.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays the success message of executing {@code AddEventCommand} with the details of"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EventListPanel} equal to the corresponding components in"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandSuccess(Event toAdd) {"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(EventUtil.getAddEventCommand(toAdd), toAdd);"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Event)}. Executes {@code command}"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"     * instead."},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"     * @see AddEventCommandSystemTest#assertCommandSuccess(Event)"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandSuccess(String command, Event toAdd) {"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"            expectedModel.addEvent(toAdd);"},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (DuplicateEventException dpe) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedResultMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":217,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":219,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Event)} except asserts that"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. {@code Model}, {@code Storage} and {@code EventListPanel} equal to the corresponding components in"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"     * @see AddEventCommandSystemTest#assertCommandSuccess(String, Event)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":234,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":235,"author":{"gitID":"jas5469"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Command node has the error style class.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"     * 4. {@code Model}, {@code Storage} and {@code EventListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":5,"Isaaaca":3,"jas5469":3,"LeonidAgarth":191,"-":57}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"            new NewResultAvailableEvent(\"success\", true);"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"            new NewResultAvailableEvent(\"failure\", false);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        // receiving new results"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"     * Posts the {@code event} to the {@code EventsCenter}, then verifies that \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     *        {@code errorStyleOfResultDisplay} otherwise."},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        postNow(event);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful ? defaultStyleOfResultDisplay : errorStyleOfResultDisplay;"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":32,"-":37}},{"path":"src/test/java/systemtests/ChangeTagColorCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_COLOR;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_BROWN;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public void changeTagColor() throws Exception {"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"        Model model \u003d getModel();"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        /* ---------- Performing change tag color operation while an unfiltered list is being shown ------------- */"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: change tag color fields, command with leading spaces, trailing spaces and multiple spaces"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"         * between each field -\u003e changed"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        String command \u003d \" \" + ChangeTagColorCommand.COMMAND_WORD + \"  \" + VALID_TAG_FRIEND"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"                + \"  \" + VALID_TAG_COLOR_BROWN + \" \";"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        Tag changedTag \u003d new Tag(VALID_TAG_FRIEND, VALID_TAG_COLOR_BROWN);"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, changedTag);"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: undo changeTagColoring the last tag in the list -\u003e last tag restored */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: redo changeTagColoring the last tag in the list -\u003e last tag changeTagColored again */"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        model.updateTag(new Tag(VALID_TAG_FRIEND), changedTag);"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: changeTagColor a tag with new values same as existing values -\u003e changeTagColored */"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d ChangeTagColorCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND + \" \" + VALID_TAG_COLOR_BROWN;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, changedTag);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: tag specified not in list -\u003e rejected"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d ChangeTagColorCommand.COMMAND_WORD + \" \" + VALID_TAG_COLOR_RED + \" \" + VALID_TAG_COLOR_BROWN;"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, ChangeTagColorCommand.MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        /* Case: color specified is not supported by application -\u003e rejected"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        command \u003d ChangeTagColorCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND + \" \" + INVALID_TAG_COLOR;"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"     * Performs the verification: \u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that result display node displays the success message of executing {@code ChangeTagColorCommand}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that the model related components are updated to reflect the tag being updated to values"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"     * specified in {@code changeTagColoredTag}.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandSuccess(String command, Tag changedTag) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"            expectedModel.updateTag(new Tag(VALID_TAG_FRIEND), changedTag);"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalArgumentException(\"Tag isn\u0027t found in the model.\");"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(ChangeTagColorCommand.MESSAGE_EDIT_TAG_SUCCESS, changedTag.name, changedTag.color));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays an empty string.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that the result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"     * 6. Asserts that the command node has the default style class.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        executeCommand(command);"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"     * 1. Asserts that the command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"     * 2. Asserts that result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"     * 5. Asserts that the command node has the error style.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":124}},{"path":"src/test/java/seedu/address/ui/GroupCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysGroup;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import guitests.guihandles.GroupCardHandle;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class GroupCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        GroupCard groupCard \u003d new GroupCard(group, 1);"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        uiPartRule.setUiPart(groupCard);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        assertCardDisplay(groupCard, group, 1);"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        GroupCard groupCard \u003d new GroupCard(group, 0);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        // same group, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        GroupCard copy \u003d new GroupCard(group, 0);"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupCard.equals(copy));"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupCard.equals(groupCard));"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupCard.equals(0));"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        // different group, same index -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        Group differentGroup \u003d new GroupBuilder().withInformation(\"different content\").build();"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupCard.equals(new GroupCard(differentGroup, 0)));"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        // same group, different index -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupCard.equals(new GroupCard(group, 1)));"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"     * Asserts that {@code groupCard} displays the details of {@code expectedGroup} correctly and matches"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"     * {@code expectedId}."},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    private void assertCardDisplay(GroupCard groupCard, Group expectedGroup, int expectedId) {"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        GroupCardHandle groupCardHandle \u003d new GroupCardHandle(groupCard.getRoot());"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"        // verify id is displayed correctly"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", groupCardHandle.getId());"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        // verify group information are displayed correctly"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        assertCardDisplaysGroup(expectedGroup, groupCardHandle);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":66}},{"path":"src/test/java/seedu/address/ui/CalendarTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"public class CalendarTest extends GuiUnitTest {"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"        /*Calendar calendar \u003d new Calendar(null);"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(calendar, new Calendar(null));*/"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":13}},{"path":"src/test/java/systemtests/DeleteToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.DeleteToDoCommand.MESSAGE_DELETE_TODO_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TestUtil.getLastIndexToDo;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TestUtil.getToDo;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.DeleteToDoCommand;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"public class DeleteToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private static final String MESSAGE_INVALID_DELETE_TODO_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public void deleteToDo() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: delete the first to-do in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \"     \" + DeleteToDoCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_TODO.getOneBased() + \"   \";"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo deletedToDo \u003d removeToDo(expectedModel, INDEX_FIRST_TODO);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TODO_SUCCESS, deletedToDo);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: delete the last to-do in the list -\u003e deleted */"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        Index lastToDoIndex \u003d getLastIndexToDo(modelBeforeDeletingLast);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(lastToDoIndex);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo deleting the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo deleting the last to-do in the list -\u003e last to-do deleted again */"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        removeToDo(modelBeforeDeletingLast, lastToDoIndex);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d DeleteToDoCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_TODO_COMMAND_FORMAT);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d DeleteToDoCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_TODO_COMMAND_FORMAT);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getAddressBook().getToDoList().size() + 1);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d DeleteToDoCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure("},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                DeleteToDoCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_TODO_COMMAND_FORMAT);"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure("},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"                DeleteToDoCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_TODO_COMMAND_FORMAT);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(\"DelETEtOdO 1\","},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"                MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + DeleteToDoCommand.COMMAND_WORD);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"     * Removes the {@code ToDo} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     * @return the removed to-do"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo removeToDo(Model model, Index index) {"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        ToDo targetToDo \u003d getToDo(model, index);"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"            model.deleteToDo(targetToDo);"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"targetToDo is retrieved from model.\");"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        return targetToDo;"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"     * Deletes the to-do at {@code toDelete} by creating a default {@code DeleteToDoCommand} using {@code toDelete} and"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"     * @see DeleteToDoCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        ToDo deletedToDo \u003d removeToDo(expectedModel, toDelete);"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_TODO_SUCCESS, deletedToDo);"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess("},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"                DeleteToDoCommand.COMMAND_WORD + \" \""},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"                        + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarChangedExceptSaveLocation();"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":169,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":171}},{"path":"src/test/java/seedu/address/ui/ToDoCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard toDoCard \u003d new ToDoCard(toDo, 1);"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        uiPartRule.setUiPart(toDoCard);"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        assertCardDisplay(toDoCard, toDo, 1);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard toDoCard \u003d new ToDoCard(toDo, 0);"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        // same to-do, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard copy \u003d new ToDoCard(toDo, 0);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoCard.equals(copy));"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoCard.equals(toDoCard));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(0));"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do, same index -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        ToDo differentToDo \u003d new ToDoBuilder().withContent(\"different content\").build();"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(new ToDoCard(differentToDo, 0)));"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        // same to-do, different index -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoCard.equals(new ToDoCard(toDo, 1)));"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * Asserts that {@code toDoCard} displays the details of {@code expectedToDo} correctly and matches"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedId}."},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCardDisplay(ToDoCard toDoCard, ToDo expectedToDo, int expectedId) {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCardHandle toDoCardHandle \u003d new ToDoCardHandle(toDoCard.getRoot());"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        // verify id is displayed correctly"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", toDoCardHandle.getId());"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        // verify to-do details are displayed correctly"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        assertCardDisplaysToDo(expectedToDo, toDoCardHandle);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":66}},{"path":"src/test/java/seedu/address/ui/ToDoListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysToDo;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    private static final ObservableList\u003cToDo\u003e TYPICAL_TODOS \u003d"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"            FXCollections.observableList(getTypicalToDos());"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private ToDoListPanelHandle toDoListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        ToDoListPanel toDoListPanel \u003d new ToDoListPanel(TYPICAL_TODOS);"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        uiPartRule.setUiPart(toDoListPanel);"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        toDoListPanelHandle \u003d new ToDoListPanelHandle(getChildNode(toDoListPanel.getRoot(),"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"                ToDoListPanelHandle.TODO_LIST_VIEW_ID));"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    public void display() {"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_TODOS.size(); i++) {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"            toDoListPanelHandle.navigateToCard(TYPICAL_TODOS.get(i));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"            ToDo expectedToDo \u003d TYPICAL_TODOS.get(i);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"            ToDoCardHandle actualCard \u003d toDoListPanelHandle.getToDoCardHandle(i);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"            assertCardDisplaysToDo(expectedToDo, actualCard);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":43}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    // check CommandBoxTest"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"     *      - the command node\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"     *      - {@code NewResultAvailableEvent} is posted"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"     *      - the command node\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"jas5469":13,"LeonidAgarth":2,"-":157}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.model.tag.Tag.AVAILABLE_COLORS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import guitests.guihandles.GroupCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import guitests.guihandles.ToDoCardHandle;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.ui.CalendarDate;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     * For {@code PersonCardHandle}"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"     * For {@code ToDoCardHandle}"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    public static void assertCardEquals(ToDoCardHandle expectedCard, ToDoCardHandle actualCard) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedCard.getContent(), actualCard.getContent());"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedCard.getStatus(), actualCard.getStatus());"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedToDo}."},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"    public static void assertCardDisplaysToDo(ToDo expectedToDo, ToDoCardHandle actualCard) {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedToDo.getContent().value, actualCard.getContent());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(expectedToDo.getStatus().value, actualCard.getStatus());"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"     * Asserts that {@code actualDate} displays the details of {@code expectedEvent}."},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    public static void assertDateDisplaysEvent(Event expectedEvent, CalendarDate actualDate) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(expectedEvent.getName(), actualDate.getEventText().getText());"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(expectedEvent.getDate(), actualDate.getDate());"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the color style for {@code name}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        String[] tagColorStyles \u003d AVAILABLE_COLORS;"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        return tagColorStyles[Math.abs(tagName.hashCode()) % tagColorStyles.length - 1];"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"     * color."},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"                .map(tag -\u003e tag.name).collect(Collectors.toList());"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cString\u003e expectedColors \u003d expectedPerson.getTags().stream()"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"                .map(tag -\u003e tag.color).collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        for (int i \u003d 0; i \u003c expectedTags.size(); i++) {"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"            if (expectedColors.get(i).equals(\"undefined\")) {"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(expectedTags.get(i))),"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"                        actualCard.getTagStyleClasses(expectedTags.get(i)));"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, expectedColors.get(i)),"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"                        actualCard.getTagStyleClasses(expectedTags.get(i)));"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedGroup}."},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"    public static void assertCardDisplaysGroup(Group expectedGroup, GroupCardHandle actualCard) {"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedGroup.getInformation().value, actualCard.getInformation());"},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":18,"jas5469":37,"LeonidAgarth":26,"-":74}},{"path":"src/test/java/seedu/address/ui/CalendarDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertDateDisplaysEvent;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"public class CalendarDateTest extends GuiUnitTest {"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public void display() {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"        CalendarDate date \u003d new CalendarDate(event);"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"        uiPartRule.setUiPart(date);"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"        assertCardDisplay(date, event);"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        CalendarDate date \u003d new CalendarDate(event);"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        // same to-do, same index -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        CalendarDate copy \u003d new CalendarDate(event);"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(date, copy);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(date, date);"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(date, null);"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(date, 0);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        // different to-do, same index -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        Event differentEvent \u003d new EventBuilder().withDate(\"21/12/2012\").build();"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(date, new CalendarDate(differentEvent));"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     * Asserts that {@code toDoCard} displays the details of {@code expectedEvent} correctly and matches"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code expectedId}."},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertCardDisplay(CalendarDate date, Event expectedEvent) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        // verify to-do details are displayed correctly"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertDateDisplaysEvent(expectedEvent, date);"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":55}},{"path":"src/test/java/systemtests/UnCheckToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public void unCheckToDo() throws Exception {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        Model model \u003d getModel();"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing uncheck operation while an unfiltered list is being shown --------------------*/"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: uncheck the first to-do in the address book, command with leading space and trailing space and multiple"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        spaces between each field"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e unchecked"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        Index index \u003d INDEX_FIRST_TODO;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \" \" + UnCheckToDoCommand.COMMAND_WORD + \" \" + \" \" + index.getOneBased() + \" \";"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, unCheckedToDo);"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo unchecking the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo unchecking the last to-do in the list -\u003e last to-do unchecked again */"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        model.updateToDo("},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased()), unCheckedToDo);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid UnCheckToDo operation --------------------------------*/"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" 0\","},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" -1\","},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        int invalidIndex \u003d getModel().getFilteredToDoList().size() + 1;"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(UnCheckToDoCommand.COMMAND_WORD,"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ToDo, Index)} except that"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"     * @param toUnCheck the index of the current model\u0027s filtered list"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * @see UnCheckToDoCommandSystemTest#assertCommandSuccess(String, Index, ToDo, Index)"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toUnCheck, ToDo unCheckedToDo) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toUnCheck, unCheckedToDo, null);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that result display node displays the success message of executing {@code UnCheckToDoCommand}.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the model related components are updated to reflect the to-do at index {@code toUnCheck} being"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"     * updated to values specified {@code unCheckedToDo}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     * @param toUnCheck the index of the current model\u0027s filtered list."},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     * @see UnCheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toUnCheck, ToDo unCheckedToDo,"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateToDo("},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"                    expectedModel.getFilteredToDoList().get(toUnCheck.getZeroBased()), unCheckedToDo);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException | ToDoNotFoundException e) {"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException("},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"                    \"unCheckedToDo is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                String.format("},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"                        UnCheckToDoCommand.MESSAGE_UNCHECK_TODO_SUCCESS, unCheckedToDo), expectedSelectedCardIndex);"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"     * @see CheckToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command node displays an empty string.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"     * 6. Asserts that the command node has the default style class.\u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command node displays {@code command}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that result display node displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the command node has the error style.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":168}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.GOOGLE_SEARCH_URL_PREFIX + ALICE.getName().fullName.replaceAll"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"                (\" \", \"%20\") + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":47}},{"path":"src/test/java/seedu/address/database/module/ScheduleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"public class ScheduleTest {"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_CLASSNO \u003d \"9\";"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_LESSON_TYPE \u003d \"Tutorial\";"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_WEEK_TEXT \u003d \"EVERY WEEK\";"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_DAY_TEXT \u003d \"WEDNESDAY\";"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_START_TIME \u003d \"1500\";"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_END_TIME \u003d \"1600\";"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_VENUE \u003d \"COM1 B1-04\";"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private Schedule testBlank \u003d new Schedule();"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private Schedule test \u003d new Schedule(DEFAULT_CLASSNO, DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT, DEFAULT_DAY_TEXT,"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"            DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE);"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    public void getClassNo() {"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"1\", testBlank.getClassNo());"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_CLASSNO, test.getClassNo());"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    public void getLessonType() {"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"Lecture\", testBlank.getLessonType());"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_LESSON_TYPE, test.getLessonType());"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"    public void getWeekText() {"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"1\", testBlank.getWeekText());"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_WEEK_TEXT, test.getWeekText());"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    public void getDayText() {"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"Monday\", testBlank.getDayText());"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_DAY_TEXT, test.getDayText());"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"    public void getStartTime() {"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"0000\", testBlank.getStartTime());"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_START_TIME, test.getStartTime());"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"    public void getEndTime() {"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"2359\", testBlank.getEndTime());"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_END_TIME, test.getEndTime());"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"    public void getVenue() {"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(\"COM1 01-01\", testBlank.getVenue());"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(DEFAULT_VENUE, test.getVenue());"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"    public void testToString() {"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"        String expected \u003d \"ClassNo: \" + DEFAULT_CLASSNO"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: \" + DEFAULT_LESSON_TYPE"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: \" + DEFAULT_WEEK_TEXT"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: \" + DEFAULT_DAY_TEXT"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: \" + DEFAULT_START_TIME"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: \" + DEFAULT_END_TIME"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: \" + DEFAULT_VENUE + \"\\n\";"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"        String expectedBlank \u003d \"ClassNo: 1\""},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: Lecture\""},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: 1\""},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: Monday\""},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: 0000\""},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: 2359\""},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: COM1 01-01\" + \"\\n\";"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(expected, test.toString());"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(expectedBlank, testBlank.toString());"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"    public void testEquals() {"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertTrue(test.equals(test));"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertTrue(test.equals(new Schedule(DEFAULT_CLASSNO, DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT,"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"                DEFAULT_DAY_TEXT, DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE)));"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertFalse(test.equals(DEFAULT_LESSON_TYPE));"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertFalse(test.equals(new Schedule(\"4\", DEFAULT_LESSON_TYPE, DEFAULT_WEEK_TEXT,"},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"                DEFAULT_DAY_TEXT, DEFAULT_START_TIME, DEFAULT_END_TIME, DEFAULT_VENUE)));"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":94}},{"path":"src/test/java/seedu/address/database/DatabaseManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Assert;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"public class DatabaseManagerTest {"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"    private DatabaseManager test \u003d DatabaseManager.getInstance();"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    public void getQuery() {"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        String actual \u003d DatabaseManager.getQuery(new TimeTableLink(\"http://modsn.us/MYwiD\"));"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(\"CS2101\u003dSEC:3\u0026CS2103T\u003dTUT:T3\u0026CS2105\u003dLEC:1,TUT:7\u0026CS3242\u003dLEC:1,TUT:3\u0026ST2334\u003dLEC:SL1,TUT:T4\","},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"                actual);"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        actual \u003d DatabaseManager.getQuery(new TimeTableLink(\"http://modsn.us/MYwid\"));"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(null,"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"                actual);"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    public void parseEvents_success() {"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        Module cs2103t \u003d new Module(\"CS2103T\", \"Software Engineering\");"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        Schedule tutT3 \u003d new Schedule(\"T3\", \"Tutorial\", \"Every Week\", \"Wednesday\","},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"                \"1500\", \"1600\", \"COM1-B103\");"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        WeeklyEvent weeklyEvent \u003d new WeeklyEvent(cs2103t, tutT3);"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"        expected.add(weeklyEvent);"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e actual \u003d DatabaseManager.parseEvents(new TimeTableLink(\"http://modsn.us/Oy25S\"));"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertArrayEquals(expected.toArray(), actual.toArray());"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"    public void parseEvents_invalidLink_returnsEmptyList() {"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e actual \u003d DatabaseManager.parseEvents(new TimeTableLink(\"http://modsn.us/abcde\"));"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertArrayEquals(expected.toArray(), actual.toArray());"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    public void parseEvents_incompatibleLink_returnsEmptyList() {"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e actual \u003d DatabaseManager.parseEvents(new TimeTableLink(\"http://modsn.us/oEZ0r\"));"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertArrayEquals(expected.toArray(), actual.toArray());"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":59}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.ui.StatusBarFooter.TOTAL_PERSONS_STATUS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"            new AddressBookBuilder().withPerson(ALICE).build());"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    private static final int INITIAL_TOTAL_PERSONS \u003d 0;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, INITIAL_TOTAL_PERSONS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"                String.format(TOTAL_PERSONS_STATUS, INITIAL_TOTAL_PERSONS));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"                String.format(TOTAL_PERSONS_STATUS, EVENT_STUB.data.getPersonList().size()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, the"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * sync status matches that of {@code expectedSyncStatus}, and the total persons matches that of"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     * {@code expectedTotalPersonsStatus}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                                        String expectedTotalPersonsStatus) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedTotalPersonsStatus, statusBarFooterHandle.getTotalPersonsStatus());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":17,"-":68}},{"path":"src/test/java/seedu/address/ui/ProgressIndicatorPropertiesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class ProgressIndicatorPropertiesTest {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"    private static final String EXPECTED_PROGRESS_INDICATOR_LABEL_NAME \u003d \"TO-DO COMPLETION\";"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    private static final String EXPECTED_PROGRESS_INDICATOR_LABEL_COLOR \u003d \"-fx-text-fill: black;\";"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    private static final String EXPECTED_PROGRESS_INDICATOR_COLOR \u003d \"-fx-progress-color: #4DA194;\";"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private static final int EXPECTED_PROGRESS_INDICATOR_WIDTH \u003d 150;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    private static final int EXPECTED_PROGRESS_INDICATOR_HEIGHT \u003d 150;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public void checkIfAllPropertiesAreCorrect() {"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"        ProgressIndicatorProperties properties \u003d new ProgressIndicatorProperties();"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(properties.PROGRESS_INDICATOR_LABEL_NAME.equals(EXPECTED_PROGRESS_INDICATOR_LABEL_NAME));"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(properties.PROGRESS_INDICATOR_LABEL_COLOR.equals(EXPECTED_PROGRESS_INDICATOR_LABEL_COLOR));"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(properties.PROGRESS_INDICATOR_COLOR.equals(EXPECTED_PROGRESS_INDICATOR_COLOR));"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(properties.PROGRESS_INDICATOR_WIDTH \u003d\u003d EXPECTED_PROGRESS_INDICATOR_WIDTH);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(properties.PROGRESS_INDICATOR_HEIGHT \u003d\u003d EXPECTED_PROGRESS_INDICATOR_HEIGHT);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":26}},{"path":"src/test/java/seedu/address/database/module/ModuleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"public class ModuleTest {"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_MODULE_CODE \u003d \"CS2013T\";"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_MODULE_TITLE \u003d \"Software Engineering\";"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private static final Module test \u003d new Module(DEFAULT_MODULE_CODE, DEFAULT_MODULE_TITLE, new ArrayList\u003c\u003e());"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public void constructor_nullArgument_throwsNullPointerException() {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        String invalidArg \u003d null;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Module(invalidArg, invalidArg, null));"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    public void getModuleCode() {"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getModuleCode(), DEFAULT_MODULE_CODE);"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    public void getModuleTitle() {"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getModuleTitle(), DEFAULT_MODULE_TITLE);"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    public void getScheduleList() {"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.getScheduleList(), new ArrayList\u003c\u003e());"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    public void testToString() {"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(test.toString(),"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"                \"moduleCode: \" + DEFAULT_MODULE_CODE + \" moduleTitle: \" + DEFAULT_MODULE_TITLE + \"\\n\""},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"                        + new ArrayList\u003c\u003e().toString());"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    public void testEquals() {"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(test.equals(test));"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(test.equals(new Module(DEFAULT_MODULE_CODE, DEFAULT_MODULE_TITLE)));"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(test.equals(new Module(\"CS1101\", DEFAULT_MODULE_TITLE)));"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(test.equals(DEFAULT_MODULE_CODE));"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":52,"-":5}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"        String defaultConfigAsString \u003d \"App title : Fastis\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/JsonUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.SerializableTestClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File SERIALIZATION_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"serialize.json\"));"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    private static final File SERIALIZATION_ARRAY_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder("},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"            \"serializeArray.json\"));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    public void deserializeArrayFromJsonFile_noExceptionThrown() throws DataConversionException, IOException {"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"        FileUtil.writeToFile(SERIALIZATION_ARRAY_FILE, \"[\" + SerializableTestClass.JSON_STRING_REPRESENTATION"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"                + \",\" + SerializableTestClass.JSON_STRING_REPRESENTATION + \"]\");"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        List\u003cSerializableTestClass\u003e serializableTestClassList \u003d JsonUtil"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"                .readJsonArrayFromFile(SERIALIZATION_ARRAY_FILE.getPath(), SerializableTestClass.class);"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        List\u003cSerializableTestClass\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        SerializableTestClass serializableTestClass1 \u003d new SerializableTestClass();"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        SerializableTestClass serializableTestClass2 \u003d new SerializableTestClass();"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        serializableTestClass1.setTestValues();"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"        serializableTestClass2.setTestValues();"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"        expected.add(serializableTestClass1);"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        expected.add(serializableTestClass2);"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expected.size(), serializableTestClassList.size());"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"        for (int i \u003d 0; i \u003c expected.size(); i++) {"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"            SerializableTestClass expectedObject \u003d expected.get(i);"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"            SerializableTestClass actualObject \u003d serializableTestClassList.get(i);"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getName(), actualObject.getName());"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getListOfLocalDateTimes(), actualObject.getListOfLocalDateTimes());"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(expectedObject.getMapOfIntegerToString(), actualObject.getMapOfIntegerToString());"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":35,"-":45}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"        assertNotNull(AppUtil.getImage(\"/images/FASTIS.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":1,"-":46}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":80,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":86,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"    //---------------- Tests for containsWordFuzzyIgnoreCase --------------------------------------"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":"    /*"},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":"    public void containsWordFuzzyIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"        assertExceptionThrownFuzzy(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":153,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"    private void assertExceptionThrownFuzzy(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":159,"author":{"gitID":"Isaaaca"},"content":"        StringUtil.getPartialRatioFuzzyIgnoreCase(sentence, word);"},{"lineNumber":160,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":162,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"Isaaaca"},"content":"    public void containsWordFuzzyIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":"        assertExceptionThrownFuzzy(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":166,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"Isaaaca"},"content":"    public void containsWordFuzzyIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":170,"author":{"gitID":"Isaaaca"},"content":"        assertExceptionThrownFuzzy(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":171,"author":{"gitID":"Isaaaca"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":172,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":174,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"Isaaaca"},"content":"    public void containsWordFuzzyIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitID":"Isaaaca"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":179,"author":{"gitID":"Isaaaca"},"content":"    /*"},{"lineNumber":180,"author":{"gitID":"Isaaaca"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"     *   - any word"},{"lineNumber":182,"author":{"gitID":"Isaaaca"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":183,"author":{"gitID":"Isaaaca"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":184,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"Isaaaca"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":186,"author":{"gitID":"Isaaaca"},"content":"     *   - empty string"},{"lineNumber":187,"author":{"gitID":"Isaaaca"},"content":"     *   - one word"},{"lineNumber":188,"author":{"gitID":"Isaaaca"},"content":"     *   - multiple words"},{"lineNumber":189,"author":{"gitID":"Isaaaca"},"content":"     *   - sentence with extra spaces"},{"lineNumber":190,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":191,"author":{"gitID":"Isaaaca"},"content":"     * Possible scenarios returning true:"},{"lineNumber":192,"author":{"gitID":"Isaaaca"},"content":"     *   - matches first word in sentence"},{"lineNumber":193,"author":{"gitID":"Isaaaca"},"content":"     *   - last word in sentence"},{"lineNumber":194,"author":{"gitID":"Isaaaca"},"content":"     *   - middle word in sentence"},{"lineNumber":195,"author":{"gitID":"Isaaaca"},"content":"     *   - matches multiple words"},{"lineNumber":196,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":197,"author":{"gitID":"Isaaaca"},"content":"     * Possible scenarios returning false:"},{"lineNumber":198,"author":{"gitID":"Isaaaca"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":199,"author":{"gitID":"Isaaaca"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":200,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"Isaaaca"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":202,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":204,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"Isaaaca"},"content":"    public void containsWordFuzzyIgnoreCase_validInputs_correctResult() {"},{"lineNumber":206,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":207,"author":{"gitID":"Isaaaca"},"content":"        // Empty sentence"},{"lineNumber":208,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(0, StringUtil.getPartialRatioFuzzyIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":209,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(0, StringUtil.getPartialRatioFuzzyIgnoreCase(\"    \", \"123\"));"},{"lineNumber":210,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":211,"author":{"gitID":"Isaaaca"},"content":"        // Matches a partial word only"},{"lineNumber":212,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":213,"author":{"gitID":"Isaaaca"},"content":"                \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(75, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":"                \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":217,"author":{"gitID":"Isaaaca"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":218,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":219,"author":{"gitID":"Isaaaca"},"content":"                \"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":220,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":221,"author":{"gitID":"Isaaaca"},"content":"                \"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":222,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":223,"author":{"gitID":"Isaaaca"},"content":"                \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":224,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":225,"author":{"gitID":"Isaaaca"},"content":"                \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":226,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(100, StringUtil.getPartialRatioFuzzyIgnoreCase("},{"lineNumber":227,"author":{"gitID":"Isaaaca"},"content":"                \"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":228,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":229,"author":{"gitID":"Isaaaca"},"content":"        // Matches multiple words in sentence"},{"lineNumber":230,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":231,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":233,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":94,"-":159}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    private static final String VALID_LINK \u003d \"http://modsn.us/abcdef\";"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    private static final String VALID_DETAIL \u003d \"Likes tennis\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"Isaaaca":1,"-":143}},{"path":"src/test/java/seedu/address/commons/util/CalendarUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Assert;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"public class CalendarUtilTest {"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    public void getSem() {"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(2, CalendarUtil.getSem(LocalDate.MIN));"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(1, CalendarUtil.getSem(LocalDate.MAX));"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    public void getCurrentSemester() {"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(CalendarUtil.getSem(LocalDate.now()), CalendarUtil.getCurrentSemester());"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"    public void getAcadYear() {"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(2016, CalendarUtil.getAcadYear(LocalDate.of(2017, 1, 1)));"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(2017, CalendarUtil.getAcadYear(LocalDate.of(2017, 7, 1)));"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    public void getCurrAcadYear() {"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertEquals(CalendarUtil.getAcadYear(LocalDate.now()), CalendarUtil.getCurrAcadYear());"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":32}},{"path":"src/test/java/systemtests/EditToDoCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoUtil;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public void editToDo() throws Exception {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        Model model \u003d getModel();"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        /* ----------------- Performing edit to-do operation while an unfiltered list is being shown ---------------- */"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"         * -\u003e edited"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        Index index \u003d INDEX_FIRST_TODO;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        String command \u003d \" \" + EditToDoCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + CONTENT_DESC + \"  \";"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        ToDo editedToDo \u003d new ToDoBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, editedToDo);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: undo editing the last to-do in the list -\u003e last to-do restored */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: redo editing the last to-do in the list -\u003e last to-do edited again */"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        model.updateToDo("},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                getModel().getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased()), editedToDo);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: edit a to-do with new content same as existing content -\u003e edited */"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditToDoCommand.COMMAND_WORD + \" \" + index.getOneBased() + CONTENT_DESC;"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, index, validToDo);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + \" 0\" + CONTENT_DESC,"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditToDoCommand.MESSAGE_USAGE));"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + \" -1\" + CONTENT_DESC,"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditToDoCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        int invalidIndex \u003d getModel().getFilteredToDoList().size() + 1;"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + \" \" + invalidIndex + CONTENT_DESC,"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"                Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + CONTENT_DESC,"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditToDoCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TODO.getOneBased(),"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"                EditToDoCommand.MESSAGE_NOT_EDITED_TODO);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: invalid content -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(EditToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TODO.getOneBased()"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"                + INVALID_CONTENT_DESC, Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        /* Case: edit a to-do with new values same as another to-do\u0027s values -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        ToDo anotherToDo \u003d new ToDoBuilder().withContent(\"Another thing to do\").build();"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(ToDoUtil.getAddToDoCommand(anotherToDo));"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(getModel().getAddressBook().getToDoList().contains(anotherToDo));"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        index \u003d INDEX_FIRST_TODO;"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(getModel().getFilteredToDoList().get(index.getZeroBased()).equals(anotherToDo));"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        command \u003d EditToDoCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" c/\" + \"Another thing to do\";"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(command, EditToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, ToDo, Index)} except that"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"     * @see EditToDoCommandSystemTest#assertCommandSuccess(String, Index, ToDo, Index)"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ToDo editedToDo) {"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, toEdit, editedToDo, null);"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditToDoCommand}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the model related components are updated to reflect the to-do at index {@code toEdit} being"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"     * updated to values specified {@code editedToDo}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"     * @see EditToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Index toEdit, ToDo editedToDo,"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateToDo("},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"                    expectedModel.getFilteredToDoList().get(toEdit.getZeroBased()), editedToDo);"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"            expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException | ToDoNotFoundException e) {"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException("},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"                    \"editedToDo is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"                String.format(EditToDoCommand.MESSAGE_EDIT_TODO_SUCCESS, editedToDo), expectedSelectedCardIndex);"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"     * @see EditToDoCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"nhatquang3112"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"nhatquang3112"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":180,"author":{"gitID":"nhatquang3112"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":185,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"        executeCommand(command);"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":192,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":193}},{"path":"src/test/java/seedu/address/logic/parser/UnCheckToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * As we are only doing white-node testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * outside of the UnCheckToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * same path through the UnCheckToDoCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private UnCheckToDoCommandParser parser \u003d new UnCheckToDoCommandParser();"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_validArgs_returnsUnCheckToDoCommand() {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, \"1\", new UnCheckToDoCommand(INDEX_FIRST_TODO));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure("},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":20,"LeonidAgarth":1,"-":12}},{"path":"src/test/java/seedu/address/logic/parser/AddGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFORMATION;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    private AddGroupCommandParser parser \u003d new AddGroupCommandParser();"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        Group expectedGroup \u003d new GroupBuilder().withInformation(VALID_INFORMATION).build();"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        // whitespace only preamble"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_INFORMATION,"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"                new AddGroupCommand(expectedGroup));"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        // valid content"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, VALID_INFORMATION,"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"                new AddGroupCommand(expectedGroup));"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        // missing content"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, PREAMBLE_WHITESPACE,"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"                expectedMessage);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        // invalid content"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_INFORMATION,"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"                Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":49}},{"path":"src/test/java/seedu/address/logic/parser/ChangeTagColorCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_COLOR;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" * Tests for the parsing of input arguments and creating a new ChangeTagColorCommand object"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTagColorCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private ChangeTagColorCommandParser parser \u003d new ChangeTagColorCommandParser();"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        // no color specified"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND, MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        // no field specified"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        // unsupported color specified"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_TAG_FRIEND + INVALID_TAG_COLOR,"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"                Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid tag name"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_TAG_DESC + \" \" + VALID_TAG_COLOR_RED,"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_validValue_success() {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        // unsupported color specified"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, VALID_TAG_FRIEND + \" \" + VALID_TAG_COLOR_RED,"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"                new ChangeTagColorCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":55}},{"path":"src/test/java/seedu/address/logic/parser/ListTagMembersCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListTagMembersCommand;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class ListTagMembersCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    private ListTagMembersCommandParser parser \u003d new ListTagMembersCommandParser();"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"                ListTagMembersCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void parse_validArgs_returnsListTagMembersCommand() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand expectedListTagMembersCommand \u003d"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"                new ListTagMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(\"friends\", \"CS3230\")));"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \"friends CS3230\", expectedListTagMembersCommand);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t CS3230  \\t\", expectedListTagMembersCommand);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":36}},{"path":"src/test/java/seedu/address/logic/parser/DeleteMemberFromGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_INDEX;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_NO_GROUP;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INFORMATION;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteMemberFromGroupCommand;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalGroups;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommandParserTest {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMemberFromGroupCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    private DeleteMemberFromGroupCommandParser parser \u003d new DeleteMemberFromGroupCommandParser();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        // no name of person specified"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, VALID_INFORMATION, MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        // no  field specified"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public void parse_compulsoryInvalidGroupField_failure() {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"                DeleteMemberFromGroupCommand.MESSAGE_USAGE);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        //missing group prefix"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_NO_GROUP, expectedMessage);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        //missing field"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser , \" \", expectedMessage);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    public void parse_indexNegative_failure() {"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        //negative index"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_INDEX, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    public void parse_invalidInformation_failure() {"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        //wrong input for Group Information"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_INFORMATION, expectedMessage);"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    public void parse_validInformation_success() {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        //correct input"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"        String correctInput \u003d index.getOneBased() + \" \" + PREFIX_GROUP + \"Group A\";"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        Group group \u003d TypicalGroups.getTypicalGroups().get(0);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, correctInput, new DeleteMemberFromGroupCommand(index, group));"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":81}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DID_YOU_MEAN;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.DeleteToDoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand.EditToDoDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListTagMembersCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.EditToDoDescriptorBuilder;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventUtil;"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoUtil;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_addToDo() throws Exception {"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d (AddToDoCommand) parser.parseCommand(ToDoUtil.getAddToDoCommand(toDo));"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new AddToDoCommand(toDo), command);"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_addToDoAlias() throws Exception {"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d (AddToDoCommand) parser.parseCommand(AddToDoCommand.COMMAND_ALIAS + \" \""},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"                + ToDoUtil.getToDoDetails(toDo));"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new AddToDoCommand(toDo), command);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_check() throws Exception {"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand command \u003d (CheckToDoCommand) parser.parseCommand("},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"                CheckToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TODO.getOneBased());"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new CheckToDoCommand(INDEX_FIRST_TODO), command);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_uncheck() throws Exception {"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand command \u003d (UnCheckToDoCommand) parser.parseCommand("},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"                UnCheckToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TODO.getOneBased());"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new UnCheckToDoCommand(INDEX_FIRST_TODO), command);"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_editToDo() throws Exception {"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder(toDo).build();"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand command \u003d (EditToDoCommand) parser.parseCommand(EditToDoCommand.COMMAND_WORD + \" \""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"                + INDEX_FIRST_TODO.getOneBased() + \" c/\" + ToDoUtil.getToDoDetails(toDo));"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new EditToDoCommand(INDEX_FIRST_TODO, descriptor), command);"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_editToDoAlias() throws Exception {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDo \u003d new ToDoBuilder().build();"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder(toDo).build();"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand command \u003d (EditToDoCommand) parser.parseCommand(EditToDoCommand.COMMAND_ALIAS + \" \""},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"                + INDEX_FIRST_TODO.getOneBased() + \" c/\" + ToDoUtil.getToDoDetails(toDo));"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new EditToDoCommand(INDEX_FIRST_TODO, descriptor), command);"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_deleteToDo() throws Exception {"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand command \u003d (DeleteToDoCommand) parser.parseCommand("},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"                DeleteToDoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TODO.getOneBased());"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new DeleteToDoCommand(INDEX_FIRST_TODO), command);"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_deleteToDoAlias() throws Exception {"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand command \u003d (DeleteToDoCommand) parser.parseCommand("},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"                DeleteToDoCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_TODO.getOneBased());"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(new DeleteToDoCommand(INDEX_FIRST_TODO), command);"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_addGroup() throws Exception {"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_WORD"},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"                + \" \" + group.getInformation());"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        assertEquals(new AddGroupCommand(group), command);"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_addGroupAlias() throws Exception {"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().build();"},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d (AddGroupCommand) parser.parseCommand(AddGroupCommand.COMMAND_ALIAS"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"                + \" \" + group.getInformation());"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"        assertEquals(new AddGroupCommand(group), command);"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_deleteGroup() throws Exception {"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        Information information \u003d new Information(\"Group A\");"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"                DeleteGroupCommand.COMMAND_WORD + \" \" + \"Group A\");"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"        assertEquals(new DeleteGroupCommand(information), command);"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_deleteGroupAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"        Information information \u003d new Information(\"Group A\");"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"                DeleteGroupCommand.COMMAND_ALIAS + \" \" + \"Group A\");"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"        assertEquals(new DeleteGroupCommand(information), command);"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_addEvent() throws Exception {"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(EventUtil.getAddEventCommand(event));"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new AddEventCommand(event), command);"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_addEventAlias() throws Exception {"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"        Event event \u003d new EventBuilder().build();"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(AddEventCommand.COMMAND_ALIAS + \" \""},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"                + EventUtil.getEventDetails(event));"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new AddEventCommand(event), command);"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_changeTagColor() throws Exception {"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"        String tagName \u003d \"friends\";"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"        String tagColor \u003d \"red\";"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d (ChangeTagColorCommand) parser.parseCommand(ChangeTagColorCommand.COMMAND_WORD"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"                + \" \" + tagName + \" \" + tagColor);"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new ChangeTagColorCommand(tagName, tagColor), command);"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_changeTagColorAlias() throws Exception {"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"        String tagName \u003d \"friends\";"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"        String tagColor \u003d \"red\";"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d (ChangeTagColorCommand) parser.parseCommand(ChangeTagColorCommand.COMMAND_ALIAS"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"                + \" \" + tagName + \" \" + tagColor);"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new ChangeTagColorCommand(tagName, tagColor), command);"},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_switch() throws Exception {"},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_WORD) instanceof SwitchCommand);"},{"lineNumber":214,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_WORD + \" view\") instanceof SwitchCommand);"},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"    public void parseCommand_switchAlias() throws Exception {"},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_ALIAS) instanceof SwitchCommand);"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(parser.parseCommand(SwitchCommand.COMMAND_ALIAS + \" view\") instanceof SwitchCommand);"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":234,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":239,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":246,"author":{"gitID":"nhatquang3112"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":255,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":263,"author":{"gitID":"nhatquang3112"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":264,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":278,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":286,"author":{"gitID":"nhatquang3112"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":305,"author":{"gitID":"Isaaaca"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND + MESSAGE_DID_YOU_MEAN + HistoryCommand.COMMAND_WORD,"},{"lineNumber":306,"author":{"gitID":"Isaaaca"},"content":"                    pe.getMessage());"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":311,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":312,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":313,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":314,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":324,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":325,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":326,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":328,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":329,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_listTagMembers() throws Exception {"},{"lineNumber":330,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"CS3230\");"},{"lineNumber":331,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand command \u003d (ListTagMembersCommand) parser.parseCommand("},{"lineNumber":332,"author":{"gitID":"jas5469"},"content":"                ListTagMembersCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":333,"author":{"gitID":"jas5469"},"content":"        assertEquals(new ListTagMembersCommand(new TagContainKeywordsPredicate(keywords)), command);"},{"lineNumber":334,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":336,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":337,"author":{"gitID":"jas5469"},"content":"    public void parseCommand_listTagGMembersAlias() throws Exception {"},{"lineNumber":338,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"CS3230\");"},{"lineNumber":339,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand command \u003d (ListTagMembersCommand) parser.parseCommand("},{"lineNumber":340,"author":{"gitID":"jas5469"},"content":"                ListTagMembersCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":341,"author":{"gitID":"jas5469"},"content":"        assertEquals(new ListTagMembersCommand(new TagContainKeywordsPredicate(keywords)), command);"},{"lineNumber":342,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":347,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":352,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":354,"author":{"gitID":"nhatquang3112"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":365,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":366,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":367,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"},{"lineNumber":368,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":369,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":371,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":377,"author":{"gitID":"nhatquang3112"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":378,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":379,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"},{"lineNumber":380,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":390,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":394,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":395,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":116,"Isaaaca":3,"jas5469":57,"LeonidAgarth":53,"-":166}},{"path":"src/test/java/seedu/address/logic/parser/ScheduleGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFORMATION;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ScheduleGroupCommand;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":" * Tests for the parsing of input arguments and creating a new ScheduleGroupCommand object"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"public class ScheduleGroupCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private ScheduleGroupCommandParser parser \u003d new ScheduleGroupCommandParser();"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_validArgs_returnsScheduleGroupCommand() {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        Group group \u003d new Group(new Information(VALID_INFORMATION));"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, VALID_INFORMATION, new ScheduleGroupCommand(group));"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_INFORMATION,"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleGroupCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":34}},{"path":"src/test/java/seedu/address/logic/parser/DeleteToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.DeleteToDoCommand;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * outside of the DeleteToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" * same path through the DeleteToDoCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class DeleteToDoCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    private DeleteToDoCommandParser parser \u003d new DeleteToDoCommandParser();"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_validArgs_returnsDeleteToDoCommand() {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, \"1\", new DeleteToDoCommand(INDEX_FIRST_TODO));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":33}},{"path":"src/test/java/seedu/address/logic/parser/CheckToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * As we are only doing white-node testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * outside of the CheckToDoCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" * same path through the CheckToDoCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    private CheckToDoCommandParser parser \u003d new CheckToDoCommandParser();"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_validArgs_returnsCheckToDoCommand() {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, \"1\", new CheckToDoCommand(INDEX_FIRST_TODO));"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":33}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_F1;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_NDP;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_NDP;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_F1;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_NDP;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_F1;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_NDP;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_F1;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_VENUE_DESC_NDP;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_VENUE_DESC;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_NDP;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandParserTest {"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        Event expectedEvent \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).withVenue(VALID_EVENT_VENUE_NDP)"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"                .withDate(VALID_EVENT_DATE_NDP).withStartTime(VALID_EVENT_START_TIME_NDP)"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"                .withEndTime(VALID_EVENT_END_TIME_NDP).build();"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        // whitespace only preamble"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple names - last name accepted"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_F1 + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple venues - last venue accepted"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_F1 + EVENT_VENUE_DESC_NDP"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple dates - last date accepted"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_F1"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple start times - last time accepted"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_F1 + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEvent));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        // multiple tags - all accepted"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        Event expectedEventMultipleTags \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP)"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"                .withVenue(VALID_EVENT_VENUE_NDP).withDate(VALID_EVENT_DATE_NDP)"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_NDP).withEndTime(VALID_EVENT_END_TIME_NDP).build();"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"                new AddEventCommand(expectedEventMultipleTags));"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        // missing name prefix"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        // missing venue prefix"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + VALID_EVENT_VENUE_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        // missing date prefix"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + VALID_EVENT_DATE_NDP"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        // missing start time prefix"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"                + VALID_EVENT_START_TIME_NDP + EVENT_END_TIME_DESC_NDP, expectedMessage);"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        // missing end time prefix"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"                + EVENT_START_TIME_DESC_NDP + VALID_EVENT_END_TIME_NDP, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        // all prefixes missing"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME_NDP + VALID_EVENT_VENUE_NDP + VALID_EVENT_DATE_NDP"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"                + VALID_EVENT_START_TIME_NDP + VALID_EVENT_END_TIME_NDP, expectedMessage);"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid name"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid venue"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + INVALID_EVENT_VENUE_DESC + EVENT_DATE_DESC_NDP"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid date"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + INVALID_EVENT_DATE_DESC"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid start time"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"                        + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        // invalid end time"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_START_TIME_DESC_NDP + INVALID_EVENT_END_TIME_DESC,"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"                Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        // endTime before Start"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"                        + \" \" + PREFIX_END_TIME + \"0000\" + EVENT_START_TIME_DESC_NDP,"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"                AddEventCommand.MESSAGE_END_BEFORE_START);"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_VENUE_DESC_NDP + EVENT_DATE_DESC_NDP"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"                + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_NDP, Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"        // non-empty preamble"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_NDP + EVENT_VENUE_DESC_NDP"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"                        + EVENT_DATE_DESC_NDP + EVENT_START_TIME_DESC_NDP + EVENT_END_TIME_DESC_NDP,"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":149}},{"path":"src/test/java/seedu/address/logic/parser/DeleteGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":" * outside of the DeleteGroupCommand code. For example, inputs \"Group\" and \"Group A\" take the"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":" * same path through the DeleteGroupCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private DeleteGroupCommandParser parser \u003d new DeleteGroupCommandParser();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public void parse_validArgs_returnsDeleteGroupCommand() {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \"Group A\", new DeleteGroupCommand(GROUP_A.getInformation()));"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"!\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"                DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":34}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * As we are only doing white-node testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":1,"-":31}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_LINK_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_LINK_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"                + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeTableLink(VALID_TIMETABLE_LINK_BOB)"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"                        + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimeTableLink(VALID_TIMETABLE_LINK_AMY)"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"                .withDetail(VALID_DETAIL_AMY).withTags().build();"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_AMY + DETAIL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":119,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"        // missing link prefix"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"                + VALID_TIMETABLE_LINK_BOB + DETAIL_DESC_BOB, expectedMessage);"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        // missing detail prefix"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + VALID_DETAIL_BOB, expectedMessage);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"                + VALID_TIMETABLE_LINK_BOB + VALID_DETAIL_BOB, expectedMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":"        // invalid link"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"                        + INVALID_TIMETABLE_LINK_DESC + DETAIL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"                TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"        // invalid detail"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + INVALID_DETAIL_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":"                Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"                + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"                        + ADDRESS_DESC_BOB + TIMETABLE_LINK_DESC_BOB + DETAIL_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"                        + TAG_DESC_FRIEND,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":51,"Isaaaca":19,"-":120}},{"path":"src/test/java/seedu/address/logic/parser/AddToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommandParser parser \u003d new AddToDoCommandParser();"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        ToDo expectedToDo \u003d new ToDoBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        // whitespace only preamble"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_CONTENT,"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"                new AddToDoCommand(expectedToDo));"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        // valid content"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        assertParseSuccess(parser, VALID_CONTENT,"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                new AddToDoCommand(expectedToDo));"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        // missing content"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, PREAMBLE_WHITESPACE,"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                expectedMessage);"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        // invalid content"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, INVALID_CONTENT,"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"                Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":49}},{"path":"src/test/java/seedu/address/logic/parser/ListGroupMembersCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.MembersInGroupPredicate;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    private ListGroupMembersCommandParser parser \u003d new ListGroupMembersCommandParser();"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"\", String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"                ListGroupMembersCommand.MESSAGE_USAGE)));"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void parse_validArgs_returnsListGroupMembersCommand() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new Group(new Information(\"Group A\"));"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand expectedListGroupMembersCommand \u003d"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                new ListGroupMembersCommand(new MembersInGroupPredicate(group), group);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, \"Group A\", expectedListGroupMembersCommand);"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"##!#@\", String.format(Information.MESSAGE_INFORMATION_CONSTRAINTS));"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":38}},{"path":"src/test/java/seedu/address/logic/parser/AddMemberToGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_INDEX;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDGROUPMEMBER_NO_GROUP;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INFORMATION;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddMemberToGroupCommand;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalGroups;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommandParserTest {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberToGroupCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    private AddMemberToGroupCommandParser parser \u003d new AddMemberToGroupCommandParser();"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        // no name of person specified"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, VALID_INFORMATION, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        // no  field specified"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    public void parse_compulsoryInvalidGroupField_failure() {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMemberToGroupCommand.MESSAGE_USAGE);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        //missing group prefix"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_NO_GROUP, expectedMessage);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        //missing field"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser , \" \", expectedMessage);"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    public void parse_indexNegative_failure() {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_INDEX);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        //negative index"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_INDEX, expectedMessage);"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    public void parse_invalidInformation_failure() {"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        //wrong input for Group Information"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        assertParseFailure(parser, INVALID_ADDGROUPMEMBER_INFORMATION, expectedMessage);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    public void parse_validInformation_success() {"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        //correct input"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        String correctInput \u003d index.getOneBased() + \" \" + PREFIX_GROUP + \"Group A\";"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        Group group \u003d TypicalGroups.getTypicalGroups().get(0);"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        assertParseSuccess(parser, correctInput, new AddMemberToGroupCommand(index, group));"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":79}},{"path":"src/test/java/seedu/address/logic/commands/SwitchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SwitchCommand."},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"public class SwitchCommandTest {"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private Model expectedModel;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private SwitchCommand switchCommand;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_calendarToTimetable_success() {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel.switchView();"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        switchCommand \u003d new SwitchCommand();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        switchCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(switchCommand, model, SwitchCommand.MESSAGE_SUCCESS_TIMETABLE, expectedModel);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_timetableToCalendar_success() {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        model.switchView();"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        switchCommand \u003d new SwitchCommand();"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        switchCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(switchCommand, expectedModel, SwitchCommand.MESSAGE_SUCCESS_CALENDAR, model);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":44}},{"path":"src/test/java/seedu/address/logic/parser/EditToDoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_DESC;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT_DESC;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand.EditToDoDescriptor;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.EditToDoDescriptorBuilder;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditToDoCommand.MESSAGE_USAGE);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private EditToDoCommandParser parser \u003d new EditToDoCommandParser();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, VALID_CONTENT, MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        // no field specified"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"1\", EditToDoCommand.MESSAGE_NOT_EDITED_TODO);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"-5\" + CONTENT_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        // zero index"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"0\" + CONTENT_DESC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        assertParseFailure(parser, \"1\" + INVALID_CONTENT_DESC, Content.MESSAGE_CONTENT_CONSTRAINTS); // invalid content"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        Index targetIndex \u003d INDEX_SECOND_TODO;"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        String userInput \u003d targetIndex.getOneBased() + CONTENT_DESC;"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand expectedCommand \u003d new EditToDoCommand(targetIndex, descriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":28,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandTest {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        new AddEventCommand(null);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        CommandResult commandResult \u003d getAddEventCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        Event validEvent \u003d new EventBuilder().build();"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        getAddEventCommandForEvent(validEvent, modelStub).execute();"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race \u003d new EventBuilder().build();"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        Event iLight \u003d new Event(\"iLight\", \"Marina Bay\", \"01/04/2018\", \"1930\", \"2359\");"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addF1Command \u003d new AddEventCommand(f1Race);"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addILightCommand \u003d new AddEventCommand(iLight);"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(addF1Command.equals(addF1Command));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand addF1CommandCopy \u003d new AddEventCommand(f1Race);"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(addF1Command.equals(addF1CommandCopy));"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(1));"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(null));"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        // different event -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(addF1Command.equals(addILightCommand));"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"     * Generates a new AddEventCommand with the details of the given event."},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    private AddEventCommand getAddEventCommandForEvent(Event event, Model model) {"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        AddEventCommand command \u003d new AddEventCommand(event);"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    private class ModelStub implements Model {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"        ) {"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"                throws DuplicatePersonException {"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo) throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateGroup(Group target, Group editedGroup) throws DuplicateGroupException,"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"                GroupNotFoundException {"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"            return null;"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"            return null;"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"            return null;"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"            return null;"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":214,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":234,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"LeonidAgarth"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":239,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":241,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"        public void switchView() {"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":251,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"LeonidAgarth"},"content":"     * A Model stub that always throw a DuplicateEventException when trying to add a event."},{"lineNumber":253,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"    private class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":255,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":257,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":258,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":260,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"LeonidAgarth"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":262,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddressBook();"},{"lineNumber":263,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":266,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"LeonidAgarth"},"content":"     * A Model stub that always accept the event being added."},{"lineNumber":268,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"LeonidAgarth"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {"},{"lineNumber":270,"author":{"gitID":"LeonidAgarth"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":271,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":272,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":274,"author":{"gitID":"LeonidAgarth"},"content":"            requireNonNull(event);"},{"lineNumber":275,"author":{"gitID":"LeonidAgarth"},"content":"            eventsAdded.add(event);"},{"lineNumber":276,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":279,"author":{"gitID":"LeonidAgarth"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":280,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddressBook();"},{"lineNumber":281,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":284}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TIMETABLE_LINK_AMY \u003d \"http://modsn.us/hwWlG\";"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TIMETABLE_LINK_BOB \u003d \"http://modsn.us/d8zfG\";"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_DETAIL_AMY \u003d \"Likes boy\";"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_DETAIL_BOB \u003d \"Likes girl\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friends\";"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_TAG_COLOR_RED \u003d \"red\";"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_TAG_COLOR_BROWN \u003d \"brown\";"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"UNUSED\"; //for testing only, do not use to build person"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_NAME_F1 \u003d \"F1 Race\";"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_NAME_NDP \u003d \"National Day Parade\";"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_VENUE_F1 \u003d \"Marina Bay Street Circuit\";"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_VENUE_NDP \u003d \"Promenade\";"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_DATE_F1 \u003d \"19/07/2018\";"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_DATE_NDP \u003d \"09/08/2018\";"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_START_TIME_F1 \u003d \"1000\";"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_START_TIME_NDP \u003d \"1700\";"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_END_TIME_F1 \u003d \"2100\";"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String VALID_EVENT_END_TIME_NDP \u003d \"1900\";"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"    public static final String TIMETABLE_LINK_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE_LINK + VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"    public static final String TIMETABLE_LINK_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE_LINK + VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_DESC_AMY \u003d \" \" + PREFIX_DETAIL + VALID_DETAIL_AMY;"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_DESC_BOB \u003d \" \" + PREFIX_DETAIL + VALID_DETAIL_BOB;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_NAME_DESC_F1 \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_F1;"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_NAME_DESC_NDP \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_NDP;"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_VENUE_DESC_F1 \u003d \" \" + PREFIX_VENUE + VALID_EVENT_VENUE_F1;"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_VENUE_DESC_NDP \u003d \" \" + PREFIX_VENUE + VALID_EVENT_VENUE_NDP;"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_DATE_DESC_F1 \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_F1;"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_DATE_DESC_NDP \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_NDP;"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_START_TIME_DESC_F1 \u003d \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_F1;"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_START_TIME_DESC_NDP \u003d \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_NDP;"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_END_TIME_DESC_F1 \u003d \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_F1;"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String EVENT_END_TIME_DESC_NDP \u003d \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_NDP;"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"    public static final String INVALID_TIMETABLE_LINK_DESC \u003d \" \" + PREFIX_TIMETABLE_LINK"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"            + \"https:modn.us/aoubo\"; //URL head not correct"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_DETAIL_DESC \u003d \" \" + PREFIX_DETAIL"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"            + \"Likes \u0026\"; //\u0027\u0026\u0027 not allowed in detail"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_TAG_COLOR \u003d \" rainbow\"; // doesn\u0027t support"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Something\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_VENUE_DESC \u003d \" \" + PREFIX_VENUE + \"where!?!\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2018-03-28\"; // not DD/MM/YYYY format"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"2369\"; // wrong minute"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String INVALID_EVENT_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"23:59\";    // not HHmm format"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_E \u003d \"ToDo E\";"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_B \u003d \"ToDo B\";"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_CONTENT \u003d \"Something to do\";"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_CONTENT \u003d \"Something to do\u0026\"; // \u0027\u0026\u0027 not allowed in contents"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_STATUS_DONE \u003d \"done\";"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"    public static final String VALID_STATUS_UNDONE \u003d \"undone\";"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_STATUS \u003d \"invalid status\";"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT;"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"    public static final String INVALID_CONTENT_DESC \u003d \" \" + PREFIX_CONTENT + INVALID_CONTENT;"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"    public static final String INFORMATION_A \u003d \"Group A\";"},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"    public static final String INFORMATION_E \u003d \"Group E\";"},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":"    public static final String VALID_INFORMATION \u003d \"GROUP A\";"},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":"    public static final String INVALID_INFORMATION \u003d \"Group! A\"; //\u0027!\u0027 not supported in information"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"    public static final String VALID_DESC_GROUP \u003d \" \" + PREFIX_GROUP + VALID_INFORMATION + \" \""},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"            + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"    public static final String INVALID_ADDGROUPMEMBER_NO_GROUP \u003d \" 1 \" + \"\";"},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"    public static final String INVALID_ADDGROUPMEMBER_INDEX \u003d \" -1 \" + PREFIX_GROUP + \"Group A\";"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"    public static final String INVALID_ADDGROUPMEMBER_INFORMATION \u003d \" 1 \" + PREFIX_GROUP + \"!@#\";"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":176,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":20,"Isaaaca":7,"jas5469":23,"LeonidAgarth":32,"-":150}},{"path":"src/test/java/seedu/address/logic/commands/DeleteMemberFromGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":" * Contains tests  and unit tests for"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":" * {@code DeleteMembersFromGroupCommand}."},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommandTest {"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    private Model model;"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    @Before"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"    public void setUp() {"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    public void execute_deletePerson_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        Group groupToDelete \u003d model.getFilteredGroupList().get(2);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        Index index \u003d Index.fromZeroBased(0);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(DeleteMemberFromGroupCommand.MESSAGE_DELETE_PERSON_FROM_GROUP_SUCCESS,"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"                personToDelete.getName().toString(), groupToDelete);"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        DeleteMemberFromGroupCommand deleteMemberFromGroupCommand \u003d prepareCommand(index, groupToDelete);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        expectedModel.getFilteredGroupList().get(2).removePerson(personToDelete);"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(deleteMemberFromGroupCommand, model, expectedMessage, model);"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    public void execute_noSuchGroup_throwsCommandException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        DeleteMemberFromGroupCommandTest.ModelStubAcceptingGroupEditted modelStub \u003d new"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                DeleteMemberFromGroupCommandTest.ModelStubAcceptingGroupEditted();"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        Group invalidGroup \u003d new GroupBuilder().withInformation(\"INVALID\").build();"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(DeleteMemberFromGroupCommand.MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        getDeleteMemberFromGroupCommandForGroup(INDEX_FIRST_PERSON, invalidGroup, modelStub).execute();"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"    public void execute_invalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        DeleteMemberFromGroupCommandTest.ModelStubAcceptingGroupEditted modelStub \u003d new"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"                DeleteMemberFromGroupCommandTest.ModelStubAcceptingGroupEditted();"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(DeleteMemberFromGroupCommand.MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        getDeleteMemberFromGroupCommandForGroup(INDEX_FIRST_PERSON, validGroup, modelStub).execute();"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"     * Returns a {@code DeleteMemberFromGroupCommand} with the parameter {@code index}."},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    private DeleteMemberFromGroupCommand prepareCommand(Index index, Group groupToDelete) {"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        DeleteMemberFromGroupCommand deleteMemberFromGroupCommand \u003d new DeleteMemberFromGroupCommand(index,"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"                groupToDelete);"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"        deleteMemberFromGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        return deleteMemberFromGroupCommand;"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"     * Generates a new DeleteMemberFromGroupCommand with the details of the given to-do."},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"    private DeleteMemberFromGroupCommand getDeleteMemberFromGroupCommandForGroup(Index index, Group group,"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"                                                                                 Model model) {"},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"        DeleteMemberFromGroupCommand command \u003d new DeleteMemberFromGroupCommand(index, group);"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"    private class ModelStub implements Model {"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":"        ) {"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":181,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"                throws DuplicatePersonException {"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":"                throws DuplicateToDoException {"},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"        public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"                throws DuplicateGroupException {"},{"lineNumber":197,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":199,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":201,"author":{"gitID":"jas5469"},"content":"            return model.getFilteredPersonList();"},{"lineNumber":202,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":204,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":206,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":208,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":210,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":212,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":214,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":"            return model.getFilteredGroupList();"},{"lineNumber":219,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":224,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":226,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":228,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":229,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":231,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":233,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":234,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":236,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":241,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"jas5469"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":243,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":246,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"jas5469"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"jas5469"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":"        public void switchView() {"},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always accept the group being added."},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":"    private class ModelStubAcceptingGroupEditted extends DeleteMemberFromGroupCommandTest.ModelStub {"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":"            requireNonNull(group);"},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":"            groupsAdded.add(group);"},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"            return new AddressBook();"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":279}},{"path":"src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_B;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_GROUP;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":" * Contains tests  and unit tests for"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":" * {@code DeleteGroupCommand}."},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommandTest {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public void execute_validNameUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST_GROUP.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete.getInformation());"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    public void executeUndoRedo_validNameUnfilteredList_success() throws Exception {"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        Group groupToDelete \u003d model.getFilteredGroupList().get(INDEX_FIRST_GROUP.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete.getInformation());"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        // delete -\u003e first to-do deleted"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        deleteGroupCommand.execute();"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        undoRedoStack.push(deleteGroupCommand);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        // redo -\u003e same first to-do deleted again"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    public void execute_invalidNameUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        Information information \u003d new Information(\"GROUP G\");"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(information);"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_NAME);"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    public void executeUndoRedo_invalidNameUnfilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        Information information \u003d new Information(\"GROUP G\");"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(information);"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        // execution failed -\u003e deleteGroupCommand not pushed into undoRedoStack"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(deleteGroupCommand, model, Messages.MESSAGE_INVALID_GROUP_NAME);"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"    public void equals() throws Exception {"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupFirstCommand \u003d prepareCommand(GROUP_A.getInformation());"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupSecondCommand \u003d prepareCommand(GROUP_B.getInformation());"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommand));"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupFirstCommandCopy \u003d prepareCommand(GROUP_A.getInformation());"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommandCopy));"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"        assertFalse(deleteGroupFirstCommand.equals(1));"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"        assertFalse(deleteGroupFirstCommand.equals(null));"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"        // different group -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"        assertFalse(deleteGroupFirstCommand.equals(deleteGroupSecondCommand));"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"     * Returns a {@code DeleteGroupCommand} with the parameter {@code index}."},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"    private DeleteGroupCommand prepareCommand(Information information) {"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(information);"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"        deleteGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"        return deleteGroupCommand;"},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":123}},{"path":"src/test/java/seedu/address/logic/commands/ChangeTagColorCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":" * and unit tests for ChangeTagColorCommand."},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandTest {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private Model model;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_correctFields_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(ChangeTagColorCommand.MESSAGE_EDIT_TAG_SUCCESS, VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        Tag oldTag \u003d new Tag(VALID_TAG_FRIEND);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        Tag newTag \u003d new Tag(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        expectedModel.updateTag(oldTag, newTag);"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_tagNameNotInList_failure() throws Exception {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d prepareCommand(VALID_TAG_HUSBAND, VALID_TAG_COLOR_RED);"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        assertCommandFailure(command, model, ChangeTagColorCommand.MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() throws Exception {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command1 \u003d prepareCommand(VALID_TAG_HUSBAND, VALID_TAG_COLOR_RED);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command2 \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command3 \u003d prepareCommand(VALID_TAG_FRIEND, VALID_TAG_COLOR_RED);"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(command1, command1);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(command2, command3);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(command3, 1);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(command1, command2);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    private ChangeTagColorCommand prepareCommand(String name, String color) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand command \u003d new ChangeTagColorCommand(name, color);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        return command;"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":78}},{"path":"src/test/java/seedu/address/logic/commands/DeleteToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":" * {@code DeleteToDoCommand}."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"public class DeleteToDoCommandTest {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToDelete \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(DeleteToDoCommand.MESSAGE_DELETE_TODO_SUCCESS, toDoToDelete);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.deleteToDo(toDoToDelete);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(deleteToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(deleteToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToDelete \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        // delete -\u003e first to-do deleted"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        deleteToDoCommand.execute();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(deleteToDoCommand);"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do deleted again"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.deleteToDo(toDoToDelete);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e deleteToDoCommand not pushed into undoRedoStack"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(deleteToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoFirstCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoSecondCommand \u003d prepareCommand(INDEX_SECOND_TODO);"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(deleteToDoFirstCommand.equals(deleteToDoFirstCommand));"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(deleteToDoFirstCommand.equals(deleteToDoFirstCommandCopy));"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        deleteToDoFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(deleteToDoFirstCommand.equals(deleteToDoFirstCommandCopy));"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(deleteToDoFirstCommand.equals(1));"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(deleteToDoFirstCommand.equals(null));"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(deleteToDoFirstCommand.equals(deleteToDoSecondCommand));"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a {@code DeleteToDoCommand} with the parameter {@code index}."},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    private DeleteToDoCommand prepareCommand(Index index) {"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"        DeleteToDoCommand deleteToDoCommand \u003d new DeleteToDoCommand(index);"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"        deleteToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        return deleteToDoCommand;"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":125}},{"path":"src/test/java/seedu/address/logic/commands/ListTagMembersCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":" * Contains integration tests (interaction with the Model) for {@code ListTagMembersCommand}."},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"public class ListTagMembersCommandTest {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"                new TagContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"                new TagContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand findFirstCommand \u003d new ListTagMembersCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand findSecondCommand \u003d new ListTagMembersCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand findFirstCommandCopy \u003d new ListTagMembersCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand command \u003d prepareCommand(\"CS3230 owesMoney\");"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     * Parses {@code userInput} into a {@code ListTagMembersCommand}."},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    private ListTagMembersCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        ListTagMembersCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"                new ListTagMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"    private void assertCommandSuccess(ListTagMembersCommand command, String expectedMessage,"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"                                      List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":99}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_C;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_G;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_H;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.TimetableChangedEvent;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":" * Contains integration tests (interaction with the Model) for {@code ScheduleGroupCommand}."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"public class ScheduleGroupCommandTest {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    private Model model;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    private ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Before"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_validGroup_success() {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        String[] daysOfWeek \u003d {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"};"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        ArrayList\u003cWeeklyEvent\u003e freeA \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        Module mod \u003d new Module(\"Free\", \"\", null);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        for (String day : daysOfWeek) {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"            for (int s \u003d 800; s \u003c 1800; s +\u003d 100) {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                Schedule sch \u003d new Schedule(\"\", \"\", \"\", day, \"\" + s, \"\" + (s + 100), \"\");"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                freeA.add(new WeeklyEvent(mod, sch));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertExecutionSuccess(GROUP_A, freeA);"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        ArrayList\u003cWeeklyEvent\u003e freeH \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Monday\", \"800\", \"900\", \"\")));"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Monday\", \"1600\", \"1700\", \"\")));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Monday\", \"1700\", \"1800\", \"\")));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Tuesday\", \"1400\", \"1500\", \"\")));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Tuesday\", \"1500\", \"1600\", \"\")));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Wednesday\", \"800\", \"900\", \"\")));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Wednesday\", \"1200\", \"1300\", \"\")));"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Wednesday\", \"1300\", \"1400\", \"\")));"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Wednesday\", \"1600\", \"1700\", \"\")));"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Wednesday\", \"1700\", \"1800\", \"\")));"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Thursday\", \"800\", \"900\", \"\")));"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Thursday\", \"900\", \"1000\", \"\")));"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Thursday\", \"1300\", \"1400\", \"\")));"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Thursday\", \"1400\", \"1500\", \"\")));"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Thursday\", \"1500\", \"1600\", \"\")));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Friday\", \"1200\", \"1300\", \"\")));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        freeH.add(new WeeklyEvent(mod, new Schedule(\"\", \"\", \"\", \"Friday\", \"1300\", \"1400\", \"\")));"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        assertExecutionSuccess(GROUP_H, freeH);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public void execute_groupNotFound_failure() {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        assertExecutionFailure(GROUP_C,"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(ScheduleGroupCommand.MESSAGE_GROUP_NOT_FOUND, GROUP_C.getInformation()));"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        assertExecutionFailure(GROUP_G,"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"                String.format(ScheduleGroupCommand.MESSAGE_GROUP_NOT_FOUND, GROUP_G.getInformation()));"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand groupACommand \u003d new ScheduleGroupCommand(GROUP_A);"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand groupHCommand \u003d new ScheduleGroupCommand(GROUP_H);"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(groupACommand.equals(groupACommand));"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        // same values -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand selectFirstCommandCopy \u003d new ScheduleGroupCommand(GROUP_A);"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(groupACommand.equals(selectFirstCommandCopy));"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(groupACommand.equals(1));"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(groupACommand.equals(null));"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        // different person -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(groupACommand.equals(groupHCommand));"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes a {@code ScheduleGroupCommand} with the given {@code index},"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"     * and checks that {@code JumpToListRequestEvent} is raised with the correct index."},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertExecutionSuccess(Group group, ArrayList\u003cWeeklyEvent\u003e freeSlots) {"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand scheduleGroupCommand \u003d prepareCommand(group);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"            CommandResult commandResult \u003d scheduleGroupCommand.execute();"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"            assertEquals(String.format(ScheduleGroupCommand.MESSAGE_SUCCESS, group.getInformation()),"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (CommandException ce) {"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        TimetableChangedEvent lastEvent \u003d (TimetableChangedEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(lastEvent !\u003d null);"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(lastEvent.timetable.equals(freeSlots));"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"     * Executes a {@code ScheduleGroupCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"    private void assertExecutionFailure(Group group, String expectedMessage) {"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand scheduleGroupCommand \u003d prepareCommand(group);"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"            scheduleGroupCommand.execute();"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (CommandException ce) {"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns a {@code ScheduleGroupCommand} with parameters {@code index}."},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"    private ScheduleGroupCommand prepareCommand(Group group) {"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"        ScheduleGroupCommand scheduleGroupCommand \u003d new ScheduleGroupCommand(group);"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        scheduleGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"        return scheduleGroupCommand;"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":158}},{"path":"src/test/java/seedu/address/logic/commands/AddToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandTest {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_nullToDo_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        new AddToDoCommand(null);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_todoAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        ModelStubAcceptingToDoAdded modelStub \u003d new ModelStubAcceptingToDoAdded();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        CommandResult commandResult \u003d getAddToDoCommandForToDo(validToDo, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(String.format(AddToDoCommand.MESSAGE_SUCCESS, validToDo), commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Arrays.asList(validToDo), modelStub.todosAdded);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_duplicateToDo_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateToDoException();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expectMessage(AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        getAddToDoCommandForToDo(validToDo, modelStub).execute();"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoA \u003d new ToDoBuilder().withContent(\"ToDo A\").build();"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        ToDo todoB \u003d new ToDoBuilder().withContent(\"ToDo B\").build();"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoACommand \u003d new AddToDoCommand(todoA);"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoBCommand \u003d new AddToDoCommand(todoB);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(addToDoACommand.equals(addToDoACommand));"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand addToDoACommandCopy \u003d new AddToDoCommand(todoA);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(addToDoACommand.equals(addToDoACommandCopy));"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(null));"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(addToDoACommand.equals(addToDoBCommand));"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"     * Generates a new AddToDoCommand with the details of the given to-do."},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommand getAddToDoCommandForToDo(ToDo todo, Model model) {"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d new AddToDoCommand(todo);"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"    private class ModelStub implements Model {"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        ) {"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"nhatquang3112"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicatePersonException {"},{"lineNumber":171,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"nhatquang3112"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":176,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateToDoException {"},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":180,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"nhatquang3112"},"content":"        public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":182,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateGroupException {"},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"            return null;"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":192,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":194,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"nhatquang3112"},"content":"            return null;"},{"lineNumber":196,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":198,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":200,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"nhatquang3112"},"content":"            return null;"},{"lineNumber":202,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":204,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"            return null;"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":212,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":215,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":217,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":218,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":227,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":228,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":230,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"nhatquang3112"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":237,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":238,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":240,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"nhatquang3112"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":242,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":243,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":244,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":246,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"nhatquang3112"},"content":"        public void switchView() {"},{"lineNumber":248,"author":{"gitID":"nhatquang3112"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":252,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"nhatquang3112"},"content":"     * A Model stub that always throw a DuplicateToDoException when trying to add a to-do."},{"lineNumber":254,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"nhatquang3112"},"content":"    private class ModelStubThrowingDuplicateToDoException extends ModelStub {"},{"lineNumber":256,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":257,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":258,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":259,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":261,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":262,"author":{"gitID":"nhatquang3112"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":263,"author":{"gitID":"nhatquang3112"},"content":"            return new AddressBook();"},{"lineNumber":264,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":267,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"nhatquang3112"},"content":"     * A Model stub that always accept the to-do being added."},{"lineNumber":269,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"nhatquang3112"},"content":"    private class ModelStubAcceptingToDoAdded extends ModelStub {"},{"lineNumber":271,"author":{"gitID":"nhatquang3112"},"content":"        final ArrayList\u003cToDo\u003e todosAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":272,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":273,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":275,"author":{"gitID":"nhatquang3112"},"content":"            requireNonNull(todo);"},{"lineNumber":276,"author":{"gitID":"nhatquang3112"},"content":"            todosAdded.add(todo);"},{"lineNumber":277,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":279,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":280,"author":{"gitID":"nhatquang3112"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":281,"author":{"gitID":"nhatquang3112"},"content":"            return new AddressBook();"},{"lineNumber":282,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":284}},{"path":"src/test/java/seedu/address/logic/commands/AddGroupCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":" * Contains integration tests (interaction with the Model) for {@code AddGroupCommand}."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    public void execute_newGroup_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().build();"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        expectedModel.addGroup(validGroup);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(prepareCommand(validGroup, model), model,"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"                String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup), expectedModel);"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public void execute_duplicateGroup_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        Group groupInList \u003d model.getAddressBook().getGroupList().get(0);"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(prepareCommand(groupInList, model), model, AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     * Generates a new {@code AddGroupCommand} which upon execution, adds {@code group} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    private AddGroupCommand prepareCommand(Group group, Model model) {"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d new AddGroupCommand(group);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":55}},{"path":"src/test/java/seedu/address/logic/commands/CheckToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":" * {@code CheckToDoCommand}."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandTest {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(CheckToDoCommand.MESSAGE_CHECK_TODO_SUCCESS, toDoToCheck);"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(checkToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(checkToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        ToDo checkedToDo \u003d new ToDo(toDoToCheck.getContent(), new Status(\"done\"));"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        // check -\u003e first to-do checked"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoCommand.execute();"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(checkToDoCommand);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do checked again"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e checkToDoCommand not pushed into undoRedoStack"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(checkToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoFirstCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoSecondCommand \u003d prepareCommand(INDEX_SECOND_TODO);"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(checkToDoFirstCommand.equals(checkToDoFirstCommand));"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(checkToDoFirstCommand.equals(checkToDoFirstCommandCopy));"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(checkToDoFirstCommandCopy));"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(null));"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(checkToDoFirstCommand.equals(checkToDoSecondCommand));"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a {@code CheckToDoCommand} with the parameter {@code index}."},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    private CheckToDoCommand prepareCommand(Index index) {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand checkToDoCommand \u003d new CheckToDoCommand(index);"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        checkToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        return checkToDoCommand;"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":128}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"        public void updateGroup(Group target, Group groupToEdit) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"        ) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"nhatquang3112"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":179,"author":{"gitID":"nhatquang3112"},"content":"                throws DuplicateToDoException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":212,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"nhatquang3112"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":237,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":238,"author":{"gitID":"LeonidAgarth"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":241,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":"        public void switchView() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":15,"Isaaaca":5,"jas5469":15,"LeonidAgarth":31,"-":215}},{"path":"src/test/java/seedu/address/logic/commands/AddGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandTest {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    public void constructor_nullGroup_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        new AddGroupCommand(null);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"        ModelStubAcceptingGroupAdded modelStub \u003d new ModelStubAcceptingGroupAdded();"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().build();"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        CommandResult commandResult \u003d getAddGroupCommandForGroup(validGroup, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        assertEquals(String.format(AddGroupCommand.MESSAGE_SUCCESS, validGroup), commandResult.feedbackToUser);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        assertEquals(Arrays.asList(validGroup), modelStub.groupsAdded);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    public void execute_duplicateGroup_throwsCommandException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateGroupException();"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().build();"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(AddGroupCommand.MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        getAddGroupCommandForGroup(validGroup, modelStub).execute();"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        Group groupA \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"        Group groupB \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupACommand \u003d new AddGroupCommand(groupA);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupBCommand \u003d new AddGroupCommand(groupB);"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        assertTrue(addGroupACommand.equals(addGroupACommand));"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand addGroupACommandCopy \u003d new AddGroupCommand(groupA);"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"        assertTrue(addGroupACommand.equals(addGroupACommandCopy));"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(null));"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"        // different group -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"        assertFalse(addGroupACommand.equals(addGroupBCommand));"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"     * Generates a new AddGroupCommand with the details of the given group."},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    private AddGroupCommand getAddGroupCommandForGroup(Group group, Model model) {"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        AddGroupCommand command \u003d new AddGroupCommand(group);"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"    private class ModelStub implements Model {"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"        public void addToDo(ToDo toDos) throws DuplicateToDoException {"},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"        ) {"},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"                throws DuplicatePersonException {"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":"                throws DuplicateToDoException {"},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":179,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":"        public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":181,"author":{"gitID":"jas5469"},"content":"                throws DuplicateGroupException {"},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":197,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":199,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":201,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":203,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":207,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":211,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":214,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":219,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":224,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":226,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":227,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":229,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"jas5469"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":231,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":234,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"jas5469"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":236,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":237,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":239,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"jas5469"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":241,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":243,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":245,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"jas5469"},"content":"        public void switchView() {"},{"lineNumber":247,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always throw a DuplicateGroupException when trying to add a group."},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"    private class ModelStubThrowingDuplicateGroupException extends ModelStub {"},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"            return new AddressBook();"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always accept the group being added."},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"    private class ModelStubAcceptingGroupAdded extends ModelStub {"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":"        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":"            requireNonNull(group);"},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"            groupsAdded.add(group);"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"            return new AddressBook();"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":283}},{"path":"src/test/java/seedu/address/logic/commands/UnCheckToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":" * {@code UnCheckToDoCommand}."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandTest {"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(UnCheckToDoCommand.MESSAGE_UNCHECK_TODO_SUCCESS, toDoToUnCheck);"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(unCheckToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(unCheckToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToUnCheck \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        ToDo unCheckedToDo \u003d new ToDo(toDoToUnCheck.getContent(), new Status(\"undone\"));"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        // uncheck -\u003e first to-do unchecked"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoCommand.execute();"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(unCheckToDoCommand);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do unChecked again"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e unCheckToDoCommand not pushed into undoRedoStack"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(unCheckToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoFirstCommand \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoSecondCommand \u003d prepareCommand(INDEX_SECOND_TODO);"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommand));"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TODO);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommandCopy));"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(unCheckToDoFirstCommandCopy));"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(1));"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(null));"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        // different to-do -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(unCheckToDoFirstCommand.equals(unCheckToDoSecondCommand));"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a {@code UnCheckToDoCommand} with the parameter {@code index}."},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    private UnCheckToDoCommand prepareCommand(Index index) {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand unCheckToDoCommand \u003d new UnCheckToDoCommand(index);"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        unCheckToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        return unCheckToDoCommand;"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":128}},{"path":"src/test/java/seedu/address/logic/commands/AddToDoCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model) for {@code AddToDoCommand}."},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_newToDo_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        ToDo validToDo \u003d new ToDoBuilder().build();"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.addToDo(validToDo);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(prepareCommand(validToDo, model), model,"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                String.format(AddToDoCommand.MESSAGE_SUCCESS, validToDo), expectedModel);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_duplicateToDo_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoInList \u003d model.getAddressBook().getToDoList().get(0);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(prepareCommand(toDoInList, model), model, AddToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"     * Generates a new {@code AddToDoCommand} which upon execution, adds {@code todo} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    private AddToDoCommand prepareCommand(ToDo todo, Model model) {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        AddToDoCommand command \u003d new AddToDoCommand(todo);"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":56}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedGroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.storage.XmlAdaptedGroup.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_F;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"public class XmlAdaptedGroupTest {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public void toModelType_validGroupWithPerson_returnsGroup() throws Exception {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(GROUP_F);"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        assertEquals(GROUP_F, group.toModelType());"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public void toModelType_getPersonList_returnPersonList() throws Exception {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(GROUP_F);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        assertEquals(GROUP_F.getPersonList(), group.toModelType().getPersonList());"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public void toModelType_validGroupDetails_returnsGroup() throws Exception {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        assertEquals(GROUP_A, group.toModelType());"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    public void toModelType_invalidInformation_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"                new XmlAdaptedGroup(INVALID_INFORMATION);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d Information.MESSAGE_INFORMATION_CONSTRAINTS;"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    public void toModelType_nullInformation_throwsIllegalValueException() {"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup group \u003d new XmlAdaptedGroup((String) null);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Information.class.getSimpleName());"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, group::toModelType);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup groupA \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup groupB \u003d new XmlAdaptedGroup(GROUP_A);"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupA.equals(groupA));"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        assertFalse(groupA.equals(1));"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        assertTrue(groupA.equals(groupB));"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":62}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    private static final String INVALID_LINK \u003d \"example.com\";"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    private static final String INVALID_DETAIL \u003d \"R@chel\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    private static final String VALID_LINK \u003d BENSON.getTimeTableLink().toString();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private static final String VALID_DETAIL \u003d BENSON.getDetail().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidDetail_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, INVALID_DETAIL,"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Detail.MESSAGE_DETAIL_CONSTRAINTS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullDetail_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, null, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Detail.class.getSimpleName());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"                VALID_LINK, VALID_DETAIL, VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"                        VALID_TAGS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_LINK,"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"                VALID_DETAIL, VALID_TAGS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"    public void toModelType_invalidLink_throwsIllegalValueException() {"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_LINK, VALID_DETAIL,"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"                        VALID_TAGS);"},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"        String expectedMessage \u003d TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS;"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"    public void toModelType_nullLink_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"                VALID_DETAIL, VALID_TAGS);"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeTableLink.class.getSimpleName());"},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_DETAIL,"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"                        invalidTags);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"    public void xmlAdaptedTagEqual() {"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag1 \u003d new XmlAdaptedTag(\"friends\");"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag2 \u003d new XmlAdaptedTag(\"friends\");"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        Tag tag3 \u003d new Tag(\"friends\");"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag4 \u003d new XmlAdaptedTag(\"husband\");"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, tag2);"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, tag3);"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag2, tag4);"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":27,"Isaaaca":25,"LeonidAgarth":15,"-":108}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedToDoTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTENT;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.storage.XmlAdaptedToDo.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_A;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class XmlAdaptedToDoTest {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_validToDoDetails_returnsToDo() throws Exception {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDo \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(TODO_A, toDo.toModelType());"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidContent_throwsIllegalValueException() {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDo \u003d"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedToDo(INVALID_CONTENT);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Content.MESSAGE_CONTENT_CONSTRAINTS;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDo::toModelType);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullContent_throwsIllegalValueException() {"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDo \u003d new XmlAdaptedToDo((String) null);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName());"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDo::toModelType);"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDo \u003d new XmlAdaptedToDo(VALID_CONTENT, null);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDo::toModelType);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDo \u003d"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"                new XmlAdaptedToDo(VALID_CONTENT, INVALID_STATUS);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d Status.MESSAGE_STATUS_CONSTRAINTS;"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, toDo::toModelType);"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDoA \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo toDoB \u003d new XmlAdaptedToDo(TODO_A);"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoA.equals(toDoA));"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoA.equals(1));"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoA.equals(toDoB));"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":66}},{"path":"src/test/java/seedu/address/logic/commands/ListGroupMembersCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.MembersInGroupPredicate;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandTest {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        Group group1 \u003d model.getFilteredGroupList().get(0);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        Group group2 \u003d model.getFilteredGroupList().get(1);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate firstPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                new MembersInGroupPredicate(group1);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate secondPredicate \u003d"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"                new MembersInGroupPredicate(group2);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findFirstCommand \u003d new ListGroupMembersCommand(firstPredicate, group1);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findSecondCommand \u003d new ListGroupMembersCommand(secondPredicate, group2);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand findFirstCommandCopy \u003d new ListGroupMembersCommand(firstPredicate, group1);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        // different person -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    public void execute_noGroupFound() {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(ListGroupMembersCommand.MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        Group groupToList \u003d new Group(new Information(\"Group Z\"));"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate predicate \u003d new MembersInGroupPredicate(groupToList);"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d prepareCommand(predicate, groupToList);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        assertCommandFailure(command, model, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    public void execute_groupFoundSuccess() {"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        Group groupToList \u003d new Group(new Information(\"Group A\"));"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        String expectedMessage \u003d String.format(\"0 persons listed!\");"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        Model expectedModel \u003d model;"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate predicate \u003d new MembersInGroupPredicate(groupToList);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d prepareCommand(predicate, groupToList);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * Parses {@code userInput} into a {@code ListGroupMembersCommand}."},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    private ListGroupMembersCommand prepareCommand(MembersInGroupPredicate predicate, Group groupToList) {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        ListGroupMembersCommand command \u003d"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                new ListGroupMembersCommand(new MembersInGroupPredicate(groupToList), groupToList);"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":""}],"authorContributionMap":{"jas5469":85}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook_typicalAddressBook() throws Exception {"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        /*"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        storageManager.backupAddressBook(original);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        ReadOnlyAddressBook backedUp \u003d storageManager.readAddressBookBackup().get();"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(original, new AddressBook(backedUp));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook_withFilePath_typicalAddressBook() throws Exception {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        String filePath \u003d storageManager.getAddressBookFilePath();"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        storageManager.backupAddressBook(original, filePath);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        ReadOnlyAddressBook backedUp \u003d storageManager.readAddressBookBackup(filePath).get();"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(original, new AddressBook(backedUp));"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":24,"-":101}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_F1;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedEventTest {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_NAME \u003d \"Something?!\";"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_VENUE \u003d \"Some\u0026where\";"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_DATE \u003d \"30/02/2000\";"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_START_TIME \u003d \"2369\";"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_END_TIME \u003d \"23:59\";"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_NAME \u003d VALID_EVENT_NAME_F1;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_VENUE \u003d VALID_EVENT_VENUE_F1;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_DATE \u003d VALID_EVENT_DATE_F1;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_START_TIME \u003d VALID_EVENT_START_TIME_F1;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_END_TIME \u003d VALID_EVENT_END_TIME_F1;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(new EventBuilder().build());"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new EventBuilder().build(), event.toModelType());"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(INVALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(null, VALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\");"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidVenue_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, INVALID_VENUE, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_VENUE_CONSTRAINTS;"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullVenue_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, null, VALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Venue\");"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, INVALID_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, null, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\");"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, INVALID_START_TIME, VALID_END_TIME);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, null, VALID_END_TIME);"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"StartTime\");"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, INVALID_END_TIME);"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Event.MESSAGE_TIME_CONSTRAINTS;"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(VALID_NAME, VALID_VENUE, VALID_DATE, VALID_START_TIME, null);"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EndTime\");"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() {"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event1 \u003d new XmlAdaptedEvent(new EventBuilder().build());"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent event2 \u003d new XmlAdaptedEvent(new EventBuilder().withName(\"Different\").build());"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(event1, event1);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(event1, new XmlAdaptedEvent(new EventBuilder().build()));"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(event1, 1);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(event1, event2);"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":124}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_D;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_E;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_D;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_E;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws Exception {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBookBackup(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    public void readAddressBookBackup_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        readAddressBookBackup(null);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    public void readAddressBookBackup_missingFile_emptyResult() throws Exception {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(readAddressBookBackup(\"NonExistentFile.xml.backup\").isPresent());"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":80,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_D);"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"        original.addGroup(GROUP_D);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        original.addToDo(TODO_E);"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"        original.addGroup(GROUP_E);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"    public void readAndBackupAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"        //Backup in new file and read back"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"        xmlAddressBookStorage.backupAddressBook(original, filePath);"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBookBackup(filePath).get();"},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"        original.addPerson(HOON);"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        original.removePerson(ALICE);"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"        original.addToDo(TODO_D);"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"        original.addGroup(GROUP_D);"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"        xmlAddressBookStorage.backupAddressBook(original, filePath);"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBookBackup(filePath).get();"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"        //Back and read without specifying file path"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        original.addPerson(IDA);"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"        original.addToDo(TODO_E);"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"        original.addGroup(GROUP_E);"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"        xmlAddressBookStorage.backupAddressBook(original); //file path not specified"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBookBackup().get(); //file path not specified"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"        backupAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"     * Backs up {@code addressBook} at the specified {@code filePath}."},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"    private void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"            new XmlAddressBookStorage(filePath).backupAddressBook(addressBook);"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IOException ioe) {"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"        backupAddressBook(new AddressBook(), null);"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"jas5469":4,"LeonidAgarth":70,"-":123}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.storage.XmlAdaptedTag.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedTagTest {"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_NAME \u003d \"Something?!\";"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String INVALID_COLOR \u003d \"rainbow\";"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_NAME \u003d VALID_TAG_FRIEND;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String VALID_COLOR \u003d VALID_TAG_COLOR_RED;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_validTagDetails_returnsTag() throws Exception {"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(new Tag(VALID_NAME, VALID_COLOR));"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(new Tag(VALID_NAME, VALID_COLOR), tag.toModelType());"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(INVALID_NAME);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d new XmlAdaptedTag(null, VALID_COLOR);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\");"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_invalidColor_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedTag(VALID_NAME, INVALID_COLOR);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d Tag.MESSAGE_TAG_COLOR_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    public void toModelType_nullColor_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag \u003d"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"                new XmlAdaptedTag(VALID_NAME, null);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Color\");"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, tag::toModelType);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag1 \u003d new XmlAdaptedTag(VALID_TAG_FRIEND);"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedTag tag2 \u003d new XmlAdaptedTag(VALID_TAG_HUSBAND, VALID_COLOR);"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, tag1);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(tag1, new XmlAdaptedTag(VALID_TAG_FRIEND));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, 1);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(tag1, tag2);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":69}},{"path":"src/test/java/seedu/address/model/UniqueToDoListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_B;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CONTENT_E;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.UniqueToDoList;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"public class UniqueToDoListTest {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        UniqueToDoList uniqueToDoList \u003d new UniqueToDoList();"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        uniqueToDoList.asObservableList().remove(0);"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_sameList_true() throws Exception {"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList1 \u003d new UniqueToDoList();"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList2 \u003d new UniqueToDoList();"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(VALID_CONTENT)));"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(VALID_CONTENT)));"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_differentList_false() throws Exception {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList1 \u003d new UniqueToDoList();"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList2 \u003d new UniqueToDoList();"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList1 \u003d new UniqueToDoList();"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList2 \u003d new UniqueToDoList();"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1.hashCode(), uniqueToDoList2.hashCode());"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(VALID_CONTENT)));"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(VALID_CONTENT)));"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueToDoList1, uniqueToDoList2);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_differentList_differentResult() throws Exception {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList1 \u003d new UniqueToDoList();"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueToDoList uniqueToDoList2 \u003d new UniqueToDoList();"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueToDoList1.hashCode(), uniqueToDoList2.hashCode());"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList1.add(new ToDo(new Content(CONTENT_E)));"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueToDoList2.add(new ToDo(new Content(CONTENT_B)));"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueToDoList1.hashCode(), uniqueToDoList2.hashCode());"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":28,"LeonidAgarth":61}},{"path":"src/test/java/seedu/address/logic/commands/AddMemberToGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommandTest {"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    private Model model;"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    @Before"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    public void setUp() {"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    public void constructor_nullGroup_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        new AddMemberToGroupCommand(null, null);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"    public void execute_groupAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded modelStub \u003d new"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded();"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        Person person \u003d modelStub.getFilteredPersonList().get(0);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d getTypicalAddressBook().getGroupList().get(0);"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        CommandResult commandResult \u003d getAddMemberToGroupCommandForGroup(INDEX_FIRST_PERSON, validGroup,"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"                modelStub).execute();"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        assertEquals(String.format(AddMemberToGroupCommand.MESSAGE_ADD_PERSON_TO_GROUP_SUCCESS,"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"                person.getName().toString(), validGroup.getInformation().toString()),"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    public void execute_noSuchGroup_throwsCommandException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded modelStub \u003d new"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"                AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded();"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        Group invalidGroup \u003d new GroupBuilder().withInformation(\"INVALID\").build();"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(AddMemberToGroupCommand.MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        getAddMemberToGroupCommandForGroup(INDEX_FIRST_PERSON, invalidGroup, modelStub).execute();"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    public void execute_invalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded modelStub \u003d new"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"                AddMemberToGroupCommandTest.ModelStubAcceptingGroupAdded();"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        Group validGroup \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"        Index index \u003d Index.fromZeroBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"        thrown.expectMessage(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        getAddMemberToGroupCommandForGroup(index, validGroup, modelStub).execute();"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        Group groupF \u003d new GroupBuilder().withPerson(\"Group F\", TypicalPersons.ALICE).build();"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        Group groupG \u003d new GroupBuilder().withPerson(\"Group G\", TypicalPersons.BENSON).build();"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommand addMemberToGroupFCommand \u003d new AddMemberToGroupCommand(INDEX_FIRST_PERSON, groupF);"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommand addMemberToGroupGCommand \u003d new AddMemberToGroupCommand(INDEX_FIRST_PERSON, groupG);"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"        assertTrue(addMemberToGroupFCommand.equals(addMemberToGroupFCommand));"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommand addMemberToGroupCommand \u003d new  AddMemberToGroupCommand(INDEX_FIRST_PERSON, groupF);"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"        assertTrue(addMemberToGroupFCommand.equals(addMemberToGroupCommand));"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"        assertFalse(addMemberToGroupFCommand.equals(1));"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":122,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":123,"author":{"gitID":"jas5469"},"content":"        assertFalse(addMemberToGroupFCommand.equals(null));"},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"        // different groups -\u003e returns false"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":"        assertFalse(addMemberToGroupFCommand.equals(addMemberToGroupGCommand));"},{"lineNumber":127,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"     * Generates a new AddMemberToGroupCommand with the details of the given to-do."},{"lineNumber":131,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"jas5469"},"content":"    private AddMemberToGroupCommand getAddMemberToGroupCommandForGroup(Index index, Group group, Model model) {"},{"lineNumber":133,"author":{"gitID":"jas5469"},"content":"        AddMemberToGroupCommand command \u003d new AddMemberToGroupCommand(index, group);"},{"lineNumber":134,"author":{"gitID":"jas5469"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":135,"author":{"gitID":"jas5469"},"content":"        return command;"},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"    private class ModelStub implements Model {"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"jas5469"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":"        public void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"        public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":"        public void removeTag(Tag tag) {"},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"        public void resetData(ReadOnlyAddressBook newData"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"        ) {"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":189,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":190,"author":{"gitID":"jas5469"},"content":"        public void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":191,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"        public void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":196,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":199,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":200,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":201,"author":{"gitID":"jas5469"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":202,"author":{"gitID":"jas5469"},"content":"                throws DuplicatePersonException {"},{"lineNumber":203,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":206,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"jas5469"},"content":"        public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":208,"author":{"gitID":"jas5469"},"content":"                throws DuplicateToDoException {"},{"lineNumber":209,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":212,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"jas5469"},"content":"        public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":214,"author":{"gitID":"jas5469"},"content":"                throws DuplicateGroupException {"},{"lineNumber":215,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":217,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":219,"author":{"gitID":"jas5469"},"content":"            return model.getFilteredPersonList();"},{"lineNumber":220,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":222,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":224,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":226,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":228,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":230,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":231,"author":{"gitID":"jas5469"},"content":"            return null;"},{"lineNumber":232,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":234,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":236,"author":{"gitID":"jas5469"},"content":"            return model.getFilteredGroupList();"},{"lineNumber":237,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":239,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":241,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":244,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":245,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":246,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":247,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":252,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":"        public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"        public void indicateCalendarChanged() {"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":"        public void indicateTimetableChanged() {"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":"        public boolean calendarIsViewed() {"},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":273,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"        public void switchView() {"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"     * A Model stub that always accept the group being added."},{"lineNumber":282,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"jas5469"},"content":"    private class ModelStubAcceptingGroupAdded extends AddMemberToGroupCommandTest.ModelStub {"},{"lineNumber":284,"author":{"gitID":"jas5469"},"content":"        final ArrayList\u003cGroup\u003e groupsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":285,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":286,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"jas5469"},"content":"        public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":288,"author":{"gitID":"jas5469"},"content":"            requireNonNull(group);"},{"lineNumber":289,"author":{"gitID":"jas5469"},"content":"            groupsAdded.add(group);"},{"lineNumber":290,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":292,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"jas5469"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":294,"author":{"gitID":"jas5469"},"content":"            return new AddressBook();"},{"lineNumber":295,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":298,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":298}},{"path":"src/test/java/seedu/address/model/group/InformationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class InformationTest {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Information(null));"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public void constructor_invalidInformation_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        String invalidInformation \u003d \"!\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Information(invalidInformation));"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void isValidInformation() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        // null content"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Information.isValidInformation(null));"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        // invalid content"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"^\")); // only non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        assertFalse(Information.isValidInformation(\"Something to do*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        // valid content"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"hello world\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"12345\")); // numbers only"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"hello world the 2nd\")); // alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"Hello World\")); // with capital letters"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        assertTrue(Information.isValidInformation(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    public void isSameInformationHashCode() {"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        Information firstInformation \u003d new Information(VALID_CONTENT);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        Information secondInformation \u003d new Information(VALID_CONTENT);"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        assertTrue(firstInformation.hashCode() \u003d\u003d secondInformation.hashCode());"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":50}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"public class GroupTest {"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private Group groupA \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    private Group groupA2 \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    private Group groupB \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCodeAndString_test() {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA.hashCode(), groupA.hashCode());"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA.hashCode(), groupA2.hashCode());"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA.hashCode(), groupB.hashCode());"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA.toString(), groupA.toString());"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA.toString(), groupA2.toString());"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA.toString(), groupB.toString());"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public void addPerson() throws Exception {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(ALICE);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA, groupA2);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(ALICE);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA, groupA2);"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(BENSON);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(CARL);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA, groupA2);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(CARL);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(BENSON);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA, groupA2);"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public void addPerson_duplicatePerson_throwsException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(ALICE);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(BENSON);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(CARL);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(DuplicatePersonException.class);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(BENSON);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public void removePerson() throws Exception {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(ALICE);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(BENSON);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(CARL);"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(ALICE);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(BENSON);"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.addPerson(CARL);"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.removePerson(ALICE);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA, groupA2);"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.removePerson(ALICE);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA, groupA2);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.removePerson(BENSON);"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.removePerson(CARL);"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(groupA, groupA2);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.removePerson(CARL);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        groupA2.removePerson(BENSON);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(groupA, groupA2);"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    public void removePerson_personNotFound_throwsException() throws Exception {"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.addPerson(CARL);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(PersonNotFoundException.class);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        groupA.removePerson(BENSON);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"    public void compare_notEqualGroups() throws Exception {"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        assertNotEquals(groupA, groupB);"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    public void compare_equalGroups() throws Exception {"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        assertEquals(groupA, groupA2);"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":30,"LeonidAgarth":74}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        Name name1 \u003d new Name(\"Peter Jack\");"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        Name name2 \u003d new Name(\"Peter Jack\");"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        Name name3 \u003d new Name(\"Capital Tan\");"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(name1.hashCode(), name1.hashCode());"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(name1.hashCode(), name2.hashCode());"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(name2.hashCode(), name3.hashCode());"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":14,"-":41}},{"path":"src/test/java/seedu/address/model/group/DuplicateGroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalGroups;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class DuplicateGroupTest {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public void deleteGroup_groupNotFound_throwsException() throws Exception {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        Group groupToDelete \u003d new GroupBuilder().withInformation(\"Group Z\").build();"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList groupList \u003d TypicalGroups.getTypicalGroupsList();"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        thrown.expect(GroupNotFoundException.class);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        groupList.remove(groupToDelete);"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":24}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        Phone phone1 \u003d new Phone(\"93121534\");"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        Phone phone2 \u003d new Phone(\"93121534\");"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        Phone phone3 \u003d new Phone(\"124293874203154\");"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(phone1.hashCode(), phone1.hashCode());"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(phone1.hashCode(), phone2.hashCode());"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(phone2.hashCode(), phone3.hashCode());"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":14,"-":41}},{"path":"src/test/java/seedu/address/model/person/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        Email email1 \u003d new Email(\"PeterJack_1190@example.com\");"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        Email email2 \u003d new Email(\"PeterJack_1190@example.com\");"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        Email email3 \u003d new Email(\"a@bc\");"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(email1.hashCode(), email1.hashCode());"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(email1.hashCode(), email2.hashCode());"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(email2.hashCode(), email3.hashCode());"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":14,"-":62}},{"path":"src/test/java/seedu/address/model/group/MembersInGroupPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalGroups;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class MembersInGroupPredicateTest {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    private Group groupTest \u003d TypicalGroups.GROUP_F;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public void test_groupDoesNotContainsMember_returnsFalse() {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        // Test Carl exist in group F"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate predicate \u003d new MembersInGroupPredicate(groupTest);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(TypicalPersons.CARL));"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public void test_groupContainMember_returnTrue() {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        Group group \u003d new GroupBuilder().withPerson(\"Group F\","},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"                TypicalPersons.ALICE).build();"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        Person personToTest \u003d TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        MembersInGroupPredicate predicate \u003d new MembersInGroupPredicate(group);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertTrue(predicate.test(personToTest));"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":33}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"        // Keywords match phone and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":2,"-":73}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        Address address1 \u003d new Address(\"Blk 456, Den Road, #01-355\");"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        Address address2 \u003d new Address(\"Blk 456, Den Road, #01-355\");"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        Address address3 \u003d new Address(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\");"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(address1.hashCode(), address1.hashCode());"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(address1.hashCode(), address2.hashCode());"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(address2.hashCode(), address3.hashCode());"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":14,"-":37}},{"path":"src/test/java/seedu/address/model/person/TimeTableLinkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"public class TimeTableLinkTest {"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new TimeTableLink(null));"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        String invalidLink \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TimeTableLink(invalidLink));"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    public void isValidLink() {"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"        // null email"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeTableLink.isValidLink(null));"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"        // blank email"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        // missing parts"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"MYwiD\")); // missing http://modn.us/ URL head"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modn.nus/\")); // missing trailing part"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        // invalid parts"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"https://modsn.us/MYwiD\")); // https instead of http"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://mods.nus/MYwiD\")); // incorrect URL"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http:// modsn.us/MYwiD\")); // spaces in URL"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYw iD\")); // spaces in trailing part"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\" http://modsn.us/MYwiD\")); // leading space"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYwiD \")); // trailing space"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us//MYwiD\")); // double \u0027/\u0027 symbol"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        assertFalse(TimeTableLink.isValidLink(\"http://modsn.us/MYw.iD\")); // \u0027.\u0027 symbol in trailing part"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"        // valid email"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"        assertTrue(TimeTableLink.isValidLink(\"http://modsn.us/MYwiD\"));"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        TimeTableLink timeTableLink1 \u003d new TimeTableLink(\"http://modsn.us/MYwiD\");"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        TimeTableLink timeTableLink2 \u003d new TimeTableLink(\"http://modsn.us/MYwiD\");"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        TimeTableLink timeTableLink3 \u003d new TimeTableLink(\"http://modsn.us/FumdA\");"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(timeTableLink1.hashCode(), timeTableLink1.hashCode());"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(timeTableLink1.hashCode(), timeTableLink2.hashCode());"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(timeTableLink2.hashCode(), timeTableLink3.hashCode());"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"Isaaaca":44,"LeonidAgarth":13,"-":7}},{"path":"src/test/java/seedu/address/model/person/TagContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class TagContainKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicate \u003d new TagContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate secondPredicate \u003d new TagContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate firstPredicateCopy \u003d new TagContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    public void test_tagContainKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate predicate \u003d new TagContainKeywordsPredicate(Collections.singletonList(\"friends\"));"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        // Only one matching keyword"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"friends\", \"Carol\"));"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    public void test_tagDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        // Zero keywords"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        TagContainKeywordsPredicate predicate \u003d new TagContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"        // Non-matching keyword"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"friends\"));"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"oweMoney\").build()));"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        // Mixed-case keywords"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        predicate \u003d new TagContainKeywordsPredicate(Arrays.asList(\"FrieNds\"));"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"friends\").build()));"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":69}},{"path":"src/test/java/seedu/address/model/person/DetailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class DetailTest {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Detail(null));"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        String invalidDetail \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Detail(invalidDetail));"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidDetail() {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        // null detail"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Detail.isValidDetail(null));"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        // invalid detail"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"^\")); // only non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Detail.isValidDetail(\"tennis*\")); // contains non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        // valid detail"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"likes tennis\")); // alphabets only"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"12345\")); // numbers only"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"has 3 dogs\")); // alphanumeric characters"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Detail.isValidDetail(\"Likes tennis\")); // with capital letters"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_variousTest() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        Detail detail1 \u003d new Detail(\"Likes tennis\");"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        Detail detail2 \u003d new Detail(\"Likes tennis\");"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        Detail detail3 \u003d new Detail(\"Has 3 dogs\");"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(detail1.hashCode(), detail1.hashCode());"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(detail1.hashCode(), detail2.hashCode());"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(detail2.hashCode(), detail3.hashCode());"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":43,"LeonidAgarth":12}},{"path":"src/test/java/seedu/address/model/todo/ToDoTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoTest {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoA \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"undone\").build();"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoB \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"undone\").build();"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoC \u003d new ToDoBuilder().withContent(\"Something to do\").withStatus(\"done\").build();"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(toDoA.equals(1));"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        // same content -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoA.hashCode() \u003d\u003d toDoB.hashCode());"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        // same content, different status -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(toDoA.equals(toDoC));"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":27}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalEvents.F1RACE;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.GROUP_A;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.TODO_A;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    private final AddressBook amyNBobAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        assertEquals(Collections.emptyList(), addressBook.getToDoList());"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        assertEquals(Collections.emptyList(), addressBook.getGroupList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook newData2 \u003d (AddressBook) SampleDataUtil.getSampleAddressBook();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.resetData(newData2);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(newData2, addressBook);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A);"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"    public void resetData_withDuplicateToDos_throwsAssertionError() {"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        // Repeat TODO_A twice"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A, TODO_A);"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A);"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"    public void resetData_withDuplicateGroups_throwsAssertionError() {"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"        // Repeat GROUP_A twice"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        List\u003cToDo\u003e newToDos \u003d Arrays.asList(TODO_A);"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e newGroups \u003d Arrays.asList(GROUP_A, GROUP_A);"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        List\u003cEvent\u003e newEvents \u003d Arrays.asList(F1RACE);"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newToDos, newGroups, newEvents);"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        addressBook.resetData(newData);"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    public void getToDoList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.getToDoList().remove(0);"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"jas5469"},"content":"    public void getGroupList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.getToDoList().remove(0);"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag_removeNonexistentTag_addressBookUnchanged() throws Exception {"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":"        amyNBobAddressBook.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedAddressBook, amyNBobAddressBook);"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"        amyNBobAddressBook.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":"        Person expectedAmy \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":"        Person expectedBob \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"                .withPerson(expectedAmy).withPerson(expectedBob).build();"},{"lineNumber":153,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedAddressBook, amyNBobAddressBook);"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        private final ObservableList\u003cToDo\u003e todos \u003d FXCollections.observableArrayList();"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        private final ObservableList\u003cGroup\u003e groups \u003d FXCollections.observableArrayList();"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"                        Collection\u003cToDo\u003e todos, Collection\u003cGroup\u003e groups, Collection\u003cEvent\u003e events) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":172,"author":{"gitID":"nhatquang3112"},"content":"            this.todos.setAll(todos);"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"            this.groups.setAll(groups);"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"            this.events.setAll(events);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":"        public ObservableList\u003cToDo\u003e getToDoList() {"},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"            return todos;"},{"lineNumber":190,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":192,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"jas5469"},"content":"        public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":194,"author":{"gitID":"jas5469"},"content":"            return groups;"},{"lineNumber":195,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"            return events;"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":202,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"nhatquang3112"},"content":"        public double getToDoListCompleteRatio() {"},{"lineNumber":204,"author":{"gitID":"nhatquang3112"},"content":"            return 0.0;"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":29,"Isaaaca":31,"jas5469":29,"LeonidAgarth":19,"-":99}},{"path":"src/test/java/seedu/address/model/todo/ContentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class ContentTest {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Content(null));"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_invalidContent_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        String invalidContent \u003d \"\u0026\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Content(invalidContent));"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidContent() {"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        // null content"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Content.isValidContent(null));"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        // invalid content"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"\")); // empty string"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\" \")); // spaces only"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"^\")); // only non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Content.isValidContent(\"Something to do*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        // valid content"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"hello world\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"12345\")); // numbers only"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"hello world the 2nd\")); // alphanumeric characters"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"Hello World\")); // with capital letters"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Content.isValidContent(\"This is a very very very very very loooong content\")); // long content"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameContentHashCode() {"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        Content firstContent \u003d new Content(VALID_CONTENT);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        Content secondContent \u003d new Content(VALID_CONTENT);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstContent.hashCode() \u003d\u003d secondContent.hashCode());"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":50}},{"path":"src/test/java/seedu/address/model/UniqueGroupListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.testutil.GroupBuilder;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"public class UniqueGroupListTest {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList.asObservableList().remove(0);"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList1 \u003d new UniqueGroupList();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList2 \u003d new UniqueGroupList();"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        assertEquals(uniqueGroupList1.hashCode(), uniqueGroupList2.hashCode());"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public void equal_sameList_sameResult() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList1 \u003d new UniqueGroupList();"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList2 \u003d new UniqueGroupList();"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        assertEquals(uniqueGroupList1, uniqueGroupList2);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    public void set_sameGroup_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList1 \u003d new UniqueGroupList();"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList2 \u003d new UniqueGroupList();"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        Group group1 \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        Group group2 \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList1.add(group1);"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList2.add(group2);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList1.setGroup(group1, group2);"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        assertEquals(uniqueGroupList1, uniqueGroupList2);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    public void iterator() throws Exception {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList1 \u003d new UniqueGroupList();"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList uniqueGroupList2 \u003d new UniqueGroupList();"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        uniqueGroupList1.add(new GroupBuilder().build());"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        Iterator\u003cGroup\u003e iter \u003d uniqueGroupList1.iterator();"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"        while (iter.hasNext()) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"            uniqueGroupList2.add(iter.next());"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        assertEquals(uniqueGroupList1, uniqueGroupList2);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":65}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    public void deleteTag_nonExistent_modelUnchanged() throws Exception {"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"        modelManager.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(new ModelManager(addressBook, userPrefs), modelManager);"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        modelManager.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        Person expectedAmy \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        Person expectedBob \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder()"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"                .withPerson(expectedBob).withPerson(expectedAmy).build();"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        ModelManager expectedModelManager \u003d new ModelManager(expectedAddressBook, userPrefs);"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"        assertEquals(expectedModelManager, modelManager);"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":39,"LeonidAgarth":1,"-":65}},{"path":"src/test/java/seedu/address/model/todo/StatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_DONE;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_UNDONE;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class StatusTest {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Status(null));"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public void constructor_invalidStatus_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        String invalidStatus \u003d \"invalid status\";"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Status(invalidStatus));"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public void isValidStatus() {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        // null status"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Status.isValidStatus(null));"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        // invalid status"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"\")); // empty string"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\" \")); // spaces only"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"^\")); // only non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"Some status*\")); // contains non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(Status.isValidStatus(\"invalid status\")); // is neither \"done\" or \"undone\""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        // valid status"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Status.isValidStatus(\"done\"));"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(Status.isValidStatus(\"undone\"));"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameStatusHashCode() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        Status firstStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        Status secondStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.hashCode() \u003d\u003d secondStatus.hashCode());"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        Status thirdStatus \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        Status forthStatus \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(thirdStatus.hashCode() \u003d\u003d forthStatus.hashCode());"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        Status firstStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        Status secondStatus \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.equals(firstStatus));"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(firstStatus.equals(secondStatus));"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public void isSameStatusString() {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        Status status \u003d new Status(VALID_STATUS_DONE);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(status.toString().equals(VALID_STATUS_DONE));"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":67}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_COLOR;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTagName_null_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTagColor() {"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Tag.isValidTagColor(VALID_TAG_COLOR_RED));"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Tag.isValidTagColor(INVALID_TAG_COLOR));"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":9,"-":27}},{"path":"src/test/java/seedu/address/logic/commands/EditToDoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTENT;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TODO;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TODO;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand.EditToDoDescriptor;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.EditToDoDescriptorBuilder;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.testutil.ToDoBuilder;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":" * for EditToDoCommand."},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoCommandTest {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        ToDo editedToDo \u003d new ToDoBuilder().build();"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder(editedToDo).build();"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO, descriptor);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(EditToDoCommand.MESSAGE_EDIT_TODO_SUCCESS, editedToDo);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(model.getFilteredToDoList().get(0), editedToDo);"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(editToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO, new EditToDoDescriptor());"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        ToDo editedToDo \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        String expectedMessage \u003d String.format(EditToDoCommand.MESSAGE_EDIT_TODO_SUCCESS, editedToDo);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(editToDoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_duplicateToDoUnfilteredList_failure() {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        ToDo firstToDo \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder(firstToDo).build();"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(INDEX_SECOND_TODO, descriptor);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(editToDoCommand, model, EditToDoCommand.MESSAGE_DUPLICATE_TODO);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    public void execute_invalidToDoIndexUnfilteredList_failure() {"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(editToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        ToDo editedToDo \u003d new ToDoBuilder().build();"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"        ToDo toDoToEdit \u003d model.getFilteredToDoList().get(INDEX_FIRST_TODO.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder(editedToDo).build();"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(INDEX_FIRST_TODO, descriptor);"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        // edit -\u003e first to-do edited"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        editToDoCommand.execute();"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        undoRedoStack.push(editToDoCommand);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered to-do list to show all to-dos"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        // redo -\u003e same first to-do edited again"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        expectedModel.updateToDo(toDoToEdit, editedToDo);"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredToDoList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        // execution failed -\u003e editToDoCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(editToDoCommand, model, Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    public void equals() throws Exception {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor descriptor \u003d new EditToDoDescriptorBuilder().withContent(VALID_CONTENT).build();"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor otherDescriptor \u003d new EditToDoDescriptorBuilder().withContent(\"Another thing to do\").build();"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"        final EditToDoCommand standardCommand \u003d prepareCommand(INDEX_FIRST_TODO, descriptor);"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"        // same values -\u003e returns true"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor copyDescriptor \u003d new EditToDoDescriptor(descriptor);"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_TODO, copyDescriptor);"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"        // same object -\u003e returns true"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        // null -\u003e returns false"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        // different types -\u003e returns false"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"        // different index -\u003e returns false"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(standardCommand.equals(new EditToDoCommand(INDEX_SECOND_TODO, descriptor)));"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"        assertFalse(standardCommand.equals(new EditToDoCommand(INDEX_FIRST_TODO, otherDescriptor)));"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an {@code EditToDoCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"    private EditToDoCommand prepareCommand(Index index, EditToDoDescriptor descriptor) {"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand editToDoCommand \u003d new EditToDoCommand(index, descriptor);"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"        editToDoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        return editToDoCommand;"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":162}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COLOR_RED;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_sameList_true() throws Exception {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_differentList_false() throws Exception {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_HUSBAND));"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueTagList1, uniqueTagList2);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_differentList_differentResult() throws Exception {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList1 \u003d new UniqueTagList();"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList2 \u003d new UniqueTagList();"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList1.add(new Tag(VALID_TAG_COLOR_RED));"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList2.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueTagList1.hashCode(), uniqueTagList2.hashCode());"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public void duplicateTag() throws Exception {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(UniqueTagList.DuplicateTagException.class);"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueTagList.add(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":78,"-":17}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"        descriptor.setTimeTableLink(person.getTimeTableLink());"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setDetail(person.getDetail());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"     * Sets the {@code TimeTableLink} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"    public EditPersonDescriptorBuilder withTimeTableLink(String link) {"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"        descriptor.setTimeTableLink(new TimeTableLink(link));"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Detail} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    public EditPersonDescriptorBuilder withDetail(String detail) {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setDetail(new Detail(detail));"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":10,"Isaaaca":12,"-":87}},{"path":"src/test/java/seedu/address/testutil/ToDoBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_UNDONE;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * A utility class to help with building ToDo objects."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoBuilder {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DEFAULT_CONTENT \u003d \"Something to do\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    private Content content;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    private Status status;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder() {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d new Content(DEFAULT_CONTENT);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d new Status(VALID_STATUS_UNDONE);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * Initializes the ToDoBuilder with the data of {@code toDoToCopy}."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder(ToDo toDoToCopy) {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d toDoToCopy.getContent();"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d toDoToCopy.getStatus();"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Content} of the {@code ToDo} that we are building."},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder withContent(String content) {"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d new Content(content);"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Content} of the {@code ToDo} that we are building."},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoBuilder withStatus(String status) {"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d new Status(status);"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo build() {"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(content, status);"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":54}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"public class EventTest {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Event(null, null, null, null, null));"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidEventName_null_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        // null event name"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Event.isValidName(null));"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidName() {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidName(VALID_EVENT_NAME_F1));"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidName(VALID_EVENT_NAME_NDP));"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidName(INVALID_EVENT_NAME_DESC));"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidDate() {"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidDate(VALID_EVENT_DATE_F1));"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidDate(VALID_EVENT_DATE_NDP));"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidDate(INVALID_EVENT_DATE_DESC));"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTime() {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_START_TIME_F1));"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_START_TIME_NDP));"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_END_TIME_F1));"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(Event.isValidTime(VALID_EVENT_END_TIME_NDP));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidTime(INVALID_EVENT_START_TIME_DESC));"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(Event.isValidTime(INVALID_EVENT_END_TIME_DESC));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race1 \u003d new EventBuilder().build();"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race2 \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withDate(VALID_EVENT_DATE_F1)"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_F1).withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.equals(f1Race1));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.equals(1));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.equals(f1Race2));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.equals(new Event()));"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    public void toString_test() {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race1 \u003d new EventBuilder().build();"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1Race2 \u003d new EventBuilder().withName(VALID_EVENT_NAME_F1).withDate(VALID_EVENT_DATE_F1)"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"                .withStartTime(VALID_EVENT_START_TIME_F1).withEndTime(VALID_EVENT_END_TIME_F1).build();"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.toString().equals(f1Race1.toString()));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(f1Race1.toString().equals(f1Race2.toString()));"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(f1Race1.toString().equals(new Event().toString()));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":83}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class to help with building Event objects."},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"public class EventBuilder {"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_NAME \u003d \"F1 Race\";"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_VENUE \u003d \"Marina Bay Street Circuit\";"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_DATE \u003d \"19/07/2018\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_START_TIME \u003d \"1000\";"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DEFAULT_END_TIME \u003d \"2100\";"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    private String name;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String venue;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private String date;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    private String startTime;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private String endTime;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder() {"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d DEFAULT_NAME;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d DEFAULT_VENUE;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d DEFAULT_DATE;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d DEFAULT_START_TIME;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d DEFAULT_END_TIME;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}."},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder(Event eventToCopy) {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d eventToCopy.getName();"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d eventToCopy.getVenue();"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d eventToCopy.getDate();"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d eventToCopy.getStartTime();"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d eventToCopy.getEndTime();"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String name} of the {@code Event} that we are building."},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String venue} of the {@code Event} that we are building."},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withVenue(String venue) {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String date} of the {@code Event} that we are building."},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withDate(String date) {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String startTime} of the {@code Event} that we are building."},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withStartTime(String startTime) {"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the {@code String endTime} of the {@code Event} that we are building."},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    public EventBuilder withEndTime(String endTime) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public Event build() {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        return new Event(name, venue, date, startTime, endTime);"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":86}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses {@code name} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalArgumentException(\"name is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":2,"-":51}},{"path":"src/test/java/seedu/address/model/event/WeeklyEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_F1;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_NDP;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_F1;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_NDP;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_F1;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_F1;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_NDP;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"public class WeeklyEventTest {"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event1 \u003d new WeeklyEvent(\"CS2101\", \"COM1\", \"1500\", \"1600\", \"WEDNESDAY\");"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event2 \u003d new WeeklyEvent(new Module(\"CS2103\", \"Software Engineer\"), new Schedule());"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event3 \u003d new WeeklyEvent(new Module(\"CS2103\", \"Software Engineer\"), new Schedule());"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event4 \u003d new WeeklyEvent(\"CS2103T\", \"I3\", \"1500\", \"1700\", \"WEDNESDAY\");"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private WeeklyEvent event5 \u003d new WeeklyEvent(\"CS2102\", \"COM2\", \"2000\", \"2100\", \"WEDNESDAY\");"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e new WeeklyEvent(null, null, null, null, (String[]) null));"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e new WeeklyEvent(null, null));"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidWeeklyEventName_null_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        // null event name"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        assertThrows(NullPointerException.class, () -\u003e WeeklyEvent.isValidName(null));"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidName() {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidName(VALID_EVENT_NAME_F1));"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidName(VALID_EVENT_NAME_NDP));"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidName(INVALID_EVENT_NAME_DESC));"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidDate() {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidDate(VALID_EVENT_DATE_F1));"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidDate(VALID_EVENT_DATE_NDP));"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidDate(INVALID_EVENT_DATE_DESC));"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    public void isValidTime() {"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_START_TIME_F1));"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_START_TIME_NDP));"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_END_TIME_F1));"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(WeeklyEvent.isValidTime(VALID_EVENT_END_TIME_NDP));"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidTime(INVALID_EVENT_START_TIME_DESC));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(WeeklyEvent.isValidTime(INVALID_EVENT_END_TIME_DESC));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_test() {"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.equals(event1));"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event2.equals(event3));"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.equals(1));"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.equals(event2));"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"    public void clash() {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.clash(event1));"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.clash(event4));"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event2.clash(event3));"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.clash(event2));"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.clash(event5));"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event3.clash(event5));"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    public void toString_test() {"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        assertTrue(event1.toString().equals(event1.toString()));"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        assertFalse(event1.toString().equals(event2.toString()));"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":92}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_FIRST_TODO \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_SECOND_TODO \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final Index INDEX_THIRD_TODO \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final Index INDEX_FIRST_GROUP \u003d Index.fromOneBased(1);"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public static final Index INDEX_SECOND_GROUP \u003d Index.fromOneBased(2);"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public static final Index INDEX_THIRD_GROUP \u003d Index.fromOneBased(3);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"jas5469":4,"-":12}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        sb.append(PREFIX_TIMETABLE_LINK + person.getTimeTableLink().value + \" \");"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        sb.append(PREFIX_DETAIL + person.getDetail().detail + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.name + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"Isaaaca":2,"LeonidAgarth":1,"-":37}},{"path":"src/test/java/seedu/address/testutil/TypicalGroups.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" * A utility class containing a list of {@code Group} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class TypicalGroups {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_A \u003d new GroupBuilder().withInformation(\"Group A\").build();"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_B \u003d new GroupBuilder().withInformation(\"Group B\").build();"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_C \u003d new GroupBuilder().withInformation(\"Group C\").build();"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_D \u003d new GroupBuilder().withInformation(\"Group D\").build();"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_E \u003d new GroupBuilder().withInformation(\"Group E\").build();"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_F \u003d new GroupBuilder().withPerson(\"Group F\","},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"            TypicalPersons.ALICE).build();"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_G \u003d new GroupBuilder().withPerson(\"Group G\","},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"            TypicalPersons.BENSON).build();"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_H \u003d new GroupBuilder().withPerson(\"Group H\", TypicalPersons.ALICE,"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"            TypicalPersons.BENSON).build();"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public static final Group GROUP_I \u003d new GroupBuilder().withInformation(\"Group F\").build();"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    public static List\u003cGroup\u003e getTypicalGroups() {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GROUP_A, GROUP_B, GROUP_F, GROUP_H));"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public static UniqueGroupList getTypicalGroupsList() {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        UniqueGroupList groupList \u003d new UniqueGroupList();"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"            groupList.add(new Group(GROUP_A.getInformation(), GROUP_A.getPersonList()));"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"            groupList.add(new Group(GROUP_B.getInformation(), GROUP_B.getPersonList()));"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"            groupList.add(new Group(GROUP_F.getInformation(), GROUP_F.getPersonList()));"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            groupList.add(new Group(GROUP_H.getInformation(), GROUP_H.getPersonList()));"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"            throw new IllegalArgumentException(\"group is expected to be unique.\");"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        return groupList;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":46}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the last index of the to-do in the {@code model}\u0027s to-do list."},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    public static Index getLastIndexToDo(Model model) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        return Index.fromOneBased(model.getAddressBook().getToDoList().size());"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     * Returns the last index of the group in the {@code model}\u0027s to-do list."},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    public static Index getLastIndexGroup(Model model) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        return Index.fromOneBased(model.getAddressBook().getGroupList().size());"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the to-do in the {@code model}\u0027s to-do list at {@code index}."},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    public static ToDo getToDo(Model model, Index index) {"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        return model.getAddressBook().getToDoList().get(index.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"     * Returns the group in the {@code model}\u0027s group list at {@code index}."},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"    public static Group getGroup(Model model, Index index) {"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        return model.getAddressBook().getGroupList().get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":15,"jas5469":17,"-":54}},{"path":"src/test/java/seedu/address/testutil/GroupUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" * A utility class for Group."},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"public class GroupUtil {"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"     * Returns an addGroup command string for adding the {@code group}."},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static String getAddGroupCommand(Group group) {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"        return AddGroupCommand.COMMAND_WORD + \" \" + getGroupDetails(group);"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     * Returns the part of command string for the given {@code group}\u0027s details."},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public static String getGroupDetails(Group group) {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        sb.append(group.getInformation().value);"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        return sb.toString();"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"     * Returns the list of persons the given {@code group}"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    public static UniquePersonList getPersonList(Group group) {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        UniquePersonList personListToReturn \u003d group.getPersonList();"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        return personListToReturn;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":36}},{"path":"src/test/java/seedu/address/testutil/ToDoUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * A utility class for ToDo."},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoUtil {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an addToDo command string for adding the {@code toDo}."},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static String getAddToDoCommand(ToDo toDo) {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        return AddToDoCommand.COMMAND_WORD + \" \" + getToDoDetails(toDo);"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the part of command string for the given {@code toDo}\u0027s details."},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public static String getToDoDetails(ToDo toDo) {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        sb.append(toDo.getContent().value);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        return sb.toString();"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":27}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_AMY;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_LINK_BOB;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import static seedu.address.testutil.TypicalGroups.getTypicalGroups;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"            .withPhone(\"85355255\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            .withTags(\"friends\", \"CS3230\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withTimeTableLink(\"http://modsn.us/gka24\")"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"            .withDetail(\"Likes tennis\").withTags(\"owesMoney\", \"friends\", \"CS3230\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"heinz@example.com\").withTimeTableLink(\"http://modsn.us/gOVE5\").withDetail(\"Likes tennis\")"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"wall street\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"cornelia@example.com\").withTimeTableLink(\"http://modsn.us/NejPO\").withDetail(\"Likes tennis\")"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"10th street\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"werner@example.com\").withTimeTableLink(\"http://modsn.us/TJmxw\").withDetail(\"Likes tennis\")"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"michegan ave\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"lydia@example.com\").withTimeTableLink(\"http://modsn.us/MQcxm\").withDetail(\"Likes tennis\")"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"little tokyo\").build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"anna@example.com\").withTimeTableLink(\"http://modsn.us/hwWlG\").withDetail(\"Likes tennis\")"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"4th street\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"stefan@example.com\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"little india\").build();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            .withEmail(\"hans@example.com\").withTimeTableLink(\"http://modsn.us/MYwiD\").withDetail(\"Likes tennis\")"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"            .withAddress(\"chicago ave\").build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"            .withTimeTableLink(VALID_TIMETABLE_LINK_AMY).withDetail(VALID_DETAIL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"            .build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"            .withTimeTableLink(VALID_TIMETABLE_LINK_BOB).withDetail(VALID_DETAIL_BOB).withTags(VALID_TAG_HUSBAND,"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"                    VALID_TAG_FRIEND)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"    private TypicalPersons() {"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"    } // prevents instantiation"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        for (ToDo toDo : getTypicalToDos()) {"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"            try {"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"                ab.addToDo(toDo);"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"            } catch (DuplicateToDoException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        for (Group group : getTypicalGroups()) {"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"            try {"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"                ab.addGroup(new Group(group.getInformation(), group.getPersonList()));"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"            } catch (DuplicateGroupException e) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":22,"Isaaaca":13,"jas5469":9,"-":73}},{"path":"src/test/java/seedu/address/testutil/EditToDoDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand.EditToDoDescriptor;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" * A utility class to help with building EditToDoDescriptor objects."},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoDescriptorBuilder {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private EditToDoDescriptor descriptor;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoDescriptorBuilder() {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        descriptor \u003d new EditToDoDescriptor();"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoDescriptorBuilder(EditToDoDescriptor descriptor) {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        this.descriptor \u003d new EditToDoDescriptor(descriptor);"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an {@code EditToDoDescriptor} with fields containing {@code toDo}\u0027s details"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoDescriptorBuilder(ToDo toDo) {"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"        descriptor \u003d new EditToDoDescriptor();"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setContent(toDo.getContent());"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Content} of the {@code EditToDoDescriptor} that we are building."},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoDescriptorBuilder withContent(String content) {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        descriptor.setContent(new Content(content));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoDescriptor build() {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        return descriptor;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":42}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"    public static final String DEFAULT_TIMETABLE_LINK \u003d \"http://modsn.us/MYwiD\";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DEFAULT_DETAIL \u003d \"Likes tennis\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    private TimeTableLink link;"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    private Detail detail;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        link \u003d new TimeTableLink(DEFAULT_TIMETABLE_LINK);"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d new Detail(DEFAULT_DETAIL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        link \u003d personToCopy.getTimeTableLink();"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d personToCopy.getDetail();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"     * Sets the {@code TimeTableLink} of the {@code Person} that we are building."},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"    public PersonBuilder withTimeTableLink(String link) {"},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d new TimeTableLink(link);"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"     * Sets the {@code Detail} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    public PersonBuilder withDetail(String detail) {"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d new Detail(detail);"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        return this;"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(name, phone, email, address, link, detail, tags);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":14,"Isaaaca":15,"-":93}},{"path":"src/test/java/seedu/address/testutil/TypicalToDos.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * A utility class containing a list of {@code ToDo} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class TypicalToDos {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_A \u003d new ToDoBuilder().withContent(\"ToDo A\").build();"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_B \u003d new ToDoBuilder().withContent(\"ToDo B\").build();"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_C \u003d new ToDoBuilder().withContent(\"ToDo C\").build();"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_D \u003d new ToDoBuilder().withContent(\"ToDo D\").build();"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final ToDo TODO_E \u003d new ToDoBuilder().withContent(\"ToDo E\").build();"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public static List\u003cToDo\u003e getTypicalToDos() {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TODO_A, TODO_B, TODO_C));"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":24}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_NDP;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_VENUE_NDP;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Iterator;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.testutil.EventBuilder;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"public class UniqueEventListTest {"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.asObservableList().remove(0);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_sameList_true() throws Exception {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    public void equals_differentList_false() throws Exception {"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_sameList_sameResult() throws Exception {"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public void hashCode_differentList_differentResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        assertNotEquals(uniqueEventList1.hashCode(), uniqueEventList2.hashCode());"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    public void duplicateEvent() throws Exception {"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(DuplicateEventException.class);"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent_editedEvent_success() throws Exception {"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1 \u003d new EventBuilder().build();"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvent(ndp, f1);"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(f1);"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList, uniqueEventList2);"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent_wrongEvent_throwsEventNotFoundException() throws Exception {"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1 \u003d new EventBuilder().build();"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(EventNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvent(f1, ndp);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent_duplicateEvent_throwsDuplicateEventException() throws Exception {"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        Event f1 \u003d new EventBuilder().build();"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(f1);"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(DuplicateEventException.class);"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvent(f1, ndp);"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"    public void removeEvent_wrongEvent_throwsEventNotFoundException() throws Exception {"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        Event ndp \u003d new EventBuilder().withName(VALID_EVENT_NAME_NDP).build();"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(ndp);"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(EventNotFoundException.class);"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.removeEvent(new EventBuilder().build());"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"    public void removeEvent_correctEvent_success() throws Exception {"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.add(new EventBuilder().build());"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.removeEvent(new EventBuilder().build());"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList, new UniqueEventList());"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents_correctParameters_success() throws Exception {"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().build());"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(uniqueEventList2);"},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList2.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(uniqueEventList2);"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e events \u003d new ArrayList\u003cEvent\u003e();"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().build());"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.setEvents(events);"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents_null_throwsNullPointerException() throws Exception {"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList \u003d new UniqueEventList();"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"    public void iterator() throws Exception {"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList1 \u003d new UniqueEventList();"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"        UniqueEventList uniqueEventList2 \u003d new UniqueEventList();"},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().build());"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withName(VALID_EVENT_NAME_NDP).build());"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"        uniqueEventList1.add(new EventBuilder().withVenue(VALID_EVENT_VENUE_NDP).build());"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"        Iterator\u003cEvent\u003e iter \u003d uniqueEventList1.iterator();"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        while (iter.hasNext()) {"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"            uniqueEventList2.add(iter.next());"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"        assertEquals(uniqueEventList1, uniqueEventList2);"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":197}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":9,"-":22}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the text in the command node."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the list of style classes present in the command node."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":2,"-":44}},{"path":"src/test/java/seedu/address/testutil/EventUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class for Event."},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"public class EventUtil {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an add command string for adding the {@code event}."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public static String getAddEventCommand(Event event) {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the part of command string for the given {@code event}\u0027s details."},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public static String getEventDetails(Event event) {"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_NAME + event.getName() + \" \");"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_VENUE + event.getVenue() + \" \");"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_DATE + event.getDate() + \" \");"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_START_TIME + event.getStartTime() + \" \");"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        sb.append(PREFIX_END_TIME + event.getEndTime() + \" \");"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"        return sb.toString();"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":37}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    /*public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }*/"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":4,"-":47}},{"path":"src/test/java/seedu/address/testutil/GroupBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" * A utility class to help with building Group objects."},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"public class GroupBuilder {"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public static final String DEFAULT_INFORMATION \u003d \"Group\";"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    private Information information;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    private UniquePersonList personList;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        information \u003d new Information(DEFAULT_INFORMATION);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        personList \u003d new UniquePersonList();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     * Initializes the GroupBuilder with the data of {@code groupToCopy}."},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder(Group groupToCopy) {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        information \u003d groupToCopy.getInformation();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        this.personList \u003d groupToCopy.getPersonList();"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code Information} of the {@code Group} that we are building."},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder withInformation(String information) {"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        this.information \u003d new Information(information);"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        personList \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        return this;"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code Information} and {@code persons} of the {@code Group} that we are building."},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder withPerson(Person... personsToAdd) {"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        this.information \u003d new Information(DEFAULT_INFORMATION);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        personList \u003d new UniquePersonList();"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"            for (Person person : personsToAdd) {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"                personList.add(person);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code Information} and {@code persons} of the {@code Group} that we are building."},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    public GroupBuilder withPerson(String information, Person... personsToAdd) {"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        this.information \u003d new Information(information);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        personList \u003d new UniquePersonList();"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"            for (Person person : personsToAdd) {"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"                personList.add(person);"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    public Group build() {"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        return new Group(information, personList);"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":78}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.testutil.TypicalToDos.getTypicalToDos;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"public class TypicalEvents {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event F1RACE \u003d new EventBuilder().build();"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event GSS \u003d new EventBuilder().withName(\"Great Singapore Sale\").withVenue(\"Orchard\")"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"09/06/2018\").withStartTime(\"0900\").withEndTime(\"2300\").build();"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event HARIRAYA \u003d new EventBuilder().withName(\"Hari Raya Haji\").withVenue(\"Singapore\")"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"22/08/2018\").withStartTime(\"0000\").withEndTime(\"2359\").build();"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event ILIGHT \u003d new EventBuilder().withName(\"iLight\").withVenue(\"Marina Bay\")"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"01/04/2018\").withStartTime(\"1930\").withEndTime(\"2359\").build();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Event NDP \u003d new EventBuilder().withName(\"National Day Parade\").withVenue(\"Promenade\")"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"            .withDate(\"09/08/2018\").withStartTime(\"1700\").withEndTime(\"1900\").build();"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    private TypicalEvents() {"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    } // prevents instantiation"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an {@code AddressBook} with all the typical events."},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"            try {"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"                ab.addPerson(person);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        for (Event event : getTypicalEvents()) {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"            try {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"                ab.addEvent(event);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        for (ToDo toDo : getTypicalToDos()) {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"            try {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                ab.addToDo(toDo);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"            } catch (DuplicateToDoException e) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        return ab;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(F1RACE, GSS, HARIRAYA, ILIGHT, NDP));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":68}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":10,"-":70}},{"path":"src/test/java/guitests/guihandles/StatusBarFooterHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handle for the {@code StatusBarFooter} at the footer of the application."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    private static final String TOTAL_PERSONS_STATUS_ID \u003d \"#totalPersonsStatus\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final StatusBar syncStatusNode;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    private final StatusBar totalPersonsStatusNode;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final StatusBar saveLocationNode;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private String lastRememberedSyncStatus;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private String lastRememberedTotalPersonsStatus;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String lastRememberedSaveLocation;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle(Node statusBarFooterNode) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        super(statusBarFooterNode);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        this.totalPersonsStatusNode \u003d getChildNode(TOTAL_PERSONS_STATUS_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the text of the sync status portion of the status bar."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getSyncStatus() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return syncStatusNode.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"     * Returns the text of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    public String getTotalPersonsStatus() {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        return totalPersonsStatusNode.getText();"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the text of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getSaveLocation() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return saveLocationNode.getText();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Remembers the content of the sync status portion of the status bar."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void rememberSyncStatus() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        lastRememberedSyncStatus \u003d getSyncStatus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the sync status is different from the value remembered by the most recent"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * {@code rememberSyncStatus()} call."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean isSyncStatusChanged() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return !lastRememberedSyncStatus.equals(getSyncStatus());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"     * Remembers the content of the \u0027total persons\u0027 portion of the status bar."},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    public void rememberTotalPersonsStatus() {"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        lastRememberedTotalPersonsStatus \u003d getTotalPersonsStatus();"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     * Returns true if the current content of the \u0027total persons\u0027 is different from the value remembered by the most"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"     * recent {@code rememberTotalPersonsStatus()} call."},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    public boolean isTotalPersonsStatusChanged() {"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        return !lastRememberedTotalPersonsStatus.equals(getTotalPersonsStatus());"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Remembers the content of the \u0027save location\u0027 portion of the status bar."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void rememberSaveLocation() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        lastRememberedSaveLocation \u003d getSaveLocation();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * recent {@code rememberSaveLocation()} call."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public boolean isSaveLocationChanged() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return !lastRememberedSaveLocation.equals(getSaveLocation());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":28,"-":71}},{"path":"src/test/java/guitests/guihandles/ToDoCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Provides a handle to a to-do card in the to-do list panel."},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private static final String CONTENT_FIELD_ID \u003d \"#content\";"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    private final Label idLabel;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    private final Label contentLabel;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    private final Label statusLabel;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle(Node cardNode) {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        super(cardNode);"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        this.contentLabel \u003d getChildNode(CONTENT_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        this.statusLabel \u003d getChildNode(STATUS_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public String getId() {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        return idLabel.getText();"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public String getContent() {"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        return contentLabel.getText();"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    public String getStatus() {"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        return statusLabel.getText();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":39}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command node."},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), false));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the command node style to use the default style."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"     * Sets the command node style to indicate a failed command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":2,"LeonidAgarth":3,"-":146}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        loadPage(GOOGLE_SEARCH_URL_PREFIX + person.getName().fullName + GOOGLE_SEARCH_URL_SUFFIX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":69}},{"path":"src/main/java/seedu/address/ui/ProgressIndicatorProperties.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":" * Contains properties to initialize Progress Indicator and Progress Indicator Label"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"public class ProgressIndicatorProperties {"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"    public static final String PROGRESS_INDICATOR_LABEL_NAME \u003d \"TO-DO COMPLETION\";"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"    public static final String PROGRESS_INDICATOR_LABEL_COLOR \u003d \"-fx-text-fill: black;\";"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"    public static final String PROGRESS_INDICATOR_COLOR \u003d \"-fx-progress-color: #4DA194;\";"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    public static final int PROGRESS_INDICATOR_WIDTH \u003d 150;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final int PROGRESS_INDICATOR_HEIGHT \u003d 150;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":13}},{"path":"src/test/java/guitests/guihandles/GroupCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" * Provides a handle to a group card in the group list panel."},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"public class GroupCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    private static final String INFORMATION_FIELD_INFORMATION \u003d \"#information\";"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    private final Label idLabel;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    private final Label information;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public GroupCardHandle(Node cardNode) {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"        super(cardNode);"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        this.information \u003d getChildNode(INFORMATION_FIELD_INFORMATION);"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public String getId() {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        return idLabel.getText();"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public String getInformation() {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        return information.getText();"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":31}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.CalendarChangedEvent;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.TimetableChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/FASTIS.png\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":55,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        mainWindow.updateProgressIndicator();"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    @Subscribe"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    private void handleAddressBookChangedEvent(DataSavingExceptionEvent event) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"    @Subscribe"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"    private void handleCalendarChangedEvent(CalendarChangedEvent event) {"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"        mainWindow.redisplayCalendar();"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"    @Subscribe"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"    private void handleTimetableChangedEvent(TimetableChangedEvent event) {"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"        mainWindow.redisplayTimetable(event.timetable);"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":1,"LeonidAgarth":16,"-":117}},{"path":"src/main/java/seedu/address/ui/CalendarDate.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.YearMonth;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.text.Text;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * Node to display each cell/day of the calendar"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"public class CalendarDate extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String FXML \u003d \"CalendarDate.fxml\";"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public final LocalDate date;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private GridPane box;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private VBox node;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private Text day;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    private Text eventText;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * Create a calendar date for today on the calendar"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public CalendarDate() {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d LocalDate.now();"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        initStyle();"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     * Create a calendar date for an event on the calendar"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    public CalendarDate(Event event) {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d LocalDate.parse(event.getDate(), DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        initStyle();"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        eventText.setText(event.getName());"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"     * Initialize the style of the date node"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    private void initStyle() {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        //node \u003d new VBox();"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        node.setPrefSize(200, 50);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        day.setText(\"\" + date.getDayOfMonth());"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        setEventText(\"\");"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"     * Set the date of this node to the specified {@code date}"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    public void setDate(LocalDate date, YearMonth currentYearMonth) {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        day.setText(\"\" + date.getDayOfMonth());"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        if (date.equals(LocalDate.now())) {"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"            setStyleClass(node, \"weekend\");"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"            setStyleClass(node, \"date\");"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        if (date.getMonth().equals(currentYearMonth.getMonth())) {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"            setStyleClass(day, \"thisMonthDate\");"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            setStyleClass(day, \"notThisMonthDate\");"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    private void setStyleClass(Node node, String... styles) {"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        ObservableList\u003cString\u003e styleClass \u003d node.getStyleClass();"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        styleClass.clear();"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        for (String style : styles) {"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"            styleClass.add(style);"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public String getDate() {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        return date.format(formatter);"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"    public GridPane getBox() {"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        return box;"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    public VBox getNode() {"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        return node;"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"    public Text getDay() {"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        return day;"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    public Text getEventText() {"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        return eventText;"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEventText(String text) {"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        if (text.length() \u003e 1) {"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"            eventText.setText(\"- \" + text);"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"            eventText.setText(text);"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"        // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"        // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof CalendarDate)) {"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"        // state check"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"        CalendarDate theOther \u003d (CalendarDate) other;"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"        return date.equals(theOther.date) \u0026\u0026 eventText.getText().equals(theOther.getEventText().getText());"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":134}},{"path":"src/main/java/seedu/address/ui/ToDoListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.events.ui.ToDoPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" * Panel containing the list of to-dos."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private static final String FXML \u003d \"ToDoListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ToDoListPanel.class);"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private ListView\u003cToDoCard\u003e toDoListView;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoListPanel(ObservableList\u003cToDo\u003e toDoList) {"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        setConnections(toDoList);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    private void setConnections(ObservableList\u003cToDo\u003e toDoList) {"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        ObservableList\u003cToDoCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"                toDoList, (toDo) -\u003e new ToDoCard(toDo, toDoList.indexOf(toDo) + 1));"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        toDoListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        toDoListView.setCellFactory(listView -\u003e new ToDoListViewCell());"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        toDoListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"                        logger.fine(\"Selection in to-do list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"                        raise(new ToDoPanelSelectionChangedEvent(newValue));"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"                    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"                });"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ToDoCard}."},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    class ToDoListViewCell extends ListCell\u003cToDoCard\u003e {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        protected void updateItem(ToDoCard toDo, boolean empty) {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"            super.updateItem(toDo, empty);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"            if (empty || toDo \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"                setGraphic(null);"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"                setText(null);"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"                return;"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            this.getStylesheets().clear();"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"            if (toDo.isDone()) {"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"                this.getStylesheets().add(\"view/ToDoDone.css\");"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"            } else {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"                this.getStylesheets().add(\"view/ToDoUnDone.css\");"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"            setGraphic(toDo.getRoot());"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":75}},{"path":"src/main/java/seedu/address/ui/Calendar.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import java.time.YearMonth;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.control.Button;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.text.Text;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":" * The Calendar of the App."},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":" * \u003cp\u003e"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":" * Adapted from javafx-calendar by SirGoose3432"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":" * URL: https://github.com/SirGoose3432/javafx-calendar"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"public class Calendar extends UiPart\u003cRegion\u003e {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String FXML \u003d \"Calendar.fxml\";"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    private ArrayList\u003cCalendarDate\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(42);"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    private VBox calendarView;"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    private Text calendarHeader;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    private YearMonth currentYearMonth;"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    private ObservableList\u003cEvent\u003e events;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    private ListView\u003cCalendarDate\u003e calendarListView;"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public Calendar(ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        this(YearMonth.now(), eventList);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    public Calendar(YearMonth yearMonth, ObservableList\u003cEvent\u003e eventList) {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d yearMonth;"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d eventList;"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        initCalendar();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"     * Create the calendarView for the calendar"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    private void initCalendar() {"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the calendar grid pane"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane calendar \u003d new GridPane();"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        calendar.setPrefSize(1400, 600);"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        calendar.setMaxWidth(1400);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        calendar.setGridLinesVisible(true);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        // Create rows and columns with anchor panes for the calendar"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"            for (int j \u003d 0; j \u003c 7; j++) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"                CalendarDate apn \u003d new CalendarDate();"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"                calendar.add(apn.getBox(), j, i);"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"                allCalendarDays.add(apn);"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        // Days of the week"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        Text[] dayNames \u003d new Text[]{new Text(\"Mon\"), new Text(\"Tue\"), new Text(\"Wed\"),"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            new Text(\"Thu\"), new Text(\"Fri\"), new Text(\"Sat\"), new Text(\"Sun\")};"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane dayLabels \u003d new GridPane();"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setPrefWidth(600);"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setMaxWidth(1120);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setGridLinesVisible(true);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        int col \u003d 0;"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        for (Text txt : dayNames) {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"            txt.getStyleClass().add(\"dayName\");"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane ap \u003d new AnchorPane();"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"            ap.setPrefSize(200, 20);"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setLeftAnchor(txt, 5.0);"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"            AnchorPane.setBottomAnchor(txt, 5.0);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"            ap.getChildren().add(txt);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"            if (txt.getText().equals(\"Sun\") || txt.getText().equals(\"Sat\")) {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"                ap.getStyleClass().add(\"weekend\");"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"                ap.getStyleClass().add(\"weekday\");"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"            dayLabels.add(ap, col++, 0);"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        // Create calendarHeader and navigation"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader \u003d new Text();"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader.getStyleClass().add(\"yearMonth\");"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        Button previousMonth \u003d new Button(\"\u003c\u003c\");"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        previousMonth.setOnAction(e -\u003e previousMonth());"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        Button nextMonth \u003d new Button(\"\u003e\u003e\");"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        nextMonth.setOnAction(e -\u003e nextMonth());"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        HBox titleBar \u003d new HBox(previousMonth, new Text(\"\\t\"), calendarHeader, new Text(\"\\t\"), nextMonth);"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"        titleBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        // Populate calendar with the appropriate day numbers"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        showEvents();"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the calendar calendarView"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        calendarView \u003d new VBox(titleBar, dayLabels, calendar);"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"     * Set the visible days on the calendar to the appropriate {@code yearMonth}"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    private void fillCalendar(YearMonth yearMonth) {"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        // Get the month and year to display"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"        //Roll the day back to MONDAY in order to fill up the whole calendar"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        while (!calendarDate.getDayOfWeek().toString().equals(\"MONDAY\")) {"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"            calendarDate \u003d calendarDate.minusDays(1);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        // Fill the calendar"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"        for (CalendarDate date : allCalendarDays) {"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"            date.setDate(calendarDate, yearMonth);"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"            calendarDate \u003d calendarDate.plusDays(1);"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"            date.setEventText(\"\");"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        // Change the header of the calendar"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"        calendarHeader.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"     * Show all events in eventList onto Calendar"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"    private void showEvents() {"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"        for (Event e : events) {"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"            String[] dayMonthYear \u003d e.getDate().split(\"/\");"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"            int day \u003d Integer.parseInt(dayMonthYear[0]);"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"            int month \u003d Integer.parseInt(dayMonthYear[1]);"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"            int year \u003d Integer.parseInt(dayMonthYear[2]);"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"            if (month !\u003d currentYearMonth.getMonthValue() || year !\u003d currentYearMonth.getYear()) {"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"                continue;"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"            LocalDate date \u003d LocalDate.of(year, month, day);"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"            CalendarDate node \u003d getDateNode(date);"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"            node.setEventText(e.getName());"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"     * Move back 1 month, then refill the calendar."},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"    private void previousMonth() {"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d currentYearMonth.minusMonths(1);"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"        showEvents();"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"     * Move forward 1 month, then refill the calendar."},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"    private void nextMonth() {"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"        currentYearMonth \u003d currentYearMonth.plusMonths(1);"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"        fillCalendar(currentYearMonth);"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"        showEvents();"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the Calendar to view in application"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"    public VBox getCalendarView() {"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"        return calendarView;"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"    public CalendarDate getDateNode(LocalDate date) {"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"        LocalDate firstDay \u003d LocalDate.of(currentYearMonth.getYear(), currentYearMonth.getMonthValue(), 1);"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"        int firstDayIndex \u003d firstDay.getDayOfWeek().getValue() - 1;"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"        int gap \u003d date.getDayOfMonth() - firstDay.getDayOfMonth();"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"        return allCalendarDays.get(firstDayIndex + gap);"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":181}},{"path":"src/test/java/guitests/guihandles/ToDoListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.ui.ToDoCard;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" * Provides a handle for {@code ToDoListPanel} containing the list of {@code ToDoCard}."},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoListPanelHandle extends NodeHandle\u003cListView\u003cToDoCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final String TODO_LIST_VIEW_ID \u003d \"#toDoListView\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    private Optional\u003cToDoCard\u003e lastRememberedSelectedToDoCard;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoListPanelHandle(ListView\u003cToDoCard\u003e toDoListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"        super(toDoListPanelNode);"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"     * Returns a handle to the selected {@code ToDoCardHandle}."},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e toDoList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        if (toDoList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"ToDo list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDoCardHandle(toDoList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"     * Navigates the listview to display and select the to-do."},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    public void navigateToCard(ToDo toDo) {"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        Optional\u003cToDoCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.toDo.equals(toDo)).findFirst();"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalArgumentException(\"ToDo does not exist.\");"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the to-do card handle of a to-do associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getToDoCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        return getToDoCardHandle(getRootNode().getItems().get(index).toDo);"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the {@code ToDoCardHandle} of the specified {@code toDo} in the list."},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCardHandle getToDoCardHandle(ToDo toDo) {"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        Optional\u003cToDoCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"                .filter(card -\u003e card.toDo.equals(toDo))"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"                .map(card -\u003e new ToDoCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"ToDo does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"     * Selects the {@code ToDoCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"     * Remembers the selected {@code ToDoCard} in the list."},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    public void rememberSelectedToDoCard() {"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"            lastRememberedSelectedToDoCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"            lastRememberedSelectedToDoCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if the selected {@code ToDoCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"     * {@code rememberSelectedToDoCard()} call."},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    public boolean isSelectedToDoCardChanged() {"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDoCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"            return lastRememberedSelectedToDoCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"            return !lastRememberedSelectedToDoCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"                    || !lastRememberedSelectedToDoCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":135}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.ProgressIndicatorProperties.PROGRESS_INDICATOR_COLOR;"},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.ProgressIndicatorProperties.PROGRESS_INDICATOR_HEIGHT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.ProgressIndicatorProperties.PROGRESS_INDICATOR_LABEL_COLOR;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.ProgressIndicatorProperties.PROGRESS_INDICATOR_LABEL_NAME;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.ui.ProgressIndicatorProperties.PROGRESS_INDICATOR_WIDTH;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.Label;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.ProgressIndicator;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    private Calendar calendar;"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    private Timetable timetable;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    private ToDoListPanel toDoListPanel;"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    private GroupListPanel groupListPanel;"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    private ProgressIndicator progressIndicator;"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    private Label progressIndicatorLabel;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    private FlowPane progressIndicatorPlaceholder;"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    private StackPane toDoListPanelPlaceholder;"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    private StackPane groupListPanelPlaceholder;"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":123,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":129,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":132,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":133,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"        calendar \u003d new Calendar(logic.getFilteredEventList());"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"        timetable \u003d new Timetable();"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().add(calendar.getCalendarView());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"jas5469"},"content":"        groupListPanel \u003d new GroupListPanel(logic.getFilteredGroupList());"},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"        groupListPanelPlaceholder.getChildren().add(groupListPanel.getRoot());"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":"        //@@author nhatquang3112"},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"        toDoListPanel \u003d new ToDoListPanel(logic.getFilteredToDoList());"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        toDoListPanelPlaceholder.getChildren().add(toDoListPanel.getRoot());"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicatorLabel \u003d new Label(PROGRESS_INDICATOR_LABEL_NAME);"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicatorLabel.setStyle(PROGRESS_INDICATOR_LABEL_COLOR);"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicatorPlaceholder.getChildren().add(progressIndicatorLabel);"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicator \u003d new ProgressIndicator();"},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicator.setStyle(PROGRESS_INDICATOR_COLOR);"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicator.setPrefSize(PROGRESS_INDICATOR_WIDTH, PROGRESS_INDICATOR_HEIGHT);"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicator.setProgress(logic.getToDoListCompleteRatio());"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicatorPlaceholder.getChildren().add(progressIndicator);"},{"lineNumber":169,"author":{"gitID":"nhatquang3112"},"content":"        //@@author"},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"        //@@author jas5469"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":"                logic.getFilteredPersonList().size());"},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":"        //@@author"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"nhatquang3112"},"content":"    //@@author nhatquang3112"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"    void updateProgressIndicator() {"},{"lineNumber":185,"author":{"gitID":"nhatquang3112"},"content":"        progressIndicator.setProgress(logic.getToDoListCompleteRatio());"},{"lineNumber":186,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"nhatquang3112"},"content":"    //@@author"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"     * Clears the old calendar and display an updated one"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"    void redisplayCalendar() {"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().clear();"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"        calendar \u003d new Calendar(logic.getFilteredEventList());"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().add(calendar.getCalendarView());"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"     * Clears the old timetable and display an updated one"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"    void redisplayTimetable(ObservableList\u003cWeeklyEvent\u003e modules) {"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().clear();"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"        timetable \u003d new Timetable(modules);"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"        calendarPlaceholder.getChildren().add(timetable.getTimetableView());"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":263,"author":{"gitID":"nhatquang3112"},"content":"        // browserPanel.freeResources();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":40,"jas5469":11,"LeonidAgarth":29,"-":191}},{"path":"src/main/java/seedu/address/ui/ToDoCard.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * An UI component that displays information of a {@code ToDo}."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    private static final String FXML \u003d \"ToDoListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    public final ToDo toDo;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    private Label content;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private Label status;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoCard(ToDo toDo, int displayedIndex) {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        this.toDo \u003d toDo;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        content.setText(toDo.getContent().value);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        status.setText(toDo.getStatus().value);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    public boolean isDone() {"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        return toDo.getStatus().value.equals(\"done\");"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof ToDoCard)) {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        ToDoCard card \u003d (ToDoCard) other;"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 toDo.equals(card.toDo);"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":57}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String TOTAL_PERSONS_STATUS \u003d \"%d person(s) total\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    private StatusBar totalPersonsStatus;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"    public StatusBarFooter(String saveLocation, int totalPersons) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        setTotalPersons(totalPersons);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"    private void setTotalPersons(int totalPersons) {"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        Platform.runLater(() -\u003e this.totalPersonsStatus.setText(String.format(TOTAL_PERSONS_STATUS, totalPersons)));"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        setTotalPersons(abce.data.getPersonList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":11,"-":79}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.TimetableChangedEvent;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.DatabaseManager;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"            displayed.setValue(event.message);"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"            if (event.isSuccessful) {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                setStyleToIndicateCommandSuccess();"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"                setStyleToIndicateCommandFailure();"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        });"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"    @Subscribe"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        Person selected \u003d event.getNewSelection().person;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        ArrayList\u003cWeeklyEvent\u003e eventList \u003d DatabaseManager.getInstance().parseEvents(selected.getTimeTableLink());"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        raise(new TimetableChangedEvent(FXCollections.observableArrayList(eventList)));"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":8,"jas5469":23,"LeonidAgarth":6,"-":50}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.model.tag.Tag.AVAILABLE_COLORS;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d AVAILABLE_COLORS;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     * Define tag colour styles"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    private Label detail;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        detail.setText(person.getDetail().detail);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        initTags(person);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the color style for {@code name}\u0027s label."},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        // use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length - 1];"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    private void initTags(Person person) {"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            Label tagLabel \u003d new Label(tag.name);"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            if (tag.color.equals(\"undefined\")) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"                tagLabel.getStyleClass().add(getTagColorStyleFor(tag.name));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"                tagLabel.getStyleClass().add(tag.color);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        });"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"jas5469":19,"LeonidAgarth":11,"-":70}},{"path":"src/main/java/seedu/address/ui/GroupCard.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" * An UI component that displays information of a {@code Group}."},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"public class GroupCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    private static final String FXML \u003d \"GroupListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public final Group group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private Label information;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private Label id;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public GroupCard(Group group, int displayedIndex) {"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        this.group \u003d group;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        information.setText(group.getInformation().value);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        if (!(other instanceof GroupCard)) {"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        // state check"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        GroupCard card \u003d (GroupCard) other;"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 group.equals(card.group);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":50}},{"path":"src/main/java/seedu/address/database/module/Module.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.PropertyNamingStrategy;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.annotation.JsonNaming;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":" * Represents a Module from NUSmods"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"public class Module {"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private String moduleCode \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private String moduleTitle \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private ArrayList\u003cSchedule\u003e timetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    public Module(){}"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    public Module(String moduleCode, String moduleTitle, ArrayList\u003cSchedule\u003e timetable) {"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        requireAllNonNull(moduleCode, moduleTitle);"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    public Module(String moduleCode, String moduleTitle) {"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        requireAllNonNull(moduleCode, moduleTitle);"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        this.moduleTitle \u003d moduleTitle;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"    public String getModuleCode() {"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        return moduleCode;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"    public String getModuleTitle() {"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"        return moduleTitle;"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    public ArrayList\u003cSchedule\u003e getScheduleList() {"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        return timetable;"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"        if (!(other instanceof Module)) {"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        Module otherModule \u003d (Module) other;"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        return otherModule.getModuleCode().equals(this.getModuleCode())"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherModule.getModuleTitle().equals(this.getModuleTitle());"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"        return \"moduleCode: \" + moduleCode + \" moduleTitle: \" + moduleTitle + \"\\n\" + timetable.toString();"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":66}},{"path":"src/main/java/seedu/address/ui/GroupListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.events.ui.GroupPanelSelectionChangedEvent;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" * Panel containing the list of groups."},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"public class GroupListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    private static final String FXML \u003d \"GroupListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(GroupListPanel.class);"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    private ListView\u003cGroupCard\u003e groupListView;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public GroupListPanel(ObservableList\u003cGroup\u003e groupList) {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        setConnections(groupList);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    private void setConnections(ObservableList\u003cGroup\u003e groupList) {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        ObservableList\u003cGroupCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"                groupList, (group) -\u003e new GroupCard(group, groupList.indexOf(group) + 1));"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        groupListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        groupListView.setCellFactory(listView -\u003e new GroupListViewCell());"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        groupListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"                        logger.fine(\"Selection in group list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"                        raise(new GroupPanelSelectionChangedEvent(newValue));"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"                    }"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"                });"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code GroupCard}."},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    class GroupListViewCell extends ListCell\u003cGroupCard\u003e {"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        @Override"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"        protected void updateItem(GroupCard groupCard, boolean empty) {"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"            super.updateItem(groupCard, empty);"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"            if (empty || groupCard \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"                setGraphic(null);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"                setText(null);"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"                setGraphic(groupCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":69}},{"path":"src/main/java/seedu/address/database/module/Schedule.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database.module;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.PropertyNamingStrategy;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.annotation.JsonNaming;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":" * Represents a schedule for a class in a module"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"@JsonNaming(PropertyNamingStrategy.UpperCamelCaseStrategy.class)"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"public class Schedule {"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"    private String classNo;"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    private String lessonType;"},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    private String weekText;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"    private String dayText;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    private String startTime;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private String endTime;"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"    private String venue;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"    public Schedule() {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"        this.classNo \u003d \"1\";"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        this.lessonType \u003d \"Lecture\";"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"        this.weekText \u003d \"1\";"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        this.dayText \u003d \"Monday\";"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"        this.startTime \u003d \"0000\";"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"        this.endTime \u003d \"2359\";"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"        this.venue \u003d \"COM1 01-01\";"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"    public Schedule(String classNo, String lessonType, String weekText, String dayText,"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"             String startTime, String endTime, String venue) {"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        this.classNo \u003d classNo;"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"        this.lessonType \u003d lessonType;"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        this.weekText \u003d weekText;"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"        this.dayText \u003d dayText;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        this.venue \u003d venue;"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    public String getClassNo() {"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"        return classNo;"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"    public String getLessonType() {"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"        return lessonType;"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"    public String getWeekText() {"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"        return weekText;"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"    public String getDayText() {"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        return dayText;"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"    public String getStartTime() {"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        return startTime;"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"    public String getEndTime() {"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"        return endTime;"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"    public String getVenue() {"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"        return venue;"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"        if (!(other instanceof Schedule)) {"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"        Schedule otherSchedule \u003d (Schedule) other;"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"        return otherSchedule.getClassNo().equals(this.getClassNo())"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getLessonType().equals(this.getLessonType())"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getWeekText().equals(this.getWeekText())"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getDayText().equals(this.getDayText())"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getStartTime().equals(this.getStartTime())"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getEndTime().equals(this.getEndTime())"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherSchedule.getVenue().equals(this.getVenue());"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"        return \"ClassNo: \" + classNo"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nLessonType: \" + lessonType"},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nWeekText: \" + weekText"},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nDayText: \" + dayText"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nStartTime: \" + startTime"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nEndTime: \" + endTime"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"                + \"\\nVenue: \" + venue + \"\\n\";"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":100}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_INVALID_GROUP_NAME \u003d \"Group not found\";"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_INVALID_TODO_DISPLAYED_INDEX \u003d \"The to-do index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    public static final String MESSAGE_DID_YOU_MEAN \u003d \"\\n Did you mean: \";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"Isaaaca":1,"jas5469":2,"-":13}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"    private String appTitle \u003d \"Fastis\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":1,"-":71}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"import com.fasterxml.jackson.databind.JavaType;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":60,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"     * Returns the Json Array from the given file or an empty ArrayList if the file is not found."},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"     * @param filePath cannot be null."},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"    public static \u003cT\u003e ArrayList\u003cT\u003e readJsonArrayFromFile("},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(filePath);"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"        if (!file.exists()) {"},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"            return new ArrayList\u003cT\u003e();"},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cT\u003e jsonFile;"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"            JavaType javaType \u003d objectMapper.getTypeFactory()"},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"                    .constructCollectionType(ArrayList.class, classOfObjectToDeserialize);"},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"            jsonFile \u003d objectMapper.readValue(file, javaType);"},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":"        } catch (IOException e) {"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":"            throw new DataConversionException(e);"},{"lineNumber":108,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"        return Optional.of(jsonFile).orElse(new ArrayList\u003cT\u003e());"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":113,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":35,"-":143}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"import me.xdrop.fuzzywuzzy.FuzzySearch;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Ignores case, but a full word match is required."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (String wordInSentence : wordsInPreppedSentence) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"     * Returns the partial ratio bewteen the {@code sentence} and the {@code word}."},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"     * Ignores case."},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"     *       getPartialRatioFuzzyIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d 100"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"     *       getPartialRatioFuzzyIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d 100"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"     *       getPartialRatioFuzzyIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d 100"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"     *       getPartialRatioFuzzyIgnoreCase(\"ABc def\", \"ABcD\") \u003d\u003d 75"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"     * @param sentence cannot be null"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"    public static int getPartialRatioFuzzyIgnoreCase(String sentence, String word) {"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(sentence);"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(word);"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"        String preppedWord \u003d word.trim().toLowerCase();"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"        String preppedSentence \u003d sentence.toLowerCase();"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"        System.out.println(\"word: \" + preppedWord + \" | Name: \" + sentence + \"/n ratio: \""},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"                + FuzzySearch.partialRatio(preppedWord, preppedSentence));"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"        return FuzzySearch.partialRatio(preppedWord, preppedSentence);"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":33,"-":71}},{"path":"src/main/java/seedu/address/commons/util/CalendarUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":" * A container for calendar related utility functions"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"public class CalendarUtil {"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"    private static final int JAN \u003d 1;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"    private static final int JUN \u003d 6;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    private static LocalDate today \u003d LocalDate.now();"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"    public static int getCurrentSemester() {"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"        return getSem(today);"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"    public static int getSem(LocalDate localDate) {"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"        int currMonth \u003d localDate.getMonthValue();"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"        if (currMonth \u003e\u003d JAN \u0026\u0026 currMonth \u003c\u003d JUN) {"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"            return 2;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"            return 1;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"    public static int getCurrAcadYear() {"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"        return  getAcadYear(today);"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"    public static int getAcadYear(LocalDate localDate) {"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"        if (getSem(localDate) \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":"            return localDate.getYear();"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"        } else {"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"            return localDate.getYear() - 1;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":39}},{"path":"src/main/java/seedu/address/commons/events/ui/ToDoPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.ui.ToDoCard;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Represents a selection change in the ToDo List Panel"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    private final ToDoCard newSelection;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public ToDoPanelSelectionChangedEvent(ToDoCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":23}},{"path":"src/main/java/seedu/address/commons/events/ui/GroupPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import seedu.address.ui.GroupCard;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" * Represents a selection change in the Group List Panel"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"public class GroupPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    private final GroupCard newSelection;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public GroupPanelSelectionChangedEvent(GroupCard newSelection) {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":23}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"    public final boolean isSuccessful;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    public NewResultAvailableEvent(String message, boolean isSuccessful) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"        this.isSuccessful \u003d isSuccessful;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jas5469":3,"-":20}},{"path":"src/main/java/seedu/address/database/DatabaseManager.java","lines":[{"lineNumber":1,"author":{"gitID":"Isaaaca"},"content":"package seedu.address.database;"},{"lineNumber":2,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":3,"author":{"gitID":"Isaaaca"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"Isaaaca"},"content":"import java.io.FileOutputStream;"},{"lineNumber":5,"author":{"gitID":"Isaaaca"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":"import java.net.URLConnection;"},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":"import java.nio.channels.Channels;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import java.nio.channels.ReadableByteChannel;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"import java.util.StringTokenizer;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"import java.util.logging.Logger;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.util.CalendarUtil;"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":" * The main DatabaseManager of the app."},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"public class DatabaseManager {"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"    public static final String INCOMPATIBLE_LINK_MESSAGE \u003d \"One or more Timetable link(s) points to a different\""},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"            + \" semester as the one in Fastis.\";"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    private static final String ACAD_YEAR \u003d Integer.toString(CalendarUtil.getCurrAcadYear()) + \"-\""},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"            + Integer.toString(CalendarUtil.getCurrAcadYear() + 1);"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    private static final String SEMESTER \u003d Integer.toString(CalendarUtil.getCurrentSemester());"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_JSON_DATABASE_FILEPATH \u003d \"sem\" + CalendarUtil.getCurrentSemester()"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"            + \"modules.json\";"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"    private static final String DEFAULT_JSON_DATABASE_URL \u003d \"https://api.nusmods.com/\""},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"            + ACAD_YEAR + \"/\" + SEMESTER + \"/modules.json\";"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(DatabaseManager.class);"},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    private static final Map\u003cString, String\u003e lessonAbbrev \u003d Collections.unmodifiableMap("},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"            new HashMap\u003cString, String\u003e() {{"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"                put(\"Design Lecture\", \"DLEC\");"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"                put(\"Laboratory\", \"LAB\");"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"                put(\"Lecture\", \"LEC\");"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"                put(\"Packaged Lecture\", \"PLEC\");"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"                put(\"Packaged Tutorial\", \"PTUT\");"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"                put(\"Recitation\", \"REC\");"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"                put(\"Sectional Teaching\", \"SEC\");"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"                put(\"Seminar-Style Module Class\", \"SEM\");"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial\", \"TUT\");"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial Type 2\", \"TUT2\");"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"                put(\"Tutorial Type 2\", \"TUT3\");"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"                put(\"Workshop\", \"WS\");"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"            }});"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"    private static DatabaseManager databaseManager \u003d null;"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"    private static HashMap\u003cString, Module\u003e moduleDatabase;"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"    private DatabaseManager() {"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"        File jsonFile \u003d new File(DEFAULT_JSON_DATABASE_FILEPATH);"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"        if (jsonFile.exists()) {"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"            try {"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"                URL databaseUrl \u003d new URL(DEFAULT_JSON_DATABASE_URL);"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"                URLConnection databaseConnection \u003d databaseUrl.openConnection();"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"                if (databaseConnection.getLastModified() \u003e jsonFile.lastModified()) {"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"                    downloadFile(databaseUrl, jsonFile);"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"                }"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"            } catch (MalformedURLException e) {"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"                e.printStackTrace();"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"            } catch (IOException e) {"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"                logger.warning(\"Problem updating Module database. Existing database will be used.\");"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":"        } else {"},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":"            try {"},{"lineNumber":83,"author":{"gitID":"Isaaaca"},"content":"                URL databaseUrl \u003d new URL(DEFAULT_JSON_DATABASE_URL);"},{"lineNumber":84,"author":{"gitID":"Isaaaca"},"content":"                downloadFile(databaseUrl, jsonFile);"},{"lineNumber":85,"author":{"gitID":"Isaaaca"},"content":"            } catch (MalformedURLException e) {"},{"lineNumber":86,"author":{"gitID":"Isaaaca"},"content":"                e.printStackTrace();"},{"lineNumber":87,"author":{"gitID":"Isaaaca"},"content":"            } catch (IOException e) {"},{"lineNumber":88,"author":{"gitID":"Isaaaca"},"content":"                logger.severe(\"Unable to download Module Database. Scheduling functionality will no be available.\");"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":90,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"Isaaaca"},"content":"        moduleDatabase \u003d parseDatabase(DEFAULT_JSON_DATABASE_FILEPATH);"},{"lineNumber":92,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":94,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Isaaaca"},"content":"     * Downloads the file from the specified {@code url} saves it in the given {@code file}"},{"lineNumber":96,"author":{"gitID":"Isaaaca"},"content":"     * Creates a new file if it does not exist, and attempts to overwrite if it does."},{"lineNumber":97,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"Isaaaca"},"content":"     * @param url"},{"lineNumber":99,"author":{"gitID":"Isaaaca"},"content":"     * @param file"},{"lineNumber":100,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Isaaaca"},"content":"    private void downloadFile(URL url, File file) throws IOException {"},{"lineNumber":102,"author":{"gitID":"Isaaaca"},"content":"        logger.info(\"Retrieving Module Database...\");"},{"lineNumber":103,"author":{"gitID":"Isaaaca"},"content":"        ReadableByteChannel rbc \u003d Channels.newChannel(url.openStream());"},{"lineNumber":104,"author":{"gitID":"Isaaaca"},"content":"        if (file.createNewFile()) {"},{"lineNumber":105,"author":{"gitID":"Isaaaca"},"content":"            FileOutputStream fos \u003d new FileOutputStream(file);"},{"lineNumber":106,"author":{"gitID":"Isaaaca"},"content":"            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);"},{"lineNumber":107,"author":{"gitID":"Isaaaca"},"content":"            fos.close();"},{"lineNumber":108,"author":{"gitID":"Isaaaca"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"Isaaaca"},"content":"            File temp \u003d new File(\"temp.json\");"},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"            FileOutputStream fos \u003d new FileOutputStream(temp);"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);"},{"lineNumber":112,"author":{"gitID":"Isaaaca"},"content":"            file.delete();"},{"lineNumber":113,"author":{"gitID":"Isaaaca"},"content":"            fos.close();"},{"lineNumber":114,"author":{"gitID":"Isaaaca"},"content":"            temp.renameTo(file);"},{"lineNumber":115,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":118,"author":{"gitID":"Isaaaca"},"content":"    public static DatabaseManager getInstance() {"},{"lineNumber":119,"author":{"gitID":"Isaaaca"},"content":"        if (databaseManager \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"Isaaaca"},"content":"            databaseManager \u003d new DatabaseManager();"},{"lineNumber":121,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"Isaaaca"},"content":"        return databaseManager;"},{"lineNumber":123,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":125,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"Isaaaca"},"content":"     * Parses a string query into a list of module and schedules"},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"     * @param link TimeTableLinkto be parsed"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"    public static ArrayList\u003cWeeklyEvent\u003e parseEvents(TimeTableLink link) {"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"        ArrayList\u003cWeeklyEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"        if (!isCurrentSem(link)) {"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent(INCOMPATIBLE_LINK_MESSAGE, false));"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"            logger.warning(INCOMPATIBLE_LINK_MESSAGE);"},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"            return eventList;"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"        String query \u003d getQuery(link);"},{"lineNumber":140,"author":{"gitID":"Isaaaca"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":141,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":142,"author":{"gitID":"Isaaaca"},"content":"        StringTokenizer queryTokenizer \u003d new StringTokenizer(query, \"\u0026\");"},{"lineNumber":143,"author":{"gitID":"Isaaaca"},"content":"        while (queryTokenizer.hasMoreTokens()) {"},{"lineNumber":144,"author":{"gitID":"Isaaaca"},"content":"            StringTokenizer modTokenizer \u003d new StringTokenizer(queryTokenizer.nextToken(), \"\u003d\");"},{"lineNumber":145,"author":{"gitID":"Isaaaca"},"content":"            Module module \u003d moduleDatabase.get(modTokenizer.nextToken());"},{"lineNumber":146,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":147,"author":{"gitID":"Isaaaca"},"content":"            String[] lessons \u003d modTokenizer.nextToken().split(\",\");"},{"lineNumber":148,"author":{"gitID":"Isaaaca"},"content":"            List\u003cSchedule\u003e scheduleList \u003d module.getScheduleList();"},{"lineNumber":149,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":150,"author":{"gitID":"Isaaaca"},"content":"            for (Schedule schedule : scheduleList) {"},{"lineNumber":151,"author":{"gitID":"Isaaaca"},"content":"                for (String lesson : lessons) {"},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"                    StringTokenizer lessonTokenizer \u003d new StringTokenizer(lesson, \":\");"},{"lineNumber":153,"author":{"gitID":"Isaaaca"},"content":"                    String queryAbbrev \u003d lessonTokenizer.nextToken();"},{"lineNumber":154,"author":{"gitID":"Isaaaca"},"content":"                    String queryLessonNum \u003d lessonTokenizer.nextToken();"},{"lineNumber":155,"author":{"gitID":"Isaaaca"},"content":"                    if (queryAbbrev.equals(lessonAbbrev.get(schedule.getLessonType()))"},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"                            \u0026\u0026 queryLessonNum.equals(schedule.getClassNo())) {"},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":"                        eventList.add(new WeeklyEvent(module, schedule));"},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":159,"author":{"gitID":"Isaaaca"},"content":"                    }"},{"lineNumber":160,"author":{"gitID":"Isaaaca"},"content":"                }"},{"lineNumber":161,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Isaaaca"},"content":"        return eventList;"},{"lineNumber":164,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":166,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":"     * Takes a shortened link from NUSmods and returns its query"},{"lineNumber":168,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":169,"author":{"gitID":"Isaaaca"},"content":"     * @param timeTableLink a TimeTableLink representing an URL to a NUSmods schedule"},{"lineNumber":170,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"Isaaaca"},"content":"    public static String getQuery(TimeTableLink timeTableLink) {"},{"lineNumber":172,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"Isaaaca"},"content":"            URL longUrl \u003d getLongUrl(new URL(timeTableLink.toString()));"},{"lineNumber":174,"author":{"gitID":"Isaaaca"},"content":"            return longUrl.getQuery();"},{"lineNumber":175,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":176,"author":{"gitID":"Isaaaca"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"            logger.info(\"NUSmods URL Invalid.\");"},{"lineNumber":178,"author":{"gitID":"Isaaaca"},"content":"        } catch (IOException e) {"},{"lineNumber":179,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":180,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"        return null;"},{"lineNumber":182,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":184,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"Isaaaca"},"content":"     * Takes a shortened link from NUSmods and checks if it corresponds to the semester the app is working with"},{"lineNumber":186,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"Isaaaca"},"content":"     * @param timeTableLink a TimeTableLink representing an URL to a NUSmods schedule"},{"lineNumber":188,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"Isaaaca"},"content":"    private static boolean isCurrentSem(TimeTableLink timeTableLink) {"},{"lineNumber":190,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"Isaaaca"},"content":"            URL longUrl \u003d getLongUrl(new URL(timeTableLink.toString()));"},{"lineNumber":192,"author":{"gitID":"Isaaaca"},"content":"            String currSem \u003d \"sem-\" + Integer.toString(CalendarUtil.getCurrentSemester());"},{"lineNumber":193,"author":{"gitID":"Isaaaca"},"content":"            return longUrl.getPath().contains(currSem);"},{"lineNumber":194,"author":{"gitID":"Isaaaca"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":195,"author":{"gitID":"Isaaaca"},"content":"            logger.info(\"NUSmods URL Invalid.\");"},{"lineNumber":196,"author":{"gitID":"Isaaaca"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":198,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"Isaaaca"},"content":"        return false;"},{"lineNumber":200,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":202,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"Isaaaca"},"content":"     * Takes a shortened URL and returns its longer form"},{"lineNumber":204,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":205,"author":{"gitID":"Isaaaca"},"content":"     * @param shortUrl a TimeTableLink representing an URL to a NUSmods schedule"},{"lineNumber":206,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"Isaaaca"},"content":"    private static URL getLongUrl(URL shortUrl) throws IOException {"},{"lineNumber":208,"author":{"gitID":"Isaaaca"},"content":"        URLConnection connection \u003d shortUrl.openConnection();"},{"lineNumber":209,"author":{"gitID":"Isaaaca"},"content":"        return new URL(connection.getHeaderField(\"Location\"));"},{"lineNumber":210,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":212,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":213,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"     * @param filePath"},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":"     * @return hashMap of all modules from jsonfile"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"Isaaaca"},"content":"    private HashMap\u003cString, Module\u003e parseDatabase(String filePath) {"},{"lineNumber":218,"author":{"gitID":"Isaaaca"},"content":"        List\u003cModule\u003e moduleList;"},{"lineNumber":219,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":220,"author":{"gitID":"Isaaaca"},"content":"            moduleList \u003d JsonUtil.readJsonArrayFromFile(filePath, Module.class);"},{"lineNumber":221,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":222,"author":{"gitID":"Isaaaca"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":223,"author":{"gitID":"Isaaaca"},"content":"            e.printStackTrace();"},{"lineNumber":224,"author":{"gitID":"Isaaaca"},"content":"            return new HashMap\u003c\u003e();"},{"lineNumber":225,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":227,"author":{"gitID":"Isaaaca"},"content":"        HashMap\u003cString, Module\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":228,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":229,"author":{"gitID":"Isaaaca"},"content":"        for (Module m : moduleList) {"},{"lineNumber":230,"author":{"gitID":"Isaaaca"},"content":"            hashMap.put(m.getModuleCode(), m);"},{"lineNumber":231,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":233,"author":{"gitID":"Isaaaca"},"content":"        return hashMap;"},{"lineNumber":234,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":236,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":230,"-":6}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns an unmodifiable view of the filtered list of to-dos */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getFilteredToDoList();"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    /** Returns an unmodifiable view of the filtered list of groups */"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    ObservableList\u003cGroup\u003e getFilteredGroupList();"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns the complete ratio of the filtered list of to-dos */"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    double getToDoListCompleteRatio();"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    /** Returns an unmodifiable view of the filtered list of events */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":4,"LeonidAgarth":4,"-":27}},{"path":"src/main/java/seedu/address/commons/events/ui/CalendarChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"public class CalendarChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"    public CalendarChangedEvent() {"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":18}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                        PREFIX_TIMETABLE_LINK, PREFIX_DETAIL, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                PREFIX_TIMETABLE_LINK, PREFIX_DETAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"            TimeTableLink link \u003d ParserUtil.parseTimeTableLink(argMultimap.getValue(PREFIX_TIMETABLE_LINK)).get();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            Detail detail \u003d ParserUtil.parseDetail(argMultimap.getValue(PREFIX_DETAIL)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            Person person \u003d new Person(name, phone, email, address, link, detail, tagList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":6,"Isaaaca":5,"-":62}},{"path":"src/main/java/seedu/address/ui/TimetableSlot.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.text.Text;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * Node to display each slot of the Timetable"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"public class TimetableSlot extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String FXML \u003d \"TimetableSlot.fxml\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String[] AVAILABLE_COLORS \u003d new String[] {\"red\", \"orange\", \"yellow\", \"blue\", \"teal\","},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"        \"green\", \"purple\", \"pink\", \"brown\"};"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private GridPane box;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    private VBox node;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private Text module;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private Text lectureType;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private Text venue;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"     * Create a anchor pane node containing all of the {@code children}."},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * The Slot of the node is not set in the constructor"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public TimetableSlot() {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        initStyle(\"blank1\");"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"     * Initialize the style of the Slot node"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    public void initStyle(String style) {"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        node.setPrefSize(250, 60);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        setStyleClass(style);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        module.setText(\"\");"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        lectureType.setText(\"\");"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        venue.setText(\"\");"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    public void setStyleClass(String... styles) {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        ObservableList\u003cString\u003e styleClass \u003d node.getStyleClass();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        styleClass.clear();"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        for (String style : styles) {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"            styleClass.add(style);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    public GridPane getBox() {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        return box;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    public VBox getNode() {"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        return node;"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    public Text getModule() {"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        return module;"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"     * Set the node to contain the {@code mod}"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"     * with a specified {@code style} and a random color"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"     * @return index of the color chosen"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    public int setModule(String style, WeeklyEvent mod) {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        int colorIndex \u003d Math.abs(mod.getName().hashCode()) % AVAILABLE_COLORS.length;"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        setStyleClass(style, AVAILABLE_COLORS[colorIndex]);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        module.setText(mod.getName());"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        if (!mod.getDetails().isEmpty() \u0026\u0026 mod.getDetails().size() \u003e\u003d 2) {"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"            lectureType.setText(mod.getDetails().get(0));"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        venue.setText(mod.getVenue());"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        return colorIndex;"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"     * Randomly change the color of the node while keeping the {@code style}"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"     * @return index of the color randomized"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    public int randomizeColor(String style) {"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        int randomColor \u003d (int) Math.floor(Math.random() * AVAILABLE_COLORS.length);"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        setStyleClass(style, AVAILABLE_COLORS[randomColor]);"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        return randomColor;"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"     * Set the node to have a color specified at {@code colorIndex}"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    public void setColor(int colorIndex) {"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        node.getStyleClass().set(1, AVAILABLE_COLORS[colorIndex]);"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    public void setText(String text) {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        setStyleClass(\"time\");"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        module.setText(text);"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"        // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof TimetableSlot)) {"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"        // state check"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        TimetableSlot theOther \u003d (TimetableSlot) other;"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"        return node.equals(theOther.node);"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":130}},{"path":"src/main/java/seedu/address/logic/parser/ChangeTagColorCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":" * Parses the given {@code String} of arguments in the context of the ChangeTagColorCommand"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * and returns an ChangeTagColorCommand object for execution."},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" *"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommandParser implements Parser\u003cChangeTagColorCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public ChangeTagColorCommand parse(String userInput) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedInput \u003d userInput.trim().replaceAll(\" +\", \" \");"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        String[] args \u003d trimmedInput.split(\" \");"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        if (args.length !\u003d 2) {"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTagColorCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            Tag tag \u003d ParserUtil.parseTag(args[0]);"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            String color \u003d ParserUtil.parseColor((args[1]));"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"            return new ChangeTagColorCommand(tag.name, color);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":35}},{"path":"src/main/java/seedu/address/commons/events/ui/TimetableChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"public class TimetableChangedEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    public final ObservableList\u003cWeeklyEvent\u003e timetable;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public TimetableChangedEvent() {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"        timetable \u003d FXCollections.observableArrayList();"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public TimetableChangedEvent(ObservableList\u003cWeeklyEvent\u003e newTimetable) {"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"        this.timetable \u003d newTimetable;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":28}},{"path":"src/main/java/seedu/address/logic/parser/CheckToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new CheckToDoCommand object"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommandParser implements Parser\u003cCheckToDoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the CheckToDoCommand"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an CheckToDoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public CheckToDoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"            return new CheckToDoCommand(index);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":30}},{"path":"src/main/java/seedu/address/logic/parser/UnCheckToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new UnCheckToDoCommand object"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommandParser implements Parser\u003cUnCheckToDoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the UnCheckToDoCommand"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an UnCheckToDoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public UnCheckToDoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"            return new UnCheckToDoCommand(index);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnCheckToDoCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":30}},{"path":"src/main/java/seedu/address/logic/parser/AddToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new AddToDoCommand object"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommandParser implements Parser\u003cAddToDoCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the AddToDoCommand"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an AddToDoCommand object for execution."},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public AddToDoCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        if (args.trim().isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddToDoCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"            Content content \u003d ParserUtil.parseContent(args);"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            ToDo todo \u003d new ToDo(content);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"            return new AddToDoCommand(todo);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":38}},{"path":"src/main/java/seedu/address/ui/Timetable.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.geometry.Insets;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.geometry.Pos;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.scene.text.Text;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":" * The weekly Timetable of the App."},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"public class Timetable extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private static final String FXML \u003d \"Timetable.fxml\";"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    private static final int MAX_WIDTH \u003d 1100;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private ArrayList\u003cTimetableSlot\u003e allTimetableSlots \u003d new ArrayList\u003c\u003e(72);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    private VBox timetableView;"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    private Text timetableHeader;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    private ObservableList\u003cWeeklyEvent\u003e events;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    private ListView\u003cTimetableSlot\u003e timetableListView;"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public Timetable() {"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        this(FXCollections.observableArrayList());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    public Timetable(ObservableList\u003cWeeklyEvent\u003e eventList) {"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d eventList;"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        initTimetable();"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"     * Create the timetableView for the timetable"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    private void initTimetable() {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the timetable grid pane"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane timetable \u003d new GridPane();"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        timetable.setPrefSize(MAX_WIDTH, 1000);"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        timetable.setMaxWidth(MAX_WIDTH);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        timetable.setGridLinesVisible(false);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        // Create rows and columns with anchor panes for the timetable"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        for (int i \u003d 0; i \u003c 11; i++) {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"            for (int j \u003d 0; j \u003c 6; j++) {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"                TimetableSlot apn \u003d new TimetableSlot();"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"                timetable.add(apn.getBox(), j, i);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"                allTimetableSlots.add(apn);"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        // Slots of the week"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        Text[] dayNames \u003d new Text[]{new Text(\"\"), new Text(\"Mon\"), new Text(\"Tue\"),"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"            new Text(\"Wed\"), new Text(\"Thu\"), new Text(\"Fri\")};"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        GridPane dayLabels \u003d new GridPane();"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setPrefWidth(600);"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setMaxWidth(MAX_WIDTH);"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        dayLabels.setGridLinesVisible(false);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        int col \u003d 0;"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        for (Text txt : dayNames) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"            txt.getStyleClass().add(\"dayName\");"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"            HBox box \u003d new HBox(txt);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"            box.setPrefSize(200, 20);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"            box.setMaxWidth(MAX_WIDTH);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"            box.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"            if (col \u003d\u003d 0) {"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"                box.getStyleClass().add(\"timecell\");"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"                box.getStyleClass().add(\"weekday\");"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"            dayLabels.add(box, col++, 0);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        // Create timetableHeader and navigation"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        timetableHeader \u003d new Text();"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        timetableHeader.setText(\"Timetable\");"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"        timetableHeader.getStyleClass().add(\"yearMonth\");"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        HBox titleBar \u003d new HBox(timetableHeader);"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        titleBar.setAlignment(Pos.BASELINE_CENTER);"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        // Populate timetable with the appropriate day numbers"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"        clearTimetable();"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        showSlots();"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        // Create the timetable timetableView"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"        timetableView \u003d new VBox(titleBar, dayLabels, timetable);"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"     * Clear the timetable to blank"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    private void clearTimetable() {"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        // Fill the timetable"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"        boolean white \u003d true;"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        for (TimetableSlot slot : allTimetableSlots) {"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"            if (white) {"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"                slot.initStyle(\"blank1\");"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                slot.initStyle(\"blank2\");"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"            white \u003d !white;"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"        for (int hour \u003d 800; hour \u003c\u003d 1800; hour +\u003d 100) {"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"            TimetableSlot node \u003d getSlotNode(\"time\", hour);"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"            node.getNode().setPadding(new Insets(-7, 15, 5, 5));"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"            node.getNode().setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"            node.getBox().setMinWidth(50);"},{"lineNumber":122,"author":{"gitID":"LeonidAgarth"},"content":"            if (hour \u003c 1000) {"},{"lineNumber":123,"author":{"gitID":"LeonidAgarth"},"content":"                node.setText(\"0\" + hour + \"\");"},{"lineNumber":124,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":125,"author":{"gitID":"LeonidAgarth"},"content":"                node.setText(hour + \"\");"},{"lineNumber":126,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"     * Show all events in eventList onto Timetable"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":"    private void showSlots() {"},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"        HashMap\u003cInteger, String\u003e usedColor \u003d new HashMap\u003c\u003e();"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"        for (WeeklyEvent mod : events) {"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":"            String day \u003d mod.getDay();"},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"            int startTime \u003d Integer.parseInt(mod.getStartTime());"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"            int endTime \u003d Integer.parseInt(mod.getEndTime());"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":"            //Right now, app doesn\u0027t support modules starting from 6pm onwards"},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"            if (startTime \u003e 1700) {"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"                continue;"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"LeonidAgarth"},"content":"            if (endTime - startTime \u003c\u003d 100) {"},{"lineNumber":144,"author":{"gitID":"LeonidAgarth"},"content":"                TimetableSlot node \u003d getSlotNode(day, startTime);"},{"lineNumber":145,"author":{"gitID":"LeonidAgarth"},"content":"                int color \u003d setUnusedColor(usedColor, node, mod, \"module1hr\");"},{"lineNumber":146,"author":{"gitID":"LeonidAgarth"},"content":"            } else {"},{"lineNumber":147,"author":{"gitID":"LeonidAgarth"},"content":"                WeeklyEvent blank \u003d new WeeklyEvent(mod.getName(), \"\", \"\", \"\", \"\", \"\");"},{"lineNumber":148,"author":{"gitID":"LeonidAgarth"},"content":"                TimetableSlot node \u003d getSlotNode(day, startTime);"},{"lineNumber":149,"author":{"gitID":"LeonidAgarth"},"content":"                int color \u003d setUnusedColor(usedColor, node, blank, \"module2hrtop\");"},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"                node \u003d getSlotNode(day, startTime + 100);"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"                node.setModule(\"module2hrbottom\", mod);"},{"lineNumber":153,"author":{"gitID":"LeonidAgarth"},"content":"                node.getModule().setText(\"\");"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"                node.setColor(color);"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":159,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"LeonidAgarth"},"content":"     * Ensure that every {@code mod} displayed on the timetable has a unique color"},{"lineNumber":161,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":162,"author":{"gitID":"LeonidAgarth"},"content":"     * @param used usedColor HashMap to determine which color has been used"},{"lineNumber":163,"author":{"gitID":"LeonidAgarth"},"content":"     * @param node the node on the timetable to display the mod on"},{"lineNumber":164,"author":{"gitID":"LeonidAgarth"},"content":"     * @param modStyle the style of the mod"},{"lineNumber":165,"author":{"gitID":"LeonidAgarth"},"content":"     * @return"},{"lineNumber":166,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"LeonidAgarth"},"content":"    private int setUnusedColor(HashMap\u003cInteger, String\u003e used, TimetableSlot node, WeeklyEvent mod, String modStyle) {"},{"lineNumber":168,"author":{"gitID":"LeonidAgarth"},"content":"        int color \u003d node.setModule(modStyle, mod);"},{"lineNumber":169,"author":{"gitID":"LeonidAgarth"},"content":"        if (used.containsValue(mod.getName())) {"},{"lineNumber":170,"author":{"gitID":"LeonidAgarth"},"content":"            for (Integer k : used.keySet()) {"},{"lineNumber":171,"author":{"gitID":"LeonidAgarth"},"content":"                if (used.get(k).equals(mod.getName())) {"},{"lineNumber":172,"author":{"gitID":"LeonidAgarth"},"content":"                    color \u003d k;"},{"lineNumber":173,"author":{"gitID":"LeonidAgarth"},"content":"                    node.setColor(color);"},{"lineNumber":174,"author":{"gitID":"LeonidAgarth"},"content":"                    return color;"},{"lineNumber":175,"author":{"gitID":"LeonidAgarth"},"content":"                }"},{"lineNumber":176,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":177,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"LeonidAgarth"},"content":"        if (!used.containsKey(color)) {"},{"lineNumber":179,"author":{"gitID":"LeonidAgarth"},"content":"            used.put(color, mod.getName());"},{"lineNumber":180,"author":{"gitID":"LeonidAgarth"},"content":"            return color;"},{"lineNumber":181,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"LeonidAgarth"},"content":"        String module \u003d used.get(color);"},{"lineNumber":183,"author":{"gitID":"LeonidAgarth"},"content":"        if (mod.getName().equals(module)) {"},{"lineNumber":184,"author":{"gitID":"LeonidAgarth"},"content":"            return color;"},{"lineNumber":185,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"LeonidAgarth"},"content":"        while (used.containsKey(color)) {"},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"            color \u003d node.randomizeColor(modStyle);"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"        used.put(color, mod.getName());"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"        return color;"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the Timetable to view in application"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"    public VBox getTimetableView() {"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        return timetableView;"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"     * Return the list of all visible day in the current month"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"    public ArrayList\u003cTimetableSlot\u003e getAllTimetableSlots() {"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"        return allTimetableSlots;"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":207,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"LeonidAgarth"},"content":"     * Set all currently visible days to {@code allTimetableSlots}"},{"lineNumber":209,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"LeonidAgarth"},"content":"    public void setAllTimetableSlots(ArrayList\u003cTimetableSlot\u003e allTimetableSlots) {"},{"lineNumber":211,"author":{"gitID":"LeonidAgarth"},"content":"        this.allTimetableSlots \u003d allTimetableSlots;"},{"lineNumber":212,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":214,"author":{"gitID":"LeonidAgarth"},"content":"    public TimetableSlot getSlotNode(String day, int hour) {"},{"lineNumber":215,"author":{"gitID":"LeonidAgarth"},"content":"        int column \u003d 0;"},{"lineNumber":216,"author":{"gitID":"LeonidAgarth"},"content":"        switch (day) {"},{"lineNumber":217,"author":{"gitID":"LeonidAgarth"},"content":"        case \"Monday\":"},{"lineNumber":218,"author":{"gitID":"LeonidAgarth"},"content":"            column \u003d 1;"},{"lineNumber":219,"author":{"gitID":"LeonidAgarth"},"content":"            break;"},{"lineNumber":220,"author":{"gitID":"LeonidAgarth"},"content":"        case \"Tuesday\":"},{"lineNumber":221,"author":{"gitID":"LeonidAgarth"},"content":"            column \u003d 2;"},{"lineNumber":222,"author":{"gitID":"LeonidAgarth"},"content":"            break;"},{"lineNumber":223,"author":{"gitID":"LeonidAgarth"},"content":"        case \"Wednesday\":"},{"lineNumber":224,"author":{"gitID":"LeonidAgarth"},"content":"            column \u003d 3;"},{"lineNumber":225,"author":{"gitID":"LeonidAgarth"},"content":"            break;"},{"lineNumber":226,"author":{"gitID":"LeonidAgarth"},"content":"        case \"Thursday\":"},{"lineNumber":227,"author":{"gitID":"LeonidAgarth"},"content":"            column \u003d 4;"},{"lineNumber":228,"author":{"gitID":"LeonidAgarth"},"content":"            break;"},{"lineNumber":229,"author":{"gitID":"LeonidAgarth"},"content":"        case \"Friday\":"},{"lineNumber":230,"author":{"gitID":"LeonidAgarth"},"content":"            column \u003d 5;"},{"lineNumber":231,"author":{"gitID":"LeonidAgarth"},"content":"            break;"},{"lineNumber":232,"author":{"gitID":"LeonidAgarth"},"content":"        default:"},{"lineNumber":233,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"LeonidAgarth"},"content":"        int row \u003d hour / 100 - 8;"},{"lineNumber":235,"author":{"gitID":"LeonidAgarth"},"content":"        return allTimetableSlots.get(row * 6 + column);"},{"lineNumber":236,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":238,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":240,"author":{"gitID":"LeonidAgarth"},"content":"        // short circuit if same object"},{"lineNumber":241,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"        // instanceof handles nulls"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Timetable)) {"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":250,"author":{"gitID":"LeonidAgarth"},"content":"        // state check"},{"lineNumber":251,"author":{"gitID":"LeonidAgarth"},"content":"        Timetable theOther \u003d (Timetable) other;"},{"lineNumber":252,"author":{"gitID":"LeonidAgarth"},"content":"        return allTimetableSlots.equals(theOther.getAllTimetableSlots());"},{"lineNumber":253,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":254}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import me.xdrop.fuzzywuzzy.FuzzySearch;"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":"import me.xdrop.fuzzywuzzy.model.ExtractedResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddMemberToGroupCommand;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.AddToDoCommand;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ChangeTagColorCommand;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.CheckToDoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteMemberFromGroupCommand;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.DeleteToDoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListTagMembersCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ScheduleGroupCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.SwitchCommand;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.UnCheckToDoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":45,"author":{"gitID":"-"},"content":" */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class    AddressBookParser {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"    private static final List\u003cString\u003e COMMAND_WORDS \u003d Arrays.asList(AddCommand.COMMAND_WORD,"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"            AddEventCommand.COMMAND_WORD,"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"            AddGroupCommand.COMMAND_WORD,"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"            AddMemberToGroupCommand.COMMAND_WORD,"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"            AddToDoCommand.COMMAND_WORD,"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"            ChangeTagColorCommand.COMMAND_WORD,"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"            CheckToDoCommand.COMMAND_WORD,"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"            ClearCommand.COMMAND_WORD,"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":"            DeleteCommand.COMMAND_WORD,"},{"lineNumber":63,"author":{"gitID":"Isaaaca"},"content":"            DeleteToDoCommand.COMMAND_WORD,"},{"lineNumber":64,"author":{"gitID":"Isaaaca"},"content":"            DeleteGroupCommand.COMMAND_WORD,"},{"lineNumber":65,"author":{"gitID":"Isaaaca"},"content":"            AddCommand.COMMAND_WORD,"},{"lineNumber":66,"author":{"gitID":"Isaaaca"},"content":"            EditCommand.COMMAND_WORD,"},{"lineNumber":67,"author":{"gitID":"Isaaaca"},"content":"            EditToDoCommand.COMMAND_WORD,"},{"lineNumber":68,"author":{"gitID":"Isaaaca"},"content":"            ExitCommand.COMMAND_WORD,"},{"lineNumber":69,"author":{"gitID":"Isaaaca"},"content":"            FindCommand.COMMAND_WORD,"},{"lineNumber":70,"author":{"gitID":"Isaaaca"},"content":"            HelpCommand.COMMAND_WORD,"},{"lineNumber":71,"author":{"gitID":"Isaaaca"},"content":"            HistoryCommand.COMMAND_WORD,"},{"lineNumber":72,"author":{"gitID":"Isaaaca"},"content":"            ListCommand.COMMAND_WORD,"},{"lineNumber":73,"author":{"gitID":"Isaaaca"},"content":"            ListTagMembersCommand.COMMAND_WORD,"},{"lineNumber":74,"author":{"gitID":"Isaaaca"},"content":"            RedoCommand.COMMAND_WORD,"},{"lineNumber":75,"author":{"gitID":"Isaaaca"},"content":"            ScheduleGroupCommand.COMMAND_WORD,"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"            SelectCommand.COMMAND_WORD,"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":"            SwitchCommand.COMMAND_WORD,"},{"lineNumber":78,"author":{"gitID":"Isaaaca"},"content":"            UnCheckToDoCommand.COMMAND_WORD,"},{"lineNumber":79,"author":{"gitID":"Isaaaca"},"content":"            UndoCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":82,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"        //@@author jas5469"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"        case AddGroupCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"        case AddGroupCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"            return new AddGroupCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"        case AddMemberToGroupCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"        case AddMemberToGroupCommand.COMMAND_ALIAS:"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"            return new AddMemberToGroupCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"        //@@author"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        case AddToDoCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"        case AddToDoCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"            return new AddToDoCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"        case EditToDoCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"        case EditToDoCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"            return new EditToDoCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        case CheckToDoCommand.COMMAND_WORD:"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"            return new CheckToDoCommandParser().parse(arguments);"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"        case UnCheckToDoCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"            return new UnCheckToDoCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        case DeleteToDoCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        case DeleteToDoCommand.COMMAND_ALIAS:"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"            return new DeleteToDoCommandParser().parse(arguments);"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":144,"author":{"gitID":"jas5469"},"content":"        //@@author jas5469"},{"lineNumber":145,"author":{"gitID":"jas5469"},"content":"        case DeleteGroupCommand.COMMAND_WORD:"},{"lineNumber":146,"author":{"gitID":"jas5469"},"content":"        case DeleteGroupCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"jas5469"},"content":"            return new DeleteGroupCommandParser().parse(arguments);"},{"lineNumber":148,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":149,"author":{"gitID":"jas5469"},"content":"        case DeleteMemberFromGroupCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"jas5469"},"content":"        case DeleteMemberFromGroupCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"jas5469"},"content":"            return new DeleteMemberFromGroupCommandParser().parse(arguments);"},{"lineNumber":152,"author":{"gitID":"jas5469"},"content":"        //@@author"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":"        //@@author jas5469"},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        case ListGroupMembersCommand.COMMAND_WORD:"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"        case ListGroupMembersCommand.COMMAND_ALIAS:"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":"            return new ListGroupMembersCommandParser().parse(arguments);"},{"lineNumber":168,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":169,"author":{"gitID":"jas5469"},"content":"        case ListTagMembersCommand.COMMAND_WORD:"},{"lineNumber":170,"author":{"gitID":"jas5469"},"content":"        case ListTagMembersCommand.COMMAND_ALIAS:"},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"            return new ListTagMembersCommandParser().parse(arguments);"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"        //@@author"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":174,"author":{"gitID":"nhatquang3112"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":184,"author":{"gitID":"nhatquang3112"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        //@@author LeonidAgarth"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        case ChangeTagColorCommand.COMMAND_WORD:"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"        case ChangeTagColorCommand.COMMAND_ALIAS:"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":"            return new ChangeTagColorCommandParser().parse(arguments);"},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"        case AddEventCommand.COMMAND_WORD:"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        case AddEventCommand.COMMAND_ALIAS:"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddEventCommandParser().parse(arguments);"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"        case SwitchCommand.COMMAND_WORD:"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"        case SwitchCommand.COMMAND_ALIAS:"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"            return new SwitchCommand();"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"        case ScheduleGroupCommand.COMMAND_WORD:"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":"        case ScheduleGroupCommand.COMMAND_ALIAS:"},{"lineNumber":206,"author":{"gitID":"LeonidAgarth"},"content":"            return new ScheduleGroupCommandParser().parse(arguments);"},{"lineNumber":207,"author":{"gitID":"Isaaaca"},"content":"        //@@author Isaaaca"},{"lineNumber":208,"author":{"gitID":"Isaaaca"},"content":"        default:"},{"lineNumber":209,"author":{"gitID":"Isaaaca"},"content":"            ExtractedResult guess \u003d FuzzySearch.extractOne(commandWord, COMMAND_WORDS);"},{"lineNumber":210,"author":{"gitID":"Isaaaca"},"content":"            if (guess.getScore() \u003e\u003d 75) {"},{"lineNumber":211,"author":{"gitID":"Isaaaca"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND + \"\\n Did you mean: \" + guess.getString());"},{"lineNumber":212,"author":{"gitID":"Isaaaca"},"content":"            } else {"},{"lineNumber":213,"author":{"gitID":"Isaaaca"},"content":"                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":218,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"nhatquang3112":33,"Isaaaca":46,"jas5469":34,"LeonidAgarth":20,"-":85}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new DeleteGroupCommand object"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"     * and returns an DeleteGroupCommand object for execution."},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public DeleteGroupCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(args);"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"            return new DeleteGroupCommand(information);"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":33}},{"path":"src/main/java/seedu/address/logic/parser/AddGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddGroupCommand;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new AddGroupCommand object"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommandParser implements Parser\u003cAddGroupCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the AddGroupCommand"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     * and returns an AddGroupCommand object for execution."},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public AddGroupCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        if (args.trim().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddGroupCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(args);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"            UniquePersonList personList \u003d new UniquePersonList();"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"            return new AddGroupCommand(group);"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":41}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code String content} into a {@code Content}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if the given {@code content} is invalid."},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    public static Content parseContent(String content) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(content);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        String trimmedContent \u003d content.trim();"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        if (!Content.isValidContent(trimmedContent)) {"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        return new Content(trimmedContent);"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code Optional\u003cString\u003e content} into an {@code Optional\u003cContent\u003e} if {@code content} is present."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"    public static Optional\u003cContent\u003e parseContent(Optional\u003cString\u003e content) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(content);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        return content.isPresent() ? Optional.of(parseContent(content.get())) : Optional.empty();"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":172,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Isaaaca"},"content":"     * Parses a {@code String link} into an {@code TimeTableLink}."},{"lineNumber":174,"author":{"gitID":"Isaaaca"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":175,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"Isaaaca"},"content":"     * @throws IllegalValueException if the given {@code link} is invalid."},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"Isaaaca"},"content":"    public static TimeTableLink parseTimeTableLink(String link) throws IllegalValueException {"},{"lineNumber":179,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":180,"author":{"gitID":"Isaaaca"},"content":"        String trimmedLink \u003d link.trim();"},{"lineNumber":181,"author":{"gitID":"Isaaaca"},"content":"        if (!TimeTableLink.isValidLink(trimmedLink)) {"},{"lineNumber":182,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"Isaaaca"},"content":"        return new TimeTableLink(trimmedLink);"},{"lineNumber":185,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":187,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"Isaaaca"},"content":"     * Parses a {@code Optional\u003cString\u003e link} into an {@code Optional\u003cTimeTableLink\u003e} if {@code link} is present."},{"lineNumber":189,"author":{"gitID":"Isaaaca"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":190,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"Isaaaca"},"content":"    public static Optional\u003cTimeTableLink\u003e parseTimeTableLink(Optional\u003cString\u003e link) throws IllegalValueException {"},{"lineNumber":192,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":193,"author":{"gitID":"Isaaaca"},"content":"        return  link.isPresent() ? Optional.of(parseTimeTableLink(link.get())) : Optional.empty();"},{"lineNumber":194,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Isaaaca"},"content":"    //@@author"},{"lineNumber":196,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":197,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code String detail} into a {@code Detail}."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":201,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if the given {@code detail} is invalid."},{"lineNumber":202,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"nhatquang3112"},"content":"    public static Detail parseDetail(String detail) throws IllegalValueException {"},{"lineNumber":204,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"        String trimmedDetail \u003d detail.trim();"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"        if (!Detail.isValidDetail(trimmedDetail)) {"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":"        return new Detail(trimmedDetail);"},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":212,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"nhatquang3112"},"content":"     * Parses a {@code Optional\u003cString\u003e detail} into an {@code Optional\u003cDetail\u003e} if {@code detail} is present."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"nhatquang3112"},"content":"    public static Optional\u003cDetail\u003e parseDetail(Optional\u003cString\u003e detail) throws IllegalValueException {"},{"lineNumber":217,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":218,"author":{"gitID":"nhatquang3112"},"content":"        return detail.isPresent() ? Optional.of(parseDetail(detail.get())) : Optional.empty();"},{"lineNumber":219,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":249,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"jas5469"},"content":"     * Parses a {@code String content} into a {@code Content}."},{"lineNumber":251,"author":{"gitID":"jas5469"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":252,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":253,"author":{"gitID":"jas5469"},"content":"     * @throws IllegalValueException if the given {@code content} is invalid."},{"lineNumber":254,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"jas5469"},"content":"    public static Information parseInformation(String information) throws IllegalValueException {"},{"lineNumber":256,"author":{"gitID":"jas5469"},"content":"        requireNonNull(information);"},{"lineNumber":257,"author":{"gitID":"jas5469"},"content":"        String trimmedInformation \u003d information.trim();"},{"lineNumber":258,"author":{"gitID":"jas5469"},"content":"        if (!Content.isValidContent(trimmedInformation)) {"},{"lineNumber":259,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":"        return new Information(trimmedInformation);"},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":264,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":265,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":267,"author":{"gitID":"LeonidAgarth"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":268,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":269,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":270,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseColor(String color) throws IllegalValueException {"},{"lineNumber":272,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(color);"},{"lineNumber":273,"author":{"gitID":"LeonidAgarth"},"content":"        if (Tag.isValidTagColor(color)) {"},{"lineNumber":274,"author":{"gitID":"LeonidAgarth"},"content":"            return color;"},{"lineNumber":275,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":276,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":277,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":280,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":281,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String name} into a {@code String}."},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":285,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":286,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseEventName(String name) throws IllegalValueException {"},{"lineNumber":288,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":289,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":290,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(trimmedName)) {"},{"lineNumber":291,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":292,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedName;"},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":296,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String venue} into a {@code String}."},{"lineNumber":298,"author":{"gitID":"LeonidAgarth"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":299,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code venue} is invalid."},{"lineNumber":301,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseVenue(String venue) throws IllegalValueException {"},{"lineNumber":303,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(venue);"},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedVenue \u003d venue.trim();"},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(trimmedVenue)) {"},{"lineNumber":306,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":307,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedVenue;"},{"lineNumber":309,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":311,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String date} into a {@code String}."},{"lineNumber":313,"author":{"gitID":"LeonidAgarth"},"content":"     * Date must follow DD/MM/YYYY format"},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":316,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":317,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":318,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseDate(String date) throws IllegalValueException {"},{"lineNumber":319,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(date);"},{"lineNumber":320,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":321,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidDate(trimmedDate)) {"},{"lineNumber":322,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":323,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":324,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedDate;"},{"lineNumber":325,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":327,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":328,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses a {@code String time} into a {@code String}."},{"lineNumber":329,"author":{"gitID":"LeonidAgarth"},"content":"     * Time must follow HHmm format"},{"lineNumber":330,"author":{"gitID":"LeonidAgarth"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":331,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":332,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":333,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":334,"author":{"gitID":"LeonidAgarth"},"content":"    public static String parseTime(String time) throws IllegalValueException {"},{"lineNumber":335,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(time);"},{"lineNumber":336,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":337,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(trimmedTime)) {"},{"lineNumber":338,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":339,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":340,"author":{"gitID":"LeonidAgarth"},"content":"        return trimmedTime;"},{"lineNumber":341,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":42,"Isaaaca":28,"jas5469":17,"LeonidAgarth":80,"-":175}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    public static final Prefix PREFIX_TIMETABLE_LINK \u003d new Prefix(\"l/\");"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    public static final Prefix PREFIX_DETAIL \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"c/\");"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":2,"Isaaaca":1,"jas5469":2,"LeonidAgarth":4,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/ListTagMembersCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListTagMembersCommand;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new ListTagMembersCommand object"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"public class ListTagMembersCommandParser implements Parser\u003cListTagMembersCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the ListTagMembersCommand"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     * and returns an ListTagMembersCommand object for execution."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public ListTagMembersCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListTagMembersCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        return new ListTagMembersCommand(new TagContainKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":35}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMemberFromGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.DeleteMemberFromGroupCommand;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new DeleteMemberFromGroupCommand object"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommandParser implements Parser\u003cDeleteMemberFromGroupCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMemberFromGroupCommand"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"     * and returns an DeleteMemberFromGroupCommand object for execution."},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public DeleteMemberFromGroupCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP)) {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"                    DeleteMemberFromGroupCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(argMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"            return new DeleteMemberFromGroupCommand(index, group);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":55}},{"path":"src/main/java/seedu/address/logic/parser/DeleteToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.DeleteToDoCommand;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new DeleteToDoCommand object"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"public class DeleteToDoCommandParser implements Parser\u003cDeleteToDoCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteToDoCommand"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an DeleteToDoCommand object for execution."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public DeleteToDoCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"            return new DeleteToDoCommand(index);"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteToDoCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":30}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.AddEventCommand;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" * Parses input arguments and creates a new AddEventCommand object"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"     * and returns an AddEventCommand object for execution."},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    public AddEventCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_VENUE, PREFIX_DATE,"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"                        PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_VENUE, PREFIX_DATE,"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"                PREFIX_START_TIME, PREFIX_END_TIME)"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"            String name \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"            String venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"            String date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"            String startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME).get());"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"            String endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME).get());"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"            if (Integer.parseInt(startTime) \u003e Integer.parseInt(endTime)) {"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"                throw new ParseException(AddEventCommand.MESSAGE_END_BEFORE_START);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"            Event event \u003d new Event(name, venue, date, startTime, endTime);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"            return new AddEventCommand(event);"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":66}},{"path":"src/main/java/seedu/address/logic/parser/ListGroupMembersCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.ListGroupMembersCommand;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.MembersInGroupPredicate;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new ListGroupMembersCommand object"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommandParser implements Parser\u003cListGroupMembersCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the ListGroupMembersCommand"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     * and returns an ListGroupMembersCommand object for execution."},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public ListGroupMembersCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        if (args.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListGroupMembersCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(args);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"            return new ListGroupMembersCommand(new MembersInGroupPredicate(group), group);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":41}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"                        PREFIX_TIMETABLE_LINK, PREFIX_DETAIL, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"            ParserUtil.parseTimeTableLink(argMultimap.getValue(PREFIX_TIMETABLE_LINK))"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"                    .ifPresent(editPersonDescriptor::setTimeTableLink);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            ParserUtil.parseDetail(argMultimap.getValue(PREFIX_DETAIL)).ifPresent(editPersonDescriptor::setDetail);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":3,"Isaaaca":4,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/ScheduleGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.ScheduleGroupCommand;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" * Parses input arguments and creates a new ScheduleGroupCommand object"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"public class ScheduleGroupCommandParser implements Parser\u003cScheduleGroupCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleGroupCommand"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"     * and returns an ScheduleGroupCommand object for execution."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public ScheduleGroupCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            Information information \u003d ParserUtil.parseInformation(args);"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"            return new ScheduleGroupCommand(group);"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleGroupCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":32}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" * Adds an event to the address book."},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"public class AddEventCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"aE\";"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_VENUE + \"VENUE \""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_START_TIME + \"STARTTIME \""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_END_TIME + \"ENDTIME \\n\""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_NAME + \"F1 Race \""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_VENUE + \"Marina Bay Street Circuit \""},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_DATE + \"19/07/2017 \""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_START_TIME + \"1000 \""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"            + PREFIX_END_TIME + \"1300\\n\""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Note: DATE must be in the format of DD/MM/YYYY\\n\""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"            + \"      TIME must be in the format of HHmm\\n\";"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_END_BEFORE_START \u003d \"The event\u0027s ENDTIME must be after STARTTIME\";"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    private final Event toAdd;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     * Creates an AddEventCommand to add the specified {@code Event}"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    public AddEventCommand(Event event) {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(event);"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        toAdd \u003d event;"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"            model.addEvent(toAdd);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":71}},{"path":"src/main/java/seedu/address/logic/parser/AddMemberToGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.AddMemberToGroupCommand;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":" * Parses input arguments and creates a new AddMemberToGroupCommand object"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommandParser implements Parser\u003cAddMemberToGroupCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMemberToGroupCommand"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"     * and returns an AddMemberToGroupCommand object for execution."},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public AddMemberToGroupCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GROUP);"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP)) {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"                    AddMemberToGroupCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"            Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"            Information information \u003d ParserUtil.parseInformation(argMultimap.getValue(PREFIX_GROUP).get());"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            Group group \u003d new Group(information);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"            return new AddMemberToGroupCommand(index, group);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":55}},{"path":"src/main/java/seedu/address/logic/parser/EditToDoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.EditToDoCommand.EditToDoDescriptor;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" * Parses input arguments and creates a new EditToDoCommand object"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoCommandParser implements Parser\u003cEditToDoCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     * Parses the given {@code String} of arguments in the context of the EditToDoCommand"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"     * and returns an EditToDoCommand object for execution."},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CONTENT);"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"        Index index;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditToDoCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoDescriptor editToDoDescriptor \u003d new EditToDoDescriptor();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"            ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT)).ifPresent(editToDoDescriptor::setContent);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        if (!editToDoDescriptor.isContentFieldEdited()) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"            throw new ParseException(EditToDoCommand.MESSAGE_NOT_EDITED_TODO);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        return new EditToDoCommand(index, editToDoDescriptor);"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":50}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.TimetableChangedEvent;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.DatabaseManager;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.WeeklyEvent;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" * Display the common free time slots of members in a group"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"public class ScheduleGroupCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"scheduleGroup\";"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"sG\";"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_USAGE \u003d"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"            COMMAND_WORD + \": Display the common free time slots of members in a group.\\n\""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Parameters: GROUP_NAME\\n\""},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Example: \" + COMMAND_WORD + \" CS2103T\";"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Common free time slots are displayed for group %1$s\";"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"There is no group named %1$s.\";"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    private final Group toShow;"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    private final ArrayList\u003cWeeklyEvent\u003e occupied;"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    private final ArrayList\u003cWeeklyEvent\u003e free;"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     * Creates an ScheduleGroupCommand to schedule the specified {@code Group}"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    public ScheduleGroupCommand(Group group) {"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(group);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        toShow \u003d group;"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        occupied \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        free \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        Group groupToShow \u003d new Group(toShow.getInformation());"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        boolean groupNotFound \u003d true;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        for (Group group : model.getFilteredGroupList()) {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"            if (toShow.getInformation().equals(group.getInformation())) {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"                groupToShow \u003d group;"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"                groupNotFound \u003d false;"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"                break;"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        if (groupNotFound) {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"            throw new CommandException(String.format(MESSAGE_GROUP_NOT_FOUND, toShow.getInformation()));"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        fillTimeSlots(groupToShow);"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        generateFreeTimeSlots();"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        EventsCenter.getInstance().post(new TimetableChangedEvent(FXCollections.observableArrayList(free)));"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, groupToShow.getInformation()));"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"     * Populate the {@code occupied} list to include all modules from all members from {@code groupToShow}"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    private void fillTimeSlots(Group groupToShow) {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        for (Person member : groupToShow.getPersonList()) {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            ArrayList\u003cWeeklyEvent\u003e moduleList \u003d DatabaseManager.getInstance().parseEvents(member.getTimeTableLink());"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            occupied.addAll(moduleList);"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"     * Generate all common free time slots according to the {@code occupied} list and store it in {@code free}"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    private void generateFreeTimeSlots() {"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        String[] daysOfWeek \u003d {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"};"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        for (String day : daysOfWeek) {"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"            for (int s \u003d 800; s \u003c 1800; s +\u003d 100) {"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"                Module mod \u003d new Module(\"Free\", \"\", null);"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"                Schedule sch \u003d new Schedule(\"\", \"\", \"\", day, \"\" + s, \"\" + (s + 100), \"\");"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"                WeeklyEvent freeTimeSlot \u003d new WeeklyEvent(mod, sch);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"                if (!moduleClash(freeTimeSlot)) {"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"                    free.add(freeTimeSlot);"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                }"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"     * @return true if the {@code timeSlot} clashes with any mod in {@code occupied}"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    private boolean moduleClash(WeeklyEvent timeSlot) {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        for (WeeklyEvent mod : occupied) {"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"            if (mod.clash(timeSlot)) {"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"                return true;"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        return false;"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                || (other instanceof ScheduleGroupCommand // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 toShow.equals(((ScheduleGroupCommand) other).toShow));"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":116}},{"path":"src/main/java/seedu/address/logic/commands/CheckToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.AddToDoCommand.MESSAGE_DUPLICATE_TODO;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" * Check an existing ToDo in the address book as done."},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"public class CheckToDoCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"check\";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Checks the to-do identified as done \""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"            + \"by the index number used in the last to-do listing. \""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"            + \"Status of the to-do will be overwritten as done.\\n\""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_CHECK_TODO_SUCCESS \u003d \"Checked to-do: %1$s\";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_NOT_CHECKED \u003d \"Checked to-do failed.\";"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToCheck;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo checkedToDo;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * @param index of the ToDo in the filtered ToDo list to check"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public CheckToDoCommand(Index index) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"            model.updateToDo(toDoToCheck, checkedToDo);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target ToDo cannot be missing\");"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dte) {"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        model.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_CHECK_TODO_SUCCESS, checkedToDo));"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        toDoToCheck \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        checkedToDo \u003d createCheckedToDo(toDoToCheck);"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * Creates and returns a {@code ToDo} with the content of {@code toDoToCheck}"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     * checked as done."},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    private static ToDo createCheckedToDo(ToDo toDoToCheck) {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        assert toDoToCheck !\u003d null;"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Content updatedContent \u003d toDoToCheck.getContent();"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        Status updatedStatus \u003d new Status(\"done\");"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(updatedContent, updatedStatus);"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof CheckToDoCommand)) {"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        CheckToDoCommand e \u003d (CheckToDoCommand) other;"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        return index.equals(e.index)"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(toDoToCheck, e.toDoToCheck);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":105}},{"path":"src/main/java/seedu/address/logic/commands/ListGroupMembersCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.MembersInGroupPredicate;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" * Lists all persons in the address book to the user under the same group."},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"public class ListGroupMembersCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"listGroupMembers\";"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"lGM\";"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose Group contain any of \""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"        + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"        + \"Parameters: KEYWORD \\n\""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"        + \"Example: \" + COMMAND_WORD + \" CS1010\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons under group %1$s\";"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_NO_SUCH_GROUP \u003d \"No such group exist.\";"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    private final MembersInGroupPredicate predicate;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private Group groupToList;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    private Group groupToBeListed;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    public ListGroupMembersCommand(MembersInGroupPredicate predicate, Group groupToList) {"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        this.groupToList \u003d groupToList;"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"        boolean contains \u003d new Boolean(Boolean.FALSE);"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        for (Group g : groupList) {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"            if (g.getInformation().equals(groupToList.getInformation())) {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"                contains \u003d true;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"        if (contains \u003d\u003d false) {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"            for (Group group : groupList) {"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"                if (groupToList.getInformation().equals(group.getInformation())) {"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"                    groupToBeListed \u003d group;"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"            MembersInGroupPredicate predicateCurr \u003d new MembersInGroupPredicate(groupToBeListed);"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"            model.updateFilteredPersonList(predicateCurr);"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"            || (other instanceof ListGroupMembersCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"            \u0026\u0026 this.predicate.equals(((ListGroupMembersCommand) other).predicate)); // state check"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"}"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":""}],"authorContributionMap":{"jas5469":66}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"            + PREFIX_TIMETABLE_LINK + \"TIMETABLE_LINK \""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_DETAIL + \"DETAIL \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"            + PREFIX_TIMETABLE_LINK + \"http://modsn.us/MYwiD \""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_DETAIL + \"Likes tennis \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":4,"Isaaaca":3,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/EditToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":" * Edit the content of an existing ToDo in the address book."},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"public class EditToDoCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"editToDo\";"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"eTD\";"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the content of the to-do identified \""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"            + \"by the index number used in the last to-do listing. \""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"            + \"Content of the to-do will be overwritten by the input value.\\n\""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_CONTENT + \"CONTENT\\n\""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"            + PREFIX_CONTENT + \"Submit presentation scripts\";"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_EDIT_TODO_SUCCESS \u003d \"Edited to-do: %1$s\";"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_NOT_EDITED_TODO \u003d \"The new to-do content to edit must be provided.\";"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This to-do already exists in the address book.\";"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    private final Index index;"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    private final EditToDoDescriptor editToDoDescriptor;"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToEdit;"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo editedToDo;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     * @param index of the to-do in the filtered to-do list to edit"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * @param editToDoDescriptor details to edit the to-do with"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    public EditToDoCommand(Index index, EditToDoDescriptor editToDoDescriptor) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(index);"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(editToDoDescriptor);"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        this.index \u003d index;"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        this.editToDoDescriptor \u003d new EditToDoDescriptor(editToDoDescriptor);"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"            model.updateToDo(toDoToEdit, editedToDo);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dte) {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target to-do cannot be missing\");"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        model.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TODO_SUCCESS, editedToDo));"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        toDoToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        editedToDo \u003d createEditedToDo(toDoToEdit, editToDoDescriptor);"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"     * Creates and returns a {@code ToDo} with the details of {@code toDoToEdit}"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"     * edited with {@code editToDoDescriptor}"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"     * Status of toDoToEdit is unchanged."},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"    private static ToDo createEditedToDo(ToDo toDoToEdit, EditToDoDescriptor editToDoDescriptor) {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"        assert toDoToEdit !\u003d null;"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        Content updatedContent \u003d editToDoDescriptor.getContent().orElse(toDoToEdit.getContent());"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        Status updatedStatus \u003d toDoToEdit.getStatus();"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(updatedContent, updatedStatus);"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"        // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof EditToDoCommand)) {"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"        EditToDoCommand e \u003d (EditToDoCommand) other;"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"        return index.equals(e.index)"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 editToDoDescriptor.equals(e.editToDoDescriptor)"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(toDoToEdit, e.toDoToEdit);"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"     * Stores the content to edit the to-do with."},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"     * The content should not be empty."},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"    public static class EditToDoDescriptor {"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"        private Content content;"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        public EditToDoDescriptor() {}"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"        /**"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"         * Copy constructor."},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"        public EditToDoDescriptor(EditToDoDescriptor toCopy) {"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"            setContent(toCopy.content);"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"        /**"},{"lineNumber":136,"author":{"gitID":"nhatquang3112"},"content":"         * Returns true if the content field is edited."},{"lineNumber":137,"author":{"gitID":"nhatquang3112"},"content":"         */"},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        public boolean isContentFieldEdited() {"},{"lineNumber":139,"author":{"gitID":"nhatquang3112"},"content":"            return CollectionUtil.isAnyNonNull(this.content);"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        public void setContent(Content content) {"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"            this.content \u003d content;"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":"        public Optional\u003cContent\u003e getContent() {"},{"lineNumber":147,"author":{"gitID":"nhatquang3112"},"content":"            return Optional.ofNullable(content);"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":150,"author":{"gitID":"nhatquang3112"},"content":"        @Override"},{"lineNumber":151,"author":{"gitID":"nhatquang3112"},"content":"        public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"nhatquang3112"},"content":"            // short circuit if same object"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":154,"author":{"gitID":"nhatquang3112"},"content":"                return true;"},{"lineNumber":155,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":157,"author":{"gitID":"nhatquang3112"},"content":"            // instanceof handles nulls"},{"lineNumber":158,"author":{"gitID":"nhatquang3112"},"content":"            if (!(other instanceof EditToDoDescriptor)) {"},{"lineNumber":159,"author":{"gitID":"nhatquang3112"},"content":"                return false;"},{"lineNumber":160,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":162,"author":{"gitID":"nhatquang3112"},"content":"            // state check"},{"lineNumber":163,"author":{"gitID":"nhatquang3112"},"content":"            EditToDoDescriptor e \u003d (EditToDoDescriptor) other;"},{"lineNumber":164,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":165,"author":{"gitID":"nhatquang3112"},"content":"            return getContent().equals(e.getContent());"},{"lineNumber":166,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":168}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":" * Deletes a group identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"deleteGroup\";"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"dG\";"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"            + \": Deletes the group identified by the group Name used.\\n\""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: GroupName(Must exist) KEYWORD ...\\n\""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"            + \"CS1010\";"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted group: %1$s\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_NO_SUCH_GROUP \u003d \"Group not found\";"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    private final Information groupName;"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    private Group groupToDelete;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    public DeleteGroupCommand(Information groupName) {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        groupToDelete \u003d new Group(groupName);"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e groupList \u003d model.getFilteredGroupList();"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        boolean contains \u003d new Boolean(Boolean.FALSE);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        for (Group g : groupList) {"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"            if (g.getInformation().equals(groupToDelete.getInformation())) {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"                contains \u003d true;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        if (contains \u003d\u003d false) {"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"            for (Group group : groupList) {"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"                if (groupName.equals(group.getInformation())) {"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                    groupToDelete \u003d group;"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"                model.deleteGroup(groupToDelete);"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"            } catch (GroupNotFoundException gnfe) {"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"                throw new CommandException(String.format(MESSAGE_NO_SUCH_GROUP,"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"                        groupName.toString()));"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS,"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"                    groupToDelete.getInformation().toString()));"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"                || (other instanceof DeleteGroupCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.groupName.equals(((DeleteGroupCommand) other).groupName) // state check"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 Objects.equals(this.groupToDelete, ((DeleteGroupCommand) other).groupToDelete));"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":75}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/UnCheckToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.commands.AddToDoCommand.MESSAGE_DUPLICATE_TODO;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TODOS;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" * Uncheck an existing ToDo in the address book as done."},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"public class UnCheckToDoCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"uncheck\";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unchecks the to-do identified as undone \""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"            + \"by the index number used in the last to-do listing. \""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"            + \"Status of the to-do will be overwritten as undone.\\n\""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_UNCHECK_TODO_SUCCESS \u003d \"Unchecked to-do: %1$s\";"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_NOT_UNCHECKED \u003d \"Unchecked to-do failed.\";"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToUnCheck;"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo unCheckedToDo;"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * @param index of the ToDo in the filtered ToDo list to uncheck"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public UnCheckToDoCommand(Index index) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(index);"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"            model.updateToDo(toDoToUnCheck, unCheckedToDo);"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target ToDo cannot be missing\");"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException dte) {"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        model.updateFilteredToDoList(PREDICATE_SHOW_ALL_TODOS);"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_UNCHECK_TODO_SUCCESS, unCheckedToDo));"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        toDoToUnCheck \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        unCheckedToDo \u003d createUnCheckedToDo(toDoToUnCheck);"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"     * Creates and returns a {@code ToDo} with the content of {@code toDoToUnCheck}"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"     * unchecked as done."},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"    private static ToDo createUnCheckedToDo(ToDo toDoToUnCheck) {"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        assert toDoToUnCheck !\u003d null;"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        Content updatedContent \u003d toDoToUnCheck.getContent();"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"        Status updatedStatus \u003d new Status(\"undone\");"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(updatedContent, updatedStatus);"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        // short circuit if same object"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof UnCheckToDoCommand)) {"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"        // state check"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"        UnCheckToDoCommand e \u003d (UnCheckToDoCommand) other;"},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"        return index.equals(e.index)"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(toDoToUnCheck, e.toDoToUnCheck);"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":105}},{"path":"src/main/java/seedu/address/logic/commands/DeleteToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":" * Deletes a to-do identified using it\u0027s last displayed index from the address book."},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"public class DeleteToDoCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"deleteToDo\";"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"dTD\";"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"            + \": Deletes the to-do identified by the index number used in the last to-do listing.\\n\""},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DELETE_TODO_SUCCESS \u003d \"Deleted to-do: %1$s\";"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    private ToDo toDoToDelete;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    public DeleteToDoCommand(Index targetIndex) {"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(toDoToDelete);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            model.deleteToDo(toDoToDelete);"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        } catch (ToDoNotFoundException tnfe) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"The target to-do cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TODO_SUCCESS, toDoToDelete));"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e lastShownList \u003d model.getFilteredToDoList();"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TODO_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        toDoToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof DeleteToDoCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteToDoCommand) other).targetIndex) // state check"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(this.toDoToDelete, ((DeleteToDoCommand) other).toDoToDelete));"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":69}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DETAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE_LINK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"            + \"[\" + PREFIX_TIMETABLE_LINK + \"TIMETABLE_LINK] \""},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"            + \"[\" + PREFIX_DETAIL + \"DETAIL] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":116,"author":{"gitID":"Isaaaca"},"content":"        TimeTableLink updatedLink \u003d editPersonDescriptor.getTimeTableLink().orElse(personToEdit.getTimeTableLink());"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        Detail updatedDetail \u003d editPersonDescriptor.getDetail().orElse(personToEdit.getDetail());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedLink, updatedDetail,"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"                updatedTags);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":152,"author":{"gitID":"Isaaaca"},"content":"        private TimeTableLink link;"},{"lineNumber":153,"author":{"gitID":"nhatquang3112"},"content":"        private Detail detail;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":160,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":161,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":167,"author":{"gitID":"Isaaaca"},"content":"            setTimeTableLink(toCopy.link);"},{"lineNumber":168,"author":{"gitID":"nhatquang3112"},"content":"            setDetail(toCopy.detail);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":174,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":176,"author":{"gitID":"nhatquang3112"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.link, this.detail,"},{"lineNumber":177,"author":{"gitID":"Isaaaca"},"content":"                    this.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Isaaaca"},"content":"        //@@author Isaaaca"},{"lineNumber":213,"author":{"gitID":"Isaaaca"},"content":"        public void setTimeTableLink(TimeTableLink link) {"},{"lineNumber":214,"author":{"gitID":"Isaaaca"},"content":"            this.link \u003d link;"},{"lineNumber":215,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":217,"author":{"gitID":"Isaaaca"},"content":"        public Optional\u003cTimeTableLink\u003e getTimeTableLink() {"},{"lineNumber":218,"author":{"gitID":"Isaaaca"},"content":"            return Optional.ofNullable(link);"},{"lineNumber":219,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"Isaaaca"},"content":"        //@@author"},{"lineNumber":221,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"        public void setDetail(Detail detail) {"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"            this.detail \u003d detail;"},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"        public Optional\u003cDetail\u003e getDetail() {"},{"lineNumber":227,"author":{"gitID":"nhatquang3112"},"content":"            return Optional.ofNullable(detail);"},{"lineNumber":228,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":230,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":231,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":234,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":235,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":242,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":243,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":244,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":268,"author":{"gitID":"Isaaaca"},"content":"                    \u0026\u0026 getTimeTableLink().equals(e.getTimeTableLink())"},{"lineNumber":269,"author":{"gitID":"nhatquang3112"},"content":"                    \u0026\u0026 getDetail().equals(e.getDetail())"},{"lineNumber":270,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":19,"Isaaaca":20,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMemberFromGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" * Finds by index and delete person in a group that exist in  Fastis ."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":" * Keyword matching is case sensitive."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"public class DeleteMemberFromGroupCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"deleteGroupMember\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"dGM\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds person via index on the most recent list \""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"            + \"and delete from group that contain the specified keywords (case-sensitive).\\n\""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: INDEX (must be a positive integer) g/GroupName(Must exist) \""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"            + PREFIX_GROUP + \"CS1010\";"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_NO_SUCH_GROUP \u003d \"No such group exist.\";"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DELETE_PERSON_FROM_GROUP_SUCCESS \u003d \"%1$s deleted from group %2$s\";"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"No such Group in Fastis\";"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Group already in Group\";"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"No such Person in Group\";"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    private Index index;"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    private Person personToDelete;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    private Group groupToDelete;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    private Group groupInvolved;"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    private List\u003cGroup\u003e groupList;"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    public DeleteMemberFromGroupCommand(Index index, Group groupToDelete) {"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        this.groupToDelete \u003d groupToDelete;"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        for (Group group : groupList) {"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"            if (groupToDelete.getInformation().equals(group.getInformation())) {"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"                try {"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"                    groupInvolved \u003d new Group(group.getInformation(), group.getPersonList());"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"                    groupInvolved.removePerson(personToDelete);"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"                    model.updateGroup(group, groupInvolved);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"                } catch (DuplicateGroupException dge) {"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"                } catch (GroupNotFoundException gnfe) {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"                } catch (PersonNotFoundException pnfe) {"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_PERSON_NOT_FOUND);"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_FROM_GROUP_SUCCESS, personToDelete.getName(),"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"                groupToDelete.getInformation().toString()));"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        groupList \u003d model.getFilteredGroupList();"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        boolean contains \u003d new Boolean(Boolean.FALSE);"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        for (Group g : groupList) {"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"            if (g.getInformation().equals(groupToDelete.getInformation())) {"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"                contains \u003d true;"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        if (contains \u003d\u003d false) {"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"            personToDelete \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"                || (other instanceof seedu.address.logic.commands"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"                .DeleteMemberFromGroupCommand // instanceof handles nulls"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 groupToDelete.equals(((seedu.address.logic.commands"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"                .DeleteMemberFromGroupCommand) other).groupToDelete));"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":106}},{"path":"src/main/java/seedu/address/logic/commands/SwitchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":" * Switches between Calendar view and Timetable view"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"public class SwitchCommand extends Command {"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"switch\";"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"sw\";"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_SUCCESS_CALENDAR \u003d \"View is switched to calendar\";"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_SUCCESS_TIMETABLE \u003d \"View is switched to timetable\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"        if (model.calendarIsViewed()) {"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"            model.indicateTimetableChanged();"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"            return new CommandResult(MESSAGE_SUCCESS_TIMETABLE);"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        model.indicateCalendarChanged();"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        return new CommandResult(MESSAGE_SUCCESS_CALENDAR);"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":25}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/AddToDoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" * Adds a to-do to the address book."},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"public class AddToDoCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_WORD \u003d \"addToDo\";"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    public static final String COMMAND_ALIAS \u003d \"aTD\";"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a to-do to the address book. \""},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"            + \"CONTENT\\n\""},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"            + \"Organize a meeting\";"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New to-do added: %1$s\";"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DUPLICATE_TODO \u003d \"This to-do already exists in the address book\";"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    private final ToDo toAdd;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     * Creates an AddToDoCommand to add the specified {@code ToDo}"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public AddToDoCommand(ToDo todo) {"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(todo);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        toAdd \u003d todo;"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(model);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"            model.addToDo(toAdd);"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TODO);"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof AddToDoCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 toAdd.equals(((AddToDoCommand) other).toAdd));"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":55}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    //@@author nhatquang3112"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        return model.getFilteredToDoList();"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public double getToDoListCompleteRatio() {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        return model.getAddressBook().getToDoListCompleteRatio();"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        return model.getFilteredGroupList();"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        return model.getFilteredEventList();"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":13,"jas5469":6,"LeonidAgarth":6,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/ListTagMembersCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.TagContainKeywordsPredicate;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * Finds and lists all persons in address book whose tag name is of the argument keywords."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"public class ListTagMembersCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"listTagMembers\";"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"lTM\";"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain any of \""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" CS1010\";"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    private final TagContainKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public ListTagMembersCommand(TagContainKeywordsPredicate predicate) {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"                || (other instanceof ListTagMembersCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.predicate.equals(((ListTagMembersCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":39}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns AddressBook data that has been backed up as a {@link ReadOnlyAddressBook}."},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup() throws DataConversionException, IOException;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws DataConversionException, IOException;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     * Backup the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"     * @see #backupAddressBook(ReadOnlyAddressBook)"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":25,"-":43}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tag\u0027s %s field is missing!\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    private String name;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String color;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code name} and color undefined."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedTag(String name) {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d \"undefined\";"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code name} and {@code color}."},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedTag(String name, String color) {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d color;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d source.name;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        color \u003d source.color;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Tag.isValidTagName(name)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.color \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Color\"));"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Tag.isValidTagColor(color)) {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        return new Tag(name, color);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        return name.equals(((XmlAdaptedTag) other).name) \u0026\u0026 color.equals(((XmlAdaptedTag) other).color);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":33,"-":52}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.CalendarChangedEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup() throws DataConversionException, IOException {"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        return readAddressBookBackup(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws DataConversionException,"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"            IOException {"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        logger.fine(\"Attempting to read data from backup: \" + filePath);"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        return addressBookStorage.readAddressBookBackup(filePath);"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        addressBookStorage.backupAddressBook(addressBook, filePath);"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"            raise(new CalendarChangedEvent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":30,"-":89}},{"path":"src/main/java/seedu/address/logic/commands/ChangeTagColorCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"public class ChangeTagColorCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_WORD \u003d \"changeTagColor\";"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String COMMAND_ALIAS \u003d \"color\";"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the current color of the tag specified by name\""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"            + \"\\nParameters: TAGNAME (must be an existing tag) COLOR\\n\""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends red\\n\""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"            + \"Available colors are: teal, red, yellow, blue, orange, brown, green, pink, black, grey\";"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Tag %1$s\u0027s color changed to %2$s\";"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TAG_NOT_IN_LIST \u003d \"The tag specified is not associated with any person\";"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private final String tagName;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    private final String tagColor;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    private Tag tagToEdit;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    private Tag editedTag;"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * @param name  of the tag to edit"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     * @param color to change the tag into"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    public ChangeTagColorCommand(String name, String color) {"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(color);"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        this.tagName \u003d name;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        this.tagColor \u003d color;"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"            model.updateTag(tagToEdit, editedTag);"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (TagNotFoundException tnfe) {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"            throw new CommandException(MESSAGE_TAG_NOT_IN_LIST);"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, tagName, tagColor));"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        editedTag \u003d new Tag(tagName, tagColor);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cTag\u003e allTags \u003d model.getAddressBook().getTagList();"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        for (Tag tag : allTags) {"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"            if (tag.name.equals(tagName)) {"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"                tagToEdit \u003d tag;"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"                return;"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"        // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof ChangeTagColorCommand)) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        ChangeTagColorCommand e \u003d (ChangeTagColorCommand) other;"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        return tagName.equals(e.tagName)"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 tagColor.equals(e.tagColor);"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":85}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup() throws DataConversionException, IOException {"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        return readAddressBook(filePath + \".backup\");"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBookBackup(String filePath) throws DataConversionException,"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"                                                                                       IOException {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"            throw new NullPointerException();"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"            return readAddressBook(filePath + \".backup\");"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"            throw new NullPointerException();"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"            saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        if (Objects.isNull(filePath)) {"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"            throw new NullPointerException();"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"            saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":36,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" * Adds a group to the address book."},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"public class AddGroupCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"addGroup\";"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"aG\";"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a group to the address book. \""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"            + \"GROUP NAME \""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"            + \"CS1010 project\";"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New group added: %1$s\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"This group already exists in the address book\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    private final Group addGroup;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     * Creates an AddGroupCommand to add the specified {@code Group}"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"    public AddGroupCommand(Group group) {"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        requireNonNull(group);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        addGroup \u003d group;"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        requireNonNull(model);"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"            model.addGroup(addGroup);"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, addGroup));"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException dge) {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                || (other instanceof AddGroupCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 addGroup.equals(((AddGroupCommand) other).addGroup));"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":55}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"    private String link;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    private String detail;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"                            String link, String detail, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d link;"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"        link \u003d source.getTimeTableLink().value;"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        detail \u003d source.getDetail().detail;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Isaaaca"},"content":"        //@@author Isaaaca"},{"lineNumber":128,"author":{"gitID":"Isaaaca"},"content":"        if (this.link \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":130,"author":{"gitID":"Isaaaca"},"content":"                    TimeTableLink.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Isaaaca"},"content":"        if (!TimeTableLink.isValidLink(this.link)) {"},{"lineNumber":133,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(TimeTableLink.MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"Isaaaca"},"content":"        final TimeTableLink link \u003d new TimeTableLink(this.link);"},{"lineNumber":136,"author":{"gitID":"Isaaaca"},"content":"        //@@author"},{"lineNumber":137,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":138,"author":{"gitID":"nhatquang3112"},"content":"        if (this.detail \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"Isaaaca"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":140,"author":{"gitID":"nhatquang3112"},"content":"                    Detail.class.getSimpleName()));"},{"lineNumber":141,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"nhatquang3112"},"content":"        if (!Detail.isValidDetail(this.detail)) {"},{"lineNumber":143,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Detail.MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"nhatquang3112"},"content":"        final Detail detail \u003d new Detail(this.detail);"},{"lineNumber":146,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":148,"author":{"gitID":"nhatquang3112"},"content":"        return new Person(name, phone, email, address, link, detail, tags);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":166,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 Objects.equals(link, otherPerson.link)"},{"lineNumber":167,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 Objects.equals(detail, otherPerson.detail)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":15,"Isaaaca":18,"-":137}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedToDo.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Status;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":" * JAXB-friendly version of the To-do."},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"public class XmlAdaptedToDo {"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"ToDo\u0027s %s field is missing!\";"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"    private String content;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    private String status;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an XmlAdaptedToDo."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo() {}"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code XmlAdaptedToDo} with the given details."},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(String content, String status) {"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d status;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code XmlAdaptedToDo} with the given details."},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"     * Status is \"undone\" by default"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(String content) {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d \"undone\";"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"     * Converts a given To-do into this class for JAXB use."},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedToDo"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    public XmlAdaptedToDo(ToDo source) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        content \u003d source.getContent().value;"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        status \u003d source.getStatus().value;"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"     * Converts this jaxb-friendly adapted to-do object into the model\u0027s To-do object."},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted to-do"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo toModelType() throws IllegalValueException {"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"        if (this.content \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Content.class.getSimpleName()));"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        if (!Content.isValidContent(this.content)) {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Content.MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"        final Content content \u003d new Content(this.content);"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        if (this.status \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":"        if (!Status.isValidStatus(this.status)) {"},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"            throw new IllegalValueException(Status.MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        final Status status \u003d new Status(this.status);"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo(content, status);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof XmlAdaptedToDo)) {"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        XmlAdaptedToDo otherToDo \u003d (XmlAdaptedToDo) other;"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.equals(content, otherToDo.content);"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":98}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"    private List\u003cXmlAdaptedToDo\u003e todos;"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    private List\u003cXmlAdaptedGroup\u003e groups;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    private List\u003cXmlAdaptedEvent\u003e events;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        todos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"        groups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        todos.addAll(src.getToDoList().stream().map(XmlAdaptedToDo::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        groups.addAll(src.getGroupList().stream().map(XmlAdaptedGroup::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        for (XmlAdaptedToDo todo : todos) {"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            addressBook.addToDo(todo.toModelType());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        for (XmlAdaptedGroup group : groups) {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"            addressBook.addGroup(group.toModelType());"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        for (XmlAdaptedEvent event : events) {"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"            addressBook.addEvent(event.toModelType());"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 todos.equals(otherAb.todos)"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 groups.equals(otherAb.groups) \u0026\u0026 events.equals(otherAb.events);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":7,"jas5469":8,"LeonidAgarth":8,"-":72}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.database.DatabaseManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Isaaaca"},"content":"        DatabaseManager.getInstance();"},{"lineNumber":77,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":138,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":166,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":3,"-":212}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":" * JAXB-friendly version of the Event."},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"public class XmlAdaptedEvent {"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private String name;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    private String venue;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"    private String date;"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    private String startTime;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    private String endTime;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs an XmlAdaptedEvent."},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent() {}"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs an {@code XmlAdaptedEvent} with the given event details."},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent(String name, String venue, String date, String startTime, String endTime) {"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     * Converts a given Event into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedEvent"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public XmlAdaptedEvent(Event source) {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        name \u003d source.getName();"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        venue \u003d source.getVenue();"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        date \u003d source.getDate();"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"        startTime \u003d source.getStartTime();"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        endTime \u003d source.getEndTime();"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public Event toModelType() throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Name\"));"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(this.name)) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.venue \u003d\u003d null) {"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Venue\"));"},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidName(this.venue)) {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_VENUE_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidDate(this.date)) {"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"StartTime\"));"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(this.startTime)) {"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"EndTime\"));"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        if (!Event.isValidTime(this.endTime)) {"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"            throw new IllegalValueException(Event.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"        return new Event(name, venue, date, startTime, endTime);"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof XmlAdaptedEvent)) {"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"        return Objects.equals(name, otherEvent.name)"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(venue, otherEvent.venue)"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(date, otherEvent.date)"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(startTime, otherEvent.startTime)"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 Objects.equals(endTime, otherEvent.endTime);"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":116}},{"path":"src/main/java/seedu/address/model/group/exceptions/DuplicateGroupException.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" * Signals that the operation will result in duplicate Group objects."},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"public class DuplicateGroupException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"    public DuplicateGroupException() {"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"        super(\"Operation would result in duplicate groups\");"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":13}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.person.Detail;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.person.TimeTableLink;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.Content;"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new TimeTableLink(\"http://modsn.us/MYwiD\"),"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"friends\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new TimeTableLink(\"http://modsn.us/gka24\"),"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new TimeTableLink(\"http://modsn.us/gOVE5\"),"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"neighbours\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new TimeTableLink(\"http://modsn.us/NejPO\"),"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"family\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new TimeTableLink(\"http://modsn.us/TJmxw\"),"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"classmates\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new TimeTableLink(\"http://modsn.us/MQcxm\"),"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"                    new Detail(\"Likes tennis\"), getTagSet(\"colleagues\"))"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    public static ToDo[] getSampleToDos() {"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"        return new ToDo[] {"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo A\")),"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo B\")),"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo C\")),"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"            new ToDo(new Content(\"ToDo D\"))"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        };"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    public static Group[] getSampleGroups() {"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"        return new Group[] {"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"            new Group(new Information(\"Group A\")),"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"            new Group(new Information(\"Group B\")),"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"            new Group(new Information(\"Group C\")),"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"        };"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"            for (ToDo sampleToDo : getSampleToDos()) {"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"                sampleAb.addToDo(sampleToDo);"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"            for (Group sampleGroup : getSampleGroups()) {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"                sampleAb.addGroup(sampleGroup);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate todos\", e);"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate groups\", e);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":30,"Isaaaca":1,"jas5469":15,"-":55}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedGroup.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Information;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":" * JAXB-friendly version of the Group."},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"public class XmlAdaptedGroup {"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Group\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    private String information;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    private List\u003cXmlAdaptedPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     * Constructs an XmlAdaptedGroup."},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup() {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"     * Constructs an {@code XmlAdaptedGroup} with the given group details."},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup(String information) {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        this.information \u003d information;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        this.personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"     * Converts a given Group into this class for JAXB use."},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedGroup"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    public XmlAdaptedGroup(Group source) {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        information \u003d source.getInformation().value;"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        UniquePersonList persons \u003d source.getPersonList();"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"        for (Person person : persons) {"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"            personList.add(new XmlAdaptedPerson(person));"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"     * Converts this jaxb-friendly adapted group object into the model\u0027s Group object."},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"        if (this.information \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"                    Information.class.getSimpleName()));"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"        if (!Information.isValidInformation(this.information)) {"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"            throw new IllegalValueException(Information.MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        final Information information \u003d new Information(this.information);"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        for (XmlAdaptedPerson adaptedPerson : personList) {"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"            Person personToAdd \u003d adaptedPerson.toModelType();"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"            uniquePersonList.add(personToAdd);"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        return new Group(information, uniquePersonList);"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    public List\u003cXmlAdaptedPerson\u003e getPersonList() {"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        return personList;"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"        if (!(other instanceof XmlAdaptedGroup)) {"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        XmlAdaptedGroup otherGroup \u003d (XmlAdaptedGroup) other;"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        return Objects.equals(information, otherGroup.information);"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":98}},{"path":"src/main/java/seedu/address/model/group/exceptions/GroupNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group.exceptions;"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":" * Signals that the operation is unable to find the specified group."},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"public class GroupNotFoundException extends Exception {}"}],"authorContributionMap":{"jas5469":8}},{"path":"src/main/java/seedu/address/model/group/Information.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":" * Represents a Group\u0027s information in the address book."},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidInformation(String)}"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class Information {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_INFORMATION_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"            \"Group information should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"     * The first character of the information must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public static final String INFORMATION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"     * Constructs a {@code Information}."},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"     * @param information A valid information."},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    public Information(String information) {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        requireNonNull(information);"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        checkArgument(isValidInformation(information), MESSAGE_INFORMATION_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        this.value \u003d information;"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"     * Returns true if a given string is a valid to-do information."},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    public static boolean isValidInformation(String test) {"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"        return test.matches(INFORMATION_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"                || (other instanceof Information // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.value.equals(((Information) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":61}},{"path":"src/main/java/seedu/address/model/group/MembersInGroupPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":" *Tests that a {@code Person}\u0027s is in the group specified."},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"public class MembersInGroupPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    private final Group group;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public MembersInGroupPredicate(Group group) {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"        this.group \u003d group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        UniquePersonList personList \u003d group.getPersonList();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        if (personList.contains(person)) {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        return false;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"                || (other instanceof MembersInGroupPredicate // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.group.equals(((MembersInGroupPredicate) other).group)); // state check"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":35}},{"path":"src/main/java/seedu/address/logic/commands/AddMemberToGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" * Finds a person by index  add him to a specific group in Fastis ."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":" * Keyword matching is case sensitive."},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"public class AddMemberToGroupCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_WORD \u003d \"addGroupMember\";"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public static final String COMMAND_ALIAS \u003d \"aGM\";"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds person via index on the most recent list \""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"            + \"and add to group that contain the specified keywords (case-sensitive).\\n\""},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"            + \"Parameters: INDEX (must be a positive integer) g/GroupName(Must exist) \""},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"            + PREFIX_GROUP + \"CS1010\";"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_NO_SUCH_GROUP \u003d \"No such group exist.\";"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_ADD_PERSON_TO_GROUP_SUCCESS \u003d \"%1$s added to group %2$s\";"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Person already in Group\";"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"No such Group in Fastis\";"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"    public static final String MESSAGE_DUPLICATE_GROUP \u003d \"Group already in Group\";"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"    private Index index;"},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    private Person personToAdd;"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    private Group groupToAdd;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    private Group groupAdded;"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    private List\u003cGroup\u003e groupList;"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    public AddMemberToGroupCommand(Index index, Group groupToAdd) {"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        requireNonNull(index);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"        this.index \u003d index;"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":"        this.groupToAdd \u003d groupToAdd;"},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        for (Group group : groupList) {"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"            if (groupToAdd.getInformation().equals(group.getInformation())) {"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"                try {"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"                    groupAdded \u003d new Group(group.getInformation(), group.getPersonList());"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"                    groupAdded.addPerson(personToAdd);"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"                    model.updateGroup(group, groupAdded);"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"                } catch (DuplicatePersonException dpe) {"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"                } catch (DuplicateGroupException dge) {"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_DUPLICATE_GROUP);"},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"                } catch (GroupNotFoundException gnfe) {"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"                    throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_PERSON_TO_GROUP_SUCCESS, personToAdd.getName(),"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"                groupToAdd.getInformation().toString()));"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        groupList \u003d model.getFilteredGroupList();"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        boolean contains \u003d new Boolean(Boolean.FALSE);"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"        for (Group g : groupList) {"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"            if (g.getInformation().equals(groupToAdd.getInformation())) {"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":"                contains \u003d true;"},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"        if (contains \u003d\u003d false) {"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"            throw new CommandException(MESSAGE_NO_SUCH_GROUP);"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"            personToAdd \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"                || (other instanceof AddMemberToGroupCommand // instanceof handles nulls"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 groupToAdd.equals(((AddMemberToGroupCommand) other).groupToAdd));"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":103}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    private final TimeTableLink link;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"    private final Detail detail;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"    public Person(Name name, Phone phone, Email email, Address address, TimeTableLink link, Detail detail,"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"                  Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(name, phone, email, address, link, detail, tags);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"        this.link \u003d link;"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public  TimeTableLink getTimeTableLink() {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        return link;"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    public  Detail getDetail() {"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        return detail;"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":89,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 otherPerson.getTimeTableLink().equals(this.getTimeTableLink())"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 otherPerson.getDetail().equals(this.getDetail());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.hash(name, phone, email, address, link, detail, tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":110,"author":{"gitID":"Isaaaca"},"content":"                .append(\" Timetable link: \")"},{"lineNumber":111,"author":{"gitID":"Isaaaca"},"content":"                .append(getTimeTableLink())"},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"                .append(\" Detail: \")"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"                .append(getDetail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":14,"Isaaaca":6,"LeonidAgarth":3,"-":96}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"        return keywords.stream().anyMatch(keyword -\u003e"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":"                StringUtil.getPartialRatioFuzzyIgnoreCase(person.getName().fullName, keyword) \u003e\u003d 75);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Isaaaca":2,"-":29}},{"path":"src/main/java/seedu/address/model/group/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":" * Represents a Group in the address book."},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"public class Group {"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"    private final Information information;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    private UniquePersonList personList;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"     * Every field must be present and not null."},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"    public Group(Information information) {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(information);"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"        this.information \u003d information;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"        this.personList \u003d new UniquePersonList();"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    public Group(Information information, UniquePersonList personList) {"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(information);"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        this.information \u003d new Information(information.value);"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"        this.personList \u003d new UniquePersonList();"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"        this.personList.setPersons(personList);"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"    public Information getInformation() {"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"        return information;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"    public UniquePersonList getPersonList() {"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        return personList;"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"     * Adds a person to the group\u0027s personList"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"     * @param toAdd The Person to add."},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"    public void addPerson(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"        if (getPersonList().contains(toAdd)) {"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":"        this.personList.add(toAdd);"},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"     * Removes a person to the group\u0027s personList"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"     * @param toRemove The Person to remove."},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"    public void removePerson(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        if (!getPersonList().contains(toRemove)) {"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"            this.personList.remove(toRemove);"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        if (!(other instanceof Group)) {"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        Group otherGroup \u003d (Group) other;"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        if (otherGroup.getInformation().equals(this.getInformation())"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"            \u0026\u0026 otherGroup.getPersonList().asObservableList().size() \u003d\u003d this.getPersonList().asObservableList().size()) {"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"            for (Person p : personList) {"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":"                if (!otherGroup.getPersonList().contains(p)) {"},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"                    return false;"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"        return false;"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        return Objects.hash(information);"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        builder.append(getInformation());"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":"        return builder.toString();"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"Isaaaca":13,"jas5469":99}},{"path":"src/main/java/seedu/address/model/person/TimeTableLink.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Isaaaca"},"content":"//@@author Isaaaca"},{"lineNumber":7,"author":{"gitID":"Isaaaca"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Isaaaca"},"content":" * Represents the link to a Person\u0027s TimeTable."},{"lineNumber":9,"author":{"gitID":"Isaaaca"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLink(String)}"},{"lineNumber":10,"author":{"gitID":"Isaaaca"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Isaaaca"},"content":"public class TimeTableLink {"},{"lineNumber":12,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":13,"author":{"gitID":"Isaaaca"},"content":"    public static final String MESSAGE_TIMETABLE_LINK_CONSTRAINTS \u003d \"Timetable Links should \""},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"            + \"adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"Isaaaca"},"content":"            + \"1. Begin with \\\"http://modsn.us/\\\". \\n\""},{"lineNumber":16,"author":{"gitID":"Isaaaca"},"content":"            + \"2. This is followed by a string of alphanumeric characters. \";"},{"lineNumber":17,"author":{"gitID":"Isaaaca"},"content":"    // alphanumeric and special characters"},{"lineNumber":18,"author":{"gitID":"Isaaaca"},"content":"    private static final String SHORT_URL_FROINT_REGEX \u003d \"http://modsn\\\\.us/\";"},{"lineNumber":19,"author":{"gitID":"Isaaaca"},"content":"    private static final String SHORT_URL_TRAIL_REGEX \u003d \"[a-zA-Z0-9\\\\-]+\"; // alphanumeric and hyphen"},{"lineNumber":20,"author":{"gitID":"Isaaaca"},"content":"    public static final String SHORT_URL_VALIDATION_REGEX \u003d SHORT_URL_FROINT_REGEX + SHORT_URL_TRAIL_REGEX;"},{"lineNumber":21,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":22,"author":{"gitID":"Isaaaca"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":24,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Isaaaca"},"content":"     * Constructs an {@code TimeTableLink}."},{"lineNumber":26,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"Isaaaca"},"content":"     * @param link A valid email address."},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Isaaaca"},"content":"    public TimeTableLink(String link) {"},{"lineNumber":30,"author":{"gitID":"Isaaaca"},"content":"        requireNonNull(link);"},{"lineNumber":31,"author":{"gitID":"Isaaaca"},"content":"        checkArgument(isValidLink(link), MESSAGE_TIMETABLE_LINK_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"Isaaaca"},"content":"        this.value \u003d link;"},{"lineNumber":33,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":35,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Isaaaca"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":37,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Isaaaca"},"content":"    public static boolean isValidLink(String test) {"},{"lineNumber":39,"author":{"gitID":"Isaaaca"},"content":"        return test.matches(SHORT_URL_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":42,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"Isaaaca"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"Isaaaca"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":47,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"Isaaaca"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"Isaaaca"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"Isaaaca"},"content":"                || (other instanceof TimeTableLink // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"                \u0026\u0026 this.value.equals(((TimeTableLink) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":54,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Isaaaca"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"Isaaaca"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":59,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"Isaaaca":54,"-":5}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an unmodifiable view of the todos list."},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * This list will not contain any duplicate todos."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getToDoList();"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the complete ratio of the todos list."},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    double getToDoListCompleteRatio();"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"     * Returns an unmodifiable view of the group list."},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"     * This list will not contain any duplicate groups."},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    ObservableList\u003cGroup\u003e getGroupList();"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an unmodifiable view of the events list."},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     * This list will not contain any duplicate events."},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    ObservableList\u003cEvent\u003e getEventList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"nhatquang3112":12,"jas5469":7,"LeonidAgarth":6,"-":24}},{"path":"src/main/java/seedu/address/model/person/TagContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":" * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"public class TagContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"    public TagContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"        for (Tag t : tags) {"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"            for (String key : keywords) {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":"                if (t.name.equals(key)) {"},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"                    return true;"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":"                }"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"        return false;"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"                || (other instanceof TagContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":39}},{"path":"src/main/java/seedu/address/model/todo/exceptions/DuplicateToDoException.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo.exceptions;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":" * Signals that the operation will result in duplicate ToDo objects."},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":"public class DuplicateToDoException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"    public DuplicateToDoException() {"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"        super(\"Operation would result in duplicate to-dos\");"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":13}},{"path":"src/main/java/seedu/address/model/todo/exceptions/ToDoNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo.exceptions;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":" * Signals that the operation is unable to find the specified ToDo."},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"public class ToDoNotFoundException extends Exception {}"}],"authorContributionMap":{"nhatquang3112":7}},{"path":"src/main/java/seedu/address/model/person/Detail.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Represents a Person\u0027s detail in the address book."},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDetail(String)}"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class Detail {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_DETAIL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"            \"Person detail should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the detail must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String DETAIL_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public final String detail;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Detail}."},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * @param detail A valid detail."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public Detail(String detail) {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(detail);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidDetail(detail), MESSAGE_DETAIL_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        this.detail \u003d detail;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid person detail."},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidDetail(String test) {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        return test.matches(DETAIL_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        return detail;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Detail // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.detail.equals(((Detail) other).detail)); // state check"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        return detail.hashCode();"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":60}},{"path":"src/main/java/seedu/address/model/group/UniqueGroupList.java","lines":[{"lineNumber":1,"author":{"gitID":"jas5469"},"content":"//@@author jas5469"},{"lineNumber":2,"author":{"gitID":"jas5469"},"content":"package seedu.address.model.group;"},{"lineNumber":3,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":4,"author":{"gitID":"jas5469"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"jas5469"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":7,"author":{"gitID":"jas5469"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"jas5469"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"jas5469"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":14,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":16,"author":{"gitID":"jas5469"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":" * A list of Groups that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":" *"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":" * @see Group#equals(Object)"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":" */"},{"lineNumber":24,"author":{"gitID":"jas5469"},"content":"public class UniqueGroupList implements Iterable\u003cGroup\u003e {"},{"lineNumber":25,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":26,"author":{"gitID":"jas5469"},"content":"    private final ObservableList\u003cGroup\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jas5469"},"content":"     * Returns true if the list contains an equivalent Group as the given argument."},{"lineNumber":30,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jas5469"},"content":"    public boolean contains(Group toCheck) {"},{"lineNumber":32,"author":{"gitID":"jas5469"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"jas5469"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":36,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jas5469"},"content":"     * Adds a Group to the list."},{"lineNumber":38,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicateGroupException if the Group to add is a duplicate of an existing Group in the list."},{"lineNumber":40,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"jas5469"},"content":"    public void add(Group groupToAdd) throws DuplicateGroupException {"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"        requireNonNull(groupToAdd);"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"        if (contains(groupToAdd)) {"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jas5469"},"content":"        internalList.add(groupToAdd);"},{"lineNumber":47,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":49,"author":{"gitID":"jas5469"},"content":"    public void setGroups(UniqueGroupList replacement) {"},{"lineNumber":50,"author":{"gitID":"jas5469"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":53,"author":{"gitID":"jas5469"},"content":"    public void setGroups(List\u003cGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":54,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(groups);"},{"lineNumber":55,"author":{"gitID":"jas5469"},"content":"        final UniqueGroupList replacement \u003d new UniqueGroupList();"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        for (final Group group : groups) {"},{"lineNumber":57,"author":{"gitID":"jas5469"},"content":"            replacement.add(group);"},{"lineNumber":58,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jas5469"},"content":"        setGroups(replacement);"},{"lineNumber":60,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jas5469"},"content":"     * Removes the equivalent Group from the list."},{"lineNumber":64,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"jas5469"},"content":"     * @throws GroupNotFoundException if no such Group could be found in the list."},{"lineNumber":66,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"jas5469"},"content":"    public boolean remove(Group toRemove) throws GroupNotFoundException {"},{"lineNumber":68,"author":{"gitID":"jas5469"},"content":"        requireNonNull(toRemove);"},{"lineNumber":69,"author":{"gitID":"jas5469"},"content":"        final boolean groupFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":70,"author":{"gitID":"jas5469"},"content":"        if (!groupFoundAndDeleted) {"},{"lineNumber":71,"author":{"gitID":"jas5469"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":72,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"        return groupFoundAndDeleted;"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"     * Replaces the group {@code target} in the list with {@code editedGroup}."},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicateGroupException if the replacement is equivalent to another existing Group in the list."},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"     * @throws GroupNotFoundException if {@code target} could not be found in the list."},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"    public void setGroup(Group target, Group editedGroup)"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"            throws DuplicateGroupException, GroupNotFoundException {"},{"lineNumber":84,"author":{"gitID":"jas5469"},"content":"        requireNonNull(editedGroup);"},{"lineNumber":85,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":86,"author":{"gitID":"jas5469"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":87,"author":{"gitID":"jas5469"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":88,"author":{"gitID":"jas5469"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":89,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":91,"author":{"gitID":"jas5469"},"content":"        if (!target.equals(editedGroup) \u0026\u0026 internalList.contains(editedGroup)) {"},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"            throw new DuplicateGroupException();"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"        internalList.set(index, editedGroup);"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"jas5469"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"    public Iterator\u003cGroup\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"jas5469"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"jas5469"},"content":"                || (other instanceof UniqueGroupList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"jas5469"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueGroupList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":117,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"jas5469"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"jas5469"},"content":"}"}],"authorContributionMap":{"jas5469":121}},{"path":"src/main/java/seedu/address/model/todo/Status.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo\u0027s status in the address book."},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStatus(String)}"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class Status {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_STATUS_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"            \"To-do status should have only two cases: done, undone.It should not be blank\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the status must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String STATUS_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Status}."},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * @param status A valid status."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public Status(String status) {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(status);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidStatus(status), MESSAGE_STATUS_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        this.value \u003d status;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid to-do status."},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        if (test.matches(STATUS_VALIDATION_REGEX) \u0026\u0026 ("},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"                test.equals(\"done\") || test.equals(\"undone\"))) {"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        return value;"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Status // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.value.equals(((Status) other).value)); // state check"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":65}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":17,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":18,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.UniqueGroupList;"},{"lineNumber":19,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":20,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.UniqueToDoList;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    private final UniqueToDoList todos;"},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    private final UniqueGroupList groups;"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"    private final UniqueEventList events;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":51,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"jas5469"},"content":"    {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        todos \u003d new UniqueToDoList();"},{"lineNumber":56,"author":{"gitID":"jas5469"},"content":"        groups \u003d new UniqueGroupList();"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        events \u003d new UniqueEventList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Isaaaca"},"content":"    public AddressBook() {"},{"lineNumber":61,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"    public void setGroups(List\u003cGroup\u003e groups) throws DuplicateGroupException {"},{"lineNumber":82,"author":{"gitID":"jas5469"},"content":"        this.groups.setGroups(groups);"},{"lineNumber":83,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents(List\u003cEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        this.events.setEvents(events);"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":"        List\u003cToDo\u003e syncedToDoList \u003d newData.getToDoList();"},{"lineNumber":98,"author":{"gitID":"jas5469"},"content":"        List\u003cGroup\u003e syncedGroupList \u003d newData.getGroupList();"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        List\u003cEvent\u003e syncedEventList \u003d newData.getEventList();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"            setToDos(syncedToDoList);"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"            setGroups(syncedGroupList);"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"            setEvents(syncedEventList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        } catch (DuplicateToDoException e) {"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate todos\");"},{"lineNumber":110,"author":{"gitID":"jas5469"},"content":"        } catch (DuplicateGroupException e) {"},{"lineNumber":111,"author":{"gitID":"jas5469"},"content":"            throw new AssertionError(\"AddressBooks Should not have duplicate groups\");"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"            throw new AssertionError(\"AddressBooks Should not have duplicate events\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"jas5469"},"content":"     * Replaces the given Group {@code target} in the list with {@code editedGroup}."},{"lineNumber":156,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":157,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicateGroupException if updating the Group\u0027s details causes the Group to be equivalent to"},{"lineNumber":158,"author":{"gitID":"jas5469"},"content":"     *                                  another existing Group in the list."},{"lineNumber":159,"author":{"gitID":"jas5469"},"content":"     * @throws GroupNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":160,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jas5469"},"content":"    public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":162,"author":{"gitID":"jas5469"},"content":"            throws DuplicateGroupException, GroupNotFoundException {"},{"lineNumber":163,"author":{"gitID":"jas5469"},"content":"        requireNonNull(editedGroup);"},{"lineNumber":164,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":165,"author":{"gitID":"jas5469"},"content":"        groups.setGroup(target, editedGroup);"},{"lineNumber":166,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":170,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":185,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":188,"author":{"gitID":"nhatquang3112"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getTimeTableLink(),"},{"lineNumber":189,"author":{"gitID":"nhatquang3112"},"content":"                person.getDetail(), correctTagReferences);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":194,"author":{"gitID":"Isaaaca"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"nhatquang3112"},"content":"    //@@author nhatquang3112"},{"lineNumber":206,"author":{"gitID":"nhatquang3112"},"content":"    //// to-do-level operations"},{"lineNumber":207,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"nhatquang3112"},"content":"     * Adds a to-do to the address book."},{"lineNumber":209,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":210,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if an equivalent to-do already exists."},{"lineNumber":211,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"nhatquang3112"},"content":"    public void addToDo(ToDo todo) throws DuplicateToDoException {"},{"lineNumber":213,"author":{"gitID":"nhatquang3112"},"content":"        todos.add(todo);"},{"lineNumber":214,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":216,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getToDoList() {"},{"lineNumber":218,"author":{"gitID":"nhatquang3112"},"content":"        return todos.asObservableList();"},{"lineNumber":219,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":221,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"nhatquang3112"},"content":"    public double getToDoListCompleteRatio() {"},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"        return todos.getCompleteRatio();"},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"nhatquang3112"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":228,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":229,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":230,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"    public boolean removeToDo(ToDo key) throws ToDoNotFoundException {"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":"        if (todos.remove(key)) {"},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":234,"author":{"gitID":"nhatquang3112"},"content":"        } else {"},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":"            throw new ToDoNotFoundException();"},{"lineNumber":236,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":239,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the given ToDo {@code target} in the list with {@code editedToDo}."},{"lineNumber":241,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":242,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if updating the ToDo\u0027s details causes the ToDo to be equivalent to"},{"lineNumber":243,"author":{"gitID":"nhatquang3112"},"content":"     *                                  another existing ToDo in the list."},{"lineNumber":244,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":245,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"nhatquang3112"},"content":"    public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":247,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":248,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(editedToDo);"},{"lineNumber":249,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":250,"author":{"gitID":"nhatquang3112"},"content":"        todos.setToDo(target, editedToDo);"},{"lineNumber":251,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":253,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(List\u003cToDo\u003e todos) throws DuplicateToDoException {"},{"lineNumber":254,"author":{"gitID":"nhatquang3112"},"content":"        this.todos.setToDos(todos);"},{"lineNumber":255,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"nhatquang3112"},"content":"    //@@author"},{"lineNumber":257,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":264,"author":{"gitID":"jas5469"},"content":"    ////Group operation"},{"lineNumber":265,"author":{"gitID":"jas5469"},"content":"    public void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":266,"author":{"gitID":"jas5469"},"content":"        groups.add(group);"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"     * @throws ToDoNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":273,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":"    public boolean removeGroup(Group key) throws GroupNotFoundException {"},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"        if (groups.remove(key)) {"},{"lineNumber":276,"author":{"gitID":"jas5469"},"content":"            return true;"},{"lineNumber":277,"author":{"gitID":"jas5469"},"content":"        } else {"},{"lineNumber":278,"author":{"gitID":"jas5469"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":279,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":282,"author":{"gitID":"LeonidAgarth"},"content":"    ////Event operations"},{"lineNumber":283,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"LeonidAgarth"},"content":"     * Adds an event to the address book."},{"lineNumber":285,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if an equivalent event already exists."},{"lineNumber":286,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"LeonidAgarth"},"content":"    public void addEvent(Event e) throws DuplicateEventException {"},{"lineNumber":288,"author":{"gitID":"LeonidAgarth"},"content":"        events.add(e);"},{"lineNumber":289,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags\";"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":311,"author":{"gitID":"jas5469"},"content":"        return groups.asObservableList();"},{"lineNumber":312,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":314,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {"},{"lineNumber":316,"author":{"gitID":"LeonidAgarth"},"content":"        return events.asObservableList();"},{"lineNumber":317,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":319,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":322,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":323,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":324,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":333,"content":"    //@@author Isaaaca-unused"},{"lineNumber":334,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from all {@code persons} in the {@code AddressBook} and from the {@code AddressBook}."},{"lineNumber":336,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":338,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":339,"author":{"gitID":"Isaaaca"},"content":"            for (Person person : persons) {"},{"lineNumber":340,"author":{"gitID":"Isaaaca"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":341,"author":{"gitID":"Isaaaca"},"content":"            }"},{"lineNumber":342,"author":{"gitID":"Isaaaca"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":343,"author":{"gitID":"Isaaaca"},"content":"            throw new AssertionError(\"Impossible: original person is not found from the address book.\");"},{"lineNumber":344,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":346,"author":{"gitID":"Isaaaca"},"content":"        removeTagFromAddressBook(tag);"},{"lineNumber":347,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":348,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":350,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":351,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from the {@code AddressBook}."},{"lineNumber":352,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"Isaaaca"},"content":"    private void removeTagFromAddressBook(Tag tag) {"},{"lineNumber":354,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e editedTagList \u003d tags.toSet();"},{"lineNumber":355,"author":{"gitID":"Isaaaca"},"content":"        if (editedTagList.contains(tag)) {"},{"lineNumber":356,"author":{"gitID":"Isaaaca"},"content":"            editedTagList.remove(tag);"},{"lineNumber":357,"author":{"gitID":"Isaaaca"},"content":"            tags.setTags(editedTagList);"},{"lineNumber":358,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":361,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the old {@code target} tag with the new {@code editedTag}"},{"lineNumber":363,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":364,"author":{"gitID":"LeonidAgarth"},"content":"    public void editTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":365,"author":{"gitID":"LeonidAgarth"},"content":"        Set\u003cTag\u003e editedTagList \u003d tags.toSet();"},{"lineNumber":366,"author":{"gitID":"LeonidAgarth"},"content":"        if (editedTagList.contains(target)) {"},{"lineNumber":367,"author":{"gitID":"LeonidAgarth"},"content":"            editedTagList.remove(target);"},{"lineNumber":368,"author":{"gitID":"LeonidAgarth"},"content":"            editedTagList.add(editedTag);"},{"lineNumber":369,"author":{"gitID":"LeonidAgarth"},"content":"            tags.setTags(editedTagList);"},{"lineNumber":370,"author":{"gitID":"LeonidAgarth"},"content":"        } else {"},{"lineNumber":371,"author":{"gitID":"LeonidAgarth"},"content":"            throw new TagNotFoundException();"},{"lineNumber":372,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":373,"author":{"gitID":"LeonidAgarth"},"content":"        for (Person p : persons) {"},{"lineNumber":374,"author":{"gitID":"LeonidAgarth"},"content":"            replaceTagInPerson(target, editedTag, p);"},{"lineNumber":375,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":376,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":378,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":379,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the old {@code target} tag of a {@code person} with the new {@code editedTag}"},{"lineNumber":380,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":381,"author":{"gitID":"LeonidAgarth"},"content":"    private void replaceTagInPerson(Tag target, Tag editedTag, Person person) {"},{"lineNumber":382,"author":{"gitID":"LeonidAgarth"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":383,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":384,"author":{"gitID":"LeonidAgarth"},"content":"        //Terminate if tag is not is tagList"},{"lineNumber":385,"author":{"gitID":"LeonidAgarth"},"content":"        if (!tagList.remove(target)) {"},{"lineNumber":386,"author":{"gitID":"LeonidAgarth"},"content":"            return;"},{"lineNumber":387,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":388,"author":{"gitID":"LeonidAgarth"},"content":"        tagList.add(editedTag);"},{"lineNumber":389,"author":{"gitID":"LeonidAgarth"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":390,"author":{"gitID":"LeonidAgarth"},"content":"                person.getEmail(), person.getAddress(), person.getTimeTableLink(), person.getDetail(), tagList);"},{"lineNumber":391,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":392,"author":{"gitID":"LeonidAgarth"},"content":"        try {"},{"lineNumber":393,"author":{"gitID":"LeonidAgarth"},"content":"            updatePerson(person, updatedPerson);"},{"lineNumber":394,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":395,"author":{"gitID":"LeonidAgarth"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":396,"author":{"gitID":"LeonidAgarth"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":397,"author":{"gitID":"LeonidAgarth"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":398,"author":{"gitID":"LeonidAgarth"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in \""},{"lineNumber":399,"author":{"gitID":"LeonidAgarth"},"content":"                    + \"a PersonNotFoundException. See Person#equals(Object).\");"},{"lineNumber":400,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":401,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"Isaaaca"},"content":"    //@@author Isaaaca"},{"lineNumber":403,"author":{"gitID":"Isaaaca"},"content":"    /**"},{"lineNumber":404,"author":{"gitID":"Isaaaca"},"content":"     * Removes {@code tag} from all {@code persons} in the {@code AddressBook}."},{"lineNumber":405,"author":{"gitID":"Isaaaca"},"content":"     */"},{"lineNumber":406,"author":{"gitID":"Isaaaca"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":407,"author":{"gitID":"Isaaaca"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":408,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":409,"author":{"gitID":"Isaaaca"},"content":"        //Terminate if tag is not is tagList"},{"lineNumber":410,"author":{"gitID":"Isaaaca"},"content":"        if (!tagList.remove(tag)) {"},{"lineNumber":411,"author":{"gitID":"Isaaaca"},"content":"            return;"},{"lineNumber":412,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":413,"author":{"gitID":"Isaaaca"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(),"},{"lineNumber":414,"author":{"gitID":"Isaaaca"},"content":"                person.getEmail(), person.getAddress(), person.getTimeTableLink(), person.getDetail(), tagList);"},{"lineNumber":415,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":416,"author":{"gitID":"Isaaaca"},"content":"        try {"},{"lineNumber":417,"author":{"gitID":"Isaaaca"},"content":"            updatePerson(person, updatedPerson);"},{"lineNumber":418,"author":{"gitID":"Isaaaca"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":419,"author":{"gitID":"Isaaaca"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":420,"author":{"gitID":"Isaaaca"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":421,"author":{"gitID":"Isaaaca"},"content":"        }"},{"lineNumber":422,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"Isaaaca"},"content":"}"}],"authorContributionMap":{"null":1,"nhatquang3112":67,"Isaaaca":53,"jas5469":55,"LeonidAgarth":70,"-":177}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation is unable to find the specified event."},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"public class EventNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":8}},{"path":"src/main/java/seedu/address/model/todo/ToDo.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo in the address book."},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"public class ToDo {"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"    private final Content content;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":"    private Status status;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * Every field must be present and not null."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code ToDo} with the given details."},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"     * Status is \"undone\" by default"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo(Content content) {"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(content);"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d new Status(\"undone\");"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs an {@code ToDo} with the given details."},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"    public ToDo(Content content, Status status) {"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(content);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(status);"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"        this.content \u003d content;"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"        this.status \u003d status;"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    public Content getContent() {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        return content;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    public Status getStatus() {"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"        return status;"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"        if (!(other instanceof ToDo)) {"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        ToDo otherToDo \u003d (ToDo) other;"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"        return otherToDo.getContent().equals(this.getContent());"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"        return Objects.hash(content);"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"        builder.append(getContent());"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        return builder.toString();"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":73}},{"path":"src/main/java/seedu/address/model/todo/Content.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":" * Represents a ToDo\u0027s content in the address book."},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"public class Content {"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"    public static final String MESSAGE_CONTENT_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"            \"To-do content should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"     * The first character of the content must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":"    public static final String CONTENT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":"     * Constructs a {@code Content}."},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":"     * @param content A valid content."},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"    public Content(String content) {"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(content);"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"        checkArgument(isValidContent(content), MESSAGE_CONTENT_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        this.value \u003d content;"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if a given string is a valid to-do content."},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"    public static boolean isValidContent(String test) {"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"        return test.matches(CONTENT_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof Content // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.value.equals(((Content) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":60}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation will result in duplicate Event objects."},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"    public DuplicateEventException() {"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":13}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.CalendarChangedEvent;"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.events.ui.TimetableChangedEvent;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":21,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":22,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":23,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"    private final FilteredList\u003cToDo\u003e filteredToDos;"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    private final FilteredList\u003cEvent\u003e filteredEvents;"},{"lineNumber":45,"author":{"gitID":"jas5469"},"content":"    private final FilteredList\u003cGroup\u003e filteredGroups;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    private boolean inCalendarView \u003d true;"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        filteredToDos \u003d new FilteredList\u003c\u003e(this.addressBook.getToDoList());"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.addressBook.getEventList());"},{"lineNumber":62,"author":{"gitID":"jas5469"},"content":"        filteredGroups \u003d new FilteredList\u003c\u003e(this.addressBook.getGroupList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public void indicateCalendarChanged() {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        raise(new CalendarChangedEvent());"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"    public void indicateTimetableChanged() {"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        raise(new TimetableChangedEvent());"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":102,"author":{"gitID":"jas5469"},"content":"        ObservableList\u003cGroup\u003e groupList \u003d addressBook.getGroupList();"},{"lineNumber":103,"author":{"gitID":"jas5469"},"content":"        for (Group group : groupList) {"},{"lineNumber":104,"author":{"gitID":"jas5469"},"content":"            UniquePersonList personList \u003d group.getPersonList();"},{"lineNumber":105,"author":{"gitID":"jas5469"},"content":"            if (personList.contains(target)) {"},{"lineNumber":106,"author":{"gitID":"jas5469"},"content":"                group.removePerson(target);"},{"lineNumber":107,"author":{"gitID":"jas5469"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"jas5469"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"    //@@author nhatquang3112"},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    public synchronized void deleteToDo(ToDo target) throws ToDoNotFoundException {"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.removeToDo(target);"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"        indicateAddressBookChanged();"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"    public synchronized void addToDo(ToDo toDo) throws DuplicateToDoException {"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.addToDo(toDo);"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"    public void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(target, editedToDo);"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"        addressBook.updateToDo(target, editedToDo);"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"        indicateAddressBookChanged();"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":136,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":137,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"jas5469"},"content":"    public synchronized void deleteGroup(Group target) throws GroupNotFoundException {"},{"lineNumber":139,"author":{"gitID":"jas5469"},"content":"        addressBook.removeGroup(target);"},{"lineNumber":140,"author":{"gitID":"jas5469"},"content":"        indicateAddressBookChanged();"},{"lineNumber":141,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"jas5469"},"content":"    //@@author"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"LeonidAgarth"},"content":"    public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException {"},{"lineNumber":152,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.editTag(target, editedTag);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":154,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":156,"author":{"gitID":"Isaaaca"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"Isaaaca"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":158,"author":{"gitID":"Isaaaca"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":159,"author":{"gitID":"Isaaaca"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":171,"author":{"gitID":"jas5469"},"content":"    //@@author jas5469"},{"lineNumber":172,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"jas5469"},"content":"    public void updateGroup(Group target, Group editedGroup)"},{"lineNumber":174,"author":{"gitID":"jas5469"},"content":"            throws DuplicateGroupException, GroupNotFoundException {"},{"lineNumber":175,"author":{"gitID":"jas5469"},"content":"        requireAllNonNull(target, editedGroup);"},{"lineNumber":176,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":177,"author":{"gitID":"jas5469"},"content":"        addressBook.updateGroup(target, editedGroup);"},{"lineNumber":178,"author":{"gitID":"jas5469"},"content":"        indicateAddressBookChanged();"},{"lineNumber":179,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":181,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"jas5469"},"content":"    public synchronized void addGroup(Group group) throws DuplicateGroupException {"},{"lineNumber":183,"author":{"gitID":"jas5469"},"content":"        addressBook.addGroup(group);"},{"lineNumber":184,"author":{"gitID":"jas5469"},"content":"        indicateAddressBookChanged();"},{"lineNumber":185,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":187,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":188,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"LeonidAgarth"},"content":"    public synchronized void addEvent(Event event) throws DuplicateEventException {"},{"lineNumber":190,"author":{"gitID":"LeonidAgarth"},"content":"        addressBook.addEvent(event);"},{"lineNumber":191,"author":{"gitID":"LeonidAgarth"},"content":"        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"},{"lineNumber":192,"author":{"gitID":"LeonidAgarth"},"content":"        indicateAddressBookChanged();"},{"lineNumber":193,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":195,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean calendarIsViewed() {"},{"lineNumber":197,"author":{"gitID":"LeonidAgarth"},"content":"        return inCalendarView;"},{"lineNumber":198,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":200,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"LeonidAgarth"},"content":"    public void switchView() {"},{"lineNumber":202,"author":{"gitID":"LeonidAgarth"},"content":"        inCalendarView \u003d !inCalendarView;"},{"lineNumber":203,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":205,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"nhatquang3112"},"content":"    //@@author nhatquang3112"},{"lineNumber":224,"author":{"gitID":"nhatquang3112"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ToDo List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":225,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":226,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"nhatquang3112"},"content":"     * Returns an unmodifiable view of the list of {@code ToDo} backed by the internal list of"},{"lineNumber":228,"author":{"gitID":"nhatquang3112"},"content":"     * {@code addressBook}"},{"lineNumber":229,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e getFilteredToDoList() {"},{"lineNumber":232,"author":{"gitID":"nhatquang3112"},"content":"        return FXCollections.unmodifiableObservableList(filteredToDos);"},{"lineNumber":233,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":235,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"nhatquang3112"},"content":"    public void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate) {"},{"lineNumber":237,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(predicate);"},{"lineNumber":238,"author":{"gitID":"nhatquang3112"},"content":"        filteredToDos.setPredicate(predicate);"},{"lineNumber":239,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"nhatquang3112"},"content":"    //@@author"},{"lineNumber":241,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":242,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":243,"author":{"gitID":"LeonidAgarth"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":244,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":245,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"},{"lineNumber":247,"author":{"gitID":"LeonidAgarth"},"content":"     * {@code addressBook}"},{"lineNumber":248,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e getFilteredEventList() {"},{"lineNumber":251,"author":{"gitID":"LeonidAgarth"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":252,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":254,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"LeonidAgarth"},"content":"    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"},{"lineNumber":256,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(predicate);"},{"lineNumber":257,"author":{"gitID":"LeonidAgarth"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":258,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":260,"author":{"gitID":"jas5469"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Group List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":261,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":262,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"jas5469"},"content":"     * Returns an unmodifiable view of the list of {@code Group} backed by the internal list of"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"jas5469"},"content":"    public ObservableList\u003cGroup\u003e getFilteredGroupList() {"},{"lineNumber":268,"author":{"gitID":"jas5469"},"content":"        return FXCollections.unmodifiableObservableList(filteredGroups);"},{"lineNumber":269,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":271,"author":{"gitID":"jas5469"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"jas5469"},"content":"    public void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":274,"author":{"gitID":"jas5469"},"content":"        filteredGroups.setPredicate(predicate);"},{"lineNumber":275,"author":{"gitID":"jas5469"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":295,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":296,"author":{"gitID":"LeonidAgarth"},"content":"    @Subscribe"},{"lineNumber":297,"author":{"gitID":"LeonidAgarth"},"content":"    private void handleCalendarChangedEvent(CalendarChangedEvent event) {"},{"lineNumber":298,"author":{"gitID":"LeonidAgarth"},"content":"        inCalendarView \u003d true;"},{"lineNumber":299,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":301,"author":{"gitID":"LeonidAgarth"},"content":"    @Subscribe"},{"lineNumber":302,"author":{"gitID":"LeonidAgarth"},"content":"    private void handleTimetableChangedEvent(TimetableChangedEvent event) {"},{"lineNumber":303,"author":{"gitID":"LeonidAgarth"},"content":"        inCalendarView \u003d false;"},{"lineNumber":304,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":48,"Isaaaca":6,"jas5469":48,"LeonidAgarth":81,"-":122}},{"path":"src/main/java/seedu/address/model/todo/UniqueToDoList.java","lines":[{"lineNumber":1,"author":{"gitID":"nhatquang3112"},"content":"//@@author nhatquang3112"},{"lineNumber":2,"author":{"gitID":"nhatquang3112"},"content":"package seedu.address.model.todo;"},{"lineNumber":3,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":4,"author":{"gitID":"nhatquang3112"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nhatquang3112"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":7,"author":{"gitID":"nhatquang3112"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"nhatquang3112"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":10,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"nhatquang3112"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":14,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":15,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":" * A list of to-dos that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":19,"author":{"gitID":"nhatquang3112"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"nhatquang3112"},"content":" *"},{"lineNumber":21,"author":{"gitID":"nhatquang3112"},"content":" * @see ToDo#equals(Object)"},{"lineNumber":22,"author":{"gitID":"nhatquang3112"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"nhatquang3112"},"content":" */"},{"lineNumber":24,"author":{"gitID":"nhatquang3112"},"content":"public class UniqueToDoList implements Iterable\u003cToDo\u003e {"},{"lineNumber":25,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    private final ObservableList\u003cToDo\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":28,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"nhatquang3112"},"content":"     * Returns true if the list contains an equivalent to-do as the given argument."},{"lineNumber":30,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"nhatquang3112"},"content":"    public boolean contains(ToDo toCheck) {"},{"lineNumber":32,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"nhatquang3112"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":36,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the ratio of done to-dos over the total number of to-dos in the list."},{"lineNumber":38,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    public double getCompleteRatio() {"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"        int numberOfDoneToDos \u003d 0;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":"        for (ToDo todo: internalList) {"},{"lineNumber":42,"author":{"gitID":"nhatquang3112"},"content":"            if (todo.getStatus().toString().equals(\"done\")) {"},{"lineNumber":43,"author":{"gitID":"nhatquang3112"},"content":"                numberOfDoneToDos++;"},{"lineNumber":44,"author":{"gitID":"nhatquang3112"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"nhatquang3112"},"content":"        double completeRatio \u003d ((double) numberOfDoneToDos) / ((double) internalList.size());"},{"lineNumber":47,"author":{"gitID":"nhatquang3112"},"content":"        return completeRatio;"},{"lineNumber":48,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":50,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"nhatquang3112"},"content":"     * Adds a to-do to the list."},{"lineNumber":52,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if the to-do to add is a duplicate of an existing to-do in the list."},{"lineNumber":54,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"nhatquang3112"},"content":"    public void add(ToDo toAdd) throws DuplicateToDoException {"},{"lineNumber":56,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(toAdd);"},{"lineNumber":57,"author":{"gitID":"nhatquang3112"},"content":"        if (contains(toAdd)) {"},{"lineNumber":58,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":59,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"nhatquang3112"},"content":"        internalList.add(toAdd);"},{"lineNumber":61,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":63,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the to-do {@code target} in the list with {@code editedToDo}."},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if the replacement is equivalent to another existing to-do in the list."},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException {"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(editedToDo);"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":73,"author":{"gitID":"nhatquang3112"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":74,"author":{"gitID":"nhatquang3112"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":75,"author":{"gitID":"nhatquang3112"},"content":"            throw new ToDoNotFoundException();"},{"lineNumber":76,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":78,"author":{"gitID":"nhatquang3112"},"content":"        if (!target.equals(editedToDo) \u0026\u0026 internalList.contains(editedToDo)) {"},{"lineNumber":79,"author":{"gitID":"nhatquang3112"},"content":"            throw new DuplicateToDoException();"},{"lineNumber":80,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":"        internalList.set(index, editedToDo);"},{"lineNumber":83,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":85,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(UniqueToDoList replacement) {"},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    public void setToDos(List\u003cToDo\u003e todos) throws DuplicateToDoException {"},{"lineNumber":90,"author":{"gitID":"nhatquang3112"},"content":"        requireAllNonNull(todos);"},{"lineNumber":91,"author":{"gitID":"nhatquang3112"},"content":"        final UniqueToDoList replacement \u003d new UniqueToDoList();"},{"lineNumber":92,"author":{"gitID":"nhatquang3112"},"content":"        for (final ToDo todo : todos) {"},{"lineNumber":93,"author":{"gitID":"nhatquang3112"},"content":"            replacement.add(todo);"},{"lineNumber":94,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"nhatquang3112"},"content":"        setToDos(replacement);"},{"lineNumber":96,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":98,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"nhatquang3112"},"content":"     * Removes the equivalent to-do from the list."},{"lineNumber":100,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if no such to-do could be found in the list."},{"lineNumber":102,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    public boolean remove(ToDo toRemove) throws ToDoNotFoundException {"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"        requireNonNull(toRemove);"},{"lineNumber":105,"author":{"gitID":"nhatquang3112"},"content":"        final boolean toDoFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":106,"author":{"gitID":"nhatquang3112"},"content":"        if (!toDoFoundAndDeleted) {"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"            throw new ToDoNotFoundException();"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"nhatquang3112"},"content":"        return toDoFoundAndDeleted;"},{"lineNumber":110,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":112,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"nhatquang3112"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":114,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"nhatquang3112"},"content":"    public ObservableList\u003cToDo\u003e asObservableList() {"},{"lineNumber":116,"author":{"gitID":"nhatquang3112"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":117,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":119,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"nhatquang3112"},"content":"    public Iterator\u003cToDo\u003e iterator() {"},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"        return internalList.iterator();"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":124,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"nhatquang3112"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"nhatquang3112"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"nhatquang3112"},"content":"                || (other instanceof UniqueToDoList // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"nhatquang3112"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueToDoList) other).internalList));"},{"lineNumber":129,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":131,"author":{"gitID":"nhatquang3112"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"nhatquang3112"},"content":"    public int hashCode() {"},{"lineNumber":133,"author":{"gitID":"nhatquang3112"},"content":"        return internalList.hashCode();"},{"lineNumber":134,"author":{"gitID":"nhatquang3112"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"nhatquang3112"},"content":"}"}],"authorContributionMap":{"nhatquang3112":135}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TAG_COLOR_CONSTRAINTS \u003d \"Colors available are: aqua, black, blue, brown, gold, \""},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"            + \"green, grey, lime, magenta, navy, orange, pink, purple, red, teal, yellow, white\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String[] AVAILABLE_COLORS \u003d new String[] {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"        \"green\", \"pink\", \"black\", \"grey\", \"purple\", \"lime\", \"magenta\", \"navy\", \"aqua\", \"gold\", \"white\", \"undefined\"};"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public final String name;"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"    public final String color;"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"     * @param name A valid tag name."},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    public Tag(String name) {"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagName(name), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d \"undefined\";"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    public Tag(String name, String color) {"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(name);"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagName(name), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"        checkArgument(isValidTagColor(color), MESSAGE_TAG_COLOR_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"        this.color \u003d color;"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns true if a given string is a available tag color"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidTagColor(String color) {"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        String trimmedColor \u003d color.trim().toLowerCase();"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"        for (String s : AVAILABLE_COLORS) {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"            if (s.equals(trimmedColor)) {"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"                return true;"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"            }"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"        return false;"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 this.name.equals(((Tag) other).name)); // state check"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        return name.hashCode();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        return \u0027[\u0027 + name + \u0027]\u0027;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":47,"-":38}},{"path":"src/main/java/seedu/address/model/tag/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"public class TagNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":7}},{"path":"src/main/java/seedu/address/model/event/Event.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":" * Represents an event related to a person"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"public class Event {"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_VENUE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"            \"Venues should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"DATE must be a valid date in the format of DD/MM/YYYY\";"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"TIME must be a valid time in the format of HHmm\";"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/\""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"            + \"|-|\\\\.)(?:0?[1,3-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9\""},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"            + \"]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\\""},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"            + \"d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"^(0[0-9]|1[0-9]|2[0-4])[0-5][0-9]\";"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    protected String name;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    protected String venue;"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    protected String date;"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"    protected String startTime;"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"    protected String endTime;"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"     * Default constructor, creating a blank Event."},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    public Event() {"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"        this(\"blank\", \"blank\", \"19/07/2017\", \"0000\", \"2359\");"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     * Every field must be present and not null"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"    public Event(String name, String venue, String date, String start, String end) {"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(name, start, end);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d venue;"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        this.date \u003d date;"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d start;"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d end;"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof Event)) {"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        Event otherEvent \u003d (Event) other;"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"        return otherEvent.getName().equals(this.getName())"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(this.getVenue())"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDate().equals(this.getDate())"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getEndTime().equals(this.getEndTime());"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"    public int hashCode() {"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"        return Objects.hash(name, venue, date, startTime, endTime);"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":"    public String toString() {"},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        builder.append(getName())"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Venue: \")"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getVenue())"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Date: \")"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getDate())"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" Start time: \")"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getStartTime())"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":"                .append(\" End time: \")"},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"                .append(getEndTime());"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"        return builder.toString();"},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"    public String getName() {"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"        return name;"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    public String getVenue() {"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        return venue;"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    public String getDate() {"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"        return date;"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"    public String getStartTime() {"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"        return startTime;"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"    public String getEndTime() {"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        return endTime;"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":121}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.Event;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":8,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":9,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.DuplicateGroupException;"},{"lineNumber":10,"author":{"gitID":"jas5469"},"content":"import seedu.address.model.group.exceptions.GroupNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"Isaaaca"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.tag.TagNotFoundException;"},{"lineNumber":16,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.ToDo;"},{"lineNumber":17,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.DuplicateToDoException;"},{"lineNumber":18,"author":{"gitID":"nhatquang3112"},"content":"import seedu.address.model.todo.exceptions.ToDoNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":26,"author":{"gitID":"nhatquang3112"},"content":"    Predicate\u003cToDo\u003e PREDICATE_SHOW_ALL_TODOS \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"jas5469"},"content":"    Predicate\u003cGroup\u003e PREDICATE_SHOW_ALL_GROUPS \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"nhatquang3112"},"content":"    /** Deletes the given to-do. */"},{"lineNumber":40,"author":{"gitID":"nhatquang3112"},"content":"    void deleteToDo(ToDo target) throws ToDoNotFoundException;"},{"lineNumber":41,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":42,"author":{"gitID":"jas5469"},"content":"    /** Deletes the given group. */"},{"lineNumber":43,"author":{"gitID":"jas5469"},"content":"    void deleteGroup(Group target) throws GroupNotFoundException;"},{"lineNumber":44,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"    /** Changes the color of a tag */"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    public void updateTag(Tag target, Tag editedTag) throws TagNotFoundException;"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":51,"author":{"gitID":"Isaaaca"},"content":"    /** Removes the given tag from addressbook and all persons */"},{"lineNumber":52,"author":{"gitID":"Isaaaca"},"content":"    void removeTag(Tag tag);"},{"lineNumber":53,"author":{"gitID":"Isaaaca"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"nhatquang3112"},"content":"     * Replaces the given ToDo {@code target} with {@code editedToDo}."},{"lineNumber":66,"author":{"gitID":"nhatquang3112"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"nhatquang3112"},"content":"     * @throws DuplicateToDoException if updating the ToDo\u0027s details causes the ToDo to be equivalent to"},{"lineNumber":68,"author":{"gitID":"nhatquang3112"},"content":"     *      another existing ToDo in the list."},{"lineNumber":69,"author":{"gitID":"nhatquang3112"},"content":"     * @throws ToDoNotFoundException if {@code target} could not be found in the list."},{"lineNumber":70,"author":{"gitID":"nhatquang3112"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"nhatquang3112"},"content":"    void updateToDo(ToDo target, ToDo editedToDo)"},{"lineNumber":72,"author":{"gitID":"nhatquang3112"},"content":"            throws DuplicateToDoException, ToDoNotFoundException;"},{"lineNumber":73,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"jas5469"},"content":"     * Replaces the given Group {@code target} with {@code editedGroup}."},{"lineNumber":75,"author":{"gitID":"jas5469"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"jas5469"},"content":"     * @throws DuplicateGroupException if updating the Group\u0027s details causes the Group to be equivalent to"},{"lineNumber":77,"author":{"gitID":"jas5469"},"content":"     *      another existing Group in the list."},{"lineNumber":78,"author":{"gitID":"jas5469"},"content":"     * @throws GroupNotFoundException if {@code target} could not be found in the list."},{"lineNumber":79,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"jas5469"},"content":"    void updateGroup(Group target, Group editedGroup)"},{"lineNumber":81,"author":{"gitID":"jas5469"},"content":"            throws DuplicateGroupException, GroupNotFoundException;"},{"lineNumber":82,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns an unmodifiable view of the filtered to-do list */"},{"lineNumber":87,"author":{"gitID":"nhatquang3112"},"content":"    ObservableList\u003cToDo\u003e getFilteredToDoList();"},{"lineNumber":88,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":89,"author":{"gitID":"nhatquang3112"},"content":"    /** Returns an unmodifiable view of the filtered to-do list */"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"    ObservableList\u003cEvent\u003e getFilteredEventList();"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":92,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"jas5469"},"content":"     * Returns an unmodifiable view of the filtered group list"},{"lineNumber":94,"author":{"gitID":"jas5469"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"jas5469"},"content":"    ObservableList\u003cGroup\u003e getFilteredGroupList();"},{"lineNumber":96,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"nhatquang3112"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"nhatquang3112"},"content":"     * Updates the filter of the filtered to-do list to filter by the given {@code predicate}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"nhatquang3112"},"content":"    void updateFilteredToDoList(Predicate\u003cToDo\u003e predicate);"},{"lineNumber":108,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"     * Updates the filter of the filtered event list to filter by the given {@code predicate}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":115,"author":{"gitID":"jas5469"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"jas5469"},"content":"     * Updates the filter of the filtered groupList to filter by the given {@code predicate}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"jas5469"},"content":"    void updateFilteredGroupList(Predicate\u003cGroup\u003e predicate);"},{"lineNumber":120,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":121,"author":{"gitID":"nhatquang3112"},"content":"    /** Adds the given to-do */"},{"lineNumber":122,"author":{"gitID":"nhatquang3112"},"content":"    void addToDo(ToDo todo) throws DuplicateToDoException;"},{"lineNumber":123,"author":{"gitID":"nhatquang3112"},"content":""},{"lineNumber":124,"author":{"gitID":"jas5469"},"content":"    /** Add group */"},{"lineNumber":125,"author":{"gitID":"jas5469"},"content":"    void addGroup(Group group) throws DuplicateGroupException;"},{"lineNumber":126,"author":{"gitID":"jas5469"},"content":""},{"lineNumber":127,"author":{"gitID":"LeonidAgarth"},"content":"    /** Adds the given Event */"},{"lineNumber":128,"author":{"gitID":"LeonidAgarth"},"content":"    void addEvent(Event event) throws DuplicateEventException;"},{"lineNumber":129,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":130,"author":{"gitID":"LeonidAgarth"},"content":"    //@@author LeonidAgarth"},{"lineNumber":131,"author":{"gitID":"LeonidAgarth"},"content":"    /** Checks whether application is in Calendar or Timetable view */"},{"lineNumber":132,"author":{"gitID":"LeonidAgarth"},"content":"    boolean calendarIsViewed();"},{"lineNumber":133,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":134,"author":{"gitID":"LeonidAgarth"},"content":"    /** Switches between Calendar and Timetable view */"},{"lineNumber":135,"author":{"gitID":"LeonidAgarth"},"content":"    void switchView();"},{"lineNumber":136,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":137,"author":{"gitID":"LeonidAgarth"},"content":"    /** Raises an event to indicate the calendar has changed */"},{"lineNumber":138,"author":{"gitID":"LeonidAgarth"},"content":"    void indicateCalendarChanged();"},{"lineNumber":139,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":140,"author":{"gitID":"LeonidAgarth"},"content":"    /** Raises an event to indicate the timetable has changed */"},{"lineNumber":141,"author":{"gitID":"LeonidAgarth"},"content":"    void indicateTimetableChanged();"},{"lineNumber":142,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"nhatquang3112":28,"Isaaaca":4,"jas5469":28,"LeonidAgarth":29,"-":53}},{"path":"src/main/java/seedu/address/model/event/WeeklyEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Module;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.database.module.Schedule;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":" * Events, such as lectures, tutorial slots, to appear in timetable"},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":"public class WeeklyEvent extends Event {"},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":"    private String day;"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":"    private String[] details;"},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":"    public WeeklyEvent(String name, String venue, String start, String end, String... details) {"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":"        super(name, venue, \"NA\", start, end);"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":"        this.day \u003d details[0];          //Placeholder command"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"        this.details \u003d details;"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":"    public WeeklyEvent(Module mod, Schedule schedule) {"},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(mod, schedule);"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"        this.name \u003d mod.getModuleCode();"},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"        this.venue \u003d schedule.getVenue();"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"        this.startTime \u003d schedule.getStartTime();"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        this.endTime \u003d schedule.getEndTime();"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        this.day \u003d schedule.getDayText();"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"        this.details \u003d new String[]{schedule.getLessonType() + \u0027 \u0027 + schedule.getClassNo(), mod.getModuleTitle()};"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"    public String getDay() {"},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"        return day;"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cString\u003e getDetails() {"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003cString\u003e(Arrays.asList(details));"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        return FXCollections.observableArrayList(temp);"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"     * @return true if {@code this} clashes with the {@code mod}, false otherwise"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean clash(WeeklyEvent mod) {"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"        return clash(mod.getDay(), mod.getStartTime(), mod.getEndTime());"},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"     * @return true if {@code this} is on {@code dayOfWeek},"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"     * around the time from {@code start} to {@code end}, false otherwise"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean clash(String dayOfWeek, String start, String end) {"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":"        if (!day.equals(dayOfWeek)) {"},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"        if (Integer.parseInt(start) \u003e\u003d Integer.parseInt(endTime)) {"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        return Integer.parseInt(end) \u003e Integer.parseInt(startTime);"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"        if (!(other instanceof WeeklyEvent)) {"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        WeeklyEvent otherEvent \u003d (WeeklyEvent) other;"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        return otherEvent.getName().equals(this.getName())"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getVenue().equals(this.getVenue())"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDate().equals(this.getDate())"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getEndTime().equals(this.getEndTime())"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDay().equals(this.getDay())"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 otherEvent.getDetails().equals(this.getDetails());"},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":86}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"LeonidAgarth"},"content":"//@@author LeonidAgarth"},{"lineNumber":2,"author":{"gitID":"LeonidAgarth"},"content":"package seedu.address.model.event;"},{"lineNumber":3,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":4,"author":{"gitID":"LeonidAgarth"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"LeonidAgarth"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":7,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"LeonidAgarth"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":10,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"LeonidAgarth"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":14,"author":{"gitID":"LeonidAgarth"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":15,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":16,"author":{"gitID":"LeonidAgarth"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"LeonidAgarth"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"LeonidAgarth"},"content":" * \u003cp\u003e"},{"lineNumber":19,"author":{"gitID":"LeonidAgarth"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"LeonidAgarth"},"content":" *"},{"lineNumber":21,"author":{"gitID":"LeonidAgarth"},"content":" * @see Event#equals(Object)"},{"lineNumber":22,"author":{"gitID":"LeonidAgarth"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"LeonidAgarth"},"content":" */"},{"lineNumber":24,"author":{"gitID":"LeonidAgarth"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {"},{"lineNumber":25,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":26,"author":{"gitID":"LeonidAgarth"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":28,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns true if the list contains an equivalent event as the given argument."},{"lineNumber":30,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean contains(Event toCheck) {"},{"lineNumber":32,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"LeonidAgarth"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":36,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"LeonidAgarth"},"content":"     * Adds a event to the list."},{"lineNumber":38,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if the event to add is a duplicate of an existing event in the list."},{"lineNumber":40,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"LeonidAgarth"},"content":"    public void add(Event toAdd) throws DuplicateEventException {"},{"lineNumber":42,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"LeonidAgarth"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":45,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"LeonidAgarth"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":49,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"LeonidAgarth"},"content":"     * Replaces the event {@code target} in the list with {@code editedEvent}."},{"lineNumber":51,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws DuplicateEventException if the replacement is equivalent to another existing event in the list."},{"lineNumber":53,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws EventNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvent(Event target, Event editedEvent)"},{"lineNumber":56,"author":{"gitID":"LeonidAgarth"},"content":"            throws DuplicateEventException, EventNotFoundException {"},{"lineNumber":57,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(editedEvent);"},{"lineNumber":58,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":59,"author":{"gitID":"LeonidAgarth"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"LeonidAgarth"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"LeonidAgarth"},"content":"            throw new EventNotFoundException();"},{"lineNumber":62,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":64,"author":{"gitID":"LeonidAgarth"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 internalList.contains(editedEvent)) {"},{"lineNumber":65,"author":{"gitID":"LeonidAgarth"},"content":"            throw new DuplicateEventException();"},{"lineNumber":66,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":68,"author":{"gitID":"LeonidAgarth"},"content":"        internalList.set(index, editedEvent);"},{"lineNumber":69,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":71,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"LeonidAgarth"},"content":"     * Removes the equivalent event from the list."},{"lineNumber":73,"author":{"gitID":"LeonidAgarth"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"LeonidAgarth"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":75,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean removeEvent(Event toRemove) throws EventNotFoundException {"},{"lineNumber":77,"author":{"gitID":"LeonidAgarth"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"LeonidAgarth"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"LeonidAgarth"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"LeonidAgarth"},"content":"            throw new EventNotFoundException();"},{"lineNumber":81,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"LeonidAgarth"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":85,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents(UniqueEventList replacement) {"},{"lineNumber":86,"author":{"gitID":"LeonidAgarth"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":89,"author":{"gitID":"LeonidAgarth"},"content":"    public void setEvents(List\u003cEvent\u003e events) throws DuplicateEventException {"},{"lineNumber":90,"author":{"gitID":"LeonidAgarth"},"content":"        requireAllNonNull(events);"},{"lineNumber":91,"author":{"gitID":"LeonidAgarth"},"content":"        final UniqueEventList replacement \u003d new UniqueEventList();"},{"lineNumber":92,"author":{"gitID":"LeonidAgarth"},"content":"        for (final Event event : events) {"},{"lineNumber":93,"author":{"gitID":"LeonidAgarth"},"content":"            replacement.add(event);"},{"lineNumber":94,"author":{"gitID":"LeonidAgarth"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"LeonidAgarth"},"content":"        setEvents(replacement);"},{"lineNumber":96,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":98,"author":{"gitID":"LeonidAgarth"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"LeonidAgarth"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"LeonidAgarth"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"LeonidAgarth"},"content":"    public ObservableList\u003cEvent\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"LeonidAgarth"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":105,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"LeonidAgarth"},"content":"    public Iterator\u003cEvent\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"LeonidAgarth"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":110,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"LeonidAgarth"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"LeonidAgarth"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"LeonidAgarth"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"LeonidAgarth"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"LeonidAgarth"},"content":""},{"lineNumber":117,"author":{"gitID":"LeonidAgarth"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"LeonidAgarth"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"LeonidAgarth"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"LeonidAgarth"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"LeonidAgarth"},"content":"}"}],"authorContributionMap":{"LeonidAgarth":121}}]
