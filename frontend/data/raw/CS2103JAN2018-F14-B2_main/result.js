var resultJson = [{"path":"Unused/ChangeCalendarViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"content":"//@@author Robert-Peng-unused"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"/** code unused as the function is integrated into listappt command"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":" + * Indicates a request to change calendar view"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" + */"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"public class ChangeCalendarViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"    public final Character character;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"    public ChangeCalendarViewEvent(Character character) {"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"        this.character \u003d character;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Robert-Peng":10,"-":11}},{"path":"Unused/CalendarViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.logic.commands.CalendarViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":10,"content":"//@@author Robert-Peng-unused"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"/**code unused as the function is integrated into listappt command"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":" + * Parser for CalendarViewCommand"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":" + */"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"public class CalendarViewCommandParser implements Parser {"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"    public Command parse(String userInput) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"        userInput \u003d userInput.trim();"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"        if (userInput.length() !\u003d 1 || !isValidCommand(userInput)) {"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"        return new CalendarViewCommand(userInput.charAt(0));"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"     * Check if the parameters is either w,d,y or m."},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    private boolean isValidCommand(String str) {"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"        assert(str.length() \u003d\u003d 1);"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"        switch (str.charAt(0)) {"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"            case(\u0027w\u0027):"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"            case(\u0027d\u0027):"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"            case(\u0027y\u0027):"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"            case(\u0027m\u0027):"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"                return true;"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"            default:"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"                return false;"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"}"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":""}],"authorContributionMap":{"null":1,"Robert-Peng":37,"-":6}},{"path":"Unused/CalendarViewCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.logic.commands.CalendarViewCommand;"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"content":"//@@author Robert-Peng-unused"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":" * code unused as the function is integrated into listappt command"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"public class CalendarViewCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"    public void changeCalendarView() {"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" d\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" w\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" m\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" y\", CalendarViewCommand.MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandSuccess(CalendarViewCommand.COMMAND_WORD + \" q\","},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Performs verification for command to calendarView"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private void assertCommandSuccess(String command, String message) {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        executeCommand(command);"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        assertEquals(getResultDisplay().getText() , message);"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"null":1,"Robert-Peng":19,"wynonaK":10,"-":4}},{"path":"docs/team/Peng Xuan Chang.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"\u003d Peng Xuanchang - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d PROJECT: Medeina"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"Medeina is a desktop application designed to assist veterinarians and their assistants in managing contacts, pet patient details, and appointments."},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"The app utilises Command Line Interface (CLI), thus user will interact with the app using mostly commands."},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"Medeina is written in Java, and its graphical user interface (GUI) is created using Javafx."},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"This application was built upon an existing code base for an address book for the module CS2103T Software Engineering, and has around 20kLoC."},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"* *Major enhancement*: Integrating CalenderFX as framework for Calender view to show appointments, and and create new Panel to list petPatients"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"** What it does: allows the user to list out current PetPatients in the panel, and manage appointments using calendar view."},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"** Justification: This feature improves the product significantly because user is now able to see Owners, PetPatients, and appointments on the same page."},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands. It has greatly changed the original GUI."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"* *Minor enhancement*: Added NRIC field in Owner’s profile"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"** What it does: The NRIC field will help the veterinarians and their assistants to better locate an owner using their unique ID."},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"** Justification: The feature helps user to avoid confusion when there are patients who share the same name. It also helps to tie pets to a certain user. When pets have duplicated names, they can be differentiated by their tagged NRICs."},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/functional/Robert-Peng.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/test/Robert-Peng.md[Test code]] _{give links to collated code files}_"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"*** Consistently contributed to achieve weekly milestone from `v1.1` - `v1.5rc`."},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"*** Created tabs for both OwnerList and PetPatientList  (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/196[#196])"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"*** Improve *List* command to list out both owners and petPatients (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/143[#143])"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"*** Assign different colors to different tags (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/14[#14])"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"*** Implemented calendar switch view command which was integrated later into `listappt` command (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/179[#179])"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"*** Create tab for both contact list and pet patient list (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/196[#196])"},{"lineNumber":43,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"*** Adding prefaces and changing language in the User Guide (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/70[#70])"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"*** Adding screenshot of command results in the User Guide (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/151[#151])"},{"lineNumber":46,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W11-B3/main/issues/136[1], https://github.com/CS2103JAN2018-W11-B3/main/issues/130[2], https://github.com/CS2103JAN2018-W11-B3/main/issues/126[3])"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"include::../UserGuide.adoc[tag\u003dGUI]"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"include::../UserGuide.adoc[tag\u003dlistcommand]"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"include::../DeveloperGuide.adoc[tag\u003dUIcomponent]"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"include::../DeveloperGuide.adoc[tag\u003dListPets]"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"include::../DeveloperGuide.adoc[tag\u003dcalendar]"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":""}],"authorContributionMap":{"Robert-Peng":36,"-":40}},{"path":"docs/team/Chia Le Jing.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"\u003d Chia Le Jing - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"\u003d\u003d PROJECT: Medeina"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"Medeina is a desktop application, designed for veterinarians and their assistants to better manage their contacts, pet patient and appointments details. Users interact with Medeina mainly through the Command Line Interface (CLI). A Graphical User Interface (GUI) created with JavaFX is also provided so that users can visualise the data easily. Medeina is written in Java, and has about 20 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"* *Major enhancement*: Implemented `edit` command"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"** What it does: Allows the user to edit contacts, pet patients and appointments in Medeina. Relevant dependencies are also resolved as well. For example, if the user wishes to edit the name of a pet patient, the pet patient\u0027s name entry under the owner and also its relevant list of appointments will be updated to reflect the new name."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"** Justification: Editing the details of contacts, pet patients and appointments is critical to the workflow of our users. This is because certain details might have been keyed in wrongly at the time of entry, and our users will want to modify these details to ensure the accuracy of their data in Medeina. The resolution of dependencies is also vital to the operation of Medeina, as it gives users the freedom to edit contacts, pet patients and appointments as they require without upsetting the relations between these objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"* *Minor enhancement*: Wrote PetPatient and all its relevant classes (PetPatientName, Species, Breed, Colour and BloodType). Also implemented relevant storage functions for PetPatient objects."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/functional/chialejing.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/test/chialejing.md[Test code]]"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"*** Managed release `v1.5rc` (1 release) on GitHub"},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"*** Sourced for new application icon and updated Medeina accordingly: https://github.com/CS2103JAN2018-F14-B2/main/pull/86[#86]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"*** Ensured that important and warning icons are reflected properly in the User Guide: https://github.com/CS2103JAN2018-F14-B2/main/pull/162[#162]"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"*** Authored the Command Summary section to make User Guide more user friendly: https://github.com/CS2103JAN2018-F14-B2/main/pull/152[#152]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"*** Reported bugs and suggestions for other teams in the class (Examples:  https://github.com/CS2103JAN2018-T09-B3/main/issues/193[1], https://github.com/CS2103JAN2018-T09-B3/main/issues/180[2])"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"include::../UserGuide.adoc[tag\u003deditcommandUG]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"include::../DeveloperGuide.adoc[tag\u003deditcommandDG]"}],"authorContributionMap":{"chialejing":16,"-":33}},{"path":"docs/team/Wynona Kaan.adoc","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"\u003d Wynona Kaan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d PROJECT: Medeina"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"Medeina is a desktop application designed for veterinarians and their assistants to manage contacts, pet patients and appointments. Users mainly interact with Medeina using a Command Line Interface. Medeina has a Graphical User Interface created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"* *Major enhancement*: added *the ability to delete and force delete*"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"** What it does: Can delete appointments, pet patients and contacts. Additionally, forcefully deleting pet patients and owners (and its dependencies)."},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"** Justification: Users can delete obsolete information. Users does not need to delete every dependency manually, but can just use the force option to immediately delete all dependencies."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"** Highlights: Implementation for the force option was difficult as it required safe deletion of dependencies before an element that has dependencies can be deleted."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"* *Major enhancement*: added *the ability find owners, pet patients and multiple prefixes of information*"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"** What it does: Finding can be done by including an `OPTION` (accepted `-o` for owner, `-p` for pet patients) and added with any amount of supported `PREFIX` with any amount of keywords under each `PREFIX`."},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"** Justification: This feature improves the product significantly because a user can find for vital information. In addition, the user can find more specific information by adding on prefixes and more keywords."},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"** Highlights: The find command can be as specific as `find -p n/NAME s/SPECIES b/BREED c/COLOUR bt/BLOOD_TYPE t/TAGS` to find as specific information as possible. This required understanding of the prior FindCommand which made heavy use of Java 8 Predicates."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"* *Minor enhancement*: added the capability to store appointments in the .xml file."},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"* *Minor enhancement*: added the capability list appointments of any date, in all 4 views allowed in CalendarFX."},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/functional/wynonaK.md[Functional code]] [https://github.com/CS2103JAN2018-F14-B2/main/blob/master/collated/test/wynonaK.md[Test code]]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"*** Managed releases `v1.4` (1 release) on GitHub, Consistently contributed to achieve weekly milestone from `v1.1` - `v1.5rc`."},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"** Documentation"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"*** Improved user-friendliness in the User Guide by adding prefaces, Touched up on `v2.0` upcoming functions in the User Guide. (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/79[#79])"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"*** Updated the Developer Guide with new images to demonstrate the Model Component, as well as update obsolete information in Medeina. (Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/243[#243], Pull request https://github.com/CS2103JAN2018-F14-B2/main/pull/5[#5])"},{"lineNumber":38,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"*** Reported bugs and suggestions for other teams (Example: https://github.com/CS2103JAN2018-W15-B4/main/issues/202[#202])"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"|_Given below are some sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"include::../UserGuide.adoc[tag\u003dfind]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"|_Given below are some sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"include::../DeveloperGuide.adoc[tag\u003dlistappt]"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"include::../DeveloperGuide.adoc[tag\u003ddelete]"},{"lineNumber":58,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"wynonaK":27,"-":31}},{"path":"Unused/CalendarViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"content":"//@@author Robert-Peng-unused"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"/**code unused as the function is integrated into listappt command"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":" + * Command to switch between calendar views such as day, week, month and year"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":" + */"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"public class CalendarViewCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"    public static final String COMMAND_ALIAS \u003d \"cal\";"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": To change the calendar view between Day, \""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"        + \"Week, Month, and Year \\n\""},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"        + COMMAND_ALIAS + \": Short for calendar. \\n\""},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"        + \"Parameter: \\n\""},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"        + \"Day view: d\\n\""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"        + \"Week view: w\\n\""},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"        + \"Month view: m\\n\""},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"        + \"Year view: y\\n\";"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"View changed.\";"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"    private Character arg;"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    public CalendarViewCommand(Character c) {"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"        this.arg \u003d c;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewEvent(arg));"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"null":1,"Robert-Peng":29,"-":8}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"Medeina is developed by the https://github.com/CS2103JAN2018-F14-B2[F14-B2] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":10,"author":{"gitID":"-"},"content":"The development of the Medeina application is our project for CS2103T Software Engineering module."},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Cheong Jie Ning Jacqueline"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::aquarinte.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"{empty}[http://github.com/aquarinte[github]] [\u003c\u003cJacqueline Cheong#, portfolio\u003e\u003e]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":19,"author":{"gitID":"-"},"content":"Responsibilities: Logic component, Documentation, Deliverables"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Chia Le Jing"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"image::lejing.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"{empty}[https://github.com/chialejing[github]] [\u003c\u003cChia Le Jing#, portfolio\u003e\u003e]"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"Responsibilities: Storage component, Documentation, Deliverables"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Wynona Kaan Syn Yarn"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"image::wynonaK.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"{empty}[https://github.com/wynonaK[github]] [\u003c\u003cWynona Kaan#, portfolio\u003e\u003e]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Responsibilities: Model component, Deliverables"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d Peng Xuanchang"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"image::Robert_Peng.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"{empty}[http://github.com/Robert-Peng[github]] [\u003c\u003cPeng Xuan Chang#, portfolio\u003e\u003e]"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Responsibilities: UI Component, Deliverables"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"chialejing":2,"Robert-Peng":2,"wynonaK":5,"-":39}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-F14-B2/main[image:https://travis-ci.org/CS2103JAN2018-F14-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F14-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F14-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://circleci.com/gh/CS2103JAN2018-F14-B2/main[image:https://circleci.com/gh/CS2103JAN2018-F14-B2/main.svg?style\u003dsvg[CircleCi]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Medeina is a desktop application developed for **veterinarians and their assistants** to manage contacts, pet patient list and appointments seamlessly."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"It is a specialized application that provides **dual functionality** of an address book and a task manager, to assist veterinarians and their assistants in their day-to-day practices."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"Medeina is written in the Java programming language and conforms to the Object-Oriented Programming (OOP) style. This is to ensure that future upgrades can be integrated easily."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Key Features"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Customized appointment tracking:: Medeina offers a clean and organized user interface to track your appointments easily. You can expect an overview of upcoming appointments, to detailed information on pet patient involved and point of contact for an appointment."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Easily manage dependencies amongst contacts, pet patient list and appointments:: You no longer need to worry about mistyping a pet\u0027s name and/or owner\u0027s information when making a new appointment. Medeina will check for you."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"Simple and intuitive user commands:: Medeina keeps to simple and intuitive commands to make things easy for you. Be it adding an appointment, new contact or new patient, you just need to remember one command: `add`. For users familiar with Command Line Interface (CLI) or Windows command prompt, rejoice! You will find much familiarity in Medeina\u0027s list of commands."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Convenient tagging:: Use tags to easily distinguish different types of contacts, pet patients and appointments at a glance."},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Runs on all mainstream OS:: Hassle-free. Get Medeina now and use it today."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* Original source: https://github.com/se-edu/addressbook-level4[Address Book Level 4] by https://github.com/se-edu/[SE-EDU]"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"* Application icon: Made by http://www.freepik.com[Freepik] from http://www.flaticon.com[FLATICON]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"chialejing":1,"-":46}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleOwnerData() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSamplePetData() {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        PetPatient[] expectedList \u003d SampleDataUtil.getSamplePetPatients();"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        assertListMatching(getPetPatientListPanel(), expectedList);"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    /** unable to be done until appointments can be viewed."},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleAppointmentData() {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        Appointment[] expectedList \u003d SampleDataUtil.getSampleAppointments();"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        assertListMatching(getAppointmentListPanel(), expectedList);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":15,"-":50}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":":warning-caption: :warning:"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":":important-caption: :stop_sign:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `Team F14-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Are you a veterinarian or a veterinary assistant in need of help to manage growing number of contacts, never-ending list of pet patients and floods of appointments? Are you having nightmares over the sheer amount of data to catalogue? Are you struggling to find the right pet patient\u0027s details and owner\u0027s contact amongst a plethora of paper records for each of your appointment?"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Medeina is finally here to solve your problems."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d What is Medeina"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"Medeina is a specialized desktop application designed to provide veterinarians and their assistants with better management over contacts, pet patient details and appointments. It serves as both an address book and a task manager."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you are comfortable working with a Command Line Interface (CLI), then Medeina is perfect for you. Medeina keeps to simple and intuitive commands that even those who are unfamiliar with CLI can pick it up easily. Medeina also comes with a clean and organized Graphical User Interface (GUI) to present information in the most optimal way for your perusal."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"Medeina, your all-in-one solution to curb your data nightmare."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Using this Guide"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"This document provides detailed information pertaining to Medeina\u0027s set-up and usage instructions for the various features it offers. The user guide can be accessed any time through the `help` command in Medeina."},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do take note of the following colours and their representation, as they will be used in this guide to better illustrate Medeina\u0027s commands."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":".Colour representation"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image::colours.png[width\u003d\"300\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"If you have already set up Medeina, head on to \u003c\u003cCLI\u003e\u003e. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"If you are already familiar with Medeina\u0027s Command Line Interface (CLI), head on to \u003c\u003cCommands\u003e\u003e."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"// tag::GUI[]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"To successsfully install and run Medeina, you need to:"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Ensure that you have Java version `1.8.0_60` or later installed on your Computer."},{"lineNumber":54,"author":{"gitID":"-"},"content":"+"},{"lineNumber":55,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. This app will not work with earlier versions of Java 8. +"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"You can download the latest version of Java link:https://java.com/en/download//[here]."},{"lineNumber":58,"author":{"gitID":"-"},"content":"+"},{"lineNumber":59,"author":{"gitID":"-"},"content":".  Download the latest `medeina.jar` link:{repoURL}/releases[here]."},{"lineNumber":60,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for Medeina."},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":".  Double-click the file to start the app. You should see the GUI (Graphical User Interface) in a few seconds."},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":".Medeina\u0027s GUI"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"image::Interface.png[width\u003d\"1000\"]"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"// end::GUI[]"},{"lineNumber":67,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"// tag::cliUG[]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"[[CLI]]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d Command Line Interface (CLI)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"You will be interacting with Medeina mainly through the CLI. This section will help you to get familiarize with Medeina\u0027s CLI in no time."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Command format used in Medeina"},{"lineNumber":75,"author":{"gitID":"-"},"content":"The following image illustrates the command format used in Medeina. You can refer to the table below for more information."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":".Command format"},{"lineNumber":78,"author":{"gitID":"-"},"content":"image::commandSyntax.png[width\u003d\"600\"]"},{"lineNumber":79,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":"| Term"},{"lineNumber":84,"author":{"gitID":"-"},"content":"| Examples"},{"lineNumber":85,"author":{"gitID":"-"},"content":"| Notes"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":".^a|Command word"},{"lineNumber":88,"author":{"gitID":"-"},"content":"| `add`, `edit`, `clear`, `help`, `undo`"},{"lineNumber":89,"author":{"gitID":"-"},"content":"a| * Medeina\u0027s syntax starts with a command word."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":".^a|Alias"},{"lineNumber":92,"author":{"gitID":"-"},"content":"| `a`, `ed`, `cls`, `h`, `ud`"},{"lineNumber":93,"author":{"gitID":"-"},"content":"a| * Aliases are short-forms that can be used to replace command words."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":".^a|Options"},{"lineNumber":96,"author":{"gitID":"-"},"content":"| `**-o**`, `**-p**`, `**-a**`, `**-fo**`, `**-fp**`, `**-y**`"},{"lineNumber":97,"author":{"gitID":"-"},"content":"a| * Options are used in `add`, `edit`, `find`, `delete` and `listappt` commands."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* You can specify them to execute variants of a command. For example in figure 2, `**-p**` option denotes editing a pet patient."},{"lineNumber":99,"author":{"gitID":"-"},"content":"* If there are multiple options used in a command, the order must be preserved."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":".^a|Index"},{"lineNumber":102,"author":{"gitID":"-"},"content":"| `1`, `2`, any number"},{"lineNumber":103,"author":{"gitID":"-"},"content":"a| * Index is used to refer to a particular contact, pet patient or appointment that you would like to `edit` or `delete`."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* Please refer to figure 1 to find out where indexes are found."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":".^a|Prefixes"},{"lineNumber":107,"author":{"gitID":"-"},"content":"| `n/`, `p/`, `nr/`, `e/`, `s/`, `t/`"},{"lineNumber":108,"author":{"gitID":"-"},"content":"a| * Prefixes mark the start of parameters."},{"lineNumber":109,"author":{"gitID":"-"},"content":"* They indicate the type of parameter expected by Medeina e.g. `nr/` will expect NRIC as parameter, and `e/` will expect an email address as parameter."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":".^a|Parameters"},{"lineNumber":112,"author":{"gitID":"-"},"content":"| `Persian`, `ginger`, `asthma` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":" +"},{"lineNumber":114,"author":{"gitID":"-"},"content":"In `nr/NRIC`, `NRIC` represents the parameter"},{"lineNumber":115,"author":{"gitID":"-"},"content":"a| * Parameters are values supplied by the user."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* They are represented by words in upper case."},{"lineNumber":117,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":".^a|Tag"},{"lineNumber":120,"author":{"gitID":"-"},"content":"| Any parameter marked by `t/` prefix"},{"lineNumber":121,"author":{"gitID":"-"},"content":"a| * In this guide and also in error messages, when tag is bounded in square brackets e.g. `n/NAME [t/TAG]`, it means that tag is optional. You can specify `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* `[t/TAG]...` denotes multiple tags can be supplied by the user e.g. `t/friend`, `t/friend t/family` etc."},{"lineNumber":123,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"// tag::autocompleteUG[]"},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete `[Since v1.3]`"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":".Medeina\u0027s autocomplete for command words, prefixes and options"},{"lineNumber":129,"author":{"gitID":"-"},"content":"image::autocomplete.png[width\u003d\"500\"]"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Medeina comes with an autocomplete feature in the CLI to help you manage your contacts, pet patients and appointments faster."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* Medeina supports autocomplete for command words, options, prefixes, and parameters such as tags, NRIC, pet patient name, species, breed, colour and blood type."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* Autocomplete will provide suggestions for NRIC when you are adding a new pet patient or new appointment, assigning pet patient under another contact using the edit command, and finding a contact by NRIC."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* Autocomplete will provide suggestions for pet patient name when you are adding an appointment."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* Suggestions for tags, species, breed, colour and blood type will be shown when their corresponding prefixes are detected."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Autocomplete matching is **case-insensitive** e.g. you will see autocomplete suggestions \u0027edit\u0027 and \u0027exit\u0027 when you type \u0027E\u0027."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* You can use kbd:[Up] and kbd:[Down], or kbd:[Tab] to traverse through the autocomplete suggestions in the drop-down menu."},{"lineNumber":140,"author":{"gitID":"-"},"content":"* Autocomplete shows up to a maximum of 13 suggestions in the drop-down menu."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Press kbd:[Enter] to select an autocomplete suggestion in the drop-down menu."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":145,"author":{"gitID":"-"},"content":"Autocomplete for options, prefixes and parameters works only for commands that require them: `add`, `edit`, `find`, `delete` and `listappt`."},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":150,"author":{"gitID":"-"},"content":"You can toggle autocomplete on/off using kbd:[F2] when the command box is focused."},{"lineNumber":151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":152,"author":{"gitID":"-"},"content":"// end::autocompleteUG[]"},{"lineNumber":153,"author":{"gitID":"-"},"content":"// end::cliUG[]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[[Commands]]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d Medeina\u0027s Commands"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help` or `h`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"If you are feeling lost, enter `help` or `h` in Medeina\u0027s command box, or press kbd:[F1] to bring up this user guide document in a pop-up window."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"// tag::addcommandUG[]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a contact, pet patient or appointment : `add` or `a` `[Since v1.2]`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"If you want to add contact, pet patient, and/or appointment to Medeina, simply use the `add` or `a` command."},{"lineNumber":170,"author":{"gitID":"-"},"content":"You can learn more about this command in the following table:"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":173,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":174,"author":{"gitID":"-"},"content":"| To add"},{"lineNumber":175,"author":{"gitID":"-"},"content":"| Command syntax"},{"lineNumber":176,"author":{"gitID":"-"},"content":"| Notes"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":".^a|Contact"},{"lineNumber":179,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...`"},{"lineNumber":180,"author":{"gitID":"-"},"content":"a| * Tag is optional."},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":".^| Pet patient"},{"lineNumber":183,"author":{"gitID":"-"},"content":"| `add **-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]... **-o** nr/NRIC`"},{"lineNumber":184,"author":{"gitID":"-"},"content":"a| * NRIC must belong to an existing contact, in order to assign the new pet patient under a contact."},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Tag is optional."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".^| Appointment"},{"lineNumber":188,"author":{"gitID":"-"},"content":"| `add **-a** d/YYYY-MM-DD HH:MM r/REMARK t/TAG...` +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"`**-o** nr/NRIC **-p** n/PET_PATIENT_NAME`"},{"lineNumber":190,"author":{"gitID":"-"},"content":"a| * NRIC must belong to an existing contact."},{"lineNumber":191,"author":{"gitID":"-"},"content":"* PET_PATIENT_NAME must belong to an existing pet patient under the contact with NRIC."},{"lineNumber":192,"author":{"gitID":"-"},"content":"* The duration of each appointment is 30 minutes by default. Take note that HH:MM must be at least 30 minutes before/after appointments on the same day."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* Type \u0027-\u0027 or \u0027nil\u0027 if you have no REMARK to record."},{"lineNumber":194,"author":{"gitID":"-"},"content":"* Compulsory tag (minimum 1)."},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".^| All of the above"},{"lineNumber":197,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...` +"},{"lineNumber":198,"author":{"gitID":"-"},"content":"`**-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]...` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"`**-a** d/YYYY-MM-DD HH:MM r/REMARK [t/TAG]...`"},{"lineNumber":200,"author":{"gitID":"-"},"content":"a| * This command adds a new contact, a new pet patient, and a new appointment simultaneously."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* The new pet patient is assigned under the new contact."},{"lineNumber":202,"author":{"gitID":"-"},"content":"* The new appointment is made for the pet patient."},{"lineNumber":203,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"-"},"content":"Options are in order. For example, the add command for pet patient will have an error message if the option order is not preserved e.g. `add **-o** nr/CONTACT_NRIC **-p** ...`"},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"image::add_examples.PNG[width\u003d\"800\"]"},{"lineNumber":211,"author":{"gitID":"-"},"content":"// end::addcommandUG[]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":".**Copy \u0026 paste to try out the above examples**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"----"},{"lineNumber":215,"author":{"gitID":"-"},"content":"add -o n/Viktor Nikiforov p/91237890 e/v_nikiforov@gmail.com a/27 Skating Place nr/F0012345Z"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"add -p n/Makkachin s/dog b/poodle c/brown bt/DEA-1.1 -o nr/F0012345Z"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"add -a d/2018-05-27 14:30 r/had poor appetite the last 3 days t/vaccination t/checkup -o nr/F0012345Z"},{"lineNumber":220,"author":{"gitID":"-"},"content":" -p n/Makkachin"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"add -o n/Jacqueline p/65123456 e/jacq@gmail.com a/96 Computing Drive, #02-03 nr/S1234567G -p n/jewel"},{"lineNumber":223,"author":{"gitID":"-"},"content":" s/cat b/persian c/calico bt/AB -a d/2018-12-31 12:30 r/nil t/surgery t/sterilization"},{"lineNumber":224,"author":{"gitID":"-"},"content":"----"},{"lineNumber":225,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"Robert-Peng"},"content":"// tag::listcommand[]"},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all contacts : `list` or `ls`"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"Robert-Peng"},"content":"If you want to list all contacts and pet patients stored in Medeina for a better overview, enter `list` or `ls` in the command box."},{"lineNumber":231,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":".`list` command"},{"lineNumber":233,"author":{"gitID":"Robert-Peng"},"content":"image::List_Command.PNG[width\u003d\"500\"]"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":235,"author":{"gitID":"Robert-Peng"},"content":"// end::listcommand[]"},{"lineNumber":236,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":237,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"chialejing"},"content":"// tag::editcommandUG[]"},{"lineNumber":240,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Editing a contact, pet patient or appointment : `edit` or `ed` `[Since v1.4]`"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"chialejing"},"content":"If you want to edit a contact, pet patient or an appointment in Medeina, simply use the `edit` or `ed` command."},{"lineNumber":243,"author":{"gitID":"-"},"content":"You can learn more about this command in the following table:"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":247,"author":{"gitID":"chialejing"},"content":"| To edit"},{"lineNumber":248,"author":{"gitID":"chialejing"},"content":"| Command syntax"},{"lineNumber":249,"author":{"gitID":"chialejing"},"content":"| Notes"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"chialejing"},"content":".^a|Contact"},{"lineNumber":252,"author":{"gitID":"chialejing"},"content":"| `edit **-o** INDEX [n/CONTACT_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]...`"},{"lineNumber":253,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":254,"author":{"gitID":"chialejing"},"content":"* The command edits the contact at the specified `INDEX`."},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"* `INDEX` refers to the index number shown in the **latest** contact listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":256,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":257,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* You can remove all of the contact\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"chialejing"},"content":".^| Pet Patient"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"| `edit **-p** INDEX [n/PET_PATIENT_NAME] [s/SPECIES] [b/BREED] [c/COLOR] [bt/BLOOD_TYPE] [nr/OWNER_NRIC] [t/TAG]...`"},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"* The command edits the pet patient at the specified `INDEX`."},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"* `INDEX` refers to the index number shown in the **latest** pet patient listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":265,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the pet patient will be removed i.e adding of tags is not cumulative."},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"* You can remove all of the pet patient\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":"* OWNER_NRIC must belong to an existing contact."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":".^| Appointment"},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"| `edit **-a** INDEX [d/YYYY-MM-DD HH:MM] [r/REMARK] [t/TAG]...`"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"a| * At least one of the optional fields must be provided."},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"* The command edits the appointment at the specified `INDEX`."},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"* `INDEX` refers to the index number shown in the **latest** appointment listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":275,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":"* When editing tags, the existing tags of the appointment will be removed i.e adding of tags is not cumulative."},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"* You can remove all of the appointment\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"* The duration of all appointments is 30 minutes by default. Please ensure that the new HH:MM must be at least 30 minutes before / after other appointments on the same day, as concurrent appointments are NOT allowed."},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":"* Modification of owner\u0027s NRIC and / or pet patient\u0027s name is NOT allowed. To edit these fields, please refer to the rows above for more details."},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"image::edit_examples.PNG[width\u003d\"800\"]"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":".**Copy \u0026 paste to try out the above exmaples**"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"edit -o 1 p/91234567 e/alexyeoh@anotherexample.com"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"edit -o 2 n/Betsy Crowers t/"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"edit -p 2 n/Makkachin t/"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"edit -a 3 d/2018-06-04 12:30"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"----"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":"// end::editcommandUG[]"},{"lineNumber":297,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"// tag::find[]"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Find contacts or pet patients: `find` or `f` `[Since v1.4]`"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"You can use `find` or `f` to do the following :"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"| To find"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"| Command syntax"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"| Notes"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":".^a|Contact"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"| `find **-o** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"a| * Currently accepted individual `PREFIX` are `n/NAME`, `nr/NRIC`, `t/TAGS`."},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"* The above `PREFIX` can be used in any combination to find more specific contacts."},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"* Pets of displayed contacts will also be displayed."},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"* The input in brackets are optional, and can be added if more specific information is required."},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":".^| Pet patient"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"| `find **-p** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"a| * Currently accepted individual `PREFIX` are `n/PET_NAME`, `s/SPECIES`, `b/BREED`, `c/COLOR`, `bt/BLOOD_TYPE`, `t/PET_TAGS`."},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"* The above `PREFIX` can be used in any combination to find more specific pet patients."},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"* Contacts of displayed pets will also be displayed."},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"* The input in brackets are optional, and can be added if more specific information is required."},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"// end::find[]"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"****"},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"* The search is case insensitive. e.g `-o n/alex` will match `Alex`."},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"* The order of the keywords does not matter. e.g. `-o n/Yeoh Alex` will match `Alex Yeoh`."},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"* Only full words will be matched e.g. `-o n/Al` will not match `Alex`."},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":"* Data matching at least one keyword within a prefix will be returned. e.g. `-o n/Alex Yu` will return `Alex Yeoh`, `Bernice Yu`."},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"* Only data matching at least one keyword in all prefixes will be returned. e.g. `-o n/Alex Yu nr/S0123456B` will return `Alex Yeoh` with the nric `S0123456B`."},{"lineNumber":335,"author":{"gitID":"-"},"content":"****"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":"image::find_examples.PNG[width\u003d\"800\"]"},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":".**Copy \u0026 paste to try out the above examples**"},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"find -o n/Alex Bernice Charlotte t/Owner"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"find -o nr/S0123456B T0123456C t/Owner"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":"find -p s/Dog Cat bt/DEA 4"},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":"find -p s/Dog b/Pug c/Golden Brown"},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"find -p s/Cat b/Maine Coon t/Aggressive"},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":"find -p n/Chae s/Cat bt/A"},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":356,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"// tag::listappt[]"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Listing appointments in a specified view requested: `listappt` or `la` `[Since v1.5rc]`"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"You can use `listappt` or `la` to do the following :"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":365,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"| To list appointments"},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"| Command syntax"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"| Notes"},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":".^a|Year"},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":"| `listappt -y [YEAR]`"},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":"a| * The command will list appointments based on the specified `YEAR` in the year view of CalendarFX in YYYY format."},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":"* The input in brackets `[YEAR]` is optional. The command runs without this input, and this will switch the view to the year view of today\u0027s date."},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":"* The command will only run for past `YEAR` keyword if there exists an appointment that was made in that year."},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":".^| Month"},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"| `listappt -m [YEAR-MONTH/MONTH]`"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":"a| * The command will list appointments based on the specified `YEAR-MONTH` in the month view of CalendarFX in YYYY-MM format."},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":"* The input in brackets `[MONTH]` is optional. The command runs without this input, and this will switch the view to the month view of today\u0027s date."},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"* The command can run with only the `MONTH` keyword without the `YEAR` keyword in MM format. This will list appointments of the current year with the specified `MONTH`."},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"* The command will only run for past `YEAR-MONTH` keyword if there exists an appointment that was made in that year."},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":".^| Week"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":"| `listappt -w [DATE]`"},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"a| * The command will list appointments based on the specified `DATE` in the week view of CalendarFX in YYYY-MM-DD format."},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"* The command can run without any `DATE` keyword. This will switch the view to the week view of today\u0027s date."},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":"* The command will only run for past `DATE` keywords if there exists an appointment that was made in that year."},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":".^| Day"},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"| `listappt -d [DATE]`"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":"a| * The command will list appointments based on the specified `DATE` in the day view of CalendarFX in YYYY-MM-DD format."},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"* The command can run without any `DATE` keyword. This will switch the view to the day view of today\u0027s date."},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"* The command will only run for past `DATE` keywords if there exists an appointment that was made in that year."},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"// end::listappt[]"},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":".**Copy \u0026 paste to try out the examples**"},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":"To list appointments in 2018 in year view:"},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":"listappt -y 2018"},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"To list appointments in January 2018 in month view:"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":"listappt -m 2018-01"},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":"To list appointments of the current month in month view:"},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":"listappt -m"},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"To list appointments in 31st December 2018 in week view:"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":"listappt -w 2018-12-31"},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"To list appointments in 1st January 2018 in day view:"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"listappt -d 2018-01-01"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"// tag::delete[]"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Deleting a owner, pet patient or appointment : `delete` or `d` `[Since v1.3]`"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"You can use `delete` or `d` to do the following :"},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"[width\u003d\"100%\", cols\u003d\"15%,\u003c45%a,\u003c40%\", options\u003d\"header\"]"},{"lineNumber":425,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":"| To delete"},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"| Command syntax"},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"| Notes"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":".^a|Contact"},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"| `delete **-[f]o** INDEX`"},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the contact at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest contact listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"* The command prefix `-o` will not delete a contact if there are still pet and appointment dependencies that rely on it. Use `-fo` to forcefully delete a contact and its relevant dependencies."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":".^| Pet patient"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"| `delete **-[f]p** INDEX`"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the pet patient at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":439,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest pet patient listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"* The command prefix `-p` will not delete a pet patient if there are still appointment dependencies that rely on it. Use `-fp` to forcefully delete a pet patient and its relevant dependencies."},{"lineNumber":441,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":".^| Appointment"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":"| `delete **-a** INDEX`"},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"a| * The command will delete the appointment at the specified `INDEX` listed by the `list` or `find` command."},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"* The index refers to the index number shown in the latest appointment listing. The index *must be a positive integer* 1, 2, 3, etc ..."},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":"// end::delete[]"},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"image::delete_examples.PNG[width\u003d\"800\"]"},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":".**Copy \u0026 paste to try out the above examples**"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":"delete -a 1"},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"delete -p 1"},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"delete -o 1"},{"lineNumber":461,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"delete -fo 1"},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":464,"author":{"gitID":"wynonaK"},"content":"delete -fp 1"},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":466,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history` or `his`"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"If you would like to check what commands have been performed on Medeina for verification purposes, enter `history` or `his` in the command box. +"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"Robert-Peng"},"content":"image::History_Command.PNG[width\u003d\"800\"]"},{"lineNumber":476,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":478,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":479,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":480,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":485,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo` or `ud`"},{"lineNumber":486,"author":{"gitID":"Robert-Peng"},"content":"When you realise you\u0027ve entered a command by mistake (e.g. accidentally deleted a pet patient) and want to undo that action? Simply enter `undo` or `ud` in the command box."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":489,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":490,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify Medeina\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":491,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"**Examples:**"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"Robert-Peng"},"content":".Before any command"},{"lineNumber":496,"author":{"gitID":"Robert-Peng"},"content":"image::List_Command.PNG[width\u003d\"500\"]"},{"lineNumber":497,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"`ud` (The command will reverse the `delete **-fo** 1` command) +"},{"lineNumber":501,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":502,"author":{"gitID":"Robert-Peng"},"content":".After `delete **-fo** 1` and `list`. Note that Alex Yeoh and his pet Ane have been deleted."},{"lineNumber":503,"author":{"gitID":"Robert-Peng"},"content":"image::After_Delete.PNG[width\u003d\"500\"]"},{"lineNumber":504,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"Robert-Peng"},"content":".After `ud` Alex and Ane are back in the lists."},{"lineNumber":507,"author":{"gitID":"Robert-Peng"},"content":"image::After_Undo.PNG[width\u003d\"500\"]"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"* `find **-o** n/Joe` +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":512,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":".`undo` fails"},{"lineNumber":515,"author":{"gitID":"Robert-Peng"},"content":"image::Undo_Fail.PNG[width\u003d\"500\"]"},{"lineNumber":516,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":519,"author":{"gitID":"-"},"content":"`undo` (This command reverses `clear`) +"},{"lineNumber":520,"author":{"gitID":"-"},"content":"`ud` (This command reverses the `delete **-fo** 1`) +"},{"lineNumber":521,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":522,"author":{"gitID":"Robert-Peng"},"content":".Executed `delete **-fo** 1` and `clear`. Medeina\u0027s data has now been erased."},{"lineNumber":523,"author":{"gitID":"Robert-Peng"},"content":"image::After_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":524,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"Robert-Peng"},"content":".After `undo`. `clear` command has been undone."},{"lineNumber":527,"author":{"gitID":"Robert-Peng"},"content":"image::Undo_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":528,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"Robert-Peng"},"content":".After `ud`. `delete **-fo** 1` command has been undone. Alex and Ane were added back."},{"lineNumber":531,"author":{"gitID":"Robert-Peng"},"content":"image::After_Undo.PNG[width\u003d\"500\"]"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo` or `rd`"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"Robert-Peng"},"content":"What happens when you accidentally typed `undo` command and want to re-enter that same command? +"},{"lineNumber":538,"author":{"gitID":"Robert-Peng"},"content":"Simply type `redo` or `rd`, this will reverse the most recent `undo` command."},{"lineNumber":539,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"Robert-Peng"},"content":".Before any command"},{"lineNumber":544,"author":{"gitID":"Robert-Peng"},"content":"image::List_Command.PNG[width\u003d\"500\"]"},{"lineNumber":545,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":546,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":548,"author":{"gitID":"-"},"content":"`undo` (This command reverses `delete **-fo** 1`) +"},{"lineNumber":549,"author":{"gitID":"-"},"content":"`redo` (This command reapplies `delete **-fo** 1`) +"},{"lineNumber":550,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":551,"author":{"gitID":"Robert-Peng"},"content":".After `delete **-fo** 1` + `undo`. Alex and pet Ane were deleted then added back."},{"lineNumber":552,"author":{"gitID":"Robert-Peng"},"content":"image::After_Undo.PNG[width\u003d\"500\"]"},{"lineNumber":553,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":554,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":555,"author":{"gitID":"Robert-Peng"},"content":".After `redo`. `delete **-fo** 1` was applied again. Alex and pet Ane were once again deleted."},{"lineNumber":556,"author":{"gitID":"Robert-Peng"},"content":"image::Redo_Success.PNG[width\u003d\"500\"]"},{"lineNumber":557,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":559,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":560,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":".`redo` fails"},{"lineNumber":563,"author":{"gitID":"Robert-Peng"},"content":"image::Redo_Fail.PNG[width\u003d\"500\"]"},{"lineNumber":564,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"* `delete **-fo** 1` +"},{"lineNumber":566,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":567,"author":{"gitID":"-"},"content":"`ud` (This command reverses `clear`) +"},{"lineNumber":568,"author":{"gitID":"-"},"content":"`ud` (This command reverses `delete 1`) +"},{"lineNumber":569,"author":{"gitID":"-"},"content":"`rd` (This command reapplies `delete 1`) +"},{"lineNumber":570,"author":{"gitID":"-"},"content":"`rd` (This command reapplies `clear`) +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"Robert-Peng"},"content":".After `delete **-fo** 1` + `clear`. Medeina\u0027s data has been cleared."},{"lineNumber":574,"author":{"gitID":"Robert-Peng"},"content":"image::After_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":575,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":577,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":578,"author":{"gitID":"Robert-Peng"},"content":".After first `ud`. `clear` command has been undone."},{"lineNumber":579,"author":{"gitID":"Robert-Peng"},"content":"image::Undo_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":580,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":581,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":582,"author":{"gitID":"Robert-Peng"},"content":".After second `ud`. `delete **-fo** 1` has been undone. Alex and pet Ane were added back."},{"lineNumber":583,"author":{"gitID":"Robert-Peng"},"content":"image::After_Undo.PNG[width\u003d\"500\"]"},{"lineNumber":584,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":585,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":586,"author":{"gitID":"Robert-Peng"},"content":".After first `rd`: `delete **-fo** 1` was applied again. Alex and pet Ane were once again deleted."},{"lineNumber":587,"author":{"gitID":"Robert-Peng"},"content":"image::Redo_Success.PNG[width\u003d\"500\"]"},{"lineNumber":588,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":589,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":590,"author":{"gitID":"Robert-Peng"},"content":".After second `rd`: `clear` command was applied again."},{"lineNumber":591,"author":{"gitID":"Robert-Peng"},"content":"image::Redo_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":592,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":593,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear` or `cls`"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"If you want to delete all entries in Medeina, simply use the `clear` or `cls` command. +"},{"lineNumber":598,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":".Executed clear command"},{"lineNumber":600,"author":{"gitID":"Robert-Peng"},"content":"image::After_Clear.PNG[width\u003d\"500\"]"},{"lineNumber":601,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":603,"author":{"gitID":"chialejing"},"content":"[WARNING]"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":"This command **cannot** be undone after you exit the application. Please be certain that you have backed up your data (which is located in the `data` folder) before executing this command!"},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"// tag::changethemeUG[]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing theme : `theme` or `t` `[Since v1.1]`"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"If you would like change Medeina\u0027s theme to better suit your preference, simply use the command `theme THEME_NAME` or `t THEME_NAME` to change theme. Medeina currently supports the following themes:"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"* dark"},{"lineNumber":616,"author":{"gitID":"-"},"content":"* light"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":619,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":620,"author":{"gitID":"-"},"content":"`THEME_NAME` is case insensitive. e.g DaRK will match dark."},{"lineNumber":621,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":622,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":".Dark theme"},{"lineNumber":624,"author":{"gitID":"Robert-Peng"},"content":"image::Theme_Dark.PNG[width\u003d\"790\"]"},{"lineNumber":625,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":626,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":".Light theme"},{"lineNumber":628,"author":{"gitID":"Robert-Peng"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":629,"author":{"gitID":"-"},"content":"// end::changethemeUG[]"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit` or `q`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"You can easily close the Medeina application by entering `exit` or `q` in the command box. +"},{"lineNumber":635,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d Data Saving"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"wynonaK"},"content":"The data in Medeina is automatically saved to the hard disk after any command that may result in a change in the storage. +"},{"lineNumber":641,"author":{"gitID":"wynonaK"},"content":"Commands that may result in a change in the storage are:"},{"lineNumber":642,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":643,"author":{"gitID":"wynonaK"},"content":"* `add` or `a` +"},{"lineNumber":644,"author":{"gitID":"wynonaK"},"content":"This command will add new information into the storage."},{"lineNumber":645,"author":{"gitID":"wynonaK"},"content":"* `edit` or `ed` +"},{"lineNumber":646,"author":{"gitID":"wynonaK"},"content":"This command will update information in the storage."},{"lineNumber":647,"author":{"gitID":"wynonaK"},"content":"* `delete` or `d` +"},{"lineNumber":648,"author":{"gitID":"wynonaK"},"content":"This command will remove information in the storage."},{"lineNumber":649,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":650,"author":{"gitID":"wynonaK"},"content":"You do not need to manually save the data."},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"Robert-Peng"},"content":"[WARNING]"},{"lineNumber":653,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":654,"author":{"gitID":"Robert-Peng"},"content":"User should take note **not** to modify the default files in any way. Manipulating the data inside files such as Medeina.xml, might cause data corruption (the application may still run, but will not be able to return error messages)."},{"lineNumber":655,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":656,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":657,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":658,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d Future enhancements"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"wynonaK"},"content":"Coming v2.0, the data you have will be automatically encrypted after commands that may change the storage, so that you do not have to worry about it being stolen. +"},{"lineNumber":668,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":669,"author":{"gitID":"wynonaK"},"content":"You do not need to manually encrypt your data files."},{"lineNumber":670,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":674,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Creating other user profiles `[coming in v2.0]`"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"User accounts will be implemented in Medeina, so that veterinarians and their assistants can collaborate on the same computer, but at the same time keep their information private to themselves. They can also customize Medeina to their own preferences."},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":680,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Setting user permissions `[coming in v2.0]`"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"Coming v2.0, Medeina will have user permissions, to ensure that protected information is not easily changed by other staff. There will be an administrator role to gain total access in the application."},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"wynonaK"},"content":"Information that vet assistants should not change:"},{"lineNumber":685,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":686,"author":{"gitID":"wynonaK"},"content":"* You can add new information (contacts, pet patients, appointments) to the application, but you should not be able to delete it."},{"lineNumber":687,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":688,"author":{"gitID":"wynonaK"},"content":"* You can see the medical histories of pet patients but should not modify it."},{"lineNumber":689,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":690,"author":{"gitID":"wynonaK"},"content":"Information that vets should not change:"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"wynonaK"},"content":"* You should not change information belonging to other vets in the application without permission."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":696,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Supporting multiple users `[coming in v2.0]`"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"-"},"content":"Medeina will have support to run concurrently on different systems. The data will be synced over an internet connection. This allow veterinarians and their assistants to access Medeina simultaneously in different rooms, making it convenient to collaborate with one another."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":701,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"chialejing"},"content":"*Q*: Help! What is with all these data in Medeina on initial startup? How do I get rid of them? +"},{"lineNumber":705,"author":{"gitID":"chialejing"},"content":"*A*: This data is sample data aimed to get users started with Medeina. To start afresh, simply type `clear` into the command line, and all the sample data will be removed from the storage file."},{"lineNumber":706,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":707,"author":{"gitID":"chialejing"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":708,"author":{"gitID":"chialejing"},"content":"*A*: Install the application in the other computer. Open the application, type `clear` into the command line, then close it. Replace the data file, found at `data\\medeina.xml`, that it had created with the data file that contains the data found in your previous Medeina folder. By default, this file will also be `medeina.xml`, unless you have renamed it to something else!"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"chialejing"},"content":"*Q*: I have modified some entries in my saved data file directly. However, upon opening the application, Medeina does not recognise my data file anymore! What is happening? Is this a bug? +"},{"lineNumber":711,"author":{"gitID":"chialejing"},"content":"*A*: This is not a bug. Upon opening Medeina, your existing data in the data file will be processed in accordance to certain restrictions, so that Medeina can display them appropriately for you. However, you may have edited some of the entries, such that it does not conform to these restrictions that we have set. As such, please ensure that all modifications of data *MUST* go through Medeina, otherwise your data file will not be recognised."},{"lineNumber":712,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":713,"author":{"gitID":"wynonaK"},"content":"*Q*: What if my questions are not answered through this user guide? +"},{"lineNumber":714,"author":{"gitID":"chialejing"},"content":"*A*: Please post an issue in our GitHub link:{repoURL}/issues[here]. Alternatively, you can also email us at help@medeina.com. We will address your question as soon as possible!"},{"lineNumber":715,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":716,"author":{"gitID":"chialejing"},"content":"*Q*: I have some suggestions / feedback for improvement; who can I talk to? +"},{"lineNumber":717,"author":{"gitID":"chialejing"},"content":"*A*: Thank you for your feedback! You may drop us an email at feedback@medeina.com; we will be happy to speak to you!"},{"lineNumber":718,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":719,"author":{"gitID":"chialejing"},"content":"*Q*: What should I do if I find a bug? +"},{"lineNumber":720,"author":{"gitID":"chialejing"},"content":"*A*: We are very sorry about this. Please help us out by creating an issue in our GitHub link:{repoURL}/issues[here]. We will get back to you shortly!"},{"lineNumber":721,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":722,"author":{"gitID":"Robert-Peng"},"content":"// tag::FAQ[]"},{"lineNumber":723,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":724,"author":{"gitID":"Robert-Peng"},"content":"*Q*: There\u0027s no scroll-bar in calendar entry views, what happens when a have a long list of appointments on that week? +"},{"lineNumber":725,"author":{"gitID":"Robert-Peng"},"content":"*A*: The calendar entry view is implemented by default without a scroll-bar, yet user can still scroll up and down using mouse wheel."},{"lineNumber":726,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":727,"author":{"gitID":"Robert-Peng"},"content":"*Q*: After switching from a year view with appointments to a year view with none, the appointment dates were still colored despite no entry, why is that? +"},{"lineNumber":728,"author":{"gitID":"Robert-Peng"},"content":"*A*: The issue is embedded inside the API of CalendarFx, it has already been documented in our developer guide as well. Hopefully the issue can be resolved in future releases of CalendarFX."},{"lineNumber":729,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":730,"author":{"gitID":"Robert-Peng"},"content":"*Q*: When right click on the calendar day view, a window jump out and says \"unable to create a new entry\", why is that? +"},{"lineNumber":731,"author":{"gitID":"Robert-Peng"},"content":"*A*: Since Medeina is a command-line based application, clicking on calendar to create appointments has been disabled. User should create appointments using `add` command."},{"lineNumber":732,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":733,"author":{"gitID":"Robert-Peng"},"content":"*Q*: When click on appointments, a pop over window appears to show details of appointments but its unmodifiable, why? +"},{"lineNumber":734,"author":{"gitID":"Robert-Peng"},"content":"*A*: Because of Medeina\u0027s command line based property, modifying of appointments details using mouse is disabled. Instead, users should use `edit` command."},{"lineNumber":735,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"*Q*: Suppose I want to make an appointment for a pet patient named \"Happy\". However, the contact that \"Happy\" is assigned under, has yet another pet patient that is named \"Happy\" as well. I end up making an appointment for the other \"Happy\" instead. What can I do?"},{"lineNumber":737,"author":{"gitID":"-"},"content":"*A*: Medeina is developed with the assumption that no pet patients under the same contact will share a name. However, there is a solution for such rare cases. Edit one of the pet patients to a name with a slight variation e.g. \"Happy dog\" to include species in the name for differentiation, or \"Happy 1\" to indicate the older pet patient for differentiation."},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":740,"author":{"gitID":"Robert-Peng"},"content":"// end::FAQ[]"},{"lineNumber":741,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"chialejing"},"content":"// tag::commandsummaryUG[]"},{"lineNumber":744,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"You can find a summary of all commands available in Medeina in the following sections."},{"lineNumber":747,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":748,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Contact-related Commands"},{"lineNumber":749,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":750,"author":{"gitID":"chialejing"},"content":"These commands interact with contacts in Medeina."},{"lineNumber":751,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":752,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":753,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":754,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":755,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":756,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":757,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":758,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":759,"author":{"gitID":"chialejing"},"content":".^a|`add -o`"},{"lineNumber":760,"author":{"gitID":"chialejing"},"content":"| `a -o`"},{"lineNumber":761,"author":{"gitID":"-"},"content":"| `add **-o** n/CONTACT_NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS nr/NRIC [t/TAG]...`"},{"lineNumber":762,"author":{"gitID":"chialejing"},"content":"| Add a contact into Medeina"},{"lineNumber":763,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":764,"author":{"gitID":"chialejing"},"content":".^a|`edit -o`"},{"lineNumber":765,"author":{"gitID":"chialejing"},"content":"| `ed -o`"},{"lineNumber":766,"author":{"gitID":"chialejing"},"content":"| `edit **-o** INDEX [n/CONTACT_NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAG]...`"},{"lineNumber":767,"author":{"gitID":"chialejing"},"content":"| Edit a contact in Medeina"},{"lineNumber":768,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":769,"author":{"gitID":"chialejing"},"content":".^a|`find -o`"},{"lineNumber":770,"author":{"gitID":"chialejing"},"content":"| `f -o`"},{"lineNumber":771,"author":{"gitID":"wynonaK"},"content":"| `find **-o** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":772,"author":{"gitID":"chialejing"},"content":"| Find a contact in Medeina"},{"lineNumber":773,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":774,"author":{"gitID":"chialejing"},"content":".^a|`delete -o`"},{"lineNumber":775,"author":{"gitID":"chialejing"},"content":"| `d -o`"},{"lineNumber":776,"author":{"gitID":"chialejing"},"content":"| `delete **-[f]o** INDEX`"},{"lineNumber":777,"author":{"gitID":"chialejing"},"content":"| Delete a contact in Medeina"},{"lineNumber":778,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":779,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":780,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Pet patient-related Commands"},{"lineNumber":781,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":782,"author":{"gitID":"chialejing"},"content":"These commands interact with pet patients in Medeina."},{"lineNumber":783,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":784,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":785,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":786,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":787,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":788,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":789,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":790,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":791,"author":{"gitID":"chialejing"},"content":".^a|`add -p`"},{"lineNumber":792,"author":{"gitID":"chialejing"},"content":"| `a -p`"},{"lineNumber":793,"author":{"gitID":"-"},"content":"| `add **-p** n/PET_PATIENT_NAME s/SPECIES b/BREED c/COLOR bt/BLOOD_TYPE [t/TAG]... **-o** nr/OWNER_NRIC`"},{"lineNumber":794,"author":{"gitID":"chialejing"},"content":"| Add a pet patient into Medeina"},{"lineNumber":795,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":796,"author":{"gitID":"chialejing"},"content":".^a|`edit -p`"},{"lineNumber":797,"author":{"gitID":"chialejing"},"content":"| `ed -p`"},{"lineNumber":798,"author":{"gitID":"chialejing"},"content":"| `edit **-p** INDEX [n/PET_PATIENT_NAME] [s/SPECIES] [b/BREED] [c/COLOR] [bt/BLOOD_TYPE] [nr/OWNER_NRIC] [t/TAG]...`"},{"lineNumber":799,"author":{"gitID":"chialejing"},"content":"| Edit a pet patient in Medeina"},{"lineNumber":800,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":801,"author":{"gitID":"chialejing"},"content":".^a|`find -p`"},{"lineNumber":802,"author":{"gitID":"chialejing"},"content":"| `f -p`"},{"lineNumber":803,"author":{"gitID":"wynonaK"},"content":"| `find **-p** PREFIX/KEYWORD [MORE KEYWORDS] [MORE PREFIX/MORE KEYWORDS]`"},{"lineNumber":804,"author":{"gitID":"chialejing"},"content":"| Find a pet patient in Medeina"},{"lineNumber":805,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":806,"author":{"gitID":"chialejing"},"content":".^a|`delete -p`"},{"lineNumber":807,"author":{"gitID":"chialejing"},"content":"| `d -p`"},{"lineNumber":808,"author":{"gitID":"chialejing"},"content":"| `delete **-[f]p** INDEX`"},{"lineNumber":809,"author":{"gitID":"chialejing"},"content":"| Delete a pet patient in Medeina"},{"lineNumber":810,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":811,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":812,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Appointment-related Commands"},{"lineNumber":813,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":814,"author":{"gitID":"chialejing"},"content":"These commands interact with appointments in Medeina."},{"lineNumber":815,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":816,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":817,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":818,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":819,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":820,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":821,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":822,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":823,"author":{"gitID":"chialejing"},"content":".^a|`add -a`"},{"lineNumber":824,"author":{"gitID":"chialejing"},"content":"| `a -a`"},{"lineNumber":825,"author":{"gitID":"-"},"content":"| `add **-a** d/YYYY-MM-DD HH:MM r/REMARK t/TAG...` +"},{"lineNumber":826,"author":{"gitID":"-"},"content":"  `**-o** nr/OWNER_NRIC **-p** n/PET_PATIENT_NAME`"},{"lineNumber":827,"author":{"gitID":"chialejing"},"content":"| Adds an appointment into Medeina"},{"lineNumber":828,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":829,"author":{"gitID":"chialejing"},"content":".^a|`edit -a`"},{"lineNumber":830,"author":{"gitID":"chialejing"},"content":"| `ed -a`"},{"lineNumber":831,"author":{"gitID":"chialejing"},"content":"| `edit **-a** INDEX [d/YYYY-MM-DD HH:MM] [r/REMARK] [t/TAG]...`"},{"lineNumber":832,"author":{"gitID":"chialejing"},"content":"| Edit an appointment in Medeina"},{"lineNumber":833,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":834,"author":{"gitID":"chialejing"},"content":".^a|`listappt -y/m/w/d`"},{"lineNumber":835,"author":{"gitID":"chialejing"},"content":"| `la -y/m/w/d`"},{"lineNumber":836,"author":{"gitID":"chialejing"},"content":"| `listappt **-y** [YEAR]` +"},{"lineNumber":837,"author":{"gitID":"chialejing"},"content":"`listappt **-m** [YEAR-MONTH/MONTH]` +"},{"lineNumber":838,"author":{"gitID":"chialejing"},"content":"`listappt **-w** [DATE]` +"},{"lineNumber":839,"author":{"gitID":"chialejing"},"content":"`listappt **-d** [DATE]`"},{"lineNumber":840,"author":{"gitID":"chialejing"},"content":"| Lists appointments in Medeina by year, month, week or date"},{"lineNumber":841,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":842,"author":{"gitID":"chialejing"},"content":".^a|`delete -a`"},{"lineNumber":843,"author":{"gitID":"chialejing"},"content":"| `d -a`"},{"lineNumber":844,"author":{"gitID":"chialejing"},"content":"| `delete **-a** INDEX`"},{"lineNumber":845,"author":{"gitID":"chialejing"},"content":"| Delete an appointment in Medeina"},{"lineNumber":846,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":847,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Personalisation Commands"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"chialejing"},"content":"These commands are used to personalise Medeina to your own preference."},{"lineNumber":851,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":852,"author":{"gitID":"chialejing"},"content":"[width\u003d\"100%\", cols\u003d\"20%, 10%, 40%, 30%\", options\u003d\"header\"]"},{"lineNumber":853,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":854,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":855,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":856,"author":{"gitID":"chialejing"},"content":"| Command Syntax"},{"lineNumber":857,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":858,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":".^a|`theme`"},{"lineNumber":860,"author":{"gitID":"-"},"content":"| `t`"},{"lineNumber":861,"author":{"gitID":"-"},"content":"| `theme THEME_NAME`"},{"lineNumber":862,"author":{"gitID":"-"},"content":"| Change Medeina\u0027s current theme to THEME_NAME"},{"lineNumber":863,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d System-related Commands"},{"lineNumber":866,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":867,"author":{"gitID":"chialejing"},"content":"These commands carry out system-related tasks in Medeina."},{"lineNumber":868,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":869,"author":{"gitID":"chialejing"},"content":"[cols\u003d\"20, 10, 50\", options\u003d\"header\"]"},{"lineNumber":870,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":871,"author":{"gitID":"chialejing"},"content":"| Command"},{"lineNumber":872,"author":{"gitID":"chialejing"},"content":"| Alias"},{"lineNumber":873,"author":{"gitID":"chialejing"},"content":"| Description"},{"lineNumber":874,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":875,"author":{"gitID":"chialejing"},"content":".^a|`list`"},{"lineNumber":876,"author":{"gitID":"chialejing"},"content":"| `ls`"},{"lineNumber":877,"author":{"gitID":"chialejing"},"content":"| Lists all contacts and pet patients"},{"lineNumber":878,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":879,"author":{"gitID":"chialejing"},"content":".^a|`help`"},{"lineNumber":880,"author":{"gitID":"chialejing"},"content":"| `h`"},{"lineNumber":881,"author":{"gitID":"chialejing"},"content":"| Brings up this user guide for your reference"},{"lineNumber":882,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":883,"author":{"gitID":"chialejing"},"content":".^a|`history`"},{"lineNumber":884,"author":{"gitID":"chialejing"},"content":"| `his`"},{"lineNumber":885,"author":{"gitID":"chialejing"},"content":"| Lists all the commands that you have entered in reverse chronological order"},{"lineNumber":886,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":887,"author":{"gitID":"chialejing"},"content":".^a|`undo`"},{"lineNumber":888,"author":{"gitID":"chialejing"},"content":"| `ud`"},{"lineNumber":889,"author":{"gitID":"chialejing"},"content":"| Undo the previous command"},{"lineNumber":890,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":891,"author":{"gitID":"chialejing"},"content":".^a|`redo`"},{"lineNumber":892,"author":{"gitID":"chialejing"},"content":"| `rd`"},{"lineNumber":893,"author":{"gitID":"chialejing"},"content":"| Redo the previous command"},{"lineNumber":894,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":895,"author":{"gitID":"chialejing"},"content":".^a|`clear`"},{"lineNumber":896,"author":{"gitID":"chialejing"},"content":"| `cls`"},{"lineNumber":897,"author":{"gitID":"chialejing"},"content":"| Clears all entries from Medeina"},{"lineNumber":898,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":899,"author":{"gitID":"chialejing"},"content":".^a|`exit`"},{"lineNumber":900,"author":{"gitID":"chialejing"},"content":"| `q`"},{"lineNumber":901,"author":{"gitID":"chialejing"},"content":"| Exits the program"},{"lineNumber":902,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":903,"author":{"gitID":"chialejing"},"content":"// tag::commandsummaryUG[]"}],"authorContributionMap":{"chialejing":243,"Robert-Peng":97,"wynonaK":172,"-":391}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.ui.BrowserPanel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"        getCalendarPanel().click();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" -o \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":3,"wynonaK":1,"-":94}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER \u003d"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_OWNER);"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT \u003d"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_PET_PATIENT);"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER \u003d"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_OWNER);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT \u003d"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_PET_PATIENT);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT \u003d"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_APPOINTMENT);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"   -o   \""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":81,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":82,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + invalidIndex;"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + selectedIndex.getOneBased();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    public void deleteFormatTest() {"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for owner ------------------------------------ */"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        String command \u003d DeleteCommand.COMMAND_WORD + \" -o 0\";"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o -1\";"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -o \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -o abc\","},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -o 1 abc\","},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_OWNER);"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -o 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        /* ------------------ Performing invalid delete operation for appointment ----------------------------------- */"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a 0\";"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a -1\";"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getAppointmentList().size() + 1);"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -a \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -a abc\","},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -a 1 abc\","},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_APPOINTMENT);"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -a 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        /* ------------------ Performing invalid delete operation for pet patient ----------------------------------- */"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p 0\";"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p -1\";"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPetPatientList().size() + 1);"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -p \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -p abc\","},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -p 1 abc\","},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_PET_PATIENT);"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -p 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for force owner ------------------------------ */"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo 0\";"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo -1\";"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fo \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fo abc\","},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fo 1 abc\","},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_OWNER);"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -fo 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        /* ----------------------- Performing invalid delete operation for force pet patient ------------------------ */"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp 0\";"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp -1\";"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fp \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fp abc\","},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fp 1 abc\","},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT);"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"DelETE -fp 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"        /* ------------------------- Performing invalid delete operation with wrong type ---------------------------- */"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -sha 0\";"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fza -1\";"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"        outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -fup \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -fsp abc\","},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" -nafp 1 abc\","},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_WORD + \" -o \" + toDelete.getOneBased(),"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"                expectedModel, expectedResultMessage);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":327,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":332,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":339,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":186,"-":168}},{"path":"src/test/java/systemtests/ListAppointmentCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"public class ListAppointmentCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"    public void listAppointment() {"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"        /* --------------------------------- Perform listappt command success --------------------------------------- */"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        //year parameters given properly"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -y 2018 \","},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"year\"));"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"        //no year given, passes with today\u0027s year"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -y \","},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"year\"));"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"        //month parameters given properly"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -m 2018-12\","},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"month\"));"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"        //month given but no year, passes with today\u0027s year"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -m 12\","},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"month\"));"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        //no month given, passes with today\u0027s month"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -m \","},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"month\"));"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        //week parameters given properly"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -w 2018-12-31 \","},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"week\"));"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        //no week given, passes with today\u0027s week"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -w \","},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"week\"));"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        //date parameters given properly"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -d 2018-12-31 \","},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"day\"));"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        //no date given, passes with today\u0027s date"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(ListAppointmentCommand.COMMAND_WORD + \" -d \","},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"day\"));"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        /* --------------------------------- Perform listappt command failures -------------------------------------- */"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        //null, fail"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" \","},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d \"You can only list past appointments if you had an appointment\""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                + \" in the year of the specified field!\";"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        //listappt past year with no appointments, fail"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -y 2016\","},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                expectedMessage);"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        //listappt past month of year with no appointments, fail"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -m 2016-01\","},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                expectedMessage);"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        //listappt past week of year with no appointments, fail"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -w 2016-01-01\","},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"                expectedMessage);"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        //listappt past date of year with no appointments, fail"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -d 2016-01-01\","},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                expectedMessage);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        //writing wrong caps, fail"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(\"LiStApPt\","},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_UNKNOWN_COMMAND));"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        //unknown parameter, fail"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -opaenuf \","},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        //unknown year parameter, fail"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -y naodnnn \","},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        //extra year parameter, fail"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -y 2018 3noisefn \","},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        //unknown year-month parameter, fail"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -m ajebfdliua \","},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        //extra month parameter, fail"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -m 12 3noisefn \","},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        //invalid month parameter, fail"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -m 60 \","},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        //unknown week parameter, fail"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -w opaenuf \","},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        //extra week parameter, fail"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -w 2018-12-31 3noisefn \","},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        //unknown day parameter, fail"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -d opuf \","},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        //extra day parameter, fail"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(ListAppointmentCommand.COMMAND_WORD + \" -d 2018-12-31 3noisefn \","},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"     * Performs verification for command to calendarView"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"    private void assertCommandSuccess(String command, String message) {"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"        executeCommand(command);"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        assertEquals(getResultDisplay().getText() , message);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        executeCommand(command);"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":142,"-":7}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.PetPatientListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.MainApp;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"     * Returns a command box with autocomplete function disabled."},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"        mainWindowHandle.getCommandBox().disableAutocomplete();"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":112,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientListPanelHandle getPetPatientListPanel() {"},{"lineNumber":113,"author":{"gitID":"Robert-Peng"},"content":"        return mainWindowHandle.getPetPatientListPanel();"},{"lineNumber":114,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":116,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":122,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":123,"author":{"gitID":"Robert-Peng"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":125,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":144,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" -o n/\" + keyword);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size()"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Displays all petpatients with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    protected void showPetPatientsWithName(String keyword) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" -p n/\" + keyword);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPetPatientList().size()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u003c getModel().getAddressBook().getPetPatientList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertListMatching(getPetPatientListPanel(), expectedModel.getFilteredPetPatientList());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"Robert-Peng"},"content":"     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":220,"author":{"gitID":"Robert-Peng"},"content":"     * of the previously selected person."},{"lineNumber":221,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":222,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"Robert-Peng"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":224,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":225,"author":{"gitID":"Robert-Peng"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":226,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"Robert-Peng"},"content":"     * Assert that the selected index is changed"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"Robert-Peng"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":233,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":234,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that the selected card in the person list panel remain unchanged."},{"lineNumber":239,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":243,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":289,"author":{"gitID":"Robert-Peng"},"content":"            assertListMatching(getPersonListPanel(),"},{"lineNumber":290,"author":{"gitID":"Robert-Peng"},"content":"                getModel().getFilteredPersonList());"},{"lineNumber":291,"author":{"gitID":"Robert-Peng"},"content":"            //assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"},{"lineNumber":292,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aquarinte":10,"Robert-Peng":40,"wynonaK":1,"-":255}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_INVALID_NRIC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_INVALID_PET_PATIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_THREE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_CHARLIE;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_DION;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_ELIAS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_FION;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_APPOINTMENT;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_THREE;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_VACCINATION;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_CHARLIE;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_DION;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_ELIAS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APP;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPetPatients.KARUPIN;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPetPatients.NERO;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentUtil;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientUtil;"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + OPTION_OWNER + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + NRIC_DESC_AMY + \" \""},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + \" \";"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e rejected */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name and nric"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        -\u003e accepted */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":141,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_BOB + TAG_DESC_FRIEND;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone and nric"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_CHARLIE).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_CHARLIE + TAG_DESC_FRIEND;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email and nric"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_DION).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_DION + TAG_DESC_FRIEND;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address and nric"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        -\u003e added */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withNric(VALID_NRIC_ELIAS).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_ELIAS + TAG_DESC_FRIEND;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"Robert-Peng"},"content":"        /* Case: add a person with all fields same as another person in the address book except NRIC -\u003e added */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            .withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_FION).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            + ADDRESS_DESC_AMY + NRIC_DESC_FION + TAG_DESC_FRIEND;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"Robert-Peng"},"content":"            + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        //@@author aquarinte"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient without tags to a non-empty address book, command with leading spaces and"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"         * trailing spaces -\u003e added"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"        PetPatient toAddPet \u003d NERO;"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        Nric bobNric \u003d BOB.getNric();"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + OPTION_PET + \"  \" + NAME_DESC_NERO"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"                + \"  \" +  SPECIES_DESC_NERO + \"  \" + BREED_DESC_NERO + \"  \" +  COLOUR_DESC_NERO + \"  \""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"                + BLOODTYPE_DESC_NERO + \"  \" + OPTION_OWNER + \"  \" + NRIC_DESC_BOB + \"  \";"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient, missing tags -\u003e added */"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(KARUPIN, KARUPIN.getOwner());"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient with all fields same as another pet patient in the address book except name"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        toAddPet \u003d new PetPatientBuilder().withName(\"Joseph\").withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO).withBloodType(VALID_BLOODTYPE_NERO)"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"                .withTags().withOwnerNric(bobNric.toString()).build();"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_PET + \" n/Joseph\" + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient with all fields same as another pet patient in the address book except species"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        toAddPet \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(\"Dog\").withBreed(VALID_BREED_NERO)"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"                .withColour(VALID_COLOUR_NERO).withBloodType(VALID_BLOODTYPE_NERO).withTags()"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(bobNric.toString()).build();"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_PET + NAME_DESC_NERO + \" s/Dog\" + BREED_DESC_NERO"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient with all fields same as another pet patient in the address book except breed"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        toAddPet \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(\"Maltese\").withColour(VALID_COLOUR_NERO).withBloodType(VALID_BLOODTYPE_NERO).withTags()"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(bobNric.toString()).build();"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO + \" b/Maltese\""},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient with all fields same as another pet patient in the address book except colour"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"        toAddPet \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(VALID_BREED_NERO).withColour(\"silver\").withBloodType(VALID_BLOODTYPE_NERO).withTags()"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(bobNric.toString()).build();"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"                + \" c/silver\" + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a pet patient with all fields same as another pet patient in the address book except blood type"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        toAddPet \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO).withBloodType(\"A\").withTags()"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(bobNric.toString()).build();"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + \" bt/A\" + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddPet, bobNric);"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add an appointment to a  non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        -\u003e added */"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        Appointment toAddAppt \u003d BOB_APP;"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"        command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + OPTION_APPOINTMENT + \"  \" + DATE_DESC_THREE"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"                + \"  \" +  REMARK_DESC_THREE + \"  \" + TAG_DESC_VACCINATION + \"  \" + OPTION_OWNER + \"  \""},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_BOB + OPTION_PET + \"  \" + NAME_DESC_NERO + \"  \";"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, toAddAppt, bobNric, BOB_APP.getPetPatientName());"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"        //@author"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_AMY;"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Robert-Peng"},"content":"        //@@author Robert-Peng"},{"lineNumber":303,"author":{"gitID":"Robert-Peng"},"content":"        /* Case: missing nric -\u003e rejected */"},{"lineNumber":304,"author":{"gitID":"Robert-Peng"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":305,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":306,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":307,"author":{"gitID":"Robert-Peng"},"content":"        //@@author"},{"lineNumber":308,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_AMY"},{"lineNumber":315,"author":{"gitID":"Robert-Peng"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + INVALID_PHONE_DESC"},{"lineNumber":320,"author":{"gitID":"Robert-Peng"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":325,"author":{"gitID":"Robert-Peng"},"content":"            + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + NRIC_DESC_AMY;"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":330,"author":{"gitID":"Robert-Peng"},"content":"            + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC + NRIC_DESC_AMY;"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"Robert-Peng"},"content":"        //@@author Robert-Peng"},{"lineNumber":334,"author":{"gitID":"Robert-Peng"},"content":"        /* Case: invalid nric -\u003e rejected */"},{"lineNumber":335,"author":{"gitID":"Robert-Peng"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":336,"author":{"gitID":"Robert-Peng"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_NRIC_DESC;"},{"lineNumber":337,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandFailure(command, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":338,"author":{"gitID":"Robert-Peng"},"content":"        //@@author"},{"lineNumber":339,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":342,"author":{"gitID":"Robert-Peng"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NRIC_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"        //@@author aquarinte"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"        /* Case: add a duplicate pet patient -\u003e rejected */"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing pet patient name -\u003e rejected */"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing pet patient species -\u003e rejected */"},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing pet patient breed -\u003e rejected */"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO"},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing pet patient colour -\u003e rejected */"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing pet patient blood type -\u003e rejected */"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_NERO + COLOUR_DESC_NERO + OPTION_OWNER + NRIC_DESC_BOB;"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing option and owner\u0027s nric -\u003e rejected */"},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_NERO + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO;"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing owner\u0027s nric -\u003e rejected */"},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_PET + NAME_DESC_NERO + SPECIES_DESC_NERO"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_NERO + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + OPTION_OWNER;"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_NRIC_PREFIX));"},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing appointment date -\u003e rejected */"},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_APPOINTMENT"},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"                + REMARK_DESC_THREE + TAG_DESC_VACCINATION + OPTION_OWNER + NRIC_DESC_BOB + OPTION_PET"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO;"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_APPOINTMENT));"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing appointment remark -\u003e rejected */"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_APPOINTMENT + DATE_DESC_THREE"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"                + TAG_DESC_VACCINATION + OPTION_OWNER + NRIC_DESC_BOB + OPTION_PET"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO;"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_APPOINTMENT));"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing appointment tag -\u003e rejected */"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_APPOINTMENT + DATE_DESC_THREE"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"                + REMARK_DESC_THREE + OPTION_OWNER + NRIC_DESC_BOB + OPTION_PET"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO;"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_ERROR_APPOINTMENT));"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing appointment\u0027s owner nric -\u003e rejected */"},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_APPOINTMENT + DATE_DESC_THREE"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"                + REMARK_DESC_THREE + TAG_DESC_VACCINATION + OPTION_OWNER + OPTION_PET"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO;"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_NRIC_PREFIX));"},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"        /* Case: missing appointment\u0027s pet patient name -\u003e rejected */"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":"        command \u003d AddCommand.COMMAND_WORD + OPTION_APPOINTMENT + DATE_DESC_THREE"},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"                + REMARK_DESC_THREE + TAG_DESC_VACCINATION + OPTION_OWNER + NRIC_DESC_BOB + OPTION_PET;"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_PET_PATIENT_NAME_PREFIX));"},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"     * 4. {@code Model}, {@code Storage}, {@code PersonListPanel} and {@code PetPatientListPanel} equal to the"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"     * corresponding components in the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":"    private void assertCommandSuccess(Appointment toAdd, Nric ownerNric, PetPatientName petPatientName)"},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"            throws CommandException {"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(AppointmentUtil.getAddCommand(toAdd, ownerNric, petPatientName), toAdd, ownerNric,"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"                petPatientName);"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"     * Performs the same verification as {@code assertCommandSuccess(PetPatient, Nric)}. Executes {@code command}"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"     * instead."},{"lineNumber":452,"author":{"gitID":"Aquarinte"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(PetPatient, Nric)"},{"lineNumber":453,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":454,"author":{"gitID":"Aquarinte"},"content":"    private void assertCommandSuccess(String command, Appointment toAdd, Nric ownerNric, PetPatientName petName)"},{"lineNumber":455,"author":{"gitID":"Aquarinte"},"content":"            throws CommandException {"},{"lineNumber":456,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":457,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d getModel().getPersonWithNric(ownerNric);"},{"lineNumber":458,"author":{"gitID":"Aquarinte"},"content":"        PetPatient pet \u003d getModel().getPetPatientWithNricAndName(ownerNric, petName);"},{"lineNumber":459,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":460,"author":{"gitID":"Aquarinte"},"content":"        if (owner \u003d\u003d null) {"},{"lineNumber":461,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":462,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":463,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":464,"author":{"gitID":"Aquarinte"},"content":"        if (pet \u003d\u003d null) {"},{"lineNumber":465,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_PET_PATIENT);"},{"lineNumber":466,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":467,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":468,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":469,"author":{"gitID":"Aquarinte"},"content":"            expectedModel.addAppointment(toAdd);"},{"lineNumber":470,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":471,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":472,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateDateTimeException e) {"},{"lineNumber":473,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalArgumentException(\"this date time already exists in the model.\");"},{"lineNumber":474,"author":{"gitID":"Aquarinte"},"content":"        } catch (ConcurrentAppointmentException c) {"},{"lineNumber":475,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalArgumentException(\"there is another appointment which is concurrent\");"},{"lineNumber":476,"author":{"gitID":"Aquarinte"},"content":"        } catch (PastAppointmentException p) {"},{"lineNumber":477,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalArgumentException(\"this date has already past.\");"},{"lineNumber":478,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":479,"author":{"gitID":"Aquarinte"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS_APPOINTMENT, toAdd, owner, pet);"},{"lineNumber":480,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":481,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":482,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":483,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":484,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":485,"author":{"gitID":"Aquarinte"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":486,"author":{"gitID":"Aquarinte"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":487,"author":{"gitID":"Aquarinte"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":488,"author":{"gitID":"Aquarinte"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":489,"author":{"gitID":"Aquarinte"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":490,"author":{"gitID":"Aquarinte"},"content":"     * 4. {@code Model}, {@code Storage}, {@code PersonListPanel} and {@code PetPatientListPanel} equal to the"},{"lineNumber":491,"author":{"gitID":"Aquarinte"},"content":"     * corresponding components in the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":492,"author":{"gitID":"Aquarinte"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":493,"author":{"gitID":"Aquarinte"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":494,"author":{"gitID":"Aquarinte"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":495,"author":{"gitID":"Aquarinte"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":496,"author":{"gitID":"Aquarinte"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":497,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":498,"author":{"gitID":"Aquarinte"},"content":"    private void assertCommandSuccess(PetPatient toAdd, Nric ownerNric) throws CommandException {"},{"lineNumber":499,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(PetPatientUtil.getAddCommand(toAdd, ownerNric), toAdd, ownerNric);"},{"lineNumber":500,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":501,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":502,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":503,"author":{"gitID":"Aquarinte"},"content":"     * Performs the same verification as {@code assertCommandSuccess(PetPatient, Nric)}. Executes {@code command}"},{"lineNumber":504,"author":{"gitID":"Aquarinte"},"content":"     * instead."},{"lineNumber":505,"author":{"gitID":"Aquarinte"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(PetPatient, Nric)"},{"lineNumber":506,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":507,"author":{"gitID":"Aquarinte"},"content":"    private void assertCommandSuccess(String command, PetPatient toAdd, Nric ownerNric) throws CommandException {"},{"lineNumber":508,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":509,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d getModel().getPersonWithNric(ownerNric);"},{"lineNumber":510,"author":{"gitID":"Aquarinte"},"content":"        if (owner \u003d\u003d null) {"},{"lineNumber":511,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":512,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":513,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":514,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":515,"author":{"gitID":"Aquarinte"},"content":"            expectedModel.addPetPatient(toAdd);"},{"lineNumber":516,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicatePetPatientException dpe) {"},{"lineNumber":517,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":518,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":519,"author":{"gitID":"Aquarinte"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS_PETPATIENT, toAdd, owner);"},{"lineNumber":520,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":521,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":522,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":523,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":524,"author":{"gitID":"Aquarinte"},"content":"    //@@author"},{"lineNumber":525,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":526,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":527,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":528,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":529,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":530,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":531,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":532,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":533,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":534,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":535,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":536,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":537,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":538,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":539,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":540,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":541,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":544,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":545,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":546,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":547,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":548,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":549,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":550,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":553,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":554,"author":{"gitID":"-"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":555,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd\u0027s NRIC already exists in the model.\");"},{"lineNumber":556,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":557,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS_PERSON, toAdd);"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":560,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":563,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":564,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":565,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":566,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":567,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":568,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":569,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":570,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":571,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":572,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":573,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":574,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":575,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":576,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":579,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":580,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":581,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":582,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":583,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":584,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":585,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":586,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":587,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":588,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":589,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":590,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":593,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":594,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":595,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":596,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":597,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":598,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aquarinte":293,"Robert-Peng":29,"wynonaK":1,"-":275}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPetPatient\u003e PREDICATE_MATCHING_NO_PETPATIENTS \u003d unused -\u003e false;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cAppointment\u003e PREDICATE_MATCHING_NO_APPOINTMENTS \u003d unused -\u003e false;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static void setFilteredPersonList(Model model, List\u003cPerson\u003e toDisplay) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredPersonList(Model, List)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void setFilteredPersonList(Model model, Person... toDisplay) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        setFilteredPersonList(model, Arrays.asList(toDisplay));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code PetPatient} equals to {@code other}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPetPatient\u003e getPredicateMatching(PetPatient other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return petPatient -\u003e petPatient.equals(other);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Appointment} equals to {@code other}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static Predicate\u003cAppointment\u003e getPredicateMatching(Appointment other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return appointment -\u003e appointment.equals(other);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setFilteredPetPatientList(Model model, List\u003cPetPatient\u003e toDisplay) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPetPatient\u003e\u003e predicate \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        model.updateFilteredPetPatientList(predicate.orElse(PREDICATE_MATCHING_NO_PETPATIENTS));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredPetPatientList(Model, List)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void setFilteredPetPatientList(Model model, PetPatient... toDisplay) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setFilteredPetPatientList(model, Arrays.asList(toDisplay));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static void setFilteredAppointmentList(Model model, List\u003cAppointment\u003e toDisplay) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cAppointment\u003e\u003e predicate \u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(predicate.orElse(PREDICATE_MATCHING_NO_APPOINTMENTS));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredAppointmentList(Model, List)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static void setFilteredAppointmentList(Model model, Appointment... toDisplay) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        setFilteredAppointmentList(model, Arrays.asList(toDisplay));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":88}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":4,"-":149}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ClearCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_FAILS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_FAILS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        String thirdCommand \u003d \"help\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(thirdCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        //assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_FAILS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxHandle.run_withAutocomplete(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteCommandWord() {"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        //add command"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"    \", -1, \"a\", 1, \"    add\");"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"a\", -1, \"d\", 1, \"add\");"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"        //clear command"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"cl\", -1, \"e\", 1, \"clear\");"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        //delete command"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", -1, \"d\", 1, \" delete\");"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        //edit command"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"  \", -1, \"e\", 1, \"  edit\");"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"e\", -1, \"d\", 1, \"edit\");"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"        //exit command"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", -1, \"e\", 2, \" exit\");"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"e\", -1, \"x\", 1, \"exit\");"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        //help command"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"\", -1, \"he\", 1, \"help\");"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"h\", -1, \"e\", 1, \"help\");"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"he\", -1, \"l\", 1, \"help\");"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        //history command"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", -1, \"h\", 2, \" history\");"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"h\", -1, \"i\", 1, \"history\");"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"hi\", -1, \"s\", 1, \"history\");"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        //list command"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", -1, \"l\", 1, \" list\");"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        //listappt command"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\" \", -1, \"l\", 2, \" listappt\");"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        //theme command"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"t\", -1, \"h\", 1, \"theme\");"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        //undo"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"u\", -1, \"n\", 1, \"undo\");"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        //redo"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"r\", -1, \"e\", 1, \"redo\");"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_commandNoAutocompleteOptionAndPrefix() {"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"clear \", -1, \"n\", 1, \"\");"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"clear \", -1, \"-\", 1, \"\");"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"list \", -1, \" n\", 1, \"\");"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"list \", -1, \"-\", 1, \"\");"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"exit \", -1, \"n\", 1, \"\");"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"exit \", -1, \"-\", 1, \"\");"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"help \", -1, \"n\", 1, \"\");"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"help \", -1, \"-\", 1, \"\");"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"history \", -1, \"-\", 1, \"\");"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"undo \", -1, \"-\", 1, \"\");"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"redo \", -1, \"-\", 1, \"\");"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteOption() {"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"delete \", -1, \"-\", 3, \"delete -fo\");"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"delete \", -1, \"-\", 4, \"delete -fp\");"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add \", -1, \"-\", 1, \"add -a\");"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find \", -1, \"-\", 6, \"find -o\");"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find \", -1, \"-\", 7, \"find -p\");"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"listappt \", -1, \"-\", 2,"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"                \"listappt -d\");"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"listappt \", -1, \"-\", 5,"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"                \"listappt -m\");"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"listappt \", -1, \"-\", 8,"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"                \"listappt -w\");"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"listappt \", -1, \"-\", 9,"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"                \"listappt -y\");"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompletePrefix() {"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"        // prefix a/"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"a\", 1, \"add -o a/\");"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o\", -1, \" \", 1, \"add -o a/\");"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        // prefix b/"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"b\", 1,"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"                \"find -p b/\");"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        // prefix bt/"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"b\", 2,"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"                \"add -p bt/\");"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        // prefix c/"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"c\", 1,"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"                \"add -p c/\");"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"        // prefix d/"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a \", -1, \"d\", 1,"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"                \"add -a d/\");"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"        // prefix n/"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"n\", 1,"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"                \"add -o n/\");"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"        // prefix nr/"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"n\", 2,"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"                \"add -o nr/\");"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"nr\", 1,"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"                \"add -o nr/\");"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        // prefix r/"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a \", -1, \"r\", 1,"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"                \"add -a r/\");"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"        // prefix s/"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"s\", 1,"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"                \"find -p s/\");"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        // prefix t/"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o \", -1, \"t\", 1,"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"                \"find -o t/\");"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteNric() {"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for add command that follows \"-o nr/\""},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p -o \", -1, \"nr/\", 1,"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"                \"add -p -o nr/F0184556R\");"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p -o \", -1, \"nr/F018\", 1,"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"                \"add -p -o nr/F0184556R\");"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p -o \", -1, \"nr/\", 2,"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"                \"add -p -o nr/F2345678U\");"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p -o \", -1, \"nr/S\", 1,"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"                \"add -p -o nr/S0123456Q\");"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestions for nric if add command does not have \"-o nr/\""},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"nr/S\", 1,"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"                \"add -p nr/S\");"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a \", -1, \"nr/F\", 1,"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"                \"add -a nr/F\");"},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for \"edit -p\" command"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p \", -1, \"nr/\", 1,"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"                \"edit -p nr/F0184556R\");"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p \", -1, \"nr/F018\", 1,"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"                \"edit -p nr/F0184556R\");"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p \", -1, \"nr/\", 2,"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"                \"edit -p nr/F2345678U\");"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p \", -1, \"nr/S\", 1,"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"                \"edit -p nr/S0123456Q\");"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestions for nric if edit command does not start with \"edit -p\""},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -o \", -1, \"nr/\", 1,"},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":"                \"edit -o nr/\");"},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -o \", -1, \"nr/S\", 1,"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":"                \"edit -o nr/S\");"},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete suggestions for nric for \"find -o\" command"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o \", -1, \"nr/\", 1,"},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"                \"find -o nr/F0184556R\");"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o \", -1, \"nr/\", 3,"},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"                \"find -o nr/G1111111B\");"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o \", -1, \"nr/T\", 3,"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"                \"find -o nr/T0120956W\");"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -o \", -1, \"nr/T0\", 2,"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":"                \"find -o nr/T0123456L\");"},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"        // no nric autocomplete suggestion if edit command does not start with \"find -o\""},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"nr/T0\", 2,"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"                \"find -p nr/T0\");"},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -a \", -1, \"nr/S\", 2,"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":"                \"find -a nr/S\");"},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompletePetPatientName() {"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a -o -p\", -1, \" n/\", 1,"},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":"                \"add -a -o -p n/Jenn\");"},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a -o -p\", -1, \" n/\", 3,"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"                \"add -a -o -p n/Joker\");"},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":"        // autocomplete will not work"},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"edit -p\", -1, \" n/\", 1,"},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"                \"edit -p n/\");"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p\", -1, \" n/\", 2,"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"                \"find -p n/\");"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteSpecies() {"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"s/C\", 1,"},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"                \"add -p s/Cat\");"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"s/d\", 1,"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"                \"add -p s/Dog\");"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteBreed() {"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"b/P\", 1,"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"                \"add -p b/Persian Ragdoll\");"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"b/G\", 1,"},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"                \"find -p b/Golden Retriever\");"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteColour() {"},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"c/c\", 1,"},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"                \"find -p c/calico\");"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"c/g\", 1,"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"                \"find -p c/golden\");"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteBloodType() {"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"bt/\", 1,"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"                \"find -p bt/A\");"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"find -p \", -1, \"bt/D\", 1,"},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"                \"find -p bt/DEA 4+\");"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteTag() {"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"        // person tags"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"t/\", 2,"},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":"                \"add -o t/owesMoney\");"},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -o \", -1, \"t/F\", 1,"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"                \"add -o t/friends\");"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":"        // pet patient tags"},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"t/d\", 1,"},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"                \"add -p t/depression\");"},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p \", -1, \"t/\", 1,"},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"                \"add -p t/3legged\");"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"        // appointment tags"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a \", -1, \"t/\", 1,"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":"                \"add -a t/checkup\");"},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a \", -1, \"t/\", 2,"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"                \"add -a t/vaccination\");"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"        // no option: all tags"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add \", -1, \"t/\", 2,"},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"                \"add t/checkup\");"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add \", -1, \"t/\", 3,"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"                \"add t/depression\");"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add \", -1, \"t/\", 5,"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"                \"add t/owesMoney\");"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":"    public void commandBox_autocompleteMiddleOfText() {"},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p -o t/\", 9, \" nr/G1\", 1,"},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"                \"add -p -o nr/G1111111B t/\");"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -a -o -p t/\", 12, \" n/Jo\", 1,"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"                \"add -a -o -p n/Joker t/\");"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":"        testAutocompleteForUserInput(\"add -p n/joker s/cat b/persian c/brown bt/AB -o nr/S9600666G\","},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"                38, \" t/D\", 1,"},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"                \"add -p n/joker s/cat b/persian c/brown t/depression bt/AB -o nr/S9600666G\");"},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"     * Sets commandbox text to {@code userInput}."},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"     * Sets caret position to {@code index} if {@code index} \u003e 0."},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":"     * Inserts {@code userInput2} to commandbox."},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"     * Checks that {@code userInput1} + {@code userInput2} with the {@code numOfTabs} to select an option"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"     * on autocomplete\u0027s context menu will result in {@code actualCommand}."},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"    private void testAutocompleteForUserInput(String userInput1, int index, String userInput2, int numOfTabs,"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"                                              String actualCommand) {"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"        commandBoxHandle.setText(userInput1);"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"        if (index \u003e 0) {"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"            commandBoxHandle.setCaretPosition(index);"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"        for (int i \u003d 0; i \u003c userInput2.length(); i++) {"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":"            char c \u003d userInput2.charAt(i);"},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"            commandBoxHandle.insertText(Character.toString(c));"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":"        while (numOfTabs \u003e 0) {"},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"            guiRobot.push(KeyCode.TAB);"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"            numOfTabs--;"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(actualCommand, commandBoxHandle.getInput());"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":292,"wynonaK":3,"-":156}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.PetPatientCardHandle;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import guitests.guihandles.PetPatientListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag),"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(\"Phone:\\t\\t\" + expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(\"Email:\\t\\t\" + expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(\"Address:\\t\\t\" + expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPetPatient}."},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"    public static void assertCardDisplaysPetPatient(PetPatient expectedPetPatient, PetPatientCardHandle actualCard) {"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(expectedPetPatient.getName().toString(), actualCard.getName());"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(\"Species:\\t\\t\" + expectedPetPatient.getSpecies().toString(), actualCard.getSpecies());"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(\"Breed:\\t\\t\" + expectedPetPatient.getBreed().toString(), actualCard.getBreed());"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(\"Colour:\\t\\t\" + expectedPetPatient.getColour().toString(), actualCard.getColour());"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(\"Blood Type:\\t\" + expectedPetPatient.getBloodType().toString(),"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"                actualCard.getBloodType());"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(\"Owner NRIC:\\t\" + expectedPetPatient.getOwner().toString(), actualCard.getOwnerNric());"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"        //assertTagsEqual(expectedPetPatient, actualCard);"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"     * Solution below adopted from :"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"     * @see PersonCard#getTagColorStyleFor(String)"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"    private static String getTagColorStyleFor(String tagName) {"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"        switch (tagName) {"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"        case \"classmates\":"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"        case \"owesMoney\":"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"            return \"teal\";"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"        case \"colleagues\":"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        case \"neighbours\":"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"            return \"yellow\";"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"        case \"family\":"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"        case \"friend\":"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"            return \"orange\";"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        case \"owner\":"},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"        case \"friends\":"},{"lineNumber":94,"author":{"gitID":"Robert-Peng"},"content":"            return \"brown\";"},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        case \"volunteer\":"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"            return \"green\";"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        case \"spca\":"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"            return \"blue\";"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"        case \"husband\":"},{"lineNumber":103,"author":{"gitID":"Robert-Peng"},"content":"            return \"grey\";"},{"lineNumber":104,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        case \"supplier\":"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"            return \"black\";"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"Robert-Peng"},"content":"        default:"},{"lineNumber":109,"author":{"gitID":"Robert-Peng"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":110,"author":{"gitID":"Robert-Peng"},"content":"            return \"\";"},{"lineNumber":111,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":114,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":116,"author":{"gitID":"Robert-Peng"},"content":"     * color."},{"lineNumber":117,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Robert-Peng"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":119,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":120,"author":{"gitID":"Robert-Peng"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":121,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":122,"author":{"gitID":"Robert-Peng"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":123,"author":{"gitID":"Robert-Peng"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":128,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":130,"author":{"gitID":"Robert-Peng"},"content":"     * color."},{"lineNumber":131,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"Robert-Peng"},"content":"    private static void assertTagsEqual(PetPatient expectedPetPatient, PetPatientCardHandle actualCard) {"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPetPatient.getTags().stream()"},{"lineNumber":134,"author":{"gitID":"Robert-Peng"},"content":"            .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":136,"author":{"gitID":"Robert-Peng"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":138,"author":{"gitID":"Robert-Peng"},"content":"                actualCard.getTagStyleClasses(tag)));"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":153,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Robert-Peng"},"content":"     * Asserts that the list in {@code petPatientListPanelHandle} displays the details of {@code petPatient} correctly"},{"lineNumber":155,"author":{"gitID":"Robert-Peng"},"content":"     * and in the correct order."},{"lineNumber":156,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Robert-Peng"},"content":"    public static void assertListMatching(PetPatientListPanelHandle petPatientListPanelHandle,"},{"lineNumber":158,"author":{"gitID":"Robert-Peng"},"content":"                                          PetPatient... petPatient) {"},{"lineNumber":159,"author":{"gitID":"Robert-Peng"},"content":"        for (int i \u003d 0; i \u003c petPatient.length; i++) {"},{"lineNumber":160,"author":{"gitID":"Robert-Peng"},"content":"            assertCardDisplaysPetPatient(petPatient[i], petPatientListPanelHandle.getPetPatientCardHandle(i));"},{"lineNumber":161,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code petPatientListPanelHandle} displays the details of {@code pet patients}"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * correctly and in the correct order."},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"    public static void assertListMatching(PetPatientListPanelHandle petPatientListPanelHandle,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                                          List\u003cPetPatient\u003e petPatients) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertListMatching(petPatientListPanelHandle, petPatients.toArray(new PetPatient[0]));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":102,"chialejing":1,"wynonaK":15,"-":78}},{"path":"src/test/java/seedu/address/ui/PetPatientListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.testutil.TypicalPetPatients.getTypicalPetPatients;"},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPetPatient;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.PetPatientCardHandle;"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.PetPatientListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":" * Test class for PetPatientListPanel"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    private static final ObservableList\u003cPetPatient\u003e TYPICAL_PETPATIENTS \u003d"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"                    FXCollections.observableList(getTypicalPetPatients());"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"    private PetPatientListPanelHandle petPatientListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"        PetPatientListPanel petPatientListPanel \u003d new PetPatientListPanel(TYPICAL_PETPATIENTS);"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"        uiPartRule.setUiPart(petPatientListPanel);"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListPanelHandle \u003d new PetPatientListPanelHandle(getChildNode(petPatientListPanel.getRoot(),"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"            PetPatientListPanelHandle.PETPATIENT_LIST_VIEW_ID));"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"    public void display_cardMatches_returnTrue() {"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PETPATIENTS.size(); i++) {"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"            petPatientListPanelHandle.navigateToCard(TYPICAL_PETPATIENTS.get(i));"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"            PetPatient expectedPetPatient \u003d TYPICAL_PETPATIENTS.get(i);"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"            PetPatientCardHandle actualCard \u003d petPatientListPanelHandle.getPetPatientCardHandle(i);"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"            assertCardDisplaysPetPatient(expectedPetPatient, actualCard);"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":47}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FIV;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.NRIC_KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.OWES_MONEY_TAG;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPetPatients.NERO;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    public void findPerson() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":54,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":55,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL); // first names of Benson \u0026 Daniel are \"Meier\""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Carl\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, CARL);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Benson Daniel\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson Daniel\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":92,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" -fo 1\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/MeIeR\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Mei\";"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Meiers\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Mark\";"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + DANIEL.getPhone().value;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + DANIEL.getAddress().value;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + tags.get(0).tagName;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/Daniel\";"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o n/\" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"FiNd -o n/Meier\";"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"    public void findNric() {"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple persons by nric in address book, command with leading spaces and trailing spaces"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 2 persons found"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -o nr/\" + NRIC_KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL); // first names of Benson \u0026 Daniel are \"Meier\""},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 2 persons found"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/\" + NRIC_KEYWORD_MATCHING_MEIER;"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        /* Case: find nric where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/F2345678U\";"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, CARL);"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple nric in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/S0123456Q T0123456L\";"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON, DANIEL);"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple nric in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/T0123456L S0123456Q\";"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple nric in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/T0123456L S0123456Q T0123456L\";"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple nric in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 2 persons found"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/S0123456Q T0123456L S9012389E\";"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" -fo 1\");"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/\" + NRIC_KEYWORD_MATCHING_MEIER;"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"        /* Case: find nric not in address book -\u003e 0 persons found */"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o nr/T0014852E\";"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"    public void findPersonTag() {"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"        /* Case: find persons with owemoney tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -o t/\" + OWES_MONEY_TAG + \"   \";"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BENSON);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/\" + OWES_MONEY_TAG;"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person where person list changes*/"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/friends\";"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE);"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 7 persons found */"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/friends owesMoney\";"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 7 persons found */"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/owesMoney friends\";"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 7 persons found */"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/owesMoney friends owesMoney\";"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 2 persons found"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/owesMoney friends NonMatchingKeyWord\";"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/OwEsMoNey fRiEnDs\";"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person in address book, keyword is substring of tag -\u003e 0 persons found */"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/OWE\";"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person in address book, tag is substring of keyword -\u003e 0 persons found */"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/owesmoneys\";"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/Chicken\";"},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/\" + DANIEL.getPhone().value;"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/\" + DANIEL.getAddress().value;"},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"        deleteAllPersons();"},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -o t/friends\";"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, DANIEL);"},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"FiNd -o t/friends\";"},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"    public void findPet() {"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":"        String command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + TAG_DESC_FRIEND"},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":347,"author":{"gitID":"wynonaK"},"content":"                + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":"        executeCommand(command);"},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":"        command \u003d AddCommand.COMMAND_WORD + \"  \" + OPTION_PET + \"  \" + NAME_DESC_NERO"},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":"                + \"  \" +  SPECIES_DESC_NERO + \"  \" + BREED_DESC_NERO + \"  \" +  COLOUR_DESC_NERO + \"  \""},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"                + BLOODTYPE_DESC_NERO + \"  \" + TAG_DESC_FIV + \" \" + OPTION_OWNER + \"  \" + NRIC_DESC_BOB + \"  \";"},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":"        executeCommand(command);"},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":356,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":357,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":358,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + NAME_DESC_NERO + \"   \";"},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":363,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":364,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":365,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + NAME_DESC_NERO;"},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":"        /* Case: find name not in address book -\u003e 0 persons found */"},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p n/NEerrreo\";"},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + SPECIES_DESC_NERO + \"   \";"},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + SPECIES_DESC_NERO;"},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"        /* Case: find species not in address book -\u003e 0 persons found */"},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p s/Doggy\";"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + BREED_DESC_NERO + \"   \";"},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + BREED_DESC_NERO;"},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":"        /* Case: find breed not in address book -\u003e 0 persons found */"},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p b/breedx\";"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + COLOUR_DESC_NERO + \"   \";"},{"lineNumber":429,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":430,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + COLOUR_DESC_NERO;"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":"        /* Case: find colour not in address book -\u003e 0 persons found */"},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p c/Purple\";"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":445,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + BLOODTYPE_DESC_NERO + \"   \";"},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + BLOODTYPE_DESC_NERO;"},{"lineNumber":461,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":464,"author":{"gitID":"wynonaK"},"content":"        /* Case: find blood type not in address book -\u003e 0 persons found */"},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p bt/O\";"},{"lineNumber":466,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":467,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":468,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":470,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":471,"author":{"gitID":"wynonaK"},"content":"        /* Case: find pet name with  tag in address book, command with leading spaces and trailing spaces"},{"lineNumber":472,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 person found, 1 pet found"},{"lineNumber":473,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":474,"author":{"gitID":"wynonaK"},"content":"        command \u003d \"   \" + FindCommand.COMMAND_WORD + \" -p \" + TAG_DESC_FIV + \"   \";"},{"lineNumber":475,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel, BOB);"},{"lineNumber":476,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel, NERO);"},{"lineNumber":477,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":478,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":479,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":480,"author":{"gitID":"wynonaK"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":481,"author":{"gitID":"wynonaK"},"content":"         * -\u003e 1 persons found, 1 pet found"},{"lineNumber":482,"author":{"gitID":"wynonaK"},"content":"         */"},{"lineNumber":483,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p \" + TAG_DESC_FIV;"},{"lineNumber":484,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":485,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":486,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":487,"author":{"gitID":"wynonaK"},"content":"        /* Case: find tag not in address book -\u003e 0 persons found */"},{"lineNumber":488,"author":{"gitID":"wynonaK"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" -p t/owner\";"},{"lineNumber":489,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPersonList(expectedModel);"},{"lineNumber":490,"author":{"gitID":"wynonaK"},"content":"        ModelHelper.setFilteredPetPatientList(expectedModel);"},{"lineNumber":491,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":492,"author":{"gitID":"wynonaK"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":493,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":494,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":495,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":496,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":497,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":498,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":499,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":500,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":501,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":502,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":503,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":504,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":505,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":506,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":507,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":508,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":509,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":510,"author":{"gitID":"wynonaK"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size())"},{"lineNumber":511,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":512,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, expectedModel.getFilteredPetPatientList().size());"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":515,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":516,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":517,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":518,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":521,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":522,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":523,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":524,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":525,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":526,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":527,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":528,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":529,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":530,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":533,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":535,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":536,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":537,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":538,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":368,"-":170}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        String defaultConfigAsString \u003d \"App title : Medeina\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":31}},{"path":"src/test/java/seedu/address/ui/PetPatientCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPetPatient;"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import guitests.guihandles.PetPatientCardHandle;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":" * Test class for PetPatientCard"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientCardTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    private PetPatient petPatient;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"    private PetPatientCard petPatientCard;"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"    public void setUp() throws Exception {"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"        petPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"        petPatientCard \u003d new PetPatientCard(petPatient, 1);"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"    public void display_checkDetails_displayedCorrectly() {"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"        uiPartRule.setUiPart(petPatientCard);"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"        assertCardDisplay(petPatientCard, petPatient, 1);"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"    public void equals_sameNameSameIndex_returnTrue() {"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"        PetPatientCard copy \u003d new PetPatientCard(petPatient, 1);"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"        assertTrue(petPatientCard.equals(copy));"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"    public void equals_checkNull_returnFalse() {"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"        assertFalse(petPatientCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"    public void equals_samePetPatientCard_returnTrue() {"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"        assertTrue(petPatientCard.equals(petPatientCard));"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"    public void equals_differentPetPatientSameIndex_returnFalse() {"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"        PetPatient differentPetPatient \u003d new PetPatientBuilder().withName(\"differentName\").build();"},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"        assertFalse(petPatientCard.equals((new PetPatientCard(differentPetPatient, 1))));"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"    public void equals_samePetPatientDifferentIndex_returnFalse() {"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"        assertFalse(petPatientCard.equals(new PetPatientCard(petPatient, 2)));"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"      * Asserts that {@code petpatientCard} displays the details of {@code expectedpetPatient} correctly and matches"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"     * {@code expectedId}."},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"    private void assertCardDisplay(PetPatientCard petPatientCard, PetPatient expectedPetPatient, int expectedId) {"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        PetPatientCardHandle petPatientCardHandle \u003d new PetPatientCardHandle(petPatientCard.getRoot());"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"        // verify id is displayed correctly"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", petPatientCardHandle.getId());"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"        // verify petpatient details are displayed correctly"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"        assertCardDisplaysPetPatient(expectedPetPatient, petPatientCardHandle);"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":73,"chialejing":1,"-":5}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    private static final String VALID_NRIC \u003d \"S6752888K\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":4,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        String deleteCommand \u003d \"delete -o 9\";"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":3,"-":121}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEME_LIGHTT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEME_PINK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalThemes.DARK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalThemes.LIGHT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidUsage() {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"        //empty"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"                ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        //more than 1 argument"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, \"light dark\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"                ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, \"dark blue\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"                ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidTheme() {"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"        //themes do not exist"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, INVALID_THEME_PINK, Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, INVALID_THEME_LIGHTT, Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    public void parse_validTheme_caseInsensitive() {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        //LIGHT"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, \"LIGHT\", new ChangeThemeCommand(LIGHT));"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"        //LIghT"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, \"LIghT\", new ChangeThemeCommand(LIGHT));"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"        //DaRk"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, \"DaRk\", new ChangeThemeCommand(DARK));"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"        //DARk"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, \"DARk\", new ChangeThemeCommand(DARK));"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":40,"-":15}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_JOKER;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_JOKER;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_JOKER;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BREED_DESC;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLOUR_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOKER;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_JOKER;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DEPRESSION;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_JOKER;"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_JOKER;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_JOKER;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOKER;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_JOKER;"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DEPRESSION;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET_PATIENTS;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PETPATIENT;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.PetPatientUtil;"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.TypicalPetPatients;"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"    public void editPerson() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":113,"author":{"gitID":"Robert-Peng"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"Robert-Peng"},"content":"                + \" \" + NRIC_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":117,"author":{"gitID":"Robert-Peng"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":129,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":166,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":177,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":178,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + NAME_DESC_BOB,"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":228,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":231,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":232,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"Robert-Peng"},"content":"        //@@author Robert-Peng"},{"lineNumber":236,"author":{"gitID":"Robert-Peng"},"content":"        /* Case: invalid nric -\u003e rejected */"},{"lineNumber":237,"author":{"gitID":"Robert-Peng"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":238,"author":{"gitID":"Robert-Peng"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_NRIC_DESC,"},{"lineNumber":239,"author":{"gitID":"Robert-Peng"},"content":"                Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitID":"Robert-Peng"},"content":"        //@@author"},{"lineNumber":241,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":243,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_OWNER + \" \""},{"lineNumber":244,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":252,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased()"},{"lineNumber":253,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":254,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":258,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_OWNER + \" \" + index.getOneBased()"},{"lineNumber":259,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":260,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"    public void editPetPatient() throws Exception {"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"        Model model \u003d getModel();"},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":"        // Add Person BOB"},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":"        String command \u003d AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + TAG_DESC_FRIEND"},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"        executeCommand(command);"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"        // Add PetPatient NERO"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":"        command \u003d AddCommand.COMMAND_WORD + \"  \" + OPTION_PET + \"  \" + NAME_DESC_NERO"},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"                + \"  \" + SPECIES_DESC_NERO + \"  \" + BREED_DESC_NERO + \"  \" + COLOUR_DESC_NERO + \"  \""},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"                + BLOODTYPE_DESC_NERO + \"  \" + OPTION_OWNER + \"  \" + NRIC_DESC_BOB;"},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":"        executeCommand(command);"},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":282,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":"         * -\u003e edited"},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":"         *"},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":"         */"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"        Index index \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"        command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \""},{"lineNumber":289,"author":{"gitID":"chialejing"},"content":"                + OPTION_PET + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_NERO + \"  \""},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_NERO + \" \" + BREED_DESC_NERO + \"  \" + COLOUR_DESC_NERO"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":"                + \" \" + BLOODTYPE_DESC_NERO + \" \" + NRIC_DESC_BOB;"},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"        PetPatient editedPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_NERO)"},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_NERO).withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO)"},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_NERO).withOwnerNric(VALID_NRIC_BOB).withTags().build();"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, index, editedPetPatient);"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"        /* Case: edit a petpatient with new values same as existing values -\u003e edited */"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + NAME_DESC_NERO + SPECIES_DESC_NERO + BREED_DESC_NERO"},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_NERO + BLOODTYPE_DESC_NERO + NRIC_DESC_BOB + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, index, TypicalPetPatients.NERO);"},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"        index \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + TAG_DESC_DEPRESSION;"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"        PetPatient petPatientToEdit \u003d getModel().getFilteredPetPatientList().get(index.getZeroBased());"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"        editedPetPatient \u003d new PetPatientBuilder(petPatientToEdit).withTags(VALID_TAG_DEPRESSION).build();"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, index, editedPetPatient);"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"        index \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":"                + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"        editedPetPatient \u003d new PetPatientBuilder(petPatientToEdit).withTags().build();"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, index, editedPetPatient);"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" 0\" + NAME_DESC_NERO,"},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":325,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" -1\" + NAME_DESC_NERO,"},{"lineNumber":326,"author":{"gitID":"chialejing"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":"        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \" + invalidIndex + COLOUR_DESC_NERO,"},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"                Messages.MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX);"},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":334,"author":{"gitID":"chialejing"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + NAME_DESC_NERO,"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased(),"},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":345,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":346,"author":{"gitID":"chialejing"},"content":"                PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid species -\u003e rejected */"},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_SPECIES_DESC,"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":"                Species.MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid breed -\u003e rejected */"},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_BREED_DESC,"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":"                Breed.MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":358,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid colour -\u003e rejected */"},{"lineNumber":359,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":360,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_COLOUR_DESC,"},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"                Colour.MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid blood type -\u003e rejected */"},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":365,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_BLOODTYPE_DESC,"},{"lineNumber":366,"author":{"gitID":"chialejing"},"content":"                BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid owner nric -\u003e rejected */"},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_NRIC_DESC,"},{"lineNumber":371,"author":{"gitID":"chialejing"},"content":"                Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":372,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":373,"author":{"gitID":"chialejing"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":374,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + OPTION_PET + \" \""},{"lineNumber":375,"author":{"gitID":"chialejing"},"content":"                        + INDEX_FIRST_PETPATIENT.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":376,"author":{"gitID":"chialejing"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":377,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":378,"author":{"gitID":"chialejing"},"content":"        /* Case: edit a petpatient with new values same as another petpatient\u0027s values -\u003e rejected */"},{"lineNumber":379,"author":{"gitID":"chialejing"},"content":"        PetPatient joker \u003d new PetPatientBuilder()"},{"lineNumber":380,"author":{"gitID":"chialejing"},"content":"                .withName(VALID_NAME_JOKER)"},{"lineNumber":381,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER)"},{"lineNumber":382,"author":{"gitID":"chialejing"},"content":"                .withBreed(VALID_BREED_JOKER)"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":"                .withColour(VALID_COLOUR_JOKER)"},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER)"},{"lineNumber":385,"author":{"gitID":"chialejing"},"content":"                .withOwnerNric(VALID_NRIC_BOB)"},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_DEPRESSION).build();"},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":"        executeCommand(PetPatientUtil.getAddCommand(joker, BOB.getNric()));"},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":"        assertTrue(getModel().getAddressBook().getPetPatientList().contains(joker));"},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"        index \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":"        assertFalse(getModel().getFilteredPetPatientList().get(index.getZeroBased()).equals(joker));"},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":"        command \u003d EditCommand.COMMAND_WORD + OPTION_PET + \" \" + index.getOneBased()"},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + NRIC_DESC_BOB + TAG_DESC_DEPRESSION;"},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":398,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":399,"author":{"gitID":"chialejing"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, PetPatient, Index)} except that"},{"lineNumber":400,"author":{"gitID":"chialejing"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":402,"author":{"gitID":"chialejing"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":403,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":404,"author":{"gitID":"chialejing"},"content":"    private void assertCommandSuccess(String command, Index toEdit, PetPatient editedPetPatient) {"},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, toEdit, editedPetPatient, null);"},{"lineNumber":406,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":408,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":409,"author":{"gitID":"chialejing"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":410,"author":{"gitID":"chialejing"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":411,"author":{"gitID":"chialejing"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":412,"author":{"gitID":"chialejing"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":413,"author":{"gitID":"chialejing"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":414,"author":{"gitID":"chialejing"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":415,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"    private void assertCommandSuccess(String command, Index toEdit, PetPatient editedPetPatient,"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":"            expectedModel.updatePetPatient("},{"lineNumber":421,"author":{"gitID":"chialejing"},"content":"                    expectedModel.getFilteredPetPatientList().get(toEdit.getZeroBased()), editedPetPatient);"},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":"            expectedModel.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException | PetPatientNotFoundException e) {"},{"lineNumber":424,"author":{"gitID":"chialejing"},"content":"            throw new IllegalArgumentException("},{"lineNumber":425,"author":{"gitID":"chialejing"},"content":"                    \"editedPetPatient is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":426,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":427,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":428,"author":{"gitID":"chialejing"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":429,"author":{"gitID":"chialejing"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PET_PATIENT_SUCCESS, editedPetPatient),"},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":"                expectedSelectedCardIndex);"},{"lineNumber":431,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":432,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":435,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":436,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":437,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":438,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":439,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":441,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":442,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":445,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":446,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":447,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":448,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":449,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":450,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":451,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":452,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":453,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":454,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":455,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":456,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":457,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":458,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":459,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":460,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":461,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":462,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":465,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":466,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":469,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":470,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":471,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":472,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":473,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":474,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":475,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":478,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":479,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":480,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":481,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":482,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":483,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":484,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":485,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":486,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":487,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":488,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":489,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":490,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":491,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":492,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":493,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":494,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"        expectedModel.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"        expectedModel.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":497,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":498,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":499,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":500,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":501,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":502,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":503,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":504,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":505,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":508,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":509,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":510,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":511,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":512,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":513,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":514,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":515,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":516,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":517,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":518,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":519,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":522,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":523,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":524,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":525,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":526,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":527,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":248,"Robert-Peng":19,"wynonaK":2,"-":258}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalThemes.DARK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    public void parseCommand_deleteAlias_forcePerson() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_ALIAS + \" -fo \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        assertEquals(new DeleteCommand(4, INDEX_FIRST_PERSON), command);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public void parseCommand_delete_forcePerson() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                DeleteCommand.COMMAND_WORD + \" -fo \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        assertEquals(new DeleteCommand(4, INDEX_FIRST_PERSON), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"                + OPTION_OWNER + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        assertTrue(parser.parseCommand(FindCommand.COMMAND_ALIAS + \" -o n/\""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"                + keywords.stream().collect(Collectors.joining(\" \"))) instanceof FindCommand);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        assertTrue(parser.parseCommand(FindCommand.COMMAND_WORD + \" -o n/\""},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"                + keywords.stream().collect(Collectors.joining(\" \"))) instanceof FindCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":184,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":191,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":236,"author":{"gitID":"-"},"content":"                ChangeThemeCommand.COMMAND_WORD + \" dark\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(new ChangeThemeCommand(DARK), command);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"wynonaK":11,"-":224}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":25,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public void parse_onlyOwnerOption_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -o \","},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankNameOption_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -o n/ \","},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                String.format(Name.MESSAGE_NAME_CONSTRAINTS));"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankNricOption_throwsParseException() {"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -o nr/ \","},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"                String.format(Nric.MESSAGE_NRIC_CONSTRAINTS));"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankTagOption_throwsParseException() {"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -o t/ \","},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                String.format(Tag.MESSAGE_TAG_CONSTRAINTS));"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public void parse_onlyPetOption_throwsParseException() {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p \","},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankPetNameOption_throwsParseException() {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p n/ \","},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                String.format(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS));"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankSpeciesOption_throwsParseException() {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p s/ \","},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"                String.format(Species.MESSAGE_PET_SPECIES_CONSTRAINTS));"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankBreedOption_throwsParseException() {"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p b/ \","},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                String.format(Breed.MESSAGE_PET_BREED_CONSTRAINTS));"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankColourOption_throwsParseException() {"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p c/ \","},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"                String.format(Colour.MESSAGE_PET_COLOUR_CONSTRAINTS));"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankBloodTypeOption_throwsParseException() {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p bt/ \","},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                String.format(BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS));"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    public void parse_blankPetTagOption_throwsParseException() {"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -p t/ \","},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"                String.format(Tag.MESSAGE_TAG_CONSTRAINTS));"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":77,"-":18}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public void parse_validOwnerArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-o 1\", new DeleteCommand(1, INDEX_FIRST_PERSON));"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    public void parse_validForceOwnerArgs_returnsDeleteCommand() {"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-fo 1\", new DeleteCommand(4, INDEX_FIRST_PERSON));"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    public void parse_validPetArgs_returnsDeleteCommand() {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-p 1\", new DeleteCommand(2, INDEX_FIRST_PERSON));"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void parse_validForcePetArgs_returnsDeleteCommand() {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-fp 1\", new DeleteCommand(5, INDEX_FIRST_PERSON));"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public void parse_validAppointmentArgs_returnsDeleteCommand() {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \"-a 1\", new DeleteCommand(3, INDEX_FIRST_PERSON));"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":29,"-":25}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Medeina - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F14-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"Welcome to Medeina! Medeina is a application designed to help veterinarians and their assistants to manage contacts and appointments. Medeina is a command-line based application, all actions can be done using only keyboard."},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"This developer guide aims to help new developers to get started with Medeina, and also serves as a reference for even experienced Medeina contributors."},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"To successfully install and run Medeina, you\u0027ll need the following:"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"To set up Medeina in your computer, follow these steps:"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":49,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":55,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"To check if the setup is successful:"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"Before you start contributing to Medeina, the following configurations are required:"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":73,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":74,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":77,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":92,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":104,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":112,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":144,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"Robert-Peng"},"content":"The above diagram shows the relations between each subcomponents within the Logic component."},{"lineNumber":147,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete -o 1`."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":".Component interactions for `delete -o 1` command (part 1)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":165,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":170,"author":{"gitID":"Robert-Peng"},"content":"// tag::UIcomponent[]"},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"Robert-Peng"},"content":"The following diagram displays the structure of the UI component."},{"lineNumber":174,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":176,"author":{"gitID":"Robert-Peng"},"content":"image::UiClassDiagram.png[width\u003d\"600\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"Robert-Peng"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"Robert-Peng"},"content":"// end::UIcomponent[]"},{"lineNumber":191,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"Robert-Peng"},"content":"The following diagram displays the structure of the Logic component."},{"lineNumber":196,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"Robert-Peng"},"content":"The following diagram displays the structures of the commands in Logic component."},{"lineNumber":202,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":208,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":211,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":212,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":213,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"image::ModelClassDiagramUpdated.PNG[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* stores Medeina\u0027s data."},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"* exposes unmodifiable `ObservableList\u003cPerson\u003e`, `ObservableList\u003cPetPatient\u003e` and `ObservableList\u003cAppointment\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"chialejing"},"content":"The following diagram displays the structure of the Storage component. +"},{"lineNumber":234,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":236,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"chialejing"},"content":"The `Storage` component:"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"chialejing"},"content":"* can save `UserPref` objects in json format and read it back;"},{"lineNumber":243,"author":{"gitID":"chialejing"},"content":"* can save Medeina\u0027s data in `xml` format and read it back."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::autocompleteDG[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"The autocomplete feature serves to enhance user experience in using the Command Line Interface (CLI). It currently supports command words, options, prefixes, and parameters such as tags, NRIC, pet patient\u0027s name, breed, species, colour and blood type."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"The implementation logic of the autocomplete feature resides in the `UI` component. The autocomplete feature is driven by a `ChangeListener` attached to `commandTextField.textProperty()` in `CommandBox.java`. Once the `ChangeListener` registers any changes in the content of `commandTextField`, `triggerAutocomplete()` will be executed. +"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"Suppose that the user is launching Medeina. Before the Graphical User Interface (GUI) is ready, a `CommandBox` object will be initialized for the user to enter commands. The following diagram illustrates a sequence of method calls, starting with the initialization of `CommandBox`, followed by the initialization of an instance of `Autocomplete`, and then calling 3 set attribute methods in the `Logic` component. Subsequently, suppose the user has typed `add -p n/Happy s/Cat b/Persian c/Calico bt/A -o nr/`. The diagram shows a sequence of method calls, starting with triggerAutocomplete(), to get autocomplete suggestions for NRIC to be shown in a context menu."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":".Sequence diagram for autocomplete feature"},{"lineNumber":266,"author":{"gitID":"-"},"content":"image::autocompleteSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"`Autocomplete.java` encompasses the logic for parsing user input in the CLI and determining what autocomplete suggestions are to be passed back to `CommandBox.java`. Data required for autocomplete, such as a list of command words, prefixes, options and parameters in Medeina, are retrieved from the `Logic` component. All data required by `Autocomplete` are consolidated in a similar way in the `Logic` component."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"The following code shows how NRIC and tags from all `Person` objects are consolidated:"},{"lineNumber":272,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":273,"author":{"gitID":"-"},"content":"----"},{"lineNumber":274,"author":{"gitID":"-"},"content":"public void setAttributesForPersonObjects() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    nricInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    personTagsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    for (Person p : model.getAddressBook().getPersonList()) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        nricInModel.add(p.getNric().toString());"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        personTagsInModel.addAll(p.getTags());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"public Set\u003cString\u003e getAllNric() {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    return nricInModel;"},{"lineNumber":286,"author":{"gitID":"-"},"content":"}"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"public Set\u003cString\u003e getAllPersonTags() {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e personTags \u003d personTagsInModel.stream()"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            .map(pt -\u003e pt.tagName)"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    return personTags;"},{"lineNumber":293,"author":{"gitID":"-"},"content":"}"},{"lineNumber":294,"author":{"gitID":"-"},"content":"----"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"You may have noticed that in sequence diagram above (Figure 11), `Autocomplete` is a singleton class that is initialized only once, and there is only 1 instance of `CommandBox` in the application. You may be wondering \"can the 3 set attribute methods in the `Logic` component be called only once?\". If you are currently unsure, imagine that the user is constantly adding new contacts to Medeina. However, `Autocomplete` uses only data from when Medeina was launched. +"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"The answer to the question is definitely no. The set attributes methods have to be called whenever there is a change in Medeina\u0027s data, otherwise the autocomplete suggestions will not be up to date."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The following code snippet ensures that the data used by `Autocomplete` is kept updated."},{"lineNumber":301,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":302,"author":{"gitID":"-"},"content":"----"},{"lineNumber":303,"author":{"gitID":"-"},"content":"public void handleAddressBookChangedEvent(AddressBookChangedEvent a) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    init(this.logic); // calls the 3 set attributes methods"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(a, \"Local data has changed, update autocomplete data\"));"},{"lineNumber":306,"author":{"gitID":"-"},"content":"}"},{"lineNumber":307,"author":{"gitID":"-"},"content":"----"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Updating autocomplete data"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** All Data is updated only when `AddressBookChangedEvent` is raised."},{"lineNumber":314,"author":{"gitID":"-"},"content":"** Pros: Efficient and with minimal redundant updates."},{"lineNumber":315,"author":{"gitID":"-"},"content":"** Cons: Implementation is less straight-forward."},{"lineNumber":316,"author":{"gitID":"-"},"content":"* **Alternative 2 :** Updates the specific required data e.g. NRIC, whenever autocomplete is triggered."},{"lineNumber":317,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":318,"author":{"gitID":"-"},"content":"** Cons: Redundant updates. Required data will remain the same, except only when add, delete, or edit commands are executed."},{"lineNumber":319,"author":{"gitID":"-"},"content":"* **Alternative 3:** All Data is updated whenever autocomplete is triggered."},{"lineNumber":320,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":321,"author":{"gitID":"-"},"content":"** Cons: Many redundant data updates. Running for-loops in the `Logic` component for every character the user types, is resource-intensive."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Event-driven or user-driven"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Implement change listener to automatically track user input and provide autocomplete suggestions."},{"lineNumber":326,"author":{"gitID":"-"},"content":"** Pros: Great improvement in user experience, as Medeina has long and complex command syntax."},{"lineNumber":327,"author":{"gitID":"-"},"content":"** Cons: Logic for handling caret position and command syntax parsing is complicated and can be prone to bugs."},{"lineNumber":328,"author":{"gitID":"-"},"content":"* **Alternative 2:** User has to press a specific key e.g. tab to invoke autocompletion."},{"lineNumber":329,"author":{"gitID":"-"},"content":"** Pros: Less logic to account for, and is thus easier to implement."},{"lineNumber":330,"author":{"gitID":"-"},"content":"** Cons: User experience is compromised."},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Autocomplete scope"},{"lineNumber":333,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Autocomplete works only for commands that require options and prefixes."},{"lineNumber":334,"author":{"gitID":"-"},"content":"** Pros: Reduce unneccessary autocomplete suggestions."},{"lineNumber":335,"author":{"gitID":"-"},"content":"** Cons: Additional implementation logic to handle checking of command input."},{"lineNumber":336,"author":{"gitID":"-"},"content":"* **Alternative 2:** Autocomplete works for any user input as long as correct options and prefixes are specifed."},{"lineNumber":337,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":338,"author":{"gitID":"-"},"content":"** Cons: A whitespace after a command that doesn\u0027t require options and prefixes e.g. `help`, will bring up a list of suggested prefixes. This may cause confusion for the user."},{"lineNumber":339,"author":{"gitID":"-"},"content":"// end::autocompleteDG[]"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Expanding the autocomplete feature"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Include descriptions in autocomplete suggestions for options and prefixes"},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Pros: Great improvement in user experience, as the autocomplete suggestions now serve as a brief overview of what each prefix and options are used for."},{"lineNumber":345,"author":{"gitID":"-"},"content":"** Cons: Additional implementation logic to handle descriptions e.g. descriptions should not be added to user input in the command box."},{"lineNumber":346,"author":{"gitID":"-"},"content":"* **Alternative 2:** Keep to just simple autocomplete"},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Pros: No additional logic required."},{"lineNumber":348,"author":{"gitID":"-"},"content":"** Cons: User experience is compromised."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"// tag::addcommandDG[]"},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add Command"},{"lineNumber":352,"author":{"gitID":"-"},"content":"This command creates new `Person`, `PetPatient` and `Appointment` objects to be added into Medeina."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":355,"author":{"gitID":"-"},"content":"The add command involves a combination of options to differentiate between what objects are to be added. Command syntax required for adding the different objects are shown below. Take note that the command word has been omitted."},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"----"},{"lineNumber":358,"author":{"gitID":"-"},"content":" (1) Person: -o n/NAME p/PHONE e/EMAIL a/ADDRESS nr/NRIC"},{"lineNumber":359,"author":{"gitID":"-"},"content":" (2) PetPatient: -p n/NAME s/SPECIES b/BREED c/COLOUR bt/BLOODTYPE -o nr/NRIC"},{"lineNumber":360,"author":{"gitID":"-"},"content":" (3) Appointment: -a d/DATETIME r/REMARKS t/TYPE_OF_APPOINTMENT -o nr/NRIC -p n/PET_PATIENT_NAME"},{"lineNumber":361,"author":{"gitID":"-"},"content":" (4) All 3 objects in one command: -o n/NAME p/PHONE e/EMAIL a/ADDRESS nr/NRIC -p n/NAME s/SPECIES b/BREED c/COLOUR bt/BLOODTYPE -a d/DATETIME r/REMARKS t/TYPE_OF_APPOINTMENT"},{"lineNumber":362,"author":{"gitID":"-"},"content":"----"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"Syntax (4) is equivalent to syntaxes (1), (2), and (3), but with fewer parameters required. Syntax (4) is designed to increase efficiency for the user in using the CLI, by reducing typing of redundant parameters. The parsing of these 4 `add` command syntaxes is performed using regular expressions pattern matching in `AddCommandParser`. +"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"The following diagram illustrates the sequence of methods that occurs when adding a `PetPatient` object to Medeina."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":".Sequence diagram for autocomplete feature"},{"lineNumber":369,"author":{"gitID":"-"},"content":"image::addCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"A `PetPatient` object must be assigned to an existing `Person` object. The `Person` object refers to a point of contact, which could be the owner of the pet patient, or a volunteer in-charge of the pet patient. This type of dependency is verified in `AddCommand.java`."},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"The follow code shows how dependency between `PetPatient` and `Person` object is verified before the `PetPatient` object is added to `Model` component:"},{"lineNumber":376,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"----"},{"lineNumber":378,"author":{"gitID":"-"},"content":"private CommandResult addNewPetPatient() throws DuplicatePetPatientException, CommandException {"},{"lineNumber":379,"author":{"gitID":"-"},"content":"    person \u003d getValidOwner(ownerNric);"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    model.addPetPatient(petPatient);"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    return new CommandResult(String.format(MESSAGE_SUCCESS_PETPATIENT, petPatient, person));"},{"lineNumber":382,"author":{"gitID":"-"},"content":"}"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"private Person getValidOwner(Nric ownerNric) throws CommandException {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    Person validOwner \u003d model.getPersonWithNric(ownerNric);"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    if (validOwner \u003d\u003d null) {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"\t\tthrow new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    return validOwner;"},{"lineNumber":390,"author":{"gitID":"-"},"content":"}"},{"lineNumber":391,"author":{"gitID":"-"},"content":"----"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Dependencies for `Appointment` object is also verified in a similar way in `AddCommand.java`."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Consolidating similar commands"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** A single `add` command with options to differentiate objects to be added."},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: It is intuitive for users to just remember just 1 `add` command. Greater flexibility in introducing \"power\" command like syntax (4)."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: Complex implementation logic"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* **Alternative 2:** 3 separate commands e.g. `addperson`, `addpetpatient`, `addappointment`"},{"lineNumber":403,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":404,"author":{"gitID":"-"},"content":"** Cons: Requires syntax (4) to be implemented as a separate command. More commands for the user to remember."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":407,"author":{"gitID":"-"},"content":"Currently, `add`  command uses up to 3 options in its syntax. The order of options must be preserved due to the use of regular expressions to match command syntax pattern. This differs from prefixes which have flexibility in ordering. As a result, the add command may be less intuitive for users."},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"Another thing to note is that, the syntax for adding an appointment takes in the NRIC of an existing contact and a pet patient name. The pet patient that is specified must be one that assigned under the contact. However, the adding of a new appointment does not account for cases in which a particular contact has pet patients sharing the same name. The `add` command will assign the new appointment for the pet patient which has a lower `index` in Medeina. A simple workaround for this problem, is to `edit` the pet patient name with slight variation to differentiate them e.g. \"Happy1\", \"Happy2\"."},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":412,"author":{"gitID":"-"},"content":"The problem of multiple pet patient sharing the same name under a contact will be addressed in near future. The `add` command syntax can be modified to include an optional index to differentiate the pet patients without having to edit their names. Aside from this, further improvements can be made to simplify the command syntax of `add`."},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"// end::addcommandDG[]"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"// tag::editcommandDG[]"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d Edit Command"},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"This command allows a user to edit `Person`, `PetPatient` and `Appointment` objects."},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":"Below is a sequence diagram detailing the interaction between the various classes upon invocation of the `edit` command."},{"lineNumber":424,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":425,"author":{"gitID":"chialejing"},"content":".Sequence Diagram for Edit Command"},{"lineNumber":426,"author":{"gitID":"chialejing"},"content":"image::EditCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":427,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":428,"author":{"gitID":"chialejing"},"content":"{empty} +"},{"lineNumber":429,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":"We examine the flow of events, starting when the command goes through `EditCommandParser` for parsing. The type of information provided by the user will be"},{"lineNumber":431,"author":{"gitID":"chialejing"},"content":"identified through the use of regular expression `Pattern` objects. +"},{"lineNumber":432,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":434,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":435,"author":{"gitID":"chialejing"},"content":"private static final Pattern EDIT_COMMAND_FORMAT_PERSON \u003d Pattern.compile(\"-(o)+(?\u003cpersonInfo\u003e.*)\");"},{"lineNumber":436,"author":{"gitID":"chialejing"},"content":"private static final Pattern EDIT_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cpetPatientInfo\u003e.*)\");"},{"lineNumber":437,"author":{"gitID":"chialejing"},"content":"private static final Pattern EDIT_COMMAND_FORMAT_APPOINTMENT \u003d Pattern.compile(\"-(a)+(?\u003cappointmentInfo\u003e.*)\");"},{"lineNumber":438,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":439,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":440,"author":{"gitID":"chialejing"},"content":"For instance, if the user has keyed in `edit -p 1 nr/S1234567Z` (same command as in the sequence diagram), then through the matching of the `Pattern` objects,"},{"lineNumber":441,"author":{"gitID":"chialejing"},"content":"we will know that the user intends to edit a `PetPatient` object, since it matches the pattern"},{"lineNumber":442,"author":{"gitID":"chialejing"},"content":" `-(p)+(?\u003cpetPatientInfo\u003e.*)`. +"},{"lineNumber":443,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":444,"author":{"gitID":"chialejing"},"content":"Depending on which case matches (refer to code snippet below), we will then call the relevant parsing method for the"},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"information provided by the user. Following the example from above, since the user has supplied the `-p` argument,"},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":"further parsing of the information will be done in the `parsePetPatient` method."},{"lineNumber":447,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":448,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":449,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":450,"author":{"gitID":"chialejing"},"content":"public EditCommand parse(String args) throws ParseException {"},{"lineNumber":451,"author":{"gitID":"chialejing"},"content":"    String trimmedArgs \u003d args.trim();"},{"lineNumber":452,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":453,"author":{"gitID":"chialejing"},"content":"    ..."},{"lineNumber":454,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"    // Edit existing pet patient"},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":"    final Matcher matcherForPetPatient \u003d EDIT_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"    if (matcherForPetPatient.matches()) {"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":"        String petPatientInfo \u003d matcherForPetPatient.group(\"petPatientInfo\");"},{"lineNumber":459,"author":{"gitID":"chialejing"},"content":"        return parsePetPatient(petPatientInfo);"},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":462,"author":{"gitID":"chialejing"},"content":"    ..."},{"lineNumber":463,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":464,"author":{"gitID":"chialejing"},"content":"    // throws exception for invalid format"},{"lineNumber":465,"author":{"gitID":"chialejing"},"content":"    throw new ParseException("},{"lineNumber":466,"author":{"gitID":"chialejing"},"content":"        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE)"},{"lineNumber":467,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":469,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":471,"author":{"gitID":"chialejing"},"content":"The further parsing of the information in `parsePerson()`, `parsePetPatient()` and `parseAppointment()` will require"},{"lineNumber":472,"author":{"gitID":"chialejing"},"content":"the use of `EditPersonDescriptor`, `EditPetPatientDescriptor` and `EditAppointmentDescriptor` respectively to create"},{"lineNumber":473,"author":{"gitID":"chialejing"},"content":"the final objects to be replaced in the corresponding lists located inside `AddressBook`. +"},{"lineNumber":474,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":475,"author":{"gitID":"chialejing"},"content":"The descriptor objects are used primarily for the transfer of information to the corresponding `Person`, `PetPatient`"},{"lineNumber":476,"author":{"gitID":"chialejing"},"content":"or `Appointment` object. +"},{"lineNumber":477,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":478,"author":{"gitID":"chialejing"},"content":"Using the example as explained previously, a new `EditPetPatientDescriptor` object will be created, and the relevant"},{"lineNumber":479,"author":{"gitID":"chialejing"},"content":"information is retrieved out. Since only `PREFIX_NRIC` is present (`nr/`), then only the `ownerNric` field in"},{"lineNumber":480,"author":{"gitID":"chialejing"},"content":"`EditPetPatientDescriptor` will be set."},{"lineNumber":481,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":"public EditCommand parsePetPatient(String petPatientInfo) throws ParseException {"},{"lineNumber":485,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":486,"author":{"gitID":"chialejing"},"content":"    ..."},{"lineNumber":487,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"    EditPetPatientDescriptor editPetPatientDescriptor \u003d new EditPetPatientDescriptor();"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"    try {"},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setName);"},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES))"},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setSpecies);"},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parseBreed(argMultimap.getValue(PREFIX_BREED))"},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setBreed);"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR))"},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setColour);"},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE))"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setBloodType);"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":"        ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC))"},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setOwnerNric);"},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"                .ifPresent(editPetPatientDescriptor::setTags);"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"        throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":"    ..."},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":"    return new EditCommand(index, editPetPatientDescriptor);"},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"The relevant descriptor will be passed over to `EditCommand` at the end of the function, as can be seen above. +"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":"Within `EditCommand`, there are a few private variables specified. One of the key things to note is that we are using"},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"an `enum` to identify the type of object that we are editing. After the relevant method is called for `EditCommand`,"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"the index, type and descriptor will be set in the created `EditCommand` object, as can be seen in the code snippet below."},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"public enum Type { EDIT_PERSON, EDIT_PET_PATIENT, EDIT_APPOINTMENT };"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"private Index index;"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"private EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"private EditPetPatientDescriptor editPetPatientDescriptor;"},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"private EditAppointmentDescriptor editAppointmentDescriptor;"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":"private Type type;"},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"private Person personToEdit; // original"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":"private Person editedPerson; // edited"},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":"private PetPatient petPatientToEdit;"},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":"private PetPatient editedPetPatient;"},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"private Appointment appointmentToEdit;"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"private Appointment editedAppointment;"},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"..."},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":"public EditCommand(Index index, EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editPetPatientDescriptor);"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"        this.editPetPatientDescriptor \u003d new EditPetPatientDescriptor("},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"                                            editPetPatientDescriptor"},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":"                                            );"},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_PET_PATIENT;"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"After this stage, the descriptors are processed based on the type using a switch (not shown). For instance, since the"},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":"user is editing a pet patient, then using the index of the pet patient in the last shown list, the `PetPatient` object"},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"to be modified will be retrieved. Using the information from the descriptor, a new `PetPatient` object will be created,"},{"lineNumber":554,"author":{"gitID":"chialejing"},"content":"so that we can replace the edited object in the list of `PetPatients`. The modified fields will come from the"},{"lineNumber":555,"author":{"gitID":"chialejing"},"content":"`EditPetPatientDescriptor` object, while the unmodified fields will come from the old `PetPatient` object, as can be"},{"lineNumber":556,"author":{"gitID":"chialejing"},"content":"seen in the code snippet below."},{"lineNumber":557,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":560,"author":{"gitID":"chialejing"},"content":"protected void preprocessUndoableCommandForPetPatient() throws CommandException {"},{"lineNumber":561,"author":{"gitID":"chialejing"},"content":"    List\u003cPetPatient\u003e lastShownPetPatientList \u003d model.getFilteredPetPatientList();"},{"lineNumber":562,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":563,"author":{"gitID":"chialejing"},"content":"    if (index.getZeroBased() \u003e\u003d lastShownPetPatientList.size()) {"},{"lineNumber":564,"author":{"gitID":"chialejing"},"content":"        throw new CommandException(Messages.MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX);"},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":566,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":567,"author":{"gitID":"chialejing"},"content":"    petPatientToEdit \u003d lastShownPetPatientList.get(index.getZeroBased());"},{"lineNumber":568,"author":{"gitID":"chialejing"},"content":"    editedPetPatient \u003d createEditedPetPatient(petPatientToEdit, editPetPatientDescriptor);"},{"lineNumber":569,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":570,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":571,"author":{"gitID":"chialejing"},"content":"private static PetPatient createEditedPetPatient(PetPatient petPatientToEdit,"},{"lineNumber":572,"author":{"gitID":"chialejing"},"content":"                                                     EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":573,"author":{"gitID":"chialejing"},"content":"    assert petPatientToEdit !\u003d null;"},{"lineNumber":574,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":575,"author":{"gitID":"chialejing"},"content":"    PetPatientName updatedName \u003d editPetPatientDescriptor.getName().orElse(petPatientToEdit.getName());"},{"lineNumber":576,"author":{"gitID":"chialejing"},"content":"    Species updatedSpecies \u003d editPetPatientDescriptor.getSpecies().orElse(petPatientToEdit.getSpecies());"},{"lineNumber":577,"author":{"gitID":"chialejing"},"content":"    Breed updatedBreed \u003d editPetPatientDescriptor.getBreed().orElse(petPatientToEdit.getBreed());"},{"lineNumber":578,"author":{"gitID":"chialejing"},"content":"    Colour updatedColour \u003d editPetPatientDescriptor.getColour().orElse(petPatientToEdit.getColour());"},{"lineNumber":579,"author":{"gitID":"chialejing"},"content":"    BloodType updatedBloodType \u003d editPetPatientDescriptor.getBloodType().orElse(petPatientToEdit.getBloodType());"},{"lineNumber":580,"author":{"gitID":"chialejing"},"content":"    Nric updatedOwnerNric \u003d editPetPatientDescriptor.getOwnerNric().orElse(petPatientToEdit.getOwner());"},{"lineNumber":581,"author":{"gitID":"chialejing"},"content":"    Set\u003cTag\u003e updatedTags \u003d editPetPatientDescriptor.getTags().orElse(petPatientToEdit.getTags());"},{"lineNumber":582,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":583,"author":{"gitID":"chialejing"},"content":"    return new PetPatient("},{"lineNumber":584,"author":{"gitID":"chialejing"},"content":"            updatedName,"},{"lineNumber":585,"author":{"gitID":"chialejing"},"content":"            updatedSpecies,"},{"lineNumber":586,"author":{"gitID":"chialejing"},"content":"            updatedBreed,"},{"lineNumber":587,"author":{"gitID":"chialejing"},"content":"            updatedColour,"},{"lineNumber":588,"author":{"gitID":"chialejing"},"content":"            updatedBloodType,"},{"lineNumber":589,"author":{"gitID":"chialejing"},"content":"            updatedOwnerNric,"},{"lineNumber":590,"author":{"gitID":"chialejing"},"content":"            updatedTags"},{"lineNumber":591,"author":{"gitID":"chialejing"},"content":"    );"},{"lineNumber":592,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":593,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":595,"author":{"gitID":"chialejing"},"content":"Now that the relevant object has been created, it will go through a series of checks to ensure the validity of the data"},{"lineNumber":596,"author":{"gitID":"chialejing"},"content":"that the user has keyed in. This will be detailed under the next section, \u003c\u003cEdit-Command-Design-Consideration-Dependency-Resolution\u003e\u003e. +"},{"lineNumber":597,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":598,"author":{"gitID":"chialejing"},"content":"Finally, the relevant listing will be updated, so that the user can see the changes immediately in the Medeina"},{"lineNumber":599,"author":{"gitID":"chialejing"},"content":"application. A success message will be returned if the command has been executed fully with no errors."},{"lineNumber":600,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":601,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":602,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":603,"author":{"gitID":"chialejing"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":"    try {"},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":607,"author":{"gitID":"chialejing"},"content":"            resolvePersonDependencies();"},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":610,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":611,"author":{"gitID":"chialejing"},"content":"            resolvePetPatientDependencies();"},{"lineNumber":612,"author":{"gitID":"chialejing"},"content":"            model.updatePetPatient(petPatientToEdit, editedPetPatient);"},{"lineNumber":613,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":614,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":615,"author":{"gitID":"chialejing"},"content":"            checkForClashes();"},{"lineNumber":616,"author":{"gitID":"chialejing"},"content":"            checkForSameAppointmentTiming();"},{"lineNumber":617,"author":{"gitID":"chialejing"},"content":"            checkForConcurrentAppointments();"},{"lineNumber":618,"author":{"gitID":"chialejing"},"content":"            checkForPastAppointment();"},{"lineNumber":619,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(appointmentToEdit, editedAppointment);"},{"lineNumber":620,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":621,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":622,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":623,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":624,"author":{"gitID":"chialejing"},"content":"    } catch (DuplicatePersonException dpe) {"},{"lineNumber":625,"author":{"gitID":"chialejing"},"content":"    ..."},{"lineNumber":626,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":627,"author":{"gitID":"chialejing"},"content":"    switch (type) {"},{"lineNumber":628,"author":{"gitID":"chialejing"},"content":"    case EDIT_PERSON:"},{"lineNumber":629,"author":{"gitID":"chialejing"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":"    case EDIT_PET_PATIENT:"},{"lineNumber":632,"author":{"gitID":"chialejing"},"content":"        model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":633,"author":{"gitID":"chialejing"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PET_PATIENT_SUCCESS, editedPetPatient));"},{"lineNumber":634,"author":{"gitID":"chialejing"},"content":"    case EDIT_APPOINTMENT:"},{"lineNumber":635,"author":{"gitID":"chialejing"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"},{"lineNumber":637,"author":{"gitID":"chialejing"},"content":"    default:"},{"lineNumber":638,"author":{"gitID":"chialejing"},"content":"        return null;"},{"lineNumber":639,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":640,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":641,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":642,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":643,"author":{"gitID":"chialejing"},"content":"Below is the activity diagram for `edit` command to give us a better insight on how all the above-mentioned operations work together."},{"lineNumber":644,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":645,"author":{"gitID":"chialejing"},"content":".Activity Diagram for Edit Command"},{"lineNumber":646,"author":{"gitID":"chialejing"},"content":"image::EditActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":647,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d Consolidating Similar Commands"},{"lineNumber":652,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":653,"author":{"gitID":"chialejing"},"content":"Initially, we have considered having multiple commands for adding of `Person`, `PetPatient` and `Appointment` objects."},{"lineNumber":654,"author":{"gitID":"chialejing"},"content":"For example:"},{"lineNumber":655,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":656,"author":{"gitID":"chialejing"},"content":"* Editing a Person: `editperson`"},{"lineNumber":657,"author":{"gitID":"chialejing"},"content":"* Editing a PetPatient: `editpetpatient`"},{"lineNumber":658,"author":{"gitID":"chialejing"},"content":"* Editing an Appointment: `editappointment`"},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":"However, implementing the logic this way will make typing very inefficient for users, since the commands are extremely long."},{"lineNumber":661,"author":{"gitID":"chialejing"},"content":"This defeats the main purpose of our CLI-centered application. +"},{"lineNumber":662,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":663,"author":{"gitID":"chialejing"},"content":"As such, to make things simpler, and also more user friendly for our users, we have decided to consolidate these"},{"lineNumber":664,"author":{"gitID":"chialejing"},"content":"3 variants into just one single command, with the use of an option to indicate which object the user is trying to edit. +"},{"lineNumber":665,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":666,"author":{"gitID":"chialejing"},"content":"Below is the final command syntax for `edit` command after taking this into consideration:"},{"lineNumber":667,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":668,"author":{"gitID":"chialejing"},"content":"* Editing a Person: `edit *-o* INDEX [n/CONTACT_NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [nr/NRIC] [t/TAGS]...`"},{"lineNumber":669,"author":{"gitID":"chialejing"},"content":"* Editing a PetPatient : `edit *-p* INDEX [n/PET_PATIENT_NAME] [s/SPECIES] [b/BREED] [c/COLOUR] [bt/BLOOD_TYPE] [t/TAGS]...`"},{"lineNumber":670,"author":{"gitID":"chialejing"},"content":"* Editing an Appointment : `edit *-a* INDEX [d/YYYY-MM-DD HH:MM] [r/REMARK] [t/TAGS]...`"},{"lineNumber":671,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":"[[Edit-Command-Design-Consideration-Dependency-Resolution]]"},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d Resolution of Dependencies"},{"lineNumber":674,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":675,"author":{"gitID":"chialejing"},"content":"The problem with editing the various fields of an object is the breaking of dependencies that it might have with other objects. +"},{"lineNumber":676,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":677,"author":{"gitID":"chialejing"},"content":"The various dependencies and / or other considerations are listed in the table below:"},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":"[cols\u003d\"20, 80\", options\u003d\"header\"]"},{"lineNumber":680,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":681,"author":{"gitID":"chialejing"},"content":"| Object"},{"lineNumber":682,"author":{"gitID":"chialejing"},"content":"| Dependency / Considerations"},{"lineNumber":683,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":684,"author":{"gitID":"chialejing"},"content":".^a|Person"},{"lineNumber":685,"author":{"gitID":"chialejing"},"content":"a|* If editing name, phone, email, address: no problems posed."},{"lineNumber":686,"author":{"gitID":"chialejing"},"content":"* If editing person\u0027s NRIC: all pets and their respective appointments under specified person must also be modified (NRIC fields). Retrieve all pets and appointments with said NRIC and update accordingly."},{"lineNumber":687,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":688,"author":{"gitID":"chialejing"},"content":".^a|PetPatient"},{"lineNumber":689,"author":{"gitID":"chialejing"},"content":"a|* If editing species, breed, colour, blood type: no problems posed."},{"lineNumber":690,"author":{"gitID":"chialejing"},"content":"* If editing name: search for and update all related appointments."},{"lineNumber":691,"author":{"gitID":"chialejing"},"content":"* If editing owner\u0027s NRIC: Check if NRIC exists. If yes, search and update all relevant appointments. If no, throw an exception."},{"lineNumber":692,"author":{"gitID":"chialejing"},"content":"* If editing both name and owner\u0027s NRIC: Check if NRIC exists. If yes, search and update all relevant appointments. If no, throw an exception. Also, search for and update all related appointments under the specified pet\u0027s name."},{"lineNumber":693,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":".^a|Appointment"},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":"a|* If editing remark, type: no problems posed."},{"lineNumber":696,"author":{"gitID":"chialejing"},"content":"* If editing date and time of appointment:"},{"lineNumber":697,"author":{"gitID":"chialejing"},"content":"** Check for clashes (existing appointment at that time slot)."},{"lineNumber":698,"author":{"gitID":"chialejing"},"content":"** Check for concurrent appointments."},{"lineNumber":699,"author":{"gitID":"chialejing"},"content":"** Check whether stated date and time is in the past."},{"lineNumber":700,"author":{"gitID":"chialejing"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":701,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":702,"author":{"gitID":"chialejing"},"content":"These dependencies are resolved within Medeina for our users\u0027 convenience. +"},{"lineNumber":703,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":704,"author":{"gitID":"chialejing"},"content":"We will now show two notable examples of dependency resolution in Medeina."},{"lineNumber":705,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":706,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Resolving PetPatient Dependencies with Name and Owner NRIC"},{"lineNumber":707,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":708,"author":{"gitID":"chialejing"},"content":"Resolution of PetPatient dependencies is required when changing its name or its owner\u0027s NRIC. The code to resolve these"},{"lineNumber":709,"author":{"gitID":"chialejing"},"content":"dependencies is as follows:"},{"lineNumber":710,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":711,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":712,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":713,"author":{"gitID":"chialejing"},"content":"private void resolvePetPatientDependencies() throws CommandException,"},{"lineNumber":714,"author":{"gitID":"chialejing"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":715,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":716,"author":{"gitID":"chialejing"},"content":"    Nric oldNric \u003d petPatientToEdit.getOwner();"},{"lineNumber":717,"author":{"gitID":"chialejing"},"content":"    Nric newNric \u003d editedPetPatient.getOwner();"},{"lineNumber":718,"author":{"gitID":"chialejing"},"content":"    PetPatientName oldPetName \u003d petPatientToEdit.getName();"},{"lineNumber":719,"author":{"gitID":"chialejing"},"content":"    PetPatientName newPetName \u003d editedPetPatient.getName();"},{"lineNumber":720,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":721,"author":{"gitID":"chialejing"},"content":"    if (!oldNric.equals(newNric)) { // nric edited, I want to change owner"},{"lineNumber":722,"author":{"gitID":"chialejing"},"content":"        Person newOwner \u003d model.getPersonWithNric(newNric); // new owner must exist"},{"lineNumber":723,"author":{"gitID":"chialejing"},"content":"        if (newOwner \u003d\u003d null) {"},{"lineNumber":724,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(\"New owner must exist first before updating pet patient\u0027s owner NRIC!\");"},{"lineNumber":725,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":726,"author":{"gitID":"chialejing"},"content":"        // we only update nric for appointments for that specific pet patient!"},{"lineNumber":727,"author":{"gitID":"chialejing"},"content":"        // this is because it might be an owner transfer. If there are some other pets under the previous owner,"},{"lineNumber":728,"author":{"gitID":"chialejing"},"content":"        // he/she may still be holding on to these pets."},{"lineNumber":729,"author":{"gitID":"chialejing"},"content":"        updateAppointmentByOwnerNricForSpecificPetName(oldNric, newNric, oldPetName);"},{"lineNumber":730,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":731,"author":{"gitID":"chialejing"},"content":"    if (!oldPetName.equals(newPetName)) { // name edited"},{"lineNumber":732,"author":{"gitID":"chialejing"},"content":"        updateAppointmentByPetPatientName(newNric, oldPetName, newPetName);"},{"lineNumber":733,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":734,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":735,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":736,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":737,"author":{"gitID":"chialejing"},"content":"In the code snippet above, we note that a check has been done for whether the old owner\u0027s NRIC and the new owner\u0027s NRIC are"},{"lineNumber":738,"author":{"gitID":"chialejing"},"content":"equivalent. If they are not, this tells us that the owner\u0027s NRIC has been changed, and we search through the list of Persons"},{"lineNumber":739,"author":{"gitID":"chialejing"},"content":"to check if the new owner with the specified NRIC exists. If it exists, then we update all the appointments tied to the pet patient"},{"lineNumber":740,"author":{"gitID":"chialejing"},"content":"to the new owner. +"},{"lineNumber":741,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":742,"author":{"gitID":"chialejing"},"content":"If the new pet patient\u0027s name is not equivalent to the old pet patient\u0027s name, it means that the user has edited it, and hence"},{"lineNumber":743,"author":{"gitID":"chialejing"},"content":"we update all appointments for the selected pet patient to be tied to the new pet patient\u0027s name as supplied by the user."},{"lineNumber":744,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":745,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d Checking for Concurrent Appointments"},{"lineNumber":746,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":747,"author":{"gitID":"chialejing"},"content":"Checking for concurrent appointments is another key part of the `edit` command, where we have to ensure that appointments"},{"lineNumber":748,"author":{"gitID":"chialejing"},"content":"do not overlap with each other. The relevant code for the checking for concurrent appointments is shown below:"},{"lineNumber":749,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":750,"author":{"gitID":"chialejing"},"content":"[source,java]"},{"lineNumber":751,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":752,"author":{"gitID":"chialejing"},"content":"private void checkForConcurrentAppointments() throws ConcurrentAppointmentException {"},{"lineNumber":753,"author":{"gitID":"chialejing"},"content":"    LocalDateTime oldDateTime \u003d appointmentToEdit.getDateTime();"},{"lineNumber":754,"author":{"gitID":"chialejing"},"content":"    LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":755,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":756,"author":{"gitID":"chialejing"},"content":"    if (model.hasConcurrentAppointment(oldDateTime, newDateTime)) {"},{"lineNumber":757,"author":{"gitID":"chialejing"},"content":"        throw new ConcurrentAppointmentException();"},{"lineNumber":758,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":759,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":760,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":761,"author":{"gitID":"chialejing"},"content":"public boolean hasConcurrentAppointment(LocalDateTime oldDateTime, LocalDateTime newDateTime) {"},{"lineNumber":762,"author":{"gitID":"chialejing"},"content":"    for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":763,"author":{"gitID":"chialejing"},"content":"        LocalDateTime dateTime \u003d a.getDateTime();"},{"lineNumber":764,"author":{"gitID":"chialejing"},"content":"        if (newDateTime.isAfter(dateTime)"},{"lineNumber":765,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 newDateTime.isBefore(dateTime.plusMinutes(30))"},{"lineNumber":766,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 !dateTime.equals(oldDateTime)) {"},{"lineNumber":767,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":768,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":769,"author":{"gitID":"chialejing"},"content":"        if (newDateTime.isBefore(dateTime)"},{"lineNumber":770,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 newDateTime.plusMinutes(30).isAfter(dateTime)"},{"lineNumber":771,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 !dateTime.equals(oldDateTime)) {"},{"lineNumber":772,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":773,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":774,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":775,"author":{"gitID":"chialejing"},"content":"    return false;"},{"lineNumber":776,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":777,"author":{"gitID":"chialejing"},"content":"-----"},{"lineNumber":778,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":779,"author":{"gitID":"chialejing"},"content":"The main checking for concurrent appointments is done in the method `hasConcurrentAppointment()` within `ModelManager`."},{"lineNumber":780,"author":{"gitID":"chialejing"},"content":"We loop through the entire list of appointments, and check whether there is any overlap in timing for both before and after"},{"lineNumber":781,"author":{"gitID":"chialejing"},"content":"every appointment in the list."},{"lineNumber":782,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":783,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":784,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":785,"author":{"gitID":"chialejing"},"content":"As of now, we do not have a list for past appointments, and a separate list for future appointments. +"},{"lineNumber":786,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":787,"author":{"gitID":"chialejing"},"content":"As such, this will make the looping through of the appointments as previously mentioned very slow, as more and more appointments are added to the list."},{"lineNumber":788,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":789,"author":{"gitID":"chialejing"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":790,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":791,"author":{"gitID":"chialejing"},"content":"One of the limitations that we want to address will be the separation of past and future appointments. This is for greater"},{"lineNumber":792,"author":{"gitID":"chialejing"},"content":"efficiency when we loop through appointments for editing."},{"lineNumber":793,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":794,"author":{"gitID":"chialejing"},"content":"Also, as of now, pet patients only have the following fields: name, species, breed, colour, blood type, owner NRIC and tags."},{"lineNumber":795,"author":{"gitID":"chialejing"},"content":"It is our desire that Medeina be able to handle most of the tasks as required by veterinarians and their assistants, and"},{"lineNumber":796,"author":{"gitID":"chialejing"},"content":"this will include the ability to view and update a pet patient\u0027s medical history so that Medeina can be an all-in-one"},{"lineNumber":797,"author":{"gitID":"chialejing"},"content":"application for our users. As such, one of the key future improvements to the current `edit` command will be the ability to update a"},{"lineNumber":798,"author":{"gitID":"chialejing"},"content":"pet patient\u0027s medical history. +"},{"lineNumber":799,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":800,"author":{"gitID":"chialejing"},"content":"// end::editcommandDG[]"},{"lineNumber":801,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":802,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":803,"author":{"gitID":"Robert-Peng"},"content":"// tag::ListPets[]"},{"lineNumber":804,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d Display List of PetPatients"},{"lineNumber":805,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Current Implemaentation"},{"lineNumber":806,"author":{"gitID":"Robert-Peng"},"content":"Since Veterinarians and their assistants have the need to view the PetPatients as a list and see how many PetPatients belong to the same Owner. It is necessary to implement the PetPatient List feature."},{"lineNumber":807,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":808,"author":{"gitID":"Robert-Peng"},"content":"image::List_Command.PNG[width\u003d\"500\"]"},{"lineNumber":809,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":810,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":811,"author":{"gitID":"Robert-Peng"},"content":"* **Alternative 1:** Use tab function to switch between PetPatientList and PersonList"},{"lineNumber":812,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":813,"author":{"gitID":"Robert-Peng"},"content":"** Pros: The UI will be neat to see, saves more space for calendar view"},{"lineNumber":814,"author":{"gitID":"Robert-Peng"},"content":"** Cons: The user will not be able to see both PetPatient and Owners at the same time."},{"lineNumber":815,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":816,"author":{"gitID":"Robert-Peng"},"content":"* **ALternative 2:** Implement another Panel to display PetPatients."},{"lineNumber":817,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":818,"author":{"gitID":"Robert-Peng"},"content":"** Pros: User will be able to see both lists at the same time"},{"lineNumber":819,"author":{"gitID":"Robert-Peng"},"content":"** Cons: Takes up more space, making it difficult to display appointments in the future."},{"lineNumber":820,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":821,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":822,"author":{"gitID":"Robert-Peng"},"content":"More command and features relating to PetPatient List are to be properly developed, the tags of PetPatients are not properly organised."},{"lineNumber":823,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":824,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":825,"author":{"gitID":"Robert-Peng"},"content":"Implement the corresponding Add, Delete, List commands for petPatients and decide on the tags to be used for petPatients."},{"lineNumber":826,"author":{"gitID":"Robert-Peng"},"content":"// end::ListPets[]"},{"lineNumber":827,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":828,"author":{"gitID":"Robert-Peng"},"content":"// tag::calendar[]"},{"lineNumber":829,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d Show Appointments on calendar"},{"lineNumber":830,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":831,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":832,"author":{"gitID":"Robert-Peng"},"content":"Since veterinarians and their assistants have the need to constantly check their schedule for upcoming appointments, a calender feature is required to show future appointments."},{"lineNumber":833,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":834,"author":{"gitID":"Robert-Peng"},"content":"Third party API `CalendarFX` is used as a Java calendar frame to show Appointments."},{"lineNumber":835,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":836,"author":{"gitID":"Robert-Peng"},"content":"image::Show_Appointments.png[width\u003d\"650\"]"},{"lineNumber":837,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":838,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":839,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":840,"author":{"gitID":"Robert-Peng"},"content":"* **Alternative 1:** Use `iCalendar` from Jfxtra library"},{"lineNumber":841,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":842,"author":{"gitID":"Robert-Peng"},"content":"** Pros: Easy to implement, convenient to use. Can easily import from Jfxtra library."},{"lineNumber":843,"author":{"gitID":"Robert-Peng"},"content":"** Cons: UI styles are limited, the API is limited;"},{"lineNumber":844,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":845,"author":{"gitID":"Robert-Peng"},"content":"* **Alternative 2 (current choice):** Implement CalendarFX API library."},{"lineNumber":846,"author":{"gitID":"Robert-Peng"},"content":"** Pros: Versatile APIs such as set style for each calendar, and much better looking UI than iCalendar."},{"lineNumber":847,"author":{"gitID":"Robert-Peng"},"content":"** Cons: Extra work required to integrate CalendarFX files into project, and may cause build problems if not implemented properly."},{"lineNumber":848,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":849,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":850,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":851,"author":{"gitID":"Robert-Peng"},"content":"There\u0027s a known issue in CalendarFx, when switch from a year with appointments inside to a year without, the CalendarFx will still color the same appointment data despite there\u0027s no entry on that date."},{"lineNumber":852,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":853,"author":{"gitID":"Robert-Peng"},"content":"Users and developers should know that this issue is embedded inside CalendarFx, and hopefully can be resolved in future versions of CalendarFx."},{"lineNumber":854,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":855,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d\u003d Future Work"},{"lineNumber":856,"author":{"gitID":"Robert-Peng"},"content":"We may be able to make enhancements to the Medeina\u0027s UI such as changing theme colour to match the UI colour of CalendarFX."},{"lineNumber":857,"author":{"gitID":"Robert-Peng"},"content":"// end::calendar[]"},{"lineNumber":858,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":859,"author":{"gitID":"wynonaK"},"content":"// tag::find[]"},{"lineNumber":860,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Finding a Contact or Pet Patient"},{"lineNumber":861,"author":{"gitID":"wynonaK"},"content":"The find function allows users to look for contacts or pet patients."},{"lineNumber":862,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":864,"author":{"gitID":"wynonaK"},"content":"As Medeina caters to veterinarians, there is a need to be able to search through heaps of data to find specific information. For example, users can search by contacts to find a particular `Person` through their `Nric`, or search by pet patients to find for possible blood donors through their `BloodType`."},{"lineNumber":865,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":866,"author":{"gitID":"wynonaK"},"content":"The below diagram illustrates the interaction between the `Logic` and `Model` components in finding pet patients with a specific `BloodType`."},{"lineNumber":867,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":868,"author":{"gitID":"wynonaK"},"content":".Interaction between `Logic` and `Model` components upon running `find -p bt/B`."},{"lineNumber":869,"author":{"gitID":"wynonaK"},"content":"image::FindPetPatientDiagram.png[width\u003d\"800\"]"},{"lineNumber":870,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":871,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":872,"author":{"gitID":"wynonaK"},"content":"`FindCommandParser.java` handles and separates user input based on a regular expression that captures the matching groups of options `-o` and `-p`. The results are then parsed into `ArgumentMultimap` which separates user input into accepted prefixes of `n/NAME`, `nr/NRIC` and `t/TAGS` for contacts (option `-o`), `n/NAME`, `s/SPECIES`, `b/BREED`, `c/COLOUR`, `bt/BLOOD TYPE` and `t/TAGS` for pet patients (option `-p`)."},{"lineNumber":873,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":874,"author":{"gitID":"wynonaK"},"content":"The keywords for each prefix found is then added as `String[]` into a `HashMap`, with a suitable `String` acting as a key for the values. A new `FindCommand` is created with the `HashMap` of all the keywords of all found relevant prefixes. Upon initialization of `FindCommand`, the type is determined (1 for contact, 2 for pet patient) based on the keys present in the `HashMap`."},{"lineNumber":875,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":876,"author":{"gitID":"wynonaK"},"content":"In `execute()`, there is a switch that determines if the find is for contacts or pet patient, based on the found type. The commands `findOwner()` or `findPetPatient()` are called respectively. For each of the prefix, if it exists, a `Predicate` is created for it with its keywords. All of the prefixes add together through the `.and(...)` function to make one final `Predicate` that encompasses of all the prefixes."},{"lineNumber":877,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":878,"author":{"gitID":"wynonaK"},"content":"[source, java]"},{"lineNumber":879,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":880,"author":{"gitID":"wynonaK"},"content":"private CommandResult findOwner() {"},{"lineNumber":881,"author":{"gitID":"wynonaK"},"content":"    Predicate\u003cPerson\u003e finalPredicate \u003d null;"},{"lineNumber":882,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":883,"author":{"gitID":"wynonaK"},"content":"    //... code for Predicate for name and nric ..."},{"lineNumber":884,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":885,"author":{"gitID":"wynonaK"},"content":"    if (hashMap.containsKey(\"ownerTag\")) {"},{"lineNumber":886,"author":{"gitID":"wynonaK"},"content":"        String[] tagKeywords \u003d hashMap.get(\"ownerTag\");"},{"lineNumber":887,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e tagPredicate \u003d person -\u003e Arrays.stream(tagKeywords)"},{"lineNumber":888,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagString(), keyword));"},{"lineNumber":889,"author":{"gitID":"wynonaK"},"content":"        if (finalPredicate \u003d\u003d null) {"},{"lineNumber":890,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d tagPredicate;"},{"lineNumber":891,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":892,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d finalPredicate.and(tagPredicate);"},{"lineNumber":893,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":894,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":895,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":896,"author":{"gitID":"wynonaK"},"content":"    model.updateFilteredPersonList(finalPredicate);"},{"lineNumber":897,"author":{"gitID":"wynonaK"},"content":"    updatePetListForOwner();"},{"lineNumber":898,"author":{"gitID":"wynonaK"},"content":"    return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size())"},{"lineNumber":899,"author":{"gitID":"wynonaK"},"content":"            + \"\\n\""},{"lineNumber":900,"author":{"gitID":"wynonaK"},"content":"            + getMessageForPetPatientListShownSummary(model.getFilteredPetPatientList().size()));"},{"lineNumber":901,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":902,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":903,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":904,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":905,"author":{"gitID":"wynonaK"},"content":"The model then gets called via `updateFilteredPersonList(...)` or `updateFilteredPetPatientList(...)` together with the final predicate, as shown above."},{"lineNumber":906,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":907,"author":{"gitID":"wynonaK"},"content":".Listing of found pet patients and contacts of found pet patients after running the command `find -p s/Cat bt/B`."},{"lineNumber":908,"author":{"gitID":"wynonaK"},"content":"image::FindPetPatientResult.PNG[width\u003d\"800\"]"},{"lineNumber":909,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":910,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":911,"author":{"gitID":"wynonaK"},"content":"As Medeina has both contacts and pet patients, it should be possible for users to see contacts of pet patients and vice versa. As such, a function is called after the update to reflect similar changes on the other panel. An exmple of the result obtained is shown above."},{"lineNumber":912,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":913,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":914,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":915,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Improving search"},{"lineNumber":916,"author":{"gitID":"wynonaK"},"content":"* **Alternative 1:** Each additional prefix will be a `or`."},{"lineNumber":917,"author":{"gitID":"wynonaK"},"content":"** Pros: Covers more ground, users can search for information with each individual prefix (i.e. `-o n/A nr/NRIC_NOT_A` will get both `A` and `NRIC_NOT_A`)"},{"lineNumber":918,"author":{"gitID":"wynonaK"},"content":"** Cons: Chance that too much information will be listed, making it too broad of a search for specific things."},{"lineNumber":919,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":920,"author":{"gitID":"wynonaK"},"content":"* **Alternative 2 (current choice):** Each additional function will be an `and`."},{"lineNumber":921,"author":{"gitID":"wynonaK"},"content":"** Pros: More specific, users can search for specific information with the prefixes adding up (i.e. `-p s/Cat bt/B` searches for pet patients who are cats and have blood type B)"},{"lineNumber":922,"author":{"gitID":"wynonaK"},"content":"** Cons: Chance that the search is too specific, and will display no results (i.e. `-o n/A nr/NRIC_NOT_A` will not get anything as each contact only has 1 `Nric`)"},{"lineNumber":923,"author":{"gitID":"wynonaK"},"content":"//end::find[]"},{"lineNumber":924,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":925,"author":{"gitID":"wynonaK"},"content":"Users are unable to find appointment related elements as the `Appointment` listing function in the calendar is different from the listing function of the other classes of `Person` and `PetPatient`. As such, there is currently no implementation to find an appointment based on types or remarks, which may pose as inconvenience to veterinarians, should they want to search by a specific type of appointment or remark."},{"lineNumber":926,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":927,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Future Considerations"},{"lineNumber":928,"author":{"gitID":"wynonaK"},"content":"In the future, Medeina might consider adding functions that allow for finding of appointments by types or remarks, as well as update the calendar accordingly with the results of the find command."},{"lineNumber":929,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":930,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":931,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":932,"author":{"gitID":"wynonaK"},"content":"// tag::listappt[]"},{"lineNumber":933,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Listing Appointments of Different Views and Dates"},{"lineNumber":934,"author":{"gitID":"wynonaK"},"content":"The command allows users to list appointments based on the date that they wish to see, and the results are displayed via the API of CalendarFX."},{"lineNumber":935,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":937,"author":{"gitID":"wynonaK"},"content":"After Medeina implemented CalendarFX, users are able to view appointments at a specified date by clicking on the Calendar. However, as Medeina is a CLI-based application, users should not be required to move their mouse. Instead, users should be able to jump to certain dates to check appointments using the command line only."},{"lineNumber":938,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":939,"author":{"gitID":"wynonaK"},"content":".Day view of the Calendar obtained by the `listappt -d` command."},{"lineNumber":940,"author":{"gitID":"wynonaK"},"content":"image::ListAppointmentDayView.PNG[width\u003d\"800\"]"},{"lineNumber":941,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":942,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":943,"author":{"gitID":"wynonaK"},"content":"The implemented CalendarFX API consists of 4 different views: Day, Week, Month and Year views. Users should be able to get a specific requested view of a date, month, or year they wish to see."},{"lineNumber":944,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":945,"author":{"gitID":"wynonaK"},"content":"The below diagram illustrates the interaction between the `UI`, `Logic` and `Events` components in the `ListAppointment` command."},{"lineNumber":946,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":947,"author":{"gitID":"wynonaK"},"content":".Sequence diagram for interactions between the different components upon running the `listappt -y 2017` command."},{"lineNumber":948,"author":{"gitID":"wynonaK"},"content":"image::SDforListAppointment.png[width\u003d\"800\"]"},{"lineNumber":949,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":950,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":951,"author":{"gitID":"wynonaK"},"content":"`ListAppointmentParser.java` handles and separates the request of users based on a regular expression that captures the matching groups of options `-d`, `-w`, `-m` and `-y`. The parser then checks the remaining user input, and parses it into `LocalDate`, `YearMonth` and `Year` classes. Should there be no remaining user input after the option, the current date is obtained as the field. A new `ListAppointmentCommand` is created with the type (1 for year, 2 for month, 3 for week, 4 for date) as well as the parsed class."},{"lineNumber":952,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":953,"author":{"gitID":"wynonaK"},"content":"In `execute()`, there is a switch that determines the type of command run based on the type obtained from the parser. The relevant functions to change the Calendar gets called based on the type, and an event gets called to handle the change. If an appointment is in the past, a check is done to determine whether there were appointments in the year of that requested date, so that users are not able to jump into years that should not have appointments (i.e. years before Medeina existed)."},{"lineNumber":954,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":955,"author":{"gitID":"wynonaK"},"content":"[source, java]"},{"lineNumber":956,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":957,"author":{"gitID":"wynonaK"},"content":"private CommandResult getYearView() throws NoAppointmentInYearException {"},{"lineNumber":958,"author":{"gitID":"wynonaK"},"content":"    if (year.isBefore(Year.now())) {"},{"lineNumber":959,"author":{"gitID":"wynonaK"},"content":"        if (!checkPastAppointment(year.getValue())) {"},{"lineNumber":960,"author":{"gitID":"wynonaK"},"content":"            throw new NoAppointmentInYearException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":961,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":962,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":963,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":964,"author":{"gitID":"wynonaK"},"content":"    EventsCenter.getInstance().post(new ChangeYearViewRequestEvent(year));"},{"lineNumber":965,"author":{"gitID":"wynonaK"},"content":"    return new CommandResult(String.format(MESSAGE_SUCCESS, \"year\"));"},{"lineNumber":966,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":967,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":968,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":969,"author":{"gitID":"wynonaK"},"content":"An event is then called to handle change the view with the specified date. The handler resides in `CalendarWindow.java` to be able to switch the `calendarView` to the specified requested view."},{"lineNumber":970,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":971,"author":{"gitID":"wynonaK"},"content":"[source, java]"},{"lineNumber":972,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":973,"author":{"gitID":"wynonaK"},"content":"private void changeWeekView(LocalDate date) {"},{"lineNumber":974,"author":{"gitID":"wynonaK"},"content":"    WeekFields weekFields \u003d WeekFields.SUNDAY_START;"},{"lineNumber":975,"author":{"gitID":"wynonaK"},"content":"    int week \u003d date.get(weekFields.weekOfWeekBasedYear()) - 1;"},{"lineNumber":976,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":977,"author":{"gitID":"wynonaK"},"content":"    if (week \u003d\u003d 0 \u0026\u0026 date.getMonthValue() \u003d\u003d 12) {"},{"lineNumber":978,"author":{"gitID":"wynonaK"},"content":"        //wraparound"},{"lineNumber":979,"author":{"gitID":"wynonaK"},"content":"        week \u003d 52;"},{"lineNumber":980,"author":{"gitID":"wynonaK"},"content":"        calendarView.showWeek(Year.of(date.getYear()), week);"},{"lineNumber":981,"author":{"gitID":"wynonaK"},"content":"    } else if (week \u003d\u003d 0 \u0026\u0026 date.getMonthValue() \u003d\u003d 1) {"},{"lineNumber":982,"author":{"gitID":"wynonaK"},"content":"        //wraparound"},{"lineNumber":983,"author":{"gitID":"wynonaK"},"content":"        LocalDate dateOfFirstJan \u003d LocalDate.of(date.getYear(), 1, 1);"},{"lineNumber":984,"author":{"gitID":"wynonaK"},"content":"        if (dateOfFirstJan.getDayOfWeek().getValue() !\u003d 7) {"},{"lineNumber":985,"author":{"gitID":"wynonaK"},"content":"            week \u003d 52;"},{"lineNumber":986,"author":{"gitID":"wynonaK"},"content":"            calendarView.showWeek(Year.of(date.getYear() - 1), week);"},{"lineNumber":987,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":988,"author":{"gitID":"wynonaK"},"content":"            week \u003d 53;"},{"lineNumber":989,"author":{"gitID":"wynonaK"},"content":"            calendarView.showWeek(Year.of(date.getYear() - 1), week);"},{"lineNumber":990,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":991,"author":{"gitID":"wynonaK"},"content":"    } else {"},{"lineNumber":992,"author":{"gitID":"wynonaK"},"content":"        calendarView.showWeek(Year.of(date.getYear()), week);"},{"lineNumber":993,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":994,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":995,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":996,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":997,"author":{"gitID":"wynonaK"},"content":"As the week view in calendarFX is different from the obtaining the week of year in the original Java API, there was a need to switch the week `value` obtained from `LocalDate` to fit the week `value` in the Calendar. Above illustrates the snippet of code used to convert from the `value` of the week obtained from `LocalDate` to fit the Calendar."},{"lineNumber":998,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":999,"author":{"gitID":"wynonaK"},"content":"Upon a successful listing, a `CommandResult(...)` class is called with a success message of the specified view."},{"lineNumber":1000,"author":{"gitID":"wynonaK"},"content":"//end::listappt[]"},{"lineNumber":1001,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1002,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":1003,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1004,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Improving command usage"},{"lineNumber":1005,"author":{"gitID":"wynonaK"},"content":"* **Alternative 1:** Use a fixed `date` field."},{"lineNumber":1006,"author":{"gitID":"wynonaK"},"content":"** Pros: Users only need to remember that a `date` in the format of YYYY-MM-DD is accepted for each `listappt` command."},{"lineNumber":1007,"author":{"gitID":"wynonaK"},"content":"** Cons: Users have to type more than required, especially for Year and Month views."},{"lineNumber":1008,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1009,"author":{"gitID":"wynonaK"},"content":"* **Alternative 2 (current choice):** Use a changing field: `Year` for Year view, `YearMonth` for Month view, `LocalDate` for Week and Day views."},{"lineNumber":1010,"author":{"gitID":"wynonaK"},"content":"** Pros: Users do not need to type redundant information. A Year view will be in the format of YYYY while a Month view will be in the format of YYYY-MM or MM (with automatically allocated current year)."},{"lineNumber":1011,"author":{"gitID":"wynonaK"},"content":"** Cons: Users have to remember that Year view only accepts the year, while the Month view only accepts a year and month, or month. The Week and Day views will not accept just a year or year and month, but requires the specific date."},{"lineNumber":1012,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1013,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Improving user productivity"},{"lineNumber":1014,"author":{"gitID":"wynonaK"},"content":"* **Alternative 1 (current choice):** Implement functions that requires users to type to switch views instead of clicking"},{"lineNumber":1015,"author":{"gitID":"wynonaK"},"content":"** Pros: Users do not need to switch between using a mouse and a keyboard, which increases productivity for users accustomed to the CLI based nature of Medeina."},{"lineNumber":1016,"author":{"gitID":"wynonaK"},"content":"** Cons: Need to implement functions that help will change views (`listappt` or `la` command)."},{"lineNumber":1017,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1018,"author":{"gitID":"wynonaK"},"content":"* **Alternative 2:** Use buttons and clicks to switch a calendar than to manually input a command"},{"lineNumber":1019,"author":{"gitID":"wynonaK"},"content":"** Pros: There will be no need to implement any functions pertaining to `ListAppointment`."},{"lineNumber":1020,"author":{"gitID":"wynonaK"},"content":"** Cons: Defeats the purpose of a CLI-based application."},{"lineNumber":1021,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1022,"author":{"gitID":"wynonaK"},"content":"// tag::delete[]"},{"lineNumber":1023,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Deletion and Force Deletion of Contact, Pet Patient and Appointment"},{"lineNumber":1024,"author":{"gitID":"wynonaK"},"content":"The delete function allows its users to get rid of obsolete information."},{"lineNumber":1025,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1027,"author":{"gitID":"wynonaK"},"content":"Medeina has multiple important classes to handle: `Person`, `PetPatient` and `Appointment`. As Medeina caters to veterinarians, there is a need for the ability to remove the mentioned classes. For example, an `Appointment` can be deleted should a contact decide not to go for the appointment anymore, a `PetPatient` should be deleted if a pet patient dies, and a `Person` should be deleted if a contact decides to immigrate permanently."},{"lineNumber":1028,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1029,"author":{"gitID":"wynonaK"},"content":"The below diagram illustrates the interaction between `Logic` and `Model` components during the deletion of a contact."},{"lineNumber":1030,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1031,"author":{"gitID":"wynonaK"},"content":".Interaction of `Logic` and `Model` Components through the `delete -o 1` command."},{"lineNumber":1032,"author":{"gitID":"wynonaK"},"content":"image::DeletePersonDiagramForDelete.png[width\u003d\"800\"]"},{"lineNumber":1033,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1034,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":1035,"author":{"gitID":"wynonaK"},"content":"`DeleteCommandParser.java` handles and separates the deletion based on a regular expression that captures the matching groups of options `-o`, `-p`, `-a`, `-fp` and `-fo`. Next, the parser gets the `Index` from user input to determine the element to delete. The parser then creates a new `DeleteCommand` with the type (1 for contact, 2 for pet patient, 3 for appointment, 4 for force contact, 5 for force pet patient), as well as the `Index`."},{"lineNumber":1036,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1037,"author":{"gitID":"wynonaK"},"content":"In `execute()`, there is a switch that determines the type of command run based on the type obtained from the parser. The normal delete functions (types 1, 2, 3) subsequently calls the `Model` component to properly remove the element."},{"lineNumber":1038,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1039,"author":{"gitID":"wynonaK"},"content":"[source,java]"},{"lineNumber":1040,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":1041,"author":{"gitID":"wynonaK"},"content":"private CommandResult deleteAppointment() {"},{"lineNumber":1042,"author":{"gitID":"wynonaK"},"content":"     //... code ..."},{"lineNumber":1043,"author":{"gitID":"wynonaK"},"content":"     requireNonNull(appointmentToDelete);"},{"lineNumber":1044,"author":{"gitID":"wynonaK"},"content":"     model.deleteAppointment(appointmentToDelete);"},{"lineNumber":1045,"author":{"gitID":"wynonaK"},"content":"     //... code ..."},{"lineNumber":1046,"author":{"gitID":"wynonaK"},"content":"     return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));"},{"lineNumber":1047,"author":{"gitID":"wynonaK"},"content":" }"},{"lineNumber":1048,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":1049,"author":{"gitID":"wynonaK"},"content":"However, for the force delete functions (types 4, 5), dependencies have to be removed before the element itself can be removed, as shown by the snippet of code from `DeleteCommand.java` below."},{"lineNumber":1050,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1051,"author":{"gitID":"wynonaK"},"content":"[source,java]"},{"lineNumber":1052,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":1053,"author":{"gitID":"wynonaK"},"content":"private CommandResult deleteForcePerson() {"},{"lineNumber":1054,"author":{"gitID":"wynonaK"},"content":"    //... code ..."},{"lineNumber":1055,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1056,"author":{"gitID":"wynonaK"},"content":"    List\u003cPetPatient\u003e petPatientsDeleted \u003d model.deletePetPatientDependencies(personToDelete);"},{"lineNumber":1057,"author":{"gitID":"wynonaK"},"content":"    List\u003cAppointment\u003e appointmentsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":1058,"author":{"gitID":"wynonaK"},"content":"    for (PetPatient pp : petPatientsDeleted) {"},{"lineNumber":1059,"author":{"gitID":"wynonaK"},"content":"        appointmentsDeleted.addAll(model.deleteAppointmentDependencies(pp));"},{"lineNumber":1060,"author":{"gitID":"wynonaK"},"content":"        deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, pp));"},{"lineNumber":1061,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":1062,"author":{"gitID":"wynonaK"},"content":"    for (Appointment appointment : appointmentsDeleted) {"},{"lineNumber":1063,"author":{"gitID":"wynonaK"},"content":"        deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment));"},{"lineNumber":1064,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":1065,"author":{"gitID":"wynonaK"},"content":"    model.deletePerson(personToDelete);"},{"lineNumber":1066,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1067,"author":{"gitID":"wynonaK"},"content":"    //... code ..."},{"lineNumber":1068,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1069,"author":{"gitID":"wynonaK"},"content":"    return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete) + deleteDependenciesList);"},{"lineNumber":1070,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":1071,"author":{"gitID":"wynonaK"},"content":"----"},{"lineNumber":1072,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1073,"author":{"gitID":"wynonaK"},"content":"It can be noted that pet patient dependencies are deleted before appointment dependencies. This is because of the dependency \"hierachy\" between the different elements. A pet patient is uniquely tied to a contact based on `Nric`, while an appointment is uniquely tied to a pet patient based on `Nric` and `PetPatientName`. As a result, pet patients must first be deleted before determining which appointments are to be deleted."},{"lineNumber":1074,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1075,"author":{"gitID":"wynonaK"},"content":".Listing of relevant dependencies deleted upon a force deletion of a contact."},{"lineNumber":1076,"author":{"gitID":"wynonaK"},"content":"image::DeleteDependenciesForForce.png[width\u003d\"800\"]"},{"lineNumber":1077,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1078,"author":{"gitID":"wynonaK"},"content":"{empty} +"},{"lineNumber":1079,"author":{"gitID":"wynonaK"},"content":"For each dependency deleted, it is stored in `List\u003c...\u003e` so that the `CommandResult(...)` returns all deleted dependencies as well as the main, deleted element."},{"lineNumber":1080,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1081,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":1082,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1083,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Improving user friendliness"},{"lineNumber":1084,"author":{"gitID":"wynonaK"},"content":"* **Alternative 1:** Use different commands for different delete functions."},{"lineNumber":1085,"author":{"gitID":"wynonaK"},"content":"** Pros: It is easier to implement. The command can just take in an `Index` without any options before."},{"lineNumber":1086,"author":{"gitID":"wynonaK"},"content":"** Cons: Hard on users as they will have to type a different command for every type of delete (i.e. `deleteperson`, `deletepetpatient` etc.)."},{"lineNumber":1087,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1088,"author":{"gitID":"wynonaK"},"content":"* **Alternative 2 (current choice):** Use one overseeing `delete` command."},{"lineNumber":1089,"author":{"gitID":"wynonaK"},"content":"** Pros: Users do not need to go through the hassle of trying to remember every different command of delete."},{"lineNumber":1090,"author":{"gitID":"wynonaK"},"content":"** Cons: Extra work to determine the type of deletion (i.e. `-a` for Appointment, `-p` for PetPatient etc.)."},{"lineNumber":1091,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1092,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Ease of Use"},{"lineNumber":1093,"author":{"gitID":"wynonaK"},"content":"* **Alternative 1:** Have no force delete function."},{"lineNumber":1094,"author":{"gitID":"wynonaK"},"content":"** Pros: There will be no need to implement functions to delete prior dependencies before a deletion is done. An exception can just be thrown if dependencies still exist."},{"lineNumber":1095,"author":{"gitID":"wynonaK"},"content":"** Cons: Users will need to manually find and delete every dependency manually."},{"lineNumber":1096,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1097,"author":{"gitID":"wynonaK"},"content":"* **Alternative 2 (current choice):** Have a force delete function that will delete all dependencies along with the element to be deleted."},{"lineNumber":1098,"author":{"gitID":"wynonaK"},"content":"** Pros: Easier to use. Users do not need to manually find and delete all dependencies, it just gets deleted immediately if required."},{"lineNumber":1099,"author":{"gitID":"wynonaK"},"content":"** Cons: Need to delete dependencies upon calling a force function. In addition, the dependencies deleted must be shown as well to inform users of all deleted elements."},{"lineNumber":1100,"author":{"gitID":"wynonaK"},"content":"//end::delete[]"},{"lineNumber":1101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1102,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Current Limitations"},{"lineNumber":1103,"author":{"gitID":"wynonaK"},"content":"As of now, users are only capable of deleting an element based on its `Index` displayed in Medeina. This may pose as difficult for users if they want to delete an element based on the list displayed through the `list` command, especially if there is alot of data in Medeina."},{"lineNumber":1104,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1105,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d\u003d Future Considerations"},{"lineNumber":1106,"author":{"gitID":"wynonaK"},"content":"In the coming future, the `Delete` function can be altered such that it allows users to input other fields other than just `Index`, so that users do not need to get a list before deleting a particular element, especially if the user wants to delete an element that is not in the current listing (i.e. not on the listing after a `find` command)."},{"lineNumber":1107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1108,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of Medeina (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of Medeina before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1123,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":1148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in Medeina\u0027s address book. The current state of Medeina is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore Medeina to the state before the `add` command executed."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores Medeina to the state after the command is executed)."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":1201,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":1202,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":1204,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire Medeina."},{"lineNumber":1209,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":1210,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":1211,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":1212,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":1213,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":""},{"lineNumber":1216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":1217,"author":{"gitID":"-"},"content":""},{"lineNumber":1218,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies Medeina (`add`, `clear`, `edit`)."},{"lineNumber":1219,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":1220,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":1221,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":1222,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":1223,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of Medeina * and not the view."},{"lineNumber":1224,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":1225,"author":{"gitID":"-"},"content":""},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":1231,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":1232,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":1234,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":1240,"author":{"gitID":"-"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":1250,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":1257,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1264,"author":{"gitID":"-"},"content":""},{"lineNumber":1265,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1268,"author":{"gitID":"-"},"content":""},{"lineNumber":1269,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1278,"author":{"gitID":"-"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1288,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1289,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1290,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1328,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1329,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1330,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1331,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1332,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1343,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1346,"author":{"gitID":"-"},"content":""},{"lineNumber":1347,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1350,"author":{"gitID":"-"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1360,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1363,"author":{"gitID":"-"},"content":""},{"lineNumber":1364,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1367,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1368,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1369,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1370,"author":{"gitID":"-"},"content":""},{"lineNumber":1371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Medeina depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1374,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1384,"author":{"gitID":"-"},"content":""},{"lineNumber":1385,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1391,"author":{"gitID":"-"},"content":""},{"lineNumber":1392,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1398,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1401,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1403,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1405,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1406,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1408,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1409,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1410,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1411,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1415,"author":{"gitID":"-"},"content":""},{"lineNumber":1416,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1417,"author":{"gitID":"-"},"content":""},{"lineNumber":1418,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1419,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in Medeina\u0027s address book."},{"lineNumber":1422,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1424,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1425,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1426,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1427,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1428,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1429,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1430,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1431,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1432,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1433,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1434,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1435,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1438,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1439,"author":{"gitID":"-"},"content":""},{"lineNumber":1440,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1441,"author":{"gitID":"-"},"content":""},{"lineNumber":1442,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1443,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1446,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1447,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1448,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1449,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1450,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1451,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1452,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1454,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1455,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1456,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1457,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1458,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1459,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1460,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1462,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1463,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1464,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1467,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1468,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1469,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1470,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1471,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1472,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1474,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1475,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1476,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1477,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1478,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1479,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1480,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1481,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1482,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1483,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1484,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1485,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1486,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1487,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1488,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":1491,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1492,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1493,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1494,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1495,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1496,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1497,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1499,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1500,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1501,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1502,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1503,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":1504,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1505,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1506,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1507,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1508,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1509,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1510,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1513,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":1521,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1522,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1523,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1524,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1525,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1526,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1527,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1528,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1531,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1538,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1539,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1540,"author":{"gitID":"-"},"content":""},{"lineNumber":1541,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1544,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1545,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1546,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1547,"author":{"gitID":"-"},"content":""},{"lineNumber":1548,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1549,"author":{"gitID":"-"},"content":""},{"lineNumber":1550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1551,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1554,"author":{"gitID":"-"},"content":""},{"lineNumber":1555,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1556,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1557,"author":{"gitID":"-"},"content":""},{"lineNumber":1558,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1559,"author":{"gitID":"-"},"content":""},{"lineNumber":1560,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1561,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1564,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1565,"author":{"gitID":"-"},"content":""},{"lineNumber":1566,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1567,"author":{"gitID":"-"},"content":""},{"lineNumber":1568,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1569,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1570,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1571,"author":{"gitID":"-"},"content":""},{"lineNumber":1572,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1573,"author":{"gitID":"-"},"content":""},{"lineNumber":1574,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1575,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1576,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1577,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1578,"author":{"gitID":"-"},"content":""},{"lineNumber":1579,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1580,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1581,"author":{"gitID":"-"},"content":""},{"lineNumber":1582,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1583,"author":{"gitID":"-"},"content":""},{"lineNumber":1584,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1585,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1588,"author":{"gitID":"-"},"content":""},{"lineNumber":1589,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1592,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1593,"author":{"gitID":"-"},"content":""},{"lineNumber":1594,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1595,"author":{"gitID":"-"},"content":""},{"lineNumber":1596,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1597,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1600,"author":{"gitID":"-"},"content":""},{"lineNumber":1601,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1602,"author":{"gitID":"-"},"content":""},{"lineNumber":1603,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1604,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1605,"author":{"gitID":"-"},"content":""},{"lineNumber":1606,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1609,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1610,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1611,"author":{"gitID":"-"},"content":""},{"lineNumber":1612,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1613,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1616,"author":{"gitID":"-"},"content":""},{"lineNumber":1617,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1618,"author":{"gitID":"-"},"content":""},{"lineNumber":1619,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1620,"author":{"gitID":"-"},"content":""},{"lineNumber":1621,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1622,"author":{"gitID":"-"},"content":""},{"lineNumber":1623,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1624,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1625,"author":{"gitID":"-"},"content":""},{"lineNumber":1626,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1627,"author":{"gitID":"-"},"content":""},{"lineNumber":1628,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1629,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1630,"author":{"gitID":"-"},"content":""},{"lineNumber":1631,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1632,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1633,"author":{"gitID":"-"},"content":""},{"lineNumber":1634,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1635,"author":{"gitID":"-"},"content":""},{"lineNumber":1636,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1637,"author":{"gitID":"-"},"content":""},{"lineNumber":1638,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1639,"author":{"gitID":"-"},"content":""},{"lineNumber":1640,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1641,"author":{"gitID":"-"},"content":""},{"lineNumber":1642,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1644,"author":{"gitID":"-"},"content":""},{"lineNumber":1645,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1646,"author":{"gitID":"-"},"content":""},{"lineNumber":1647,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1648,"author":{"gitID":"-"},"content":""},{"lineNumber":1649,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1650,"author":{"gitID":"-"},"content":""},{"lineNumber":1651,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1654,"author":{"gitID":"-"},"content":""},{"lineNumber":1655,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1656,"author":{"gitID":"-"},"content":""},{"lineNumber":1657,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1658,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1659,"author":{"gitID":"-"},"content":""},{"lineNumber":1660,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1661,"author":{"gitID":"-"},"content":""},{"lineNumber":1662,"author":{"gitID":"wynonaK"},"content":"* tech-savvy veterinarians and their \u003c\u003cassistants, assistants\u003e\u003e"},{"lineNumber":1663,"author":{"gitID":"wynonaK"},"content":"* can type relatively fast while maintaining accuracy"},{"lineNumber":1664,"author":{"gitID":"wynonaK"},"content":"* requires using the desktop in the workplace"},{"lineNumber":1665,"author":{"gitID":"wynonaK"},"content":"* requires \u003c\u003ccli, CLI\u003e\u003e applications for efficiency"},{"lineNumber":1666,"author":{"gitID":"wynonaK"},"content":"* provide veterinary services to domestic animals in Singapore"},{"lineNumber":1667,"author":{"gitID":"wynonaK"},"content":"* has to manage a significant number of \u003c\u003cpet_patients,pet patients\u003e\u003e"},{"lineNumber":1668,"author":{"gitID":"wynonaK"},"content":"* requires the information kept to generally be non-volatile"},{"lineNumber":1669,"author":{"gitID":"wynonaK"},"content":"* needs to search through amounts of data for information"},{"lineNumber":1670,"author":{"gitID":"-"},"content":""},{"lineNumber":1671,"author":{"gitID":"wynonaK"},"content":"*Value proposition*: all-in-one vet assistant app that can view and make appointments and search for information"},{"lineNumber":1672,"author":{"gitID":"-"},"content":""},{"lineNumber":1673,"author":{"gitID":"Robert-Peng"},"content":"*Feature contribution*:"},{"lineNumber":1674,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1675,"author":{"gitID":"Robert-Peng"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%\",options\u003d\"header\",]"},{"lineNumber":1676,"author":{"gitID":"Robert-Peng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1677,"author":{"gitID":"Robert-Peng"},"content":"|Name |Major enhancement(s) |Minor enhancement(s)"},{"lineNumber":1678,"author":{"gitID":"-"},"content":"|Jacqueline Cheong"},{"lineNumber":1679,"author":{"gitID":"-"},"content":"a|"},{"lineNumber":1680,"author":{"gitID":"wynonaK"},"content":"*Autocomplete*"},{"lineNumber":1681,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1682,"author":{"gitID":"-"},"content":"To enhance user experience and usage efficiency of the CLI by providing autocomplete suggestions"},{"lineNumber":1683,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1684,"author":{"gitID":"wynonaK"},"content":"*Add command*"},{"lineNumber":1685,"author":{"gitID":"-"},"content":""},{"lineNumber":1686,"author":{"gitID":"-"},"content":"A single add command with options to add a contact, pet patient and appointment to Medeina. Users don\u0027t have to remember multiple commands performing similar functions. The new add command also enables the user to all 3 objects at one go to reduce typing."},{"lineNumber":1687,"author":{"gitID":"-"},"content":""},{"lineNumber":1688,"author":{"gitID":"-"},"content":"a|"},{"lineNumber":1689,"author":{"gitID":"wynonaK"},"content":"*Add support to change theme (persistent beyond app restart)*"},{"lineNumber":1690,"author":{"gitID":"-"},"content":""},{"lineNumber":1691,"author":{"gitID":"wynonaK"},"content":"This allows Vets to change the application\u0027s appearance to better suit their preferences and working environment (e.g. dark theme for night time)"},{"lineNumber":1692,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1693,"author":{"gitID":"chialejing"},"content":"|Chia Le Jing|"},{"lineNumber":1694,"author":{"gitID":"chialejing"},"content":"*Implement edit command*"},{"lineNumber":1695,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":1696,"author":{"gitID":"chialejing"},"content":"Supports the editing of Person, PetPatient and Appointment objects. Also resolve all dependencies between all these objects as required. |"},{"lineNumber":1697,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":1698,"author":{"gitID":"chialejing"},"content":"*Implement Pet Patient and all its relevant classes*"},{"lineNumber":1699,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1700,"author":{"gitID":"chialejing"},"content":"Crucial for the backbone of the entire application, as all the key commands (add, edit, delete and find) makes use of PetPatients objects."},{"lineNumber":1701,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1702,"author":{"gitID":"chialejing"},"content":"*Implement storage of PetPatient objects*"},{"lineNumber":1703,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1704,"author":{"gitID":"chialejing"},"content":"Essential for the proper storage and retrieval of PetPatient objects."},{"lineNumber":1705,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1706,"author":{"gitID":"wynonaK"},"content":"|Wynona Kaan |"},{"lineNumber":1707,"author":{"gitID":"wynonaK"},"content":"*Find by Contact or Pet Patient*"},{"lineNumber":1708,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1709,"author":{"gitID":"wynonaK"},"content":"Allows for finding of contacts or pet patients based on a particular field or a combination of fields allowed."},{"lineNumber":1710,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1711,"author":{"gitID":"wynonaK"},"content":"*Delete Contact, Pet Patient or Appointment*"},{"lineNumber":1712,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1713,"author":{"gitID":"wynonaK"},"content":"Allows for deletion of contacts, pet patients and appointments, as well as force deletion of contacts and pet patients that deletes all relevant dependencies along with the element deleted. |"},{"lineNumber":1714,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1715,"author":{"gitID":"wynonaK"},"content":"*Appointment class, storing and listing of appointments*"},{"lineNumber":1716,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1717,"author":{"gitID":"wynonaK"},"content":"Create a new class for to handle appointments. Allows for storage so that appointments can be stored in the .xml file and persist beyond application restart. Allows for listing of appointments in specific requested views of requested dates in CalendarFX."},{"lineNumber":1718,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1719,"author":{"gitID":"Robert-Peng"},"content":"|Peng Xuanchang |"},{"lineNumber":1720,"author":{"gitID":"Robert-Peng"},"content":"*Integrating CalenderFX as framework for Calender view*"},{"lineNumber":1721,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1722,"author":{"gitID":"Robert-Peng"},"content":"Vets and their assistants will be able to see their appointments in calender view integrated in the software. |"},{"lineNumber":1723,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1724,"author":{"gitID":"Robert-Peng"},"content":"*Add NRIC field in Owner’s profile*"},{"lineNumber":1725,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1726,"author":{"gitID":"Robert-Peng"},"content":"The NRIC field will help the veterinarians and their assistants to better locate an owner using their unique ID."},{"lineNumber":1727,"author":{"gitID":"-"},"content":""},{"lineNumber":1728,"author":{"gitID":"Robert-Peng"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1729,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1731,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1732,"author":{"gitID":"-"},"content":""},{"lineNumber":1733,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1734,"author":{"gitID":"-"},"content":""},{"lineNumber":1735,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1737,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1738,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget command syntax, or how to use the App"},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet patient |register its information"},{"lineNumber":1741,"author":{"gitID":"-"},"content":""},{"lineNumber":1742,"author":{"gitID":"-"},"content":"|`* * *` |user |find a pet patient by name |easily locate its information without having to go through a long list of pet patients"},{"lineNumber":1743,"author":{"gitID":"-"},"content":""},{"lineNumber":1744,"author":{"gitID":"-"},"content":"|`* * *` |user |add appointment |schedule meetings with pet patients and their owners"},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"|`* * *` |user |edit pet owner\u0027s contact information |update any change in contact information (e.g. changed hand phone number, change of address)"},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":"|`* * *` |user |basic tags to be assigned automatically |type lesser (e.g. when adding a pet owner, the \"Person\" tag should be assigned by default)"},{"lineNumber":1749,"author":{"gitID":"-"},"content":""},{"lineNumber":1750,"author":{"gitID":"-"},"content":"|`* * *` |user |list out appointments for next day |prepare for the required procedures/diagnosis/consultation"},{"lineNumber":1751,"author":{"gitID":"-"},"content":""},{"lineNumber":1752,"author":{"gitID":"-"},"content":"|`* * *` |user |classify appointments by types |better organize a long list of appointments"},{"lineNumber":1753,"author":{"gitID":"-"},"content":""},{"lineNumber":1754,"author":{"gitID":"-"},"content":"|`* * *` |user |cancel an appointment |make space in schedule for other things"},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":"|`* * *` |user |see upcoming appointments |prepare/plan in advance"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":"|`* * *` |user |see a list of today\u0027s appointment |check on today\u0027s schedule"},{"lineNumber":1759,"author":{"gitID":"-"},"content":""},{"lineNumber":1760,"author":{"gitID":"-"},"content":"|`* * *` |user |filter pet patients by species and blood type |contact them for blood donation during emergencies"},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":"|`* * *` |user |reschedule an appointment |make time for emergency situations"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"-"},"content":"|`* * *` |user |search by pet owner\u0027s name |retrieve a list of pet patients under a particular owner"},{"lineNumber":1765,"author":{"gitID":"-"},"content":""},{"lineNumber":1766,"author":{"gitID":"-"},"content":"|`* * *` |user |add a pet owner |maintain contact information and register a pet patient under him or her"},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"|`* * *` |user |add in owner details such as contact number |contact them when needed"},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"-"},"content":"|`* * *` |user |update pet patients\u0027 information |"},{"lineNumber":1771,"author":{"gitID":"-"},"content":""},{"lineNumber":1772,"author":{"gitID":"-"},"content":"|`* * *` |user |see pet owner\u0027s name when checking pet patients\u0027 profile |know who it belongs to"},{"lineNumber":1773,"author":{"gitID":"-"},"content":""},{"lineNumber":1774,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a pet patient after certain period |remove entries that I no longer need"},{"lineNumber":1775,"author":{"gitID":"-"},"content":""},{"lineNumber":1776,"author":{"gitID":"-"},"content":"|`* * *` |user |have a simple and intuitive command line interface |maximize workflow efficiency"},{"lineNumber":1777,"author":{"gitID":"-"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":"|`* *` |user |change the theme of the application |better suit my preference"},{"lineNumber":1779,"author":{"gitID":"-"},"content":""},{"lineNumber":1780,"author":{"gitID":"-"},"content":"|`* *` |user |log in with password |protect my pet patients\u0027 and their respective owners\u0027 information"},{"lineNumber":1781,"author":{"gitID":"-"},"content":""},{"lineNumber":1782,"author":{"gitID":"-"},"content":"|`* *` |user |update status of pet patient (living, deceased) |know the number of pets I am managing now"},{"lineNumber":1783,"author":{"gitID":"-"},"content":""},{"lineNumber":1784,"author":{"gitID":"-"},"content":"|`* *` |user |check who is my assistant for the day/particular pet patient |brief them in advance"},{"lineNumber":1785,"author":{"gitID":"-"},"content":""},{"lineNumber":1786,"author":{"gitID":"-"},"content":"|`* *` |user |check services consumed for a particular appointment |know what a pet patient has gone through"},{"lineNumber":1787,"author":{"gitID":"-"},"content":""},{"lineNumber":1788,"author":{"gitID":"-"},"content":"|`*` |user |create and modify tags |standardize tags used in the application"},{"lineNumber":1789,"author":{"gitID":"-"},"content":""},{"lineNumber":1790,"author":{"gitID":"-"},"content":"|`*` |user |have reminders sms sent to pet owners automatically 2 days before appointment|"},{"lineNumber":1791,"author":{"gitID":"-"},"content":""},{"lineNumber":1792,"author":{"gitID":"-"},"content":"|`*` |user |update my status |be recognized as an official vet after my training"},{"lineNumber":1793,"author":{"gitID":"-"},"content":""},{"lineNumber":1794,"author":{"gitID":"-"},"content":"|`*` |user |transfer a pet patient from my clinic to another in case of emergency|"},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"|`*` |user |manage the \"rooms\" in hospital |make space for newly hospitalized pet patient"},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":"|`*` |user |search for a pet patient\u0027s medical history |know the next step of treatment"},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"|`*` |user with many pet patients in the address book |sort pet patients by name |locate a pet patient easily"},{"lineNumber":1801,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1802,"author":{"gitID":"-"},"content":""},{"lineNumber":1803,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1804,"author":{"gitID":"-"},"content":""},{"lineNumber":1805,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1806,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1807,"author":{"gitID":"-"},"content":""},{"lineNumber":1808,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Medeina` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1809,"author":{"gitID":"-"},"content":""},{"lineNumber":1810,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1811,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: list appointments"},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1814,"author":{"gitID":"-"},"content":""},{"lineNumber":1815,"author":{"gitID":"-"},"content":"1.  User requests to view appointments for current month"},{"lineNumber":1816,"author":{"gitID":"-"},"content":"2.  Medeina updates calendarFx to show appointments for the current month"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1818,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1819,"author":{"gitID":"-"},"content":""},{"lineNumber":1820,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1821,"author":{"gitID":"-"},"content":""},{"lineNumber":1822,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1823,"author":{"gitID":"-"},"content":"* 2a. There are no appointments for the month."},{"lineNumber":1824,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1825,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1826,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1827,"author":{"gitID":"-"},"content":""},{"lineNumber":1828,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1829,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Update pet patient\u0027s point of contact"},{"lineNumber":1830,"author":{"gitID":"-"},"content":""},{"lineNumber":1831,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1832,"author":{"gitID":"-"},"content":""},{"lineNumber":1833,"author":{"gitID":"-"},"content":"1.  User requests to find a pet patient with the name \"Joseph\""},{"lineNumber":1834,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of pet patients with the name \"Joseph\" in the pet patient card panel and updates the contacts card panel with their point of contact."},{"lineNumber":1835,"author":{"gitID":"-"},"content":"3.  User requests to modify the pet patient\u0027s point of contact"},{"lineNumber":1836,"author":{"gitID":"-"},"content":"4.  Medeina shows the pet patient\u0027s updated information"},{"lineNumber":1837,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1838,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1839,"author":{"gitID":"-"},"content":""},{"lineNumber":1840,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1841,"author":{"gitID":"-"},"content":""},{"lineNumber":1842,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1843,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1844,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1845,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1846,"author":{"gitID":"-"},"content":""},{"lineNumber":1847,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1848,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1849,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1850,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1851,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1852,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1853,"author":{"gitID":"-"},"content":""},{"lineNumber":1854,"author":{"gitID":"-"},"content":"* 3b. The given command is invalid."},{"lineNumber":1855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1856,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1857,"author":{"gitID":"-"},"content":"** 3b1. Medeina shows the correct command usage to edit pet patient\u0027s information."},{"lineNumber":1858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1859,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1860,"author":{"gitID":"-"},"content":""},{"lineNumber":1861,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Retrieve pet patient information under a particular contact"},{"lineNumber":1863,"author":{"gitID":"-"},"content":""},{"lineNumber":1864,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1865,"author":{"gitID":"-"},"content":""},{"lineNumber":1866,"author":{"gitID":"-"},"content":"1.  User requests to find a contact named \"Mavis\""},{"lineNumber":1867,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of contacts with \"Mavis\" as part of their name and updates the pet patient card panel with pet patients under them"},{"lineNumber":1868,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1869,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1870,"author":{"gitID":"-"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1872,"author":{"gitID":"-"},"content":""},{"lineNumber":1873,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1874,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1875,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1876,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1877,"author":{"gitID":"-"},"content":""},{"lineNumber":1878,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1879,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add tag(s) to a contact"},{"lineNumber":1880,"author":{"gitID":"-"},"content":""},{"lineNumber":1881,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1882,"author":{"gitID":"-"},"content":""},{"lineNumber":1883,"author":{"gitID":"-"},"content":"1.  User requests to find an contacts with the name \"Mavis\""},{"lineNumber":1884,"author":{"gitID":"-"},"content":"2.  Medeina shows a list of contacts with the name \"Mavis\" and updates the pet patient card panel with pet patients under them"},{"lineNumber":1885,"author":{"gitID":"-"},"content":"3.  User requests to add tags to a specific owner on the list"},{"lineNumber":1886,"author":{"gitID":"-"},"content":"4.  Medeina shows updated owner information"},{"lineNumber":1887,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1888,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1889,"author":{"gitID":"-"},"content":""},{"lineNumber":1890,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1891,"author":{"gitID":"-"},"content":""},{"lineNumber":1892,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1893,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1894,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1895,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1896,"author":{"gitID":"-"},"content":""},{"lineNumber":1897,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1898,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1899,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1900,"author":{"gitID":"-"},"content":"** 3a1. Medeina shows an error message."},{"lineNumber":1901,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1902,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1903,"author":{"gitID":"-"},"content":""},{"lineNumber":1904,"author":{"gitID":"-"},"content":"* 3b. The given tag(s) is/are invalid."},{"lineNumber":1905,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1906,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1907,"author":{"gitID":"-"},"content":"** 3b1. Medeina shows an error message."},{"lineNumber":1908,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1909,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1910,"author":{"gitID":"-"},"content":""},{"lineNumber":1911,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1912,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1913,"author":{"gitID":"-"},"content":""},{"lineNumber":1914,"author":{"gitID":"chialejing"},"content":".  The system should work on Windows, Linux and macOS as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1915,"author":{"gitID":"chialejing"},"content":".  A user (vet or vet assistant) with above average typing speed for regular English text (i.e. not code, not system administrative commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1916,"author":{"gitID":"chialejing"},"content":".  The system should be accessible, even without any Internet connection (or with poor Internet connection)."},{"lineNumber":1917,"author":{"gitID":"chialejing"},"content":".  The system should be able to hold the information of at least 1000 patients (pets) and their respective owners without noticeable sluggishness in performance for typical usage."},{"lineNumber":1918,"author":{"gitID":"chialejing"},"content":".  The system should be stable (runs without crashing, even for extended hours) and responsive (with a maximum lag of 2 seconds) due to the possibility of patient emergencies."},{"lineNumber":1919,"author":{"gitID":"chialejing"},"content":".  The system should be reliable and accurate (i.e. information keyed in is guaranteed to be saved, information retrieved is guaranteed to be accurate based on what was keyed in previously)."},{"lineNumber":1920,"author":{"gitID":"chialejing"},"content":".  The system must have sufficient security (such as password protection / encrypted storage file) to protect the confidentiality of the patients (pets) and their respective owners. This is also to ensure compliance with PDPA."},{"lineNumber":1921,"author":{"gitID":"chialejing"},"content":".  Patient\u0027s and owner\u0027s information should be easily and accurately backed up, with zero errors in the information."},{"lineNumber":1922,"author":{"gitID":"chialejing"},"content":".  Restoring patient\u0027s and their respective owner\u0027s information should be an easy process."},{"lineNumber":1923,"author":{"gitID":"chialejing"},"content":".  The system should have sufficient commands / functions to ensure that information can be maintained and managed easily. Basic operations such as add, delete, find, update must be included for patients and their respective owners."},{"lineNumber":1924,"author":{"gitID":"-"},"content":""},{"lineNumber":1925,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1926,"author":{"gitID":"-"},"content":""},{"lineNumber":1927,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1928,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1929,"author":{"gitID":"-"},"content":""},{"lineNumber":1930,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1931,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1932,"author":{"gitID":"-"},"content":""},{"lineNumber":1933,"author":{"gitID":"wynonaK"},"content":"[[assistants]] Assistants::"},{"lineNumber":1934,"author":{"gitID":"wynonaK"},"content":"People who help Veterinarians (receptionist, technicians etc.)"},{"lineNumber":1935,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1936,"author":{"gitID":"wynonaK"},"content":"[[cli]] CLI::"},{"lineNumber":1937,"author":{"gitID":"wynonaK"},"content":"Command Line Interface"},{"lineNumber":1938,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1939,"author":{"gitID":"wynonaK"},"content":"[[pet_patients]] Pet Patients::"},{"lineNumber":1940,"author":{"gitID":"wynonaK"},"content":"Domestic animals which seek veterinary services"},{"lineNumber":1941,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1942,"author":{"gitID":"wynonaK"},"content":"[[person]] Person::"},{"lineNumber":1943,"author":{"gitID":"wynonaK"},"content":"To refer to contacts in the implementation of Medeina"},{"lineNumber":1944,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1945,"author":{"gitID":"wynonaK"},"content":"[[contact]] Contact::"},{"lineNumber":1946,"author":{"gitID":"wynonaK"},"content":"To refer to owners of \u003c\u003cpet_patients, pet patients\u003e\u003e"},{"lineNumber":1947,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":1948,"author":{"gitID":"wynonaK"},"content":"[[singleton]] Singleton::"},{"lineNumber":1949,"author":{"gitID":"wynonaK"},"content":"A design pattern in programming"},{"lineNumber":1950,"author":{"gitID":"-"},"content":""},{"lineNumber":1951,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1952,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1953,"author":{"gitID":"-"},"content":""},{"lineNumber":1954,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1955,"author":{"gitID":"-"},"content":""},{"lineNumber":1956,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1957,"author":{"gitID":"-"},"content":""},{"lineNumber":1958,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1959,"author":{"gitID":"-"},"content":""},{"lineNumber":1960,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1961,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1962,"author":{"gitID":"-"},"content":""},{"lineNumber":1963,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1964,"author":{"gitID":"-"},"content":""},{"lineNumber":1965,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1966,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1967,"author":{"gitID":"-"},"content":""},{"lineNumber":1968,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1969,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1970,"author":{"gitID":"-"},"content":""},{"lineNumber":1971,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1972,"author":{"gitID":"-"},"content":""},{"lineNumber":1973,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1974,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1975,"author":{"gitID":"-"},"content":""},{"lineNumber":1976,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1977,"author":{"gitID":"-"},"content":""},{"lineNumber":1978,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1979,"author":{"gitID":"-"},"content":""},{"lineNumber":1980,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1981,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1982,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1983,"author":{"gitID":"-"},"content":""},{"lineNumber":1984,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1985,"author":{"gitID":"-"},"content":""},{"lineNumber":1986,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1987,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1988,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1989,"author":{"gitID":"-"},"content":""},{"lineNumber":1990,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Change theme"},{"lineNumber":1991,"author":{"gitID":"-"},"content":""},{"lineNumber":1992,"author":{"gitID":"-"},"content":". dark theme"},{"lineNumber":1993,"author":{"gitID":"-"},"content":""},{"lineNumber":1994,"author":{"gitID":"-"},"content":".. Type \"theme dark\" in the command box to switch to dark theme. +"},{"lineNumber":1995,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1996,"author":{"gitID":"-"},"content":"   Expected: The app is using dark theme. The change of theme persists beyond app restart."},{"lineNumber":1997,"author":{"gitID":"-"},"content":""},{"lineNumber":1998,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Autocomplete"},{"lineNumber":1999,"author":{"gitID":"-"},"content":""},{"lineNumber":2000,"author":{"gitID":"-"},"content":". Command word"},{"lineNumber":2001,"author":{"gitID":"-"},"content":".. In an empty command box (with no user input), type a space. You should see a drop down list of commands supported by Medeina."},{"lineNumber":2002,"author":{"gitID":"-"},"content":".. Continue typing spaces in the command box. The same drop down list of command words will be suggested."},{"lineNumber":2003,"author":{"gitID":"-"},"content":""},{"lineNumber":2004,"author":{"gitID":"-"},"content":". Prefixes"},{"lineNumber":2005,"author":{"gitID":"-"},"content":".. Type \"add \" you should see a list of prefixes supported by Medeina."},{"lineNumber":2006,"author":{"gitID":"-"},"content":".. Type \"edit \" you should see a list of prefixes supported by Medeina."},{"lineNumber":2007,"author":{"gitID":"-"},"content":".. Type \"find \" you should see a list of prefixes supported by Medeina."},{"lineNumber":2008,"author":{"gitID":"-"},"content":".. Type \"delete \" you should see a list of prefixes supported by Medeina."},{"lineNumber":2009,"author":{"gitID":"-"},"content":".. Type \"listappt \" you should see a list of prefixes supported by Medeina."},{"lineNumber":2010,"author":{"gitID":"-"},"content":".. There will be no prefixes suggested for all other preceeding words e.g. \"sdfkljsdlkfjs \", \"help \"."},{"lineNumber":2011,"author":{"gitID":"-"},"content":""},{"lineNumber":2012,"author":{"gitID":"-"},"content":". Options"},{"lineNumber":2013,"author":{"gitID":"-"},"content":".. Type \"add -\" you should see a list of options (starting with \"-\") supported by Medeina."},{"lineNumber":2014,"author":{"gitID":"-"},"content":".. Type \"edit -\" you should see a list of options (starting with \"-\") supported by Medeina."},{"lineNumber":2015,"author":{"gitID":"-"},"content":".. Type \"find -\" you should see a list of options (starting with \"-\") supported by Medeina."},{"lineNumber":2016,"author":{"gitID":"-"},"content":".. Type \"delete -\" you should see a list of options (starting with \"-\") supported by Medeina."},{"lineNumber":2017,"author":{"gitID":"-"},"content":".. Type \"listappt -\" you should see a list of options (starting with \"-\") supported by Medeina."},{"lineNumber":2018,"author":{"gitID":"-"},"content":".. There will be no options suggested for all other preceeding words e.g. \"sdfkljsdlkfjs -\", \"help -\"."},{"lineNumber":2019,"author":{"gitID":"-"},"content":""},{"lineNumber":2020,"author":{"gitID":"-"},"content":". Species, breed, colour and blood type"},{"lineNumber":2021,"author":{"gitID":"-"},"content":".. Typing s/, b/, c/ and bt/ after any of the following command words (add, find, edit, delete, listappt) in the command box, will show their respective suggestions (cap at 13)."},{"lineNumber":2022,"author":{"gitID":"-"},"content":""},{"lineNumber":2023,"author":{"gitID":"-"},"content":". Pet patient names"},{"lineNumber":2024,"author":{"gitID":"-"},"content":".. Type \"add -a -o -p n/\" and you will see a list of pet patient name suggestions (cap at 13)."},{"lineNumber":2025,"author":{"gitID":"-"},"content":".. Type \"add -p n/\" and there will be no pet patient name suggestions."},{"lineNumber":2026,"author":{"gitID":"-"},"content":""},{"lineNumber":2027,"author":{"gitID":"-"},"content":". NRIC"},{"lineNumber":2028,"author":{"gitID":"-"},"content":".. Type \"add -p -o nr/\" and you will see a list of NRIC suggestions (cap at 13)."},{"lineNumber":2029,"author":{"gitID":"-"},"content":".. Type \"add -p n/Mikey s/Cat b/Persian c/Calico bt/A -o nr/\" and you will see a list of NRIC suggestions (cap at 13)."},{"lineNumber":2030,"author":{"gitID":"-"},"content":".. Type \"add -p n/Mikey s/Cat b/Persian c/Calico bt/A -o nr/T\" and you will see a list of NRIC suggestions starting with \"T\" (cap at 13)."},{"lineNumber":2031,"author":{"gitID":"-"},"content":".. Type \"edit 1 -p nr/\" to see a list of NRIC suggestions (cap at 13)."},{"lineNumber":2032,"author":{"gitID":"-"},"content":".. Type \"edit 1 -p n/hello nr/\" to see a list of NRIC suggestions (cap at 13)."},{"lineNumber":2033,"author":{"gitID":"-"},"content":".. Type \"find -o nr/\" to see a list of NRIC suggestions (cap at 13)."},{"lineNumber":2034,"author":{"gitID":"-"},"content":""},{"lineNumber":2035,"author":{"gitID":"-"},"content":". Toggle on/off"},{"lineNumber":2036,"author":{"gitID":"-"},"content":".. Press F2 when the command box is in focus to off/on autocomplete."},{"lineNumber":2037,"author":{"gitID":"-"},"content":""},{"lineNumber":2038,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding contact, pet patient, appointment"},{"lineNumber":2039,"author":{"gitID":"-"},"content":". To add a person"},{"lineNumber":2040,"author":{"gitID":"-"},"content":".. add -o n/Jason p/90123456 e/jason@gmail.com a/137 omputing Drive nr/S8899111G"},{"lineNumber":2041,"author":{"gitID":"-"},"content":"   Expected: Successfully added."},{"lineNumber":2042,"author":{"gitID":"-"},"content":"   Enter this command again and you will see an error message \"This contact already exists in Medeina.\""},{"lineNumber":2043,"author":{"gitID":"-"},"content":""},{"lineNumber":2044,"author":{"gitID":"-"},"content":". To add a pet patient"},{"lineNumber":2045,"author":{"gitID":"-"},"content":".. add -p n/Xiao bai s/Cat b/Persian c/Black bt/A -o"},{"lineNumber":2046,"author":{"gitID":"-"},"content":"   Expected: Please check your parameters for: option -o"},{"lineNumber":2047,"author":{"gitID":"-"},"content":"   Missing prefix nr/ for NRIC."},{"lineNumber":2048,"author":{"gitID":"-"},"content":""},{"lineNumber":2049,"author":{"gitID":"-"},"content":".. add -p n/Xiao bai s/Cat b/Persian c/Black bt/A -o nr/S0123456B"},{"lineNumber":2050,"author":{"gitID":"-"},"content":"   Expected: Successfully added."},{"lineNumber":2051,"author":{"gitID":"-"},"content":""},{"lineNumber":2052,"author":{"gitID":"-"},"content":". To add an appointment"},{"lineNumber":2053,"author":{"gitID":"wynonaK"},"content":".. add -a d/2018-10-22 r/nil t/checkup -o nr/S012345B -p n/Ane"},{"lineNumber":2054,"author":{"gitID":"wynonaK"},"content":"   Expected: succesfully added"},{"lineNumber":2055,"author":{"gitID":"-"},"content":""},{"lineNumber":2056,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Finding contacts or pet patients"},{"lineNumber":2057,"author":{"gitID":"wynonaK"},"content":". Finding contacts"},{"lineNumber":2058,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2059,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: List all contacts and pet patients using the `list` command. Multiple contacts in the list."},{"lineNumber":2060,"author":{"gitID":"wynonaK"},"content":".. Test case: `find -o n/Alex Yeoh` +"},{"lineNumber":2061,"author":{"gitID":"wynonaK"},"content":"   Expected: All contacts with `Alex` or `Yeoh` in their names are listed, pet patients of contacts listed are also listed."},{"lineNumber":2062,"author":{"gitID":"wynonaK"},"content":".. Test case: `find -o t/Owner` +"},{"lineNumber":2063,"author":{"gitID":"wynonaK"},"content":"   Expected: All contacts with an `Owner` tag are listed, pet patients of contacts listed are also listed."},{"lineNumber":2064,"author":{"gitID":"wynonaK"},"content":".. Test case: `find -o n/Alex Yeoh t/Owner` +"},{"lineNumber":2065,"author":{"gitID":"wynonaK"},"content":"   Expected: All contacts with `Alex` or `Yeoh` in their names **and** have an `Owner` tag are listed, pet patients of contacts listed are also listed."},{"lineNumber":2066,"author":{"gitID":"wynonaK"},"content":".. Incorrect find commands: `find yay`, `find` +"},{"lineNumber":2067,"author":{"gitID":"wynonaK"},"content":"   Expected: Listing does not change. Error details shown in the status message."},{"lineNumber":2068,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2069,"author":{"gitID":"wynonaK"},"content":". Finding pet patients"},{"lineNumber":2070,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2071,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: List all contacts and pet patients using the `list` command. Multiple pet patients in the list."},{"lineNumber":2072,"author":{"gitID":"wynonaK"},"content":".. Test case: `find -p n/Ane` +"},{"lineNumber":2073,"author":{"gitID":"wynonaK"},"content":"   Expected: All pet patients with `Ane` in their names are listed, contacts who are owners of listed pet patients are also listed."},{"lineNumber":2074,"author":{"gitID":"wynonaK"},"content":".. Test case: `find -p s/Cat c/Black` +"},{"lineNumber":2075,"author":{"gitID":"wynonaK"},"content":"   Expected: All `Cat` pet patients who are `Black` in colour are listed, contacts who are owners of listed pet patients are also listed."},{"lineNumber":2076,"author":{"gitID":"wynonaK"},"content":".. Incorrect find commands not following the command syntax: `find`, `find yay` +"},{"lineNumber":2077,"author":{"gitID":"wynonaK"},"content":"   Expected: Listing does not change. Error details shown in the status message."},{"lineNumber":2078,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2079,"author":{"gitID":"wynonaK"},"content":"\u003d\u003d\u003d Listing appointments"},{"lineNumber":2080,"author":{"gitID":"wynonaK"},"content":". Switching views in the Calendar"},{"lineNumber":2081,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2082,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: There are appointments in the Calendar in the year 2018, there are no appointments in the Calendar in the year 2000."},{"lineNumber":2083,"author":{"gitID":"wynonaK"},"content":".. Test case: `listappt -y` +"},{"lineNumber":2084,"author":{"gitID":"wynonaK"},"content":"   Expected: The calendar is changed from current view to year view of the current year."},{"lineNumber":2085,"author":{"gitID":"wynonaK"},"content":".. Test case: `listappt -m 2018-01` +"},{"lineNumber":2086,"author":{"gitID":"wynonaK"},"content":"   Expected: The calendar is changed from current view to month view of January in 2018."},{"lineNumber":2087,"author":{"gitID":"wynonaK"},"content":".. Test case: `listappt -d 2018-12-31` +"},{"lineNumber":2088,"author":{"gitID":"wynonaK"},"content":"   Expected: The calendar is changed from current view to day view of 31st December 2018."},{"lineNumber":2089,"author":{"gitID":"wynonaK"},"content":".. Test case: `listappt -y 2000` +"},{"lineNumber":2090,"author":{"gitID":"wynonaK"},"content":"   Expected: The calendar is not changed. Error details shown in the status message."},{"lineNumber":2091,"author":{"gitID":"wynonaK"},"content":".. Other incorrect listappt commands not following the command syntax: `listappt`, `listappt -y 2018-12-31` etc. +"},{"lineNumber":2092,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2093,"author":{"gitID":"-"},"content":""},{"lineNumber":2094,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":2095,"author":{"gitID":"-"},"content":""},{"lineNumber":2096,"author":{"gitID":"wynonaK"},"content":". Forcefully deleting a contact while all contacts are listed"},{"lineNumber":2097,"author":{"gitID":"-"},"content":""},{"lineNumber":2098,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: List all contacts using the `list` command. Multiple contacts in the list."},{"lineNumber":2099,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -fo 1` +"},{"lineNumber":2100,"author":{"gitID":"wynonaK"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact and its deleted dependencies is shown in the status message."},{"lineNumber":2101,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -fo 0` +"},{"lineNumber":2102,"author":{"gitID":"wynonaK"},"content":"   Expected: No contact is deleted. Error details shown in the status message."},{"lineNumber":2103,"author":{"gitID":"wynonaK"},"content":".. Other incorrect delete commands not following the command syntax: `delete`, `delete yay` etc. +"},{"lineNumber":2104,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2105,"author":{"gitID":"-"},"content":""},{"lineNumber":2106,"author":{"gitID":"wynonaK"},"content":". Deleting a contact with pet patients"},{"lineNumber":2107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2108,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: The current listing is not empty. The contact at index `1` should have pet patients tied to it."},{"lineNumber":2109,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -o 1` +"},{"lineNumber":2110,"author":{"gitID":"wynonaK"},"content":"   Expected: No contacts deleted. Error details shown in the status message."},{"lineNumber":2111,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2112,"author":{"gitID":"wynonaK"},"content":". Deleting a pet patient with appointments"},{"lineNumber":2113,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2114,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: The current listing is not empty. The pet patient at index `1` should have appointments tied to it."},{"lineNumber":2115,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -p 1` +"},{"lineNumber":2116,"author":{"gitID":"wynonaK"},"content":"   Expected: No pet patients deleted. Error details shown in the status message."},{"lineNumber":2117,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2118,"author":{"gitID":"wynonaK"},"content":". Forcefully deleting a pet patient while all pet patients are listed"},{"lineNumber":2119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2120,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: List all pet patients using the `list` command. Multiple pet patients in the list."},{"lineNumber":2121,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -fp 1` +"},{"lineNumber":2122,"author":{"gitID":"wynonaK"},"content":"   Expected: First pet patient is deleted from the list. Details of the deleted pet patient and its deleted dependencies shown in the status message."},{"lineNumber":2123,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2124,"author":{"gitID":"wynonaK"},"content":". Deleting an appointment"},{"lineNumber":2125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":2126,"author":{"gitID":"wynonaK"},"content":".. Prerequisites: There is an appointment at index `1`."},{"lineNumber":2127,"author":{"gitID":"wynonaK"},"content":".. Test case: `delete -a 1` +"},{"lineNumber":2128,"author":{"gitID":"wynonaK"},"content":"   Expected: The appointment at index `1` is deleted from the Calendar. Details of the deleted appointment shown in the status message."},{"lineNumber":2129,"author":{"gitID":"-"},"content":""},{"lineNumber":2130,"author":{"gitID":"Robert-Peng"},"content":"\u003d\u003d\u003d Listing owners and petPatients"},{"lineNumber":2131,"author":{"gitID":"Robert-Peng"},"content":". Listing out all owners and petPatients"},{"lineNumber":2132,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":2133,"author":{"gitID":"Robert-Peng"},"content":".. Prerequisites: Conduct `find` command. More than one person or petPatient in the lists."},{"lineNumber":2134,"author":{"gitID":"Robert-Peng"},"content":".. Testcase: `find -o n/Alex` + `list` +"},{"lineNumber":2135,"author":{"gitID":"Robert-Peng"},"content":"    Expected: Medeina will display the located person and then list out all owners and petPatients in Medeina\u0027s storage."},{"lineNumber":2136,"author":{"gitID":"wynonaK"},"content":""}],"authorContributionMap":{"Robert-Peng":114,"chialejing":407,"wynonaK":358,"-":1257}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_JOKER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_NERO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_JOKER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_NERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_JOKER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_NERO;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ONE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TWO;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BREED_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLOUR_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPTION;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_DESC;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOKER;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_NERO;"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_CHARLIE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_FION;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_APPOINTMENT;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_ONE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_TWO;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_JOKER;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_NERO;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHECKUP;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DEPRESSION;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FIV;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_VACCINATION;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_JOKER;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_JOKER;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_JOKER;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONE;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOKER;"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_ONE;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_JOKER;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHECKUP;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FIV;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parse_allPersonFieldsPresent_success() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":110,"author":{"gitID":"Robert-Peng"},"content":"                .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                OPTION_OWNER + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_FRIEND,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withNric(VALID_NRIC_BOB)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":140,"author":{"gitID":"Robert-Peng"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":141,"author":{"gitID":"Robert-Peng"},"content":"            + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parse_optionalPersonFieldsMissing_success() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":148,"author":{"gitID":"Robert-Peng"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withNric(VALID_NRIC_AMY).withTags().build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, OPTION_OWNER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":150,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void parse_compulsoryPersonFieldMissing_failure() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":167,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":171,"author":{"gitID":"Robert-Peng"},"content":"                + VALID_ADDRESS_BOB + NRIC_DESC_BOB, expectedMessage);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":175,"author":{"gitID":"Robert-Peng"},"content":"                + VALID_ADDRESS_BOB + VALID_NRIC_BOB, expectedMessage);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parse_invalidPersonValue_failure() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"Robert-Peng"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":183,"author":{"gitID":"Robert-Peng"},"content":"            + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"Robert-Peng"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":188,"author":{"gitID":"Robert-Peng"},"content":"            + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":192,"author":{"gitID":"Robert-Peng"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":193,"author":{"gitID":"Robert-Peng"},"content":"            + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"Robert-Peng"},"content":"            + INVALID_ADDRESS_DESC + NRIC_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":198,"author":{"gitID":"Robert-Peng"},"content":"            + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // invalid nric"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + INVALID_NRIC_DESC + TAG_DESC_HUSBAND"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":207,"author":{"gitID":"Robert-Peng"},"content":"            + ADDRESS_DESC_BOB + NRIC_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":211,"author":{"gitID":"Robert-Peng"},"content":"                + INVALID_ADDRESS_DESC + NRIC_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, OPTION_OWNER + PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"Robert-Peng"},"content":"                + ADDRESS_DESC_BOB + NRIC_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"    public void parse_allPetPatientFieldsPresent_success() {"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        PetPatient expectedPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_JOKER)"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"                .withSpecies(VALID_SPECIES_JOKER).withBreed(VALID_BREED_JOKER).withColour(VALID_COLOUR_JOKER)"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER).withTags(VALID_TAG_FIV).withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        // whitespace only preamble"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        // multiple names - last name accepted"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_NERO + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        // multiple species - last species accepted"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_NERO + SPECIES_DESC_JOKER"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"        // multiple breed - last breed accepted"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_NERO"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"                        + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        // multiple colour - last colour accepted"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"                        + COLOUR_DESC_NERO + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        // multiple blood type - last blood type accepted"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"                        + COLOUR_DESC_JOKER + BLOODTYPE_DESC_NERO + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + OPTION_OWNER"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"                        + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        // multiple tags - all accepted"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"                + COLOUR_DESC_JOKER + BLOODTYPE_DESC_NERO + BLOODTYPE_DESC_JOKER + TAG_DESC_FIV + TAG_DESC_DEPRESSION"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"    public void parse_optionalPetPatientFieldsMissing_success() {"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"        // zero tags"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"        PetPatient expectedPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_JOKER)"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"                .withSpecies(VALID_SPECIES_JOKER).withBreed(VALID_BREED_JOKER).withColour(VALID_COLOUR_JOKER)"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER).withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, new AddCommand(expectedPetPatient, fion));"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"    public void parse_compulsoryPetPatientFieldMissing_failure() {"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        String invalidPetPatient \u003d String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PETPATIENT);"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        String invalidAddCommand \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        String missingNricPrefix \u003d String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_NRIC_PREFIX);"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"        // missing name prefix"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"        // missing species prefix"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        // missing breed prefix"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"        // missing colour prefix"},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + VALID_COLOUR_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"        // missing blood type prefix"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"        // missing nric prefix"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":"                + VALID_NRIC_FION, missingNricPrefix);"},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"        // missing all pet patient prefixes"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + VALID_COLOUR_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, invalidPetPatient);"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"        // missing all prefixes"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_JOKER + VALID_SPECIES_JOKER"},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"                + VALID_BREED_JOKER + VALID_COLOUR_JOKER + VALID_BLOODTYPE_JOKER + OPTION_OWNER"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"                + VALID_NRIC_FION, invalidPetPatient);"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"        // missing options"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + NRIC_DESC_FION,"},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"                invalidAddCommand);"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidPetPatientValue_failure() {"},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"        // invalid name"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + INVALID_NAME_DESC + SPECIES_DESC_JOKER"},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":"        // invalid nric"},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":"                + INVALID_NRIC_DESC, Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":"        // invalid breed"},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"                + INVALID_BREED_DESC + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, Breed.MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"        // invalid species"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + INVALID_SPECIES_DESC"},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, Species.MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"        // invalid colour"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + INVALID_COLOUR_DESC + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, Colour.MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"        // invalid blood type"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + INVALID_BLOODTYPE_DESC + OPTION_OWNER"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"    public void parse_allAppointmentFieldsPresent_success() {"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withDateTime(VALID_DATE_ONE).withRemark(VALID_REMARK_ONE)"},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(VALID_NRIC_FION)"},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(VALID_NAME_JOKER).build();"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"        Nric fion \u003d new Nric(VALID_NRIC_FION);"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"        PetPatientName joker \u003d new PetPatientName(VALID_NAME_JOKER);"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":"        // whitespace only preamble"},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"                + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"        // multiple date time - last one is accepted"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_TWO + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"        // multiple remarks - last one is accepted"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_TWO + REMARK_DESC_ONE"},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"        // multiple tags - all accepted"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_VACCINATION"},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER,"},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"                new AddCommand(appt, fion, joker));"},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"        // multiple nric - last one is accepted"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"                        + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_CHARLIE + NRIC_DESC_FION + OPTION_PET"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"                        + NAME_DESC_JOKER, new AddCommand(appt, fion, joker));"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"        // multiple pet name - last one is accepted"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"        assertParseSuccess(parser,  OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"                + TAG_DESC_CHECKUP + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_NERO + NAME_DESC_JOKER, new AddCommand(appt, fion, joker));"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"    public void parse_compulsoryAppointmentFieldMissing_failure() {"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"        String invalidAppt \u003d String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_APPOINTMENT);"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"        String invalidCommand \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":"        // missing date time prefix"},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + VALID_DATE_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"        // missing remark prefix"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + VALID_REMARK_ONE + TAG_DESC_CHECKUP"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"        // missing tag prefix"},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + VALID_TAG_CHECKUP"},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidAppt);"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"        // missing options"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP + NRIC_DESC_FION"},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"                + NAME_DESC_JOKER, invalidCommand);"},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"        // missing -o, -p"},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + VALID_DATE_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP,"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"                invalidCommand);"},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidAppointmentValue_failure() {"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":"        String invalidDateMsg \u003d \"Please give a valid date and time based on the format yyyy-MM-dd HH:mm!\";"},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"        String invalidDateTimeMsg \u003d \"Please give a valid date and time based on the format yyyy-MM-dd HH:mm!\";"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"        // invalid remark"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + INVALID_REMARK_DESC + TAG_DESC_CHECKUP"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"        // invalid date"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + INVALID_DATETIME_DESC + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidDateMsg);"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"        // invalid time"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + INVALID_TIME_DESC + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + NRIC_DESC_FION + OPTION_PET + NAME_DESC_JOKER, invalidDateTimeMsg);"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"    public void parse_invalidCommandOption_failure() {"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":452,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":453,"author":{"gitID":"Aquarinte"},"content":"        // invalid option"},{"lineNumber":454,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, INVALID_OPTION + NAME_DESC_JOKER + SPECIES_DESC_JOKER"},{"lineNumber":455,"author":{"gitID":"Aquarinte"},"content":"                + BREED_DESC_JOKER + COLOUR_DESC_JOKER + BLOODTYPE_DESC_JOKER + OPTION_OWNER"},{"lineNumber":456,"author":{"gitID":"Aquarinte"},"content":"                + NRIC_DESC_FION, expectedMessage);"},{"lineNumber":457,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":458,"author":{"gitID":"Aquarinte"},"content":"        // wrong order: -a, -p, -o"},{"lineNumber":459,"author":{"gitID":"Aquarinte"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + DATE_DESC_ONE + REMARK_DESC_ONE + TAG_DESC_CHECKUP"},{"lineNumber":460,"author":{"gitID":"Aquarinte"},"content":"                        + OPTION_PET + NAME_DESC_JOKER + SPECIES_DESC_JOKER + BREED_DESC_JOKER + COLOUR_DESC_JOKER"},{"lineNumber":461,"author":{"gitID":"Aquarinte"},"content":"                        + BLOODTYPE_DESC_JOKER + OPTION_OWNER + NRIC_DESC_FION, expectedMessage);"},{"lineNumber":462,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":463,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":464,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":246,"Robert-Peng":26,"chialejing":1,"-":191}},{"path":"src/test/java/seedu/address/logic/parser/ListAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"public class ListAppointmentCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"    private ListAppointmentCommandParser parser \u003d new ListAppointmentCommandParser();"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public void parse_fieldsExist_success() {"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -y 2018 \", new ListAppointmentCommand(1, Year.of(2018)));"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM\");"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -m 2018-12 \","},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(2, YearMonth.parse(\"2018-12\", formatter)));"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"        YearMonth date \u003d YearMonth.now().withMonth(12);"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -m 12 \","},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(2, date));"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -w 2018-12-31 \","},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(3, LocalDate.parse(\"2018-12-31\", formatter)));"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -d 2018-12-31 \","},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(4, LocalDate.parse(\"2018-12-31\", formatter)));"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    public void parse_fieldsAbsentButOptionExist_success() {"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -y \","},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(1, Year.now()));"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -m \","},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(2, YearMonth.now()));"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -w \","},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(3, LocalDate.now()));"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        assertParseSuccess(parser, \" -d \","},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"                new ListAppointmentCommand(4, LocalDate.now()));"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    public void parse_optionsAbsent_failure() {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" \","},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    public void parse_optionsInvalid_failure() {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -ajsdbiuaeih \","},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    public void parse_fieldsInvalid_failure() {"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -y jadfoijnoiem \","},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -m jadfoijnoiem \","},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -w jadfoijnoiem \","},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        assertParseFailure(parser, \" -d jadfoijnoiem \","},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":77,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_REMARK \u003d \" \";"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DATETIME_INCOMPLETE \u003d \"2018-02-28\";"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DATETIME_DATE \u003d \"2018-02-29\";"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DATETIME_TIME \u003d \"2018-02-28 25:30\";"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_YEAR \u003d \"3hrhnfian\";"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_YEAR_MONTH \u003d \"qurh9hp38\";"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_MONTH \u003d \"ai\";"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DAY \u003d \"aiendoh3\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_REMARK \u003d \"nil\";"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_DATETIME \u003d \"2018-12-31 12:30\";"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_YEAR \u003d \"2018\";"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_YEAR_MONTH \u003d \"2018-12\";"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_MONTH \u003d \"12\";"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_DAY \u003d \"2018-12-31\";"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_PET_PATIENT_NAME \u003d \"Jay\";"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_PET_PATIENT_SPECIES \u003d \"Cat\";"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_PET_PATIENT_BREED \u003d \"Domestic Shorthair\";"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_PET_PATIENT_COLOUR \u003d \"white\";"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_PET_PATIENT_BLOOD_TYPE \u003d \"DEA1.0+\";"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_PET_PATIENT_NAME \u003d \"H@zel+\";"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_PET_PATIENT_SPECIES \u003d \"1cat@$\";"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_PET_PATIENT_BREED \u003d \"s0mebr33d\";"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_PET_PATIENT_COLOUR \u003d \"bl@ck\";"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_PET_PATIENT_BLOOD_TYPE \u003d \"\\\\x00\";"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_null_throwsNullPointerException() {"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((String) null));"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((Optional\u003cString\u003e) null));"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_invalidDateTimeIncomplete_throwsIllegalValueException() {"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_INCOMPLETE));"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"            ) -\u003e ParserUtil.parseDateTime(Optional.of(INVALID_DATETIME_INCOMPLETE)));"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_invalidDate_throwsIllegalValueException() {"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_DATE));"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"        ) -\u003e ParserUtil.parseDateTime(Optional.of(INVALID_DATETIME_DATE)));"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_invalidTime_throwsIllegalValueException() {"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME_TIME));"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"        ) -\u003e ParserUtil.parseDateTime(Optional.of(INVALID_DATETIME_TIME)));"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"        assertFalse(ParserUtil.parseDateTime(Optional.empty()).isPresent());"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime expectedLocalDateTime \u003d LocalDateTime.parse(VALID_DATETIME, formatter);"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedLocalDateTime, ParserUtil.parseDateTime(VALID_DATETIME));"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedLocalDateTime), ParserUtil.parseDateTime(Optional.of(VALID_DATETIME)));"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":"    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDateTime() throws Exception {"},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"        String dateTimeWithWhitespace \u003d WHITESPACE + VALID_DATETIME + WHITESPACE;"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime expectedLocalDateTime \u003d LocalDateTime.parse(VALID_DATETIME, formatter);"},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedLocalDateTime, ParserUtil.parseDateTime(dateTimeWithWhitespace));"},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedLocalDateTime), ParserUtil.parseDateTime(Optional.of(dateTimeWithWhitespace)));"},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":"    public void parseRemark_null_throwsNullPointerException() {"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((Optional\u003cString\u003e) null));"},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":"    public void parseRemark_invalidValue_throwsIllegalValueException() {"},{"lineNumber":342,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseRemark(INVALID_REMARK));"},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseRemark(Optional.of(INVALID_REMARK)));"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":347,"author":{"gitID":"wynonaK"},"content":"    public void parseRemark_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":"        assertFalse(ParserUtil.parseRemark(Optional.empty()).isPresent());"},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":"        Remark expectedRemark \u003d new Remark(VALID_REMARK);"},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedRemark), ParserUtil.parseRemark(Optional.of(VALID_REMARK)));"},{"lineNumber":356,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":358,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":"        Remark expectedRemark \u003d new Remark(VALID_REMARK);"},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"},{"lineNumber":363,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedRemark), ParserUtil.parseRemark(Optional.of(remarkWithWhitespace)));"},{"lineNumber":364,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"    public void parseYear_null_returnsTodayYear() throws Exception {"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"        Year expectedYear \u003d Year.now();"},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYear, ParserUtil.parseYear(\"\"));"},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYear), ParserUtil.parseYear(Optional.of(\"\")));"},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":"    public void parseYear_invalidYear_throwsIllegalValueException() {"},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseYear(INVALID_YEAR));"},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"        ) -\u003e ParserUtil.parseYear(Optional.of(INVALID_YEAR)));"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"    public void parseYear_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":"        assertFalse(ParserUtil.parseYear(Optional.empty()).isPresent());"},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"    public void parseYear_validValueWithoutWhitespace_returnsYear() throws Exception {"},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":"        Year expectedYear \u003d Year.of(2018);"},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYear, ParserUtil.parseYear(VALID_YEAR));"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYear), ParserUtil.parseYear(Optional.of(VALID_YEAR)));"},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"    public void parseYear_validValueWithWhitespace_returnsTrimmedYear() throws Exception {"},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":"        String yearWithWhitespace \u003d WHITESPACE + VALID_YEAR + WHITESPACE;"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"        Year expectedYear \u003d Year.of(2018);"},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYear, ParserUtil.parseYear(yearWithWhitespace));"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYear), ParserUtil.parseYear(Optional.of(yearWithWhitespace)));"},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":"    public void parseMonth_null_returnsTodayMonth() throws Exception {"},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":"        YearMonth expectedYearMonth \u003d YearMonth.now();"},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYearMonth, ParserUtil.parseMonth(\"\"));"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYearMonth), ParserUtil.parseMonth(Optional.of(\"\")));"},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":"    public void parseMonth_invalidMonth_throwsIllegalValueException() {"},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseMonth(INVALID_YEAR_MONTH));"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":"        ) -\u003e ParserUtil.parseMonth(Optional.of(INVALID_YEAR_MONTH)));"},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"    public void parseMonth_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"        assertFalse(ParserUtil.parseMonth(Optional.empty()).isPresent());"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"    public void parseMonth_validValueWithoutWhitespace_returnsMonth() throws Exception {"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM\");"},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"        YearMonth expectedYearMonth \u003d YearMonth.parse(VALID_YEAR_MONTH, formatter);"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYearMonth, ParserUtil.parseMonth(VALID_YEAR_MONTH));"},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYearMonth), ParserUtil.parseMonth(Optional.of(VALID_YEAR_MONTH)));"},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"    public void parseMonthOnly_validValueWithoutWhitespace_returnsMonth() throws Exception {"},{"lineNumber":429,"author":{"gitID":"wynonaK"},"content":"        YearMonth expectedYearMonth \u003d YearMonth.now().withMonth(Integer.parseInt(VALID_MONTH));"},{"lineNumber":430,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYearMonth, ParserUtil.parseMonth(VALID_MONTH));"},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYearMonth), ParserUtil.parseMonth(Optional.of(VALID_MONTH)));"},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"    public void parseMonth_validValueWithWhitespace_returnsTrimmedMonth() throws Exception {"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"        String yearMonthWithWhitespace \u003d WHITESPACE + VALID_YEAR_MONTH + WHITESPACE;"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM\");"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"        YearMonth expectedYearMonth \u003d YearMonth.parse(VALID_YEAR_MONTH, formatter);"},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYearMonth, ParserUtil.parseMonth(yearMonthWithWhitespace));"},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYearMonth), ParserUtil.parseMonth(Optional.of(yearMonthWithWhitespace)));"},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":445,"author":{"gitID":"wynonaK"},"content":"    public void parseMonthOnly_validValueWithWhitespace_returnsTrimmedMonth() throws Exception {"},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":"        String yearMonthWithWhitespace \u003d WHITESPACE + VALID_MONTH + WHITESPACE;"},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":"        YearMonth expectedYearMonth \u003d YearMonth.now().withMonth(Integer.parseInt(VALID_MONTH));"},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedYearMonth, ParserUtil.parseMonth(yearMonthWithWhitespace));"},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedYearMonth), ParserUtil.parseMonth(Optional.of(yearMonthWithWhitespace)));"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"    public void parseDay_null_returnsTodayDay() throws Exception {"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":"        LocalDate expectedLocalDate \u003d LocalDate.now();"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedLocalDate, ParserUtil.parseDate(\"\"));"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedLocalDate), ParserUtil.parseDate(Optional.of(\"\")));"},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"    public void parseDay_invalidDay_throwsIllegalValueException() {"},{"lineNumber":461,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DAY));"},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, ("},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":"        ) -\u003e ParserUtil.parseYear(Optional.of(INVALID_DAY)));"},{"lineNumber":464,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":466,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":467,"author":{"gitID":"wynonaK"},"content":"    public void parseDay_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":468,"author":{"gitID":"wynonaK"},"content":"        assertFalse(ParserUtil.parseDate(Optional.empty()).isPresent());"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":470,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":471,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":472,"author":{"gitID":"wynonaK"},"content":"    public void parseDay_validValueWithoutWhitespace_returnsDay() throws Exception {"},{"lineNumber":473,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":474,"author":{"gitID":"wynonaK"},"content":"        LocalDate expectedDate \u003d LocalDate.parse(VALID_DAY, formatter);"},{"lineNumber":475,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate((VALID_DAY)));"},{"lineNumber":476,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(VALID_DAY)));"},{"lineNumber":477,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":479,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":480,"author":{"gitID":"wynonaK"},"content":"    public void parseDay_validValueWithWhitespace_returnsTrimmedDay() throws Exception {"},{"lineNumber":481,"author":{"gitID":"wynonaK"},"content":"        String dayWithWhitespace \u003d WHITESPACE + VALID_DAY + WHITESPACE;"},{"lineNumber":482,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":483,"author":{"gitID":"wynonaK"},"content":"        LocalDate expectedDate \u003d LocalDate.parse(VALID_DAY, formatter);"},{"lineNumber":484,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(dayWithWhitespace));"},{"lineNumber":485,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(dayWithWhitespace)));"},{"lineNumber":486,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":487,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"    // Tests for PetPatientName"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatientName_null_throwsNullPointerException() {"},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePetPatientName((String) null));"},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePetPatientName((Optional\u003cString\u003e) null));"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatientName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":"                .parsePetPatientName(INVALID_PET_PATIENT_NAME));"},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"                .parsePetPatientName(Optional.of(INVALID_PET_PATIENT_NAME)));"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatientName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":"        assertFalse(ParserUtil.parsePetPatientName(Optional.empty()).isPresent());"},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatientName_validValueWithoutWhitespace_returnsPetPatientName() throws Exception {"},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":"        PetPatientName expectedPetPatientName \u003d new PetPatientName(VALID_PET_PATIENT_NAME);"},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedPetPatientName, ParserUtil.parsePetPatientName(VALID_PET_PATIENT_NAME));"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedPetPatientName),"},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parsePetPatientName(Optional.of(VALID_PET_PATIENT_NAME))"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatientName_validValueWithWhitespace_returnsTrimmedPetPatientName() throws Exception {"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":"        String petPatientNameWithWhitespace \u003d WHITESPACE + VALID_PET_PATIENT_NAME + WHITESPACE;"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"        PetPatientName expectedPetPatientName \u003d new PetPatientName(VALID_PET_PATIENT_NAME);"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedPetPatientName, ParserUtil.parsePetPatientName(petPatientNameWithWhitespace));"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedPetPatientName),"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parsePetPatientName(Optional.of(petPatientNameWithWhitespace))"},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":"    // Tests for Species"},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"    public void parseSpecies_null_throwsNullPointerException() {"},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSpecies((String) null));"},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSpecies((Optional\u003cString\u003e) null));"},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"    public void parseSpecies_invalidValue_throwsIllegalValueException() {"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":"                .parseSpecies(INVALID_PET_PATIENT_SPECIES));"},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"                .parseSpecies(Optional.of(INVALID_PET_PATIENT_SPECIES)));"},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"    public void parseSpecies_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":"        assertFalse(ParserUtil.parseSpecies(Optional.empty()).isPresent());"},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":554,"author":{"gitID":"chialejing"},"content":"    public void parseSpecies_validValueWithoutWhitespace_returnsSpecies() throws Exception {"},{"lineNumber":555,"author":{"gitID":"chialejing"},"content":"        Species expectedSpecies \u003d new Species(VALID_PET_PATIENT_SPECIES);"},{"lineNumber":556,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedSpecies, ParserUtil.parseSpecies(VALID_PET_PATIENT_SPECIES));"},{"lineNumber":557,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedSpecies),"},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseSpecies(Optional.of(VALID_PET_PATIENT_SPECIES))"},{"lineNumber":560,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":561,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":562,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":563,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":564,"author":{"gitID":"chialejing"},"content":"    public void parseSpecies_validValueWithWhitespace_returnsTrimmedSpecies() throws Exception {"},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":"        String speciesWithWhitespace \u003d WHITESPACE + VALID_PET_PATIENT_SPECIES + WHITESPACE;"},{"lineNumber":566,"author":{"gitID":"chialejing"},"content":"        Species expectedSpecies \u003d new Species(VALID_PET_PATIENT_SPECIES);"},{"lineNumber":567,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedSpecies, ParserUtil.parseSpecies(speciesWithWhitespace));"},{"lineNumber":568,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":569,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedSpecies),"},{"lineNumber":570,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseSpecies(Optional.of(speciesWithWhitespace))"},{"lineNumber":571,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":572,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":573,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":574,"author":{"gitID":"chialejing"},"content":"    // Tests for Breed"},{"lineNumber":575,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":576,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":577,"author":{"gitID":"chialejing"},"content":"    public void parseBreed_null_throwsNullPointerException() {"},{"lineNumber":578,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBreed((String) null));"},{"lineNumber":579,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBreed((Optional\u003cString\u003e) null));"},{"lineNumber":580,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":581,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":582,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":583,"author":{"gitID":"chialejing"},"content":"    public void parseBreed_invalidValue_throwsIllegalValueException() {"},{"lineNumber":584,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":585,"author":{"gitID":"chialejing"},"content":"                .parseBreed(INVALID_PET_PATIENT_BREED));"},{"lineNumber":586,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":587,"author":{"gitID":"chialejing"},"content":"                .parseBreed(Optional.of(INVALID_PET_PATIENT_BREED)));"},{"lineNumber":588,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":589,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":590,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":591,"author":{"gitID":"chialejing"},"content":"    public void parseBreed_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":592,"author":{"gitID":"chialejing"},"content":"        assertFalse(ParserUtil.parseBreed(Optional.empty()).isPresent());"},{"lineNumber":593,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":595,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":596,"author":{"gitID":"chialejing"},"content":"    public void parseBreed_validValueWithoutWhitespace_returnsBreed() throws Exception {"},{"lineNumber":597,"author":{"gitID":"chialejing"},"content":"        Breed expectedBreed \u003d new Breed(VALID_PET_PATIENT_BREED);"},{"lineNumber":598,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedBreed, ParserUtil.parseBreed(VALID_PET_PATIENT_BREED));"},{"lineNumber":599,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":600,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedBreed),"},{"lineNumber":601,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseBreed(Optional.of(VALID_PET_PATIENT_BREED))"},{"lineNumber":602,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":603,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":"    public void parseBreed_validValueWithWhitespace_returnsTrimmedBreed() throws Exception {"},{"lineNumber":607,"author":{"gitID":"chialejing"},"content":"        String breedWithWhitespace \u003d WHITESPACE + VALID_PET_PATIENT_BREED + WHITESPACE;"},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"        Breed expectedBreed \u003d new Breed(VALID_PET_PATIENT_BREED);"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedBreed, ParserUtil.parseBreed(breedWithWhitespace));"},{"lineNumber":610,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":611,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedBreed),"},{"lineNumber":612,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseBreed(Optional.of(breedWithWhitespace))"},{"lineNumber":613,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":614,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":615,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":616,"author":{"gitID":"chialejing"},"content":"    // Tests for Colour"},{"lineNumber":617,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":618,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":619,"author":{"gitID":"chialejing"},"content":"    public void parseColour_null_throwsNullPointerException() {"},{"lineNumber":620,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseColour((String) null));"},{"lineNumber":621,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseColour((Optional\u003cString\u003e) null));"},{"lineNumber":622,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":623,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":624,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":625,"author":{"gitID":"chialejing"},"content":"    public void parseColour_invalidValue_throwsIllegalValueException() {"},{"lineNumber":626,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":627,"author":{"gitID":"chialejing"},"content":"                .parseColour(INVALID_PET_PATIENT_COLOUR));"},{"lineNumber":628,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":629,"author":{"gitID":"chialejing"},"content":"                .parseColour(Optional.of(INVALID_PET_PATIENT_COLOUR)));"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":632,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":633,"author":{"gitID":"chialejing"},"content":"    public void parseColour_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":634,"author":{"gitID":"chialejing"},"content":"        assertFalse(ParserUtil.parseColour(Optional.empty()).isPresent());"},{"lineNumber":635,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":637,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":638,"author":{"gitID":"chialejing"},"content":"    public void parseColour_validValueWithoutWhitespace_returnsColour() throws Exception {"},{"lineNumber":639,"author":{"gitID":"chialejing"},"content":"        Colour expectedColour \u003d new Colour(VALID_PET_PATIENT_COLOUR);"},{"lineNumber":640,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedColour, ParserUtil.parseColour(VALID_PET_PATIENT_COLOUR));"},{"lineNumber":641,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":642,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedColour),"},{"lineNumber":643,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseColour(Optional.of(VALID_PET_PATIENT_COLOUR))"},{"lineNumber":644,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":645,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":646,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":647,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":648,"author":{"gitID":"chialejing"},"content":"    public void parseColour_validValueWithWhitespace_returnsTrimmedColour() throws Exception {"},{"lineNumber":649,"author":{"gitID":"chialejing"},"content":"        String colourWithWhitespace \u003d WHITESPACE + VALID_PET_PATIENT_COLOUR + WHITESPACE;"},{"lineNumber":650,"author":{"gitID":"chialejing"},"content":"        Colour expectedColour \u003d new Colour(VALID_PET_PATIENT_COLOUR);"},{"lineNumber":651,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedColour, ParserUtil.parseColour(colourWithWhitespace));"},{"lineNumber":652,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":653,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedColour),"},{"lineNumber":654,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseColour(Optional.of(colourWithWhitespace))"},{"lineNumber":655,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":656,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":657,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":658,"author":{"gitID":"chialejing"},"content":"    // Tests for Blood Type"},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":661,"author":{"gitID":"chialejing"},"content":"    public void parseBloodType_null_throwsNullPointerException() {"},{"lineNumber":662,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType((String) null));"},{"lineNumber":663,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType((Optional\u003cString\u003e) null));"},{"lineNumber":664,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":665,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":666,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":667,"author":{"gitID":"chialejing"},"content":"    public void parseBloodType_invalidValue_throwsIllegalValueException() {"},{"lineNumber":668,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":669,"author":{"gitID":"chialejing"},"content":"                .parseBloodType(INVALID_PET_PATIENT_BLOOD_TYPE));"},{"lineNumber":670,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil"},{"lineNumber":671,"author":{"gitID":"chialejing"},"content":"                .parseBloodType(Optional.of(INVALID_PET_PATIENT_BLOOD_TYPE)));"},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":674,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":675,"author":{"gitID":"chialejing"},"content":"    public void parseBloodType_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":676,"author":{"gitID":"chialejing"},"content":"        assertFalse(ParserUtil.parseBloodType(Optional.empty()).isPresent());"},{"lineNumber":677,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":680,"author":{"gitID":"chialejing"},"content":"    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {"},{"lineNumber":681,"author":{"gitID":"chialejing"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_PET_PATIENT_BLOOD_TYPE);"},{"lineNumber":682,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(VALID_PET_PATIENT_BLOOD_TYPE));"},{"lineNumber":683,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":684,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedBloodType),"},{"lineNumber":685,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseBloodType(Optional.of(VALID_PET_PATIENT_BLOOD_TYPE))"},{"lineNumber":686,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":687,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":688,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":689,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":690,"author":{"gitID":"chialejing"},"content":"    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {"},{"lineNumber":691,"author":{"gitID":"chialejing"},"content":"        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_PET_PATIENT_BLOOD_TYPE + WHITESPACE;"},{"lineNumber":692,"author":{"gitID":"chialejing"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_PET_PATIENT_BLOOD_TYPE);"},{"lineNumber":693,"author":{"gitID":"chialejing"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(bloodTypeWithWhitespace));"},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":"        assertEquals("},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":"                Optional.of(expectedBloodType),"},{"lineNumber":696,"author":{"gitID":"chialejing"},"content":"                ParserUtil.parseBloodType(Optional.of(bloodTypeWithWhitespace))"},{"lineNumber":697,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":698,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":699,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":228,"wynonaK":227,"-":244}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_JOKER;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_HAZEL;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BREED_DESC_JOKER;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_HAZEL;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.COLOUR_DESC_JOKER;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ONE;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_THREE;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_TWO;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BREED_DESC;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COLOUR_DESC;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_HAZEL;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JOKER;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_APPOINTMENT;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_ONE;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_THREE;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REMARK_DESC_TWO;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_HAZEL;"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SPECIES_DESC_JOKER;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHECKUP;"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_DEPRESSION;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FIV;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_VACCINATION;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_JOKER;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_HAZEL;"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_JOKER;"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_HAZEL;"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_JOKER;"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONE;"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_THREE;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HAZEL;"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JOKER;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_ONE;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_THREE;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_HAZEL;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_JOKER;"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHECKUP;"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_DEPRESSION;"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FIV;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_VACCINATION;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PETPATIENT;"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PETPATIENT;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PETPATIENT;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditPetPatientDescriptorBuilder;"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"    private static final String MESSAGE_INVALID_LOCAL_DATE_TIME \u003d"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"            \"Please give a valid date and time based on the format yyyy-MM-dd HH:mm!\";"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_missingParts_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_invalidPreamble_failure() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_invalidValue_failure() {"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"                + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_OWNER + \"1\""},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"                + VALID_PHONE_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_allFieldsSpecified_success() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_someFieldsSpecified_success() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_oneFieldSpecified_success() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":233,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":239,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":248,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":249,"author":{"gitID":"chialejing"},"content":"                + EMAIL_DESC_AMY + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":250,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":253,"author":{"gitID":"chialejing"},"content":"                .withEmail(VALID_EMAIL_BOB)"},{"lineNumber":254,"author":{"gitID":"chialejing"},"content":"                .withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":256,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_invalidValueFollowedByValidValue_success() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"    public void parseOwner_resetTags_success() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_OWNER + targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"    // Tests for PetPatients"},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_missingParts_failure() {"},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"        // no index specified"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + VALID_NAME_HAZEL, MESSAGE_INVALID_FORMAT);"},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"        // no field specified"},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":"        // no index and no field specified"},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_invalidPreamble_failure() {"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"        // negative index"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"-5\" + NAME_DESC_HAZEL, MESSAGE_INVALID_FORMAT);"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"        // zero index"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"0\" + NAME_DESC_HAZEL, MESSAGE_INVALID_FORMAT);"},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_invalidValue_failure() {"},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":325,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC, PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":326,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"                + INVALID_SPECIES_DESC, Species.MESSAGE_PET_SPECIES_CONSTRAINTS); // invalid species"},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":"                + INVALID_BREED_DESC, Breed.MESSAGE_PET_BREED_CONSTRAINTS); // invalid breed"},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"                + INVALID_COLOUR_DESC, Colour.MESSAGE_PET_COLOUR_CONSTRAINTS); // invalid colour"},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":"                + INVALID_BLOODTYPE_DESC, BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS); // invalid blood type"},{"lineNumber":334,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":"        // invalid species followed by valid breed"},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"                + INVALID_SPECIES_DESC + BREED_DESC_JOKER, Species.MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"        // valid breed followed by invalid breed. The test case for invalid breed followed by valid breed"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_JOKER + INVALID_BREED_DESC, Breed.MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":345,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":346,"author":{"gitID":"chialejing"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code PetPatient} being edited,"},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":"                + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":"        // Note: order matters!"},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":358,"author":{"gitID":"chialejing"},"content":"                + INVALID_NAME_DESC"},{"lineNumber":359,"author":{"gitID":"chialejing"},"content":"                + INVALID_BLOODTYPE_DESC"},{"lineNumber":360,"author":{"gitID":"chialejing"},"content":"                + INVALID_COLOUR_DESC"},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"                + VALID_BREED_JOKER, PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_PET + \"1\""},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"                + INVALID_COLOUR_DESC"},{"lineNumber":365,"author":{"gitID":"chialejing"},"content":"                + INVALID_BLOODTYPE_DESC"},{"lineNumber":366,"author":{"gitID":"chialejing"},"content":"                + VALID_BREED_JOKER, Colour.MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_allFieldsSpecified_success() {"},{"lineNumber":371,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":372,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased()"},{"lineNumber":373,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FIV"},{"lineNumber":374,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_JOKER"},{"lineNumber":375,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_JOKER"},{"lineNumber":376,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_JOKER"},{"lineNumber":377,"author":{"gitID":"chialejing"},"content":"                + NAME_DESC_JOKER"},{"lineNumber":378,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_DEPRESSION"},{"lineNumber":379,"author":{"gitID":"chialejing"},"content":"                + BLOODTYPE_DESC_JOKER"},{"lineNumber":380,"author":{"gitID":"chialejing"},"content":"                + NRIC_DESC_BOB;"},{"lineNumber":381,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":382,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":"                .withName(VALID_NAME_JOKER)"},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER)"},{"lineNumber":385,"author":{"gitID":"chialejing"},"content":"                .withBreed(VALID_BREED_JOKER)"},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"                .withColour(VALID_COLOUR_JOKER)"},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER)"},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":"                .withOwnerNric(VALID_NRIC_BOB)"},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_FIV, VALID_TAG_DEPRESSION)"},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_someFieldsSpecified_success() {"},{"lineNumber":398,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_SECOND_PETPATIENT;"},{"lineNumber":399,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased() + SPECIES_DESC_JOKER + BLOODTYPE_DESC_JOKER;"},{"lineNumber":400,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":402,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER)"},{"lineNumber":403,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER)"},{"lineNumber":404,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":406,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":407,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":408,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":409,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":410,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":411,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_oneFieldSpecified_success() {"},{"lineNumber":412,"author":{"gitID":"chialejing"},"content":"        // name"},{"lineNumber":413,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_THIRD_PETPATIENT;"},{"lineNumber":414,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased() + NAME_DESC_JOKER;"},{"lineNumber":415,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"                .withName(VALID_NAME_JOKER)"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":421,"author":{"gitID":"chialejing"},"content":"        // species"},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + SPECIES_DESC_JOKER;"},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":424,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER)"},{"lineNumber":425,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":426,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":427,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":428,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":429,"author":{"gitID":"chialejing"},"content":"        // breed"},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + BREED_DESC_JOKER;"},{"lineNumber":431,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":432,"author":{"gitID":"chialejing"},"content":"                .withBreed(VALID_BREED_JOKER)"},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":434,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":435,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":436,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":437,"author":{"gitID":"chialejing"},"content":"        // colour"},{"lineNumber":438,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + COLOUR_DESC_JOKER;"},{"lineNumber":439,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":440,"author":{"gitID":"chialejing"},"content":"                .withColour(VALID_COLOUR_JOKER)"},{"lineNumber":441,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":442,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":443,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":444,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"        // blood type"},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + BLOODTYPE_DESC_JOKER;"},{"lineNumber":447,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":448,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER)"},{"lineNumber":449,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":450,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":451,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":452,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":453,"author":{"gitID":"chialejing"},"content":"        // owner nric"},{"lineNumber":454,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + NRIC_DESC_BOB;"},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":"                .withOwnerNric(VALID_NRIC_BOB)"},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":459,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":"        // tags"},{"lineNumber":462,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased() + TAG_DESC_DEPRESSION;"},{"lineNumber":463,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":464,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_DEPRESSION)"},{"lineNumber":465,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":466,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":467,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":469,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":471,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":472,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":473,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased()"},{"lineNumber":474,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_JOKER"},{"lineNumber":475,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_JOKER"},{"lineNumber":476,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_JOKER"},{"lineNumber":477,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_DEPRESSION"},{"lineNumber":478,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_JOKER"},{"lineNumber":479,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_JOKER"},{"lineNumber":480,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_JOKER"},{"lineNumber":481,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FIV"},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_HAZEL"},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_HAZEL"},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_HAZEL"},{"lineNumber":485,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_FIV;"},{"lineNumber":486,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":487,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"                .withColour(VALID_COLOUR_HAZEL)"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"                .withBreed(VALID_BREED_HAZEL)"},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_HAZEL)"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_DEPRESSION, VALID_TAG_FIV)"},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_invalidValueFollowedByValidValue_success() {"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":"        // no other valid values specified"},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_FIRST_PETPATIENT;"},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_JOKER;"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":"                .withName(VALID_NAME_JOKER)"},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"        // other valid values specified"},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_PET + targetIndex.getOneBased()"},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"                + SPECIES_DESC_JOKER"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":"                + INVALID_COLOUR_DESC"},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":"                + BREED_DESC_JOKER"},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"                + COLOUR_DESC_JOKER;"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER)"},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"                .withColour(VALID_COLOUR_JOKER)"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"                .withBreed(VALID_BREED_JOKER)"},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"    public void parsePetPatient_resetTags_success() {"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_THIRD_PETPATIENT;"},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_PET + targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptor \u003d new EditPetPatientDescriptorBuilder()"},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"                .withTags()"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"    // Tests for Appointment"},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_missingParts_failure() {"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"        // no index specified"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + VALID_DATE_ONE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"        // no field specified"},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":"        // no index and no field specified"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_invalidPreamble_failure() {"},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"        // negative index"},{"lineNumber":554,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"-5\" + VALID_DATE_ONE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":555,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":556,"author":{"gitID":"chialejing"},"content":"        // zero index"},{"lineNumber":557,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"0\" + VALID_DATE_ONE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":560,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":561,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":562,"author":{"gitID":"chialejing"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":563,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":564,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":566,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":567,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_invalidValue_failure() {"},{"lineNumber":568,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":569,"author":{"gitID":"chialejing"},"content":"                + INVALID_DATETIME_DESC, MESSAGE_INVALID_LOCAL_DATE_TIME); // invalid datetime"},{"lineNumber":570,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":571,"author":{"gitID":"chialejing"},"content":"                + INVALID_REMARK_DESC, Remark.MESSAGE_REMARK_CONSTRAINTS); // invalid remark"},{"lineNumber":572,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":573,"author":{"gitID":"chialejing"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":574,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":575,"author":{"gitID":"chialejing"},"content":"        // invalid datetime followed by valid tag"},{"lineNumber":576,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":577,"author":{"gitID":"chialejing"},"content":"                + INVALID_DATETIME_DESC + VALID_TAG_CHECKUP, MESSAGE_INVALID_LOCAL_DATE_TIME);"},{"lineNumber":578,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":579,"author":{"gitID":"chialejing"},"content":"        // valid remark followed by invalid remark. The test case for invalid remark followed by valid remark"},{"lineNumber":580,"author":{"gitID":"chialejing"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":581,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":582,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_ONE + INVALID_REMARK_DESC, Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":583,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":584,"author":{"gitID":"chialejing"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Appointment} being edited,"},{"lineNumber":585,"author":{"gitID":"chialejing"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":586,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":587,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP + TAG_DESC_VACCINATION + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":588,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":589,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP + TAG_EMPTY + TAG_DESC_VACCINATION, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":590,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":591,"author":{"gitID":"chialejing"},"content":"                + TAG_EMPTY + TAG_DESC_CHECKUP + TAG_DESC_VACCINATION, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":592,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":593,"author":{"gitID":"chialejing"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":594,"author":{"gitID":"chialejing"},"content":"        // Note: order matters!"},{"lineNumber":595,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":596,"author":{"gitID":"chialejing"},"content":"                + INVALID_DATETIME_DESC + INVALID_REMARK_DESC + INVALID_TAG_DESC"},{"lineNumber":597,"author":{"gitID":"chialejing"},"content":"                + VALID_REMARK_ONE, MESSAGE_INVALID_LOCAL_DATE_TIME);"},{"lineNumber":598,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":599,"author":{"gitID":"chialejing"},"content":"        assertParseFailure(parser, OPTION_APPOINTMENT + \"1\""},{"lineNumber":600,"author":{"gitID":"chialejing"},"content":"                + INVALID_REMARK_DESC + INVALID_TAG_DESC"},{"lineNumber":601,"author":{"gitID":"chialejing"},"content":"                + VALID_TAG_DEPRESSION, Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":602,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":603,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":604,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":605,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":606,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_allFieldsSpecified_success() {"},{"lineNumber":607,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_FIRST_APPOINTMENT;"},{"lineNumber":608,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased()"},{"lineNumber":609,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_VACCINATION"},{"lineNumber":610,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP"},{"lineNumber":611,"author":{"gitID":"chialejing"},"content":"                + DATE_DESC_ONE"},{"lineNumber":612,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_ONE;"},{"lineNumber":613,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":614,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":615,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE)"},{"lineNumber":616,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_ONE)"},{"lineNumber":617,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_CHECKUP, VALID_TAG_VACCINATION)"},{"lineNumber":618,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":619,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":620,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":621,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":622,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":623,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":624,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":625,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_someFieldsSpecified_success() {"},{"lineNumber":626,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"},{"lineNumber":627,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + REMARK_DESC_ONE + DATE_DESC_ONE;"},{"lineNumber":628,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":629,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":630,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE)"},{"lineNumber":631,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_ONE)"},{"lineNumber":632,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":633,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":634,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":635,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":636,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":637,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":638,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":639,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_oneFieldSpecified_success() {"},{"lineNumber":640,"author":{"gitID":"chialejing"},"content":"        // datetime"},{"lineNumber":641,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_THIRD_APPOINTMENT;"},{"lineNumber":642,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + DATE_DESC_ONE;"},{"lineNumber":643,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":644,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE)"},{"lineNumber":645,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":646,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":647,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":648,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":649,"author":{"gitID":"chialejing"},"content":"        // remark"},{"lineNumber":650,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + REMARK_DESC_ONE;"},{"lineNumber":651,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":652,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_ONE)"},{"lineNumber":653,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":654,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":655,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":656,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":657,"author":{"gitID":"chialejing"},"content":"        // tags"},{"lineNumber":658,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + TAG_DESC_CHECKUP;"},{"lineNumber":659,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":660,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_CHECKUP)"},{"lineNumber":661,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":662,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":663,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":664,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":665,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":666,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":667,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":668,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"},{"lineNumber":669,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased()"},{"lineNumber":670,"author":{"gitID":"chialejing"},"content":"                + DATE_DESC_ONE"},{"lineNumber":671,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_ONE"},{"lineNumber":672,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP"},{"lineNumber":673,"author":{"gitID":"chialejing"},"content":"                + DATE_DESC_TWO"},{"lineNumber":674,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_TWO"},{"lineNumber":675,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_VACCINATION"},{"lineNumber":676,"author":{"gitID":"chialejing"},"content":"                + DATE_DESC_THREE"},{"lineNumber":677,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_THREE"},{"lineNumber":678,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_VACCINATION"},{"lineNumber":679,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP;"},{"lineNumber":680,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":681,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":682,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_THREE)"},{"lineNumber":683,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_THREE)"},{"lineNumber":684,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_CHECKUP, VALID_TAG_VACCINATION)"},{"lineNumber":685,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":686,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":687,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":688,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":689,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":690,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":691,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":692,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_invalidValueFollowedByValidValue_success() {"},{"lineNumber":693,"author":{"gitID":"chialejing"},"content":"        // no other valid values specified"},{"lineNumber":694,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"},{"lineNumber":695,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + INVALID_DATETIME_DESC + DATE_DESC_ONE;"},{"lineNumber":696,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":697,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE)"},{"lineNumber":698,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":699,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":700,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":701,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":702,"author":{"gitID":"chialejing"},"content":"        // other valid values specified"},{"lineNumber":703,"author":{"gitID":"chialejing"},"content":"        userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased()"},{"lineNumber":704,"author":{"gitID":"chialejing"},"content":"                + INVALID_DATETIME_DESC"},{"lineNumber":705,"author":{"gitID":"chialejing"},"content":"                + DATE_DESC_ONE"},{"lineNumber":706,"author":{"gitID":"chialejing"},"content":"                + REMARK_DESC_ONE"},{"lineNumber":707,"author":{"gitID":"chialejing"},"content":"                + TAG_DESC_CHECKUP;"},{"lineNumber":708,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditAppointmentDescriptorBuilder()"},{"lineNumber":709,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE)"},{"lineNumber":710,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_ONE)"},{"lineNumber":711,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_CHECKUP)"},{"lineNumber":712,"author":{"gitID":"chialejing"},"content":"                .build();"},{"lineNumber":713,"author":{"gitID":"chialejing"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":714,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":715,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":716,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":717,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":718,"author":{"gitID":"chialejing"},"content":"    public void parseAppointment_resetTags_success() {"},{"lineNumber":719,"author":{"gitID":"chialejing"},"content":"        Index targetIndex \u003d INDEX_SECOND_APPOINTMENT;"},{"lineNumber":720,"author":{"gitID":"chialejing"},"content":"        String userInput \u003d OPTION_APPOINTMENT + targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":721,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":722,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withTags().build();"},{"lineNumber":723,"author":{"gitID":"chialejing"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":724,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":725,"author":{"gitID":"chialejing"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":726,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":727,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":559,"wynonaK":1,"-":167}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success()"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"Robert-Peng"},"content":"    public void execute_duplicatePersonUnfilteredList_failure()"},{"lineNumber":111,"author":{"gitID":"Robert-Peng"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"Robert-Peng"},"content":"    public void execute_duplicatePersonFilteredList_failure()"},{"lineNumber":121,"author":{"gitID":"Robert-Peng"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure()"},{"lineNumber":134,"author":{"gitID":"Robert-Peng"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"Robert-Peng"},"content":"    public void execute_invalidPersonIndexFilteredList_failure()"},{"lineNumber":148,"author":{"gitID":"Robert-Peng"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"Robert-Peng"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure()"},{"lineNumber":185,"author":{"gitID":"Robert-Peng"},"content":"        throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":14,"-":255}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.TypicalAppointments;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.TypicalPetPatients;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwner_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwnerWithTiedPet_validIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwnerWithTiedPetWithTiedAppt_validIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.ALICE_APP);"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwner_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwnerWithTiedPet_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientDependent \u003d TypicalPetPatients.JEWEL;"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(petPatientDependent);"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete)"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                + String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientDependent);"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientDependent);"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwnerWithTiedPetAndAppt_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientDependent \u003d TypicalPetPatients.JEWEL;"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(petPatientDependent);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        Appointment appointmentDependent \u003d TypicalAppointments.ALICE_APP;"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(appointmentDependent);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete)"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"                + String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientDependent)"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"                + String.format(DeleteCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentDependent);"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deleteAppointment(appointmentDependent);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientDependent);"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePetPatient_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientToDelete \u003d model.getFilteredPetPatientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeletePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete);"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientToDelete);"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePetPatientWithTiedApppointment_validIndexUnfilteredList_failure() throws Exception {"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.BENSON_APP);"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeletePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForcePetPatient_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientToDelete \u003d model.getFilteredPetPatientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForcePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete);"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientToDelete);"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForcePetPatientWithTiedApppointment_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        Appointment appointment \u003d TypicalAppointments.BENSON_APP;"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.BENSON_APP);"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"        PetPatient petPatientToDelete \u003d model.getFilteredPetPatientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForcePetPatientCommand(INDEX_FIRST_PERSON);"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete)"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"                + String.format(DeleteCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment);"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deleteAppointment(appointment);"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePetPatient(petPatientToDelete);"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteAppointment_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JEWEL);"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"        model.addPetPatient(TypicalPetPatients.JOKER);"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.ALICE_APP);"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"        model.addAppointment(TypicalAppointments.BENSON_APP);"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteAppointmentCommand(INDEX_FIRST_PERSON);"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete);"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteExecuteInvalidIndex_throwsException() throws Exception {"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"        new DeleteCommand(6, null).executeUndoableCommand();"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePreProcessInvalidIndex_throwsException() throws Exception {"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"        new DeleteCommand(6, null).preprocessUndoableCommand();"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteOwner_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForceOwner_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(outOfBoundIndex);"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"    public void executeDeletePetPatient_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetPatientList().size() + 1);"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeletePetPatientCommand(outOfBoundIndex);"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteForcePetPatient_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetPatientList().size() + 1);"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForcePetPatientCommand(outOfBoundIndex);"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    public void executeDeleteAppointment_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteAppointmentCommand(outOfBoundIndex);"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"    public void executeForce_validIndexFilteredList_success() throws Exception {"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"    public void executeForce_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteForceOwnerCommand(outOfBoundIndex);"},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":333,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":343,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(outOfBoundIndex);"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":357,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":358,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":359,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":360,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":361,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":362,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":372,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":374,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":375,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":383,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareDeleteOwnerCommand(INDEX_SECOND_PERSON);"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareDeleteOwnerCommand(INDEX_FIRST_PERSON);"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":399,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":400,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":403,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":409,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":410,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteOwnerCommand(Index index) {"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(1, index);"},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"        return deleteCommand;"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteForceOwnerCommand(Index index) {"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(4, index);"},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"        return deleteCommand;"},{"lineNumber":429,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeletePetPatientCommand(Index index) {"},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(2, index);"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"        return deleteCommand;"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteForcePetPatientCommand(Index index) {"},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(5, index);"},{"lineNumber":445,"author":{"gitID":"wynonaK"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":"        return deleteCommand;"},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"    private DeleteCommand prepareDeleteAppointmentCommand(Index index) {"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(3, index);"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"        return deleteCommand;"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":459,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"     * Updates {@code model}\u0027s filtered list to show no person."},{"lineNumber":461,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":462,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":463,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":466,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":304,"-":162}},{"path":"src/test/java/seedu/address/logic/commands/EditPetPatientDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_JOKER;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_NERO;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_HAZEL;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_HAZEL;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_HAZEL;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_HAZEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_HAZEL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FIV;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditPetPatientDescriptorBuilder;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"public class EditPetPatientDescriptorTest {"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor descriptorWithSameValues \u003d new EditPetPatientDescriptor(DESC_JOKER);"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"        assertTrue(DESC_JOKER.equals(descriptorWithSameValues));"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertTrue(DESC_JOKER.equals(DESC_JOKER));"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        // null -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(null));"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(0));"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        // different values -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(DESC_NERO));"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        // different name -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER)"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"                .withName(VALID_NAME_HAZEL).build();"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        // different species -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withSpecies(VALID_SPECIES_HAZEL).build();"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        // different breed -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withBreed(VALID_BREED_HAZEL).build();"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        // different colour -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withColour(VALID_COLOUR_HAZEL).build();"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        // different bloodType -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withBloodType(VALID_BLOODTYPE_HAZEL).build();"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        // different owner -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        // different tags -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        editedJoker \u003d new EditPetPatientDescriptorBuilder(DESC_JOKER).withTags(VALID_TAG_FIV).build();"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_JOKER.equals(editedJoker));"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":65,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CHARLIE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_CHARLIE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CHARLIE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_CHARLIE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_DION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_CHARLIE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_ONE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHECKUP;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    private Model model;"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    @Before"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    public void setUp() throws Exception {"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS_PERSON, validPerson), expectedModel);"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePerson_throwsCommandException()"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateNric_throwsCommandException()"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d model.getAddressBook().getPersonList().get(0).getNric();"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        Person duplicateNric \u003d new PersonBuilder().withName(\"Red\").withPhone(\"90002134\").withEmail(\"red@gmail.com\")"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"                .withAddress(\"24 Pallet Town\").withNric(nric.toString()).build();"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicateNric, model), model, AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPetPatient_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().withOwnerNric(validPerson.getNric().toString()).build();"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPetPatient(validPetPatient);"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(validPetPatient, validPerson.getNric(), model), model,"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS_PETPATIENT, validPetPatient, validPerson), expectedModel);"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePetPatient_throwsCommandException()"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"        PetPatient duplicate \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicate, duplicate.getOwner(), model),"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newPetPatientWithNricDoesNotExist_throwsCommandException()"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"        // Nric does not exists in address book"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        String nricDoesNotExist \u003d VALID_NRIC_DION;"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().withOwnerNric(nricDoesNotExist).build();"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validPetPatient, validPetPatient.getOwner(), model),"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_NRIC);"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointment_success() throws Exception {"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"        PetPatient existing \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d model.getPersonWithNric(existing.getOwner());"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withOwnerNric(owner.getNric().toString())"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(existing.getName().toString()).build();"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addAppointment(appt);"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(appt, existing.getOwner(), existing.getName(), model), model,"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS_APPOINTMENT, appt, owner, existing), expectedModel);"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointmentWithNricDoesNotExists_throwsCommandException()"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"        String nricDoesNotExist \u003d VALID_NRIC_DION;"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"        String petPatientNameExists \u003d model.getAddressBook().getPetPatientList().get(0).getName().toString();"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppt \u003d new AppointmentBuilder().withOwnerNric(nricDoesNotExist)"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(petPatientNameExists).build();"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validAppt, validAppt.getOwnerNric(), validAppt.getPetPatientName(), model),"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_NRIC);"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"    public void execute_newAppointmentWithPetPatientNameDoesNotExists_throwsCommandException()"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"        String petNameDoesNotExist \u003d VALID_NAME_NERO;"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"        String ownerNricExists \u003d model.getAddressBook().getPersonList().get(0).getNric().toString();"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppt \u003d new AppointmentBuilder().withOwnerNric(ownerNricExists)"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(petNameDoesNotExist).build();"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(validAppt, validAppt.getOwnerNric(), validAppt.getPetPatientName(), model),"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_INVALID_PET_PATIENT);"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointment_throwsCommandException()"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"        Appointment duplicate \u003d model.getAddressBook().getAppointmentList().get(0);"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(duplicate, duplicate.getOwnerNric(), duplicate.getPetPatientName(), model),"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateDateTimeAppointment_throwsCommandException()"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        throws ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"        PetPatient existing \u003d model.getAddressBook().getPetPatientList().get(0);"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d model.getPersonWithNric(existing.getOwner());"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        String dupDateTime \u003d model.getAddressBook().getAppointmentList().get(0).getFormattedLocalDateTime();"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().withRemark(VALID_REMARK_ONE).withDateTime(dupDateTime)"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(owner.getNric().toString())"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(existing.getName().toString()).build();"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"        assertCommandFailure(prepareCommand(appt, owner.getNric(), existing.getName(), model),"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"                model, AddCommand.MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"    public void execute_addAllNew_success() throws Exception {"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        Person newPerson \u003d new PersonBuilder().withName(VALID_NAME_CHARLIE).withPhone(VALID_PHONE_CHARLIE)"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"                .withEmail(VALID_EMAIL_CHARLIE).withAddress(VALID_ADDRESS_CHARLIE).withNric(VALID_NRIC_CHARLIE).build();"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        PetPatient newPetPatient \u003d new PetPatientBuilder().withName(VALID_NAME_NERO).withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"                .withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO).withBloodType(VALID_BLOODTYPE_NERO)"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"                .withOwnerNric(newPerson.getNric().toString()).build();"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        Appointment newAppt \u003d new AppointmentBuilder().withDateTime(VALID_DATE_ONE).withRemark(VALID_REMARK_ONE)"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"                .withAppointmentTags(VALID_TAG_CHECKUP).withOwnerNric(newPerson.getNric().toString())"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"                .withPetPatientName(newPetPatient.getName().toString()).build();"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPerson(newPerson);"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addPetPatient(newPetPatient);"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        expectedModel.addAppointment(newAppt);"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        assertCommandSuccess(prepareCommand(newPerson, newPetPatient, newAppt, model), model,"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS_EVERYTHING, newPerson, newPetPatient, newAppt), expectedModel);"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code petpatient} into the {@code model}."},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(PetPatient petPatient, Nric ownerNric, Model model) {"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(petPatient, ownerNric);"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code appointment} into the {@code model}."},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Appointment appt, Nric ownerNric, PetPatientName petPatientName, Model model) {"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(appt, ownerNric, petPatientName);"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person}, {@code petpatient} and"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"     * {@code appointment} into the {@code model}."},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand prepareCommand(Person person, PetPatient petPatient, Appointment appt, Model model) {"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person, petPatient, appt);"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":192,"Robert-Peng":2,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.CliSyntax;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditPetPatientDescriptorBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    // Person: Amy"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"    public static final String VALID_NRIC_AMY \u003d \"G1078999P\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // Person: Bob"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S7895666N\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    // Person: Charlie"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_CHARLIE \u003d \"Charlie Brown\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_CHARLIE \u003d \"94127890\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_CHARLIE \u003d \"charliebrown@gmail.com\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_CHARLIE \u003d \"Chocolate Factory Avenue\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_CHARLIE \u003d \"S1078899P\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_CHARLIE \u003d \" \" + PREFIX_NAME + VALID_NAME_CHARLIE;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_CHARLIE \u003d \" \" + PREFIX_PHONE + VALID_PHONE_CHARLIE;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_CHARLIE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_CHARLIE;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_CHARLIE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_CHARLIE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_CHARLIE \u003d \" \" + PREFIX_NRIC + VALID_NRIC_CHARLIE;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    // More Nrics"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_DION \u003d \"T1115666G\";"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_DION \u003d \" \" + PREFIX_NRIC + VALID_NRIC_DION;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_ELIAS \u003d \"G3338999P\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_ELIAS \u003d \" \" + PREFIX_NRIC + VALID_NRIC_ELIAS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_FION \u003d \"S2225666N\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_FION \u003d \" \" + PREFIX_NRIC + VALID_NRIC_FION;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_JOHNNY \u003d \"S9622444T\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_JOHNNY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_JOHNNY;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String VALID_NRIC_TIMMY \u003d \"S9277432G\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String NRIC_DESC_TIMMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_TIMMY;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    // Tags"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\";"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_TAG_FIV \u003d \"fiv\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FIV \u003d \" \" + PREFIX_TAG + VALID_TAG_FIV;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_TAG_DEPRESSION \u003d \"depression\";"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_DEPRESSION \u003d \" \" + PREFIX_TAG + VALID_TAG_DEPRESSION;"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_CHECKUP \u003d \"checkup\";"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_CHECKUP \u003d \" \" + PREFIX_TAG + VALID_TAG_CHECKUP;"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    public static final String VALID_TAG_VACCINATION \u003d \"vaccination\";"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    public static final String TAG_DESC_VACCINATION \u003d \" \" + PREFIX_TAG + VALID_TAG_VACCINATION;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    // Remarks"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String VALID_REMARK_ONE \u003d \"Persistent diarrhoea\";"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final String REMARK_DESC_ONE \u003d \" \" + PREFIX_REMARK + VALID_REMARK_ONE;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public static final String VALID_REMARK_TWO \u003d \"old age\";"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String REMARK_DESC_TWO \u003d \" \" + PREFIX_REMARK + VALID_REMARK_TWO;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String VALID_REMARK_THREE \u003d \"May require isolation\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static final String REMARK_DESC_THREE \u003d \" \" + PREFIX_REMARK + VALID_REMARK_THREE;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    // Date Time for appointments"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String VALID_DATE_ONE \u003d \"2018-06-17 11:30\";"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static final String DATE_DESC_ONE \u003d \" \" + PREFIX_DATE + VALID_DATE_ONE;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final String VALID_DATE_TWO \u003d \"2018-07-05 16:30\";"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final String DATE_DESC_TWO \u003d \" \" + PREFIX_DATE + VALID_DATE_TWO;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public static final String VALID_DATE_THREE \u003d \"2018-12-22 14:30\";"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static final String DATE_DESC_THREE \u003d \" \" + PREFIX_DATE + VALID_DATE_THREE;"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    // PetPatient: Joker"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_JOKER \u003d \"Joker\";"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_SPECIES_JOKER \u003d \"Cat\";"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_BREED_JOKER \u003d \"Domestic Shorthair\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static final String VALID_COLOUR_JOKER \u003d \"brown and white\";"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static final String VALID_BLOODTYPE_JOKER \u003d \"O\";"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_JOKER \u003d \" \" + PREFIX_NAME + VALID_NAME_JOKER;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static final String SPECIES_DESC_JOKER \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_JOKER;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static final String BREED_DESC_JOKER \u003d \" \" + PREFIX_BREED + VALID_BREED_JOKER;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static final String COLOUR_DESC_JOKER \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_JOKER;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public static final String BLOODTYPE_DESC_JOKER \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_JOKER;"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    // PetPatient: Nero"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_NERO \u003d \"Nero\";"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_SPECIES_NERO \u003d \"Cat\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static final String VALID_BREED_NERO \u003d \"British Shorthair\";"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_COLOUR_NERO \u003d \"blue\";"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static final String VALID_BLOODTYPE_NERO \u003d \"AB\";"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_NERO \u003d \" \" + PREFIX_NAME + VALID_NAME_NERO;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static final String SPECIES_DESC_NERO \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_NERO;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public static final String BREED_DESC_NERO \u003d \" \" + PREFIX_BREED + VALID_BREED_NERO;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static final String COLOUR_DESC_NERO \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_NERO;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static final String BLOODTYPE_DESC_NERO \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_NERO;"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"    // PetPatient: Hazel"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_NAME_HAZEL \u003d \"Hazel\";"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_SPECIES_HAZEL \u003d \"Dog\";"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_BREED_HAZEL \u003d \"Poodle\";"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_COLOUR_HAZEL \u003d \"white\";"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"    public static final String VALID_BLOODTYPE_HAZEL \u003d \"A\";"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"    public static final String NAME_DESC_HAZEL \u003d \" \" + PREFIX_NAME + VALID_NAME_HAZEL;"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"    public static final String SPECIES_DESC_HAZEL \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_HAZEL;"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"    public static final String BREED_DESC_HAZEL \u003d \" \" + PREFIX_BREED + VALID_BREED_HAZEL;"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"    public static final String COLOUR_DESC_HAZEL \u003d \" \" + PREFIX_COLOUR + VALID_COLOUR_HAZEL;"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"    public static final String BLOODTYPE_DESC_HAZEL \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_HAZEL;"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    // options"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static final String OPTION_OWNER \u003d \" \" + CliSyntax.OPTION_OWNER;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static final String OPTION_PET \u003d \" \" + CliSyntax.OPTION_PETPATIENT;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public static final String OPTION_APPOINTMENT \u003d \" \" + CliSyntax.OPTION_APPOINTMENT;"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    // themes"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_LIGHT \u003d \"light\";"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_DARK \u003d \"dark\";"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_LIGHT \u003d \"/view/LightTheme.css\";"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static final String VALID_THEME_PATH_DARK \u003d \"/view/DarkTheme.css\";"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    // invalids"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static final String INVALID_NRIC \u003d \"\u00262345678M\"; // \u0027\u0026\u0027 not allowed in NRIC"},{"lineNumber":180,"author":{"gitID":"Robert-Peng"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"\u00262345678M\"; // \u0027\u0026\u0027 not allowed in NRIC"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"    public static final String INVALID_SPECIES_DESC \u003d \" \" + PREFIX_SPECIES + \"c@+\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public static final String INVALID_BREED_DESC \u003d \" \" + PREFIX_BREED + \"p3rsi4n\";"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public static final String INVALID_COLOUR_DESC \u003d \" \" + PREFIX_COLOUR + \"siv3r\";"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"    public static final String INVALID_BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + \"\\\\x00\";"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public static final String INVALID_OWNER_DESC \u003d \" \" + PREFIX_NRIC + \"S000000000T\"; // invalid Nric"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK; //empty string not allowed for remark"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATE + \"twelvemarchtwozerooneeight\"; //follow format"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_DATE + \"2018-08-09 1230\"; //follows format, wrong time"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_PINK \u003d \"pink\";"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public static final String INVALID_THEME_LIGHTT \u003d \"lightt\";"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public static final String INVALID_OPTION \u003d \" -z\";"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"    public static final EditPersonDescriptor DESC_AMY;"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"    public static final EditPersonDescriptor DESC_BOB;"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"    public static final EditPetPatientDescriptor DESC_JOKER;"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"    public static final EditPetPatientDescriptor DESC_NERO;"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"    public static final EditAppointmentDescriptor DESC_APPOINTMENT_ONE;"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"    public static final EditAppointmentDescriptor DESC_APPOINTMENT_TWO;"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":210,"author":{"gitID":"Robert-Peng"},"content":"                .withNric(VALID_NRIC_AMY)"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":214,"author":{"gitID":"Robert-Peng"},"content":"                .withNric(VALID_NRIC_BOB)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"        DESC_JOKER \u003d new EditPetPatientDescriptorBuilder().withName(VALID_NAME_JOKER)"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_JOKER).withBreed(VALID_BREED_JOKER).withColour(VALID_COLOUR_JOKER)"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_JOKER).withOwnerNric(VALID_NRIC_AMY)"},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_DEPRESSION).build();"},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"        DESC_NERO \u003d new EditPetPatientDescriptorBuilder().withName(VALID_NAME_NERO)"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"                .withSpecies(VALID_SPECIES_NERO).withBreed(VALID_BREED_NERO).withColour(VALID_COLOUR_NERO)"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"                .withBloodType(VALID_BLOODTYPE_NERO).withOwnerNric(VALID_NRIC_FION)"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_FIV).build();"},{"lineNumber":224,"author":{"gitID":"chialejing"},"content":"        DESC_APPOINTMENT_ONE \u003d new EditAppointmentDescriptorBuilder().withOwnerNric(VALID_NRIC_AMY)"},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_ONE).withPetPatientName(VALID_NAME_JOKER)"},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_ONE).withTags(VALID_TAG_CHECKUP).build();"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"        DESC_APPOINTMENT_TWO \u003d new EditAppointmentDescriptorBuilder().withOwnerNric(VALID_NRIC_FION)"},{"lineNumber":228,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_TWO).withPetPatientName(VALID_NAME_NERO)"},{"lineNumber":229,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_TWO).withTags(VALID_TAG_VACCINATION).build();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":257,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e namePredicate \u003d currPerson -\u003e Arrays.asList(splitName[0]).stream()"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(currPerson.getName().fullName, keyword));"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(namePredicate);"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Dependency still exists!\");"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":302,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":8,"chialejing":47,"wynonaK":16,"-":246}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":3,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(4, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(4, INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalThemes;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullTheme_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        new ChangeThemeCommand(null);"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    public void execute_lightTheme_changeThemeSuccessful() {"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        CommandResult result \u003d new ChangeThemeCommand(TypicalThemes.LIGHT).execute();"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(\"Current theme: light\", result.feedbackToUser);"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeThemeRequestEvent);"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    public void execute_darkTheme_changeThemeSuccessful() {"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"        CommandResult result \u003d new ChangeThemeCommand(TypicalThemes.DARK).execute();"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(\"Current theme: dark\", result.feedbackToUser);"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeThemeRequestEvent);"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":31,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":2,"-":139}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetPatientBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalAppointments;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPetPatients;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandTest {"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPersonPetPatientAppointment_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Person) null, (PetPatient) null, (Appointment) null);"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullAppointmentNricPetPatientName_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Appointment) null, (Nric) null, (PetPatientName) null);"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPetPatientNric_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((PetPatient) null, (Nric) null);"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"        new AddCommand((Person) null);"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"    public void execute_objectsAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        ModelStubAcceptingAllAdded modelStub \u003d new ModelStubAcceptingAllAdded();"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        //add a new person (a)"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddPerson \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS_PERSON, validPerson), resultToAddPerson.feedbackToUser);"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        //add a new pet patient (b) under person (a)"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddPetPatient \u003d getAddCommandForPetPatient(validPetPatient, validPerson.getNric(),"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS_PETPATIENT, validPetPatient, validPerson),"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"                resultToAddPetPatient.feedbackToUser);"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validPetPatient), modelStub.petPatientsAdded);"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"        //add a new appt for pet patient (b) under person (a)"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddAppointment \u003d getAddCommandForAppointment(validAppointment, validPerson.getNric(),"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"                validPetPatient.getName(), modelStub).execute();"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS_APPOINTMENT, validAppointment, validPerson,"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"                validPetPatient), resultToAddAppointment.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"        //add new person, new pet patient and new appointment"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"        Person newPerson \u003d TypicalPersons.BENSON;"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"        PetPatient newPetPatient \u003d TypicalPetPatients.JEWEL;"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"        Appointment newAppt \u003d TypicalAppointments.BENSON_APP;"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"        CommandResult resultToAddAll \u003d getAddCommandForNewPersonPetPatientAppointment(newPerson, newPetPatient, newAppt,"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS_EVERYTHING, newPerson, newPetPatient, newAppt),"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"                resultToAddAll.feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateNric_throwsCommandException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateNricException();"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicatePetPatient_throwsCommandException() throws Exception {"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePetPatientException();"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAppointmentException();"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"    public void execute_duplicateAppointmentDateTime_throwsCommandException() throws Exception {"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateDateTimeException();"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPetPatient \u003d new PetPatientBuilder().build();"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        getAddCommandForNewPersonPetPatientAppointment(validPerson, validPetPatient, validAppointment,"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"                modelStub).execute();"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"    public void equals() {"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").withNric(\"T0011223G\").build();"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        PetPatient joseph \u003d new PetPatientBuilder().build();"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        PetPatient tia \u003d new PetPatientBuilder().withName(\"Tia\").build();"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addJosephCommand \u003d new AddCommand(joseph, alice.getNric());"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addTiaCommand \u003d new AddCommand(tia, bob.getNric());"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d new AppointmentBuilder().build();"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt2 \u003d new AppointmentBuilder().withDateTime(\"2018-11-11 15:30\").build();"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addApptCommand \u003d new AddCommand(appt, alice.getNric(), joseph.getName());"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAppt2Command \u003d new AddCommand(appt2, bob.getNric(), tia.getName());"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAllCommand \u003d new AddCommand(alice, joseph, appt);"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"        // same object -\u003e returns true"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addJosephCommand.equals(addJosephCommand));"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addApptCommand.equals(addApptCommand));"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAllCommand.equals(addAllCommand));"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        // same values -\u003e returns true"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addJosephCommandCopy \u003d new AddCommand(joseph, alice.getNric());"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addJosephCommand.equals(addJosephCommandCopy));"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addApptCommandCopy \u003d new AddCommand(appt, alice.getNric(), joseph.getName());"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addApptCommand.equals(addApptCommandCopy));"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        AddCommand addAllCommandCopy \u003d new AddCommand(alice, joseph, appt);"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        assertTrue(addAllCommand.equals(addAllCommandCopy));"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        // different types -\u003e returns false"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(2));"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(new AppointmentBuilder().build()));"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAllCommand.equals(\"hello\"));"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        // null -\u003e returns false"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(null));"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(null));"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAllCommand.equals(null));"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"        // different person/pet patient/appointment -\u003e returns false"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addJosephCommand.equals(addTiaCommand));"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        assertFalse(addApptCommand.equals(addAppt2Command));"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given person, pet patient and appointment."},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForNewPersonPetPatientAppointment(Person person, PetPatient petPatient,"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"                                                                      Appointment appt, Model model) {"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person, petPatient, appt);"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given appointment, owner\u0027s nric and pet patient name."},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForAppointment(Appointment appt, Nric ownerNric, PetPatientName petPatientName,"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"                                                   Model model) {"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(appt, ownerNric, petPatientName);"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given pet patient and owner\u0027s nric."},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForPetPatient(PetPatient petPatient, Nric ownerNric, Model model) {"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(petPatient, ownerNric);"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        return command;"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStub implements Model {"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        public Person getPersonWithNric(Nric nric) {"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        public PetPatient getPetPatientWithNricAndName(Nric nric, PetPatientName petPatientName) {"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"        public void deletePetPatient(PetPatient target) {"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cPetPatient\u003e deletePetPatientDependencies(Person key) {"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target) {"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appointment) throws DuplicateAppointmentException,"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"                DuplicateDateTimeException {"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":"        public void deleteAppointment(Appointment target) {"},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicatePersonException {"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"        public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicatePetPatientException {"},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"        public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"                throws DuplicateAppointmentException {"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric) {"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric) {"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"        public ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"        public Appointment getClashingAppointment(LocalDateTime dateTime) {"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":"        public boolean hasConcurrentAppointment(LocalDateTime oldDateTime, LocalDateTime newDateTime) {"},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"        public void deleteTag(Tag tag) {"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":"        public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"        public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"        public List\u003cTag\u003e getTagList() {"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateNricException when trying to add a person."},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateNricException extends ModelStub {"},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicateNricException {"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateNricException();"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":452,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":453,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":454,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":455,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":456,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicatePetPatientException when trying to add a pet patient."},{"lineNumber":457,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":458,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicatePetPatientException extends ModelStub {"},{"lineNumber":459,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":460,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":461,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":462,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":463,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":464,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":465,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":466,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":467,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":468,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":469,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":470,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) {"},{"lineNumber":471,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":472,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":473,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":474,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":475,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":476,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":477,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":478,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":479,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":480,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":481,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateAppointmentException when trying to add an appointment."},{"lineNumber":482,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":483,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateAppointmentException extends ModelStub {"},{"lineNumber":484,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":485,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":486,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":487,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":488,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":489,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":490,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) {"},{"lineNumber":491,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":492,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":493,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":494,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":495,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateAppointmentException {"},{"lineNumber":496,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":497,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":498,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":499,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":500,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":501,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":502,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":503,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":505,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":506,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always throw a DuplicateDateTimeException when trying to add an appointment."},{"lineNumber":507,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":508,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubThrowingDuplicateDateTimeException extends ModelStub {"},{"lineNumber":509,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":510,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) {"},{"lineNumber":511,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":512,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":513,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":514,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":515,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) {"},{"lineNumber":516,"author":{"gitID":"Aquarinte"},"content":"            //do nothing"},{"lineNumber":517,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":518,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":519,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":520,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateDateTimeException {"},{"lineNumber":521,"author":{"gitID":"Aquarinte"},"content":"            throw new DuplicateDateTimeException();"},{"lineNumber":522,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":523,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":524,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":525,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":526,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":527,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":528,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":529,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":530,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":531,"author":{"gitID":"Aquarinte"},"content":"     * A Model stub that always accept the persons, pet patients and appointments being added."},{"lineNumber":532,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":533,"author":{"gitID":"Aquarinte"},"content":"    private class ModelStubAcceptingAllAdded extends ModelStub {"},{"lineNumber":534,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":535,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cPetPatient\u003e petPatientsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":536,"author":{"gitID":"Aquarinte"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":537,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":538,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":539,"author":{"gitID":"Aquarinte"},"content":"        public void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":540,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(person);"},{"lineNumber":541,"author":{"gitID":"Aquarinte"},"content":"            personsAdded.add(person);"},{"lineNumber":542,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":543,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":544,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":545,"author":{"gitID":"Aquarinte"},"content":"        public Person getPersonWithNric(Nric nric) {"},{"lineNumber":546,"author":{"gitID":"Aquarinte"},"content":"            for (Person p : personsAdded) {"},{"lineNumber":547,"author":{"gitID":"Aquarinte"},"content":"                if (p.getNric().equals(nric)) {"},{"lineNumber":548,"author":{"gitID":"Aquarinte"},"content":"                    return p;"},{"lineNumber":549,"author":{"gitID":"Aquarinte"},"content":"                }"},{"lineNumber":550,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":551,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":552,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":554,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":555,"author":{"gitID":"Aquarinte"},"content":"        public void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":556,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(petPatient);"},{"lineNumber":557,"author":{"gitID":"Aquarinte"},"content":"            petPatientsAdded.add(petPatient);"},{"lineNumber":558,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":559,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":560,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":561,"author":{"gitID":"Aquarinte"},"content":"        public PetPatient getPetPatientWithNricAndName(Nric nric, PetPatientName petPatientName) {"},{"lineNumber":562,"author":{"gitID":"Aquarinte"},"content":"            for (PetPatient p : petPatientsAdded) {"},{"lineNumber":563,"author":{"gitID":"Aquarinte"},"content":"                if (p.getOwner().equals(nric) \u0026\u0026 p.getName().equals(petPatientName)) {"},{"lineNumber":564,"author":{"gitID":"Aquarinte"},"content":"                    return p;"},{"lineNumber":565,"author":{"gitID":"Aquarinte"},"content":"                }"},{"lineNumber":566,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":567,"author":{"gitID":"Aquarinte"},"content":"            return null;"},{"lineNumber":568,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":569,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":570,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":571,"author":{"gitID":"Aquarinte"},"content":"        public void addAppointment(Appointment appt) throws DuplicateAppointmentException, DuplicateDateTimeException {"},{"lineNumber":572,"author":{"gitID":"Aquarinte"},"content":"            requireNonNull(appt);"},{"lineNumber":573,"author":{"gitID":"Aquarinte"},"content":"            appointmentsAdded.add(appt);"},{"lineNumber":574,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":575,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":576,"author":{"gitID":"Aquarinte"},"content":"        @Override"},{"lineNumber":577,"author":{"gitID":"Aquarinte"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":578,"author":{"gitID":"Aquarinte"},"content":"            return new AddressBook();"},{"lineNumber":579,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":580,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":581,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":582,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":539,"chialejing":3,"wynonaK":4,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/EditAppointmentDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPOINTMENT_ONE;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPOINTMENT_TWO;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TWO;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_FION;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_TWO;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_VACCINATION;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"public class EditAppointmentDescriptorTest {"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor descriptorWithSameValues \u003d new EditAppointmentDescriptor(DESC_APPOINTMENT_ONE);"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        assertTrue(DESC_APPOINTMENT_ONE.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        assertTrue(DESC_APPOINTMENT_ONE.equals(DESC_APPOINTMENT_ONE));"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(null));"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(0));"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(DESC_APPOINTMENT_TWO));"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        // different owner -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor editedAppointment \u003d new EditAppointmentDescriptorBuilder(DESC_APPOINTMENT_ONE)"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"                .withOwnerNric(VALID_NRIC_FION).build();"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(editedAppointment));"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        // different pet patient name -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d new EditAppointmentDescriptorBuilder(DESC_APPOINTMENT_ONE)"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                .withPetPatientName(VALID_NAME_NERO).build();"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(editedAppointment));"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        // different remark -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d new EditAppointmentDescriptorBuilder(DESC_APPOINTMENT_ONE)"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                .withRemark(VALID_REMARK_TWO).build();"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(editedAppointment));"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        // different local date time -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d new EditAppointmentDescriptorBuilder(DESC_APPOINTMENT_ONE)"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"                .withLocalDateTime(VALID_DATE_TWO).build();"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(editedAppointment));"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        // different tags -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d new EditAppointmentDescriptorBuilder(DESC_APPOINTMENT_ONE)"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"                .withTags(VALID_TAG_VACCINATION).build();"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        assertFalse(DESC_APPOINTMENT_ONE.equals(editedAppointment));"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":58,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import java.util.HashMap;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"public class FindCommandTest {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    public void equals() {"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e first \u003d new HashMap\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        String[] firstKeyword \u003d {\"\"};"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        first.put(\"\", firstKeyword);"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e second \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        String[] secondKeyword \u003d {\"\"};"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        second.put(\"\", secondKeyword);"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(first);"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(second);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        // same object -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        // same values -\u003e returns true"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(first);"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        // null -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        // different person -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public void execute_allPresent_personFound() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Kurz\"};"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        String[] nric \u003d {\"F2345678U\"};"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"friends\"};"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerName\", name);"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerNric\", nric);"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerTag\", tag);"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    public void execute_nonExistentNameKeyword_personFound() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Kurzaad\"};"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        String[] nric \u003d {\"F2345678U\"};"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"friends\"};"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerName\", name);"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerNric\", nric);"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerTag\", tag);"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"    public void execute_nonExistentNricKeyword_personFound() throws CommandException {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Kurz\"};"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        String[] nric \u003d {\"F2981391U\"};"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"friends\"};"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerName\", name);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerNric\", nric);"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerTag\", tag);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    public void execute_nonExistentTagKeyword_personFound() throws CommandException {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Kurz\"};"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        String[] nric \u003d {\"F2345678U\"};"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"friendstoo\"};"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerName\", name);"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerNric\", nric);"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerTag\", tag);"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroNameKeywords_noPersonFound() throws CommandException {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNameCommand(\" \");"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroNricKeywords_noPersonFound() throws CommandException {"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNricCommand(\" \");"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroTagKeywords_noPersonFound() throws CommandException {"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonTagCommand(\" \");"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroNameKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetNameCommand(\" \");"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroSpeciesKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetSpeciesCommand(\" \");"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroBreedKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBreedCommand(\" \");"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroColorKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetColorCommand(\" \");"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroBloodTypeKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBloodTypeCommand(\" \");"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"    public void execute_zeroTagKeywords_noPetPatientFound() throws CommandException {"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetTagCommand(\" \");"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"    public void execute_nameKeyword_personsFound() throws CommandException {"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNameCommand(\"Kurz\");"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleNameKeywords_multiplePersonsFound() throws CommandException {"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3)"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNameCommand(\"Kurz Elle Kunz\");"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"    public void execute_nricKeyword_personFound() throws CommandException {"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNricCommand(\"F2345678U\");"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleNricKeywords_multiplePersonsFound() throws CommandException {"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3)"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonNricCommand(\"F2345678U T0120956W S0156956W\");"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"    public void execute_tagKeyword_personFound() throws CommandException {"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 2);"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonTagCommand(\"owesMoney\");"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleTagKeyword_multiplePersonsFound() throws CommandException {"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7)"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePersonTagCommand(\"friends owesMoney\");"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"    public void execute_petAllFields_personFoundForPet() throws CommandException {"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depression\"};"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE));"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundName_noPetFound() throws CommandException {"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewellish\"};"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressions\"};"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":342,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":347,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundSpecies_noPetFound() throws CommandException {"},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":356,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Dog\"};"},{"lineNumber":357,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":358,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressions\"};"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":363,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":364,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":365,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundBreed_noPetFound() throws CommandException {"},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Shorthair\"};"},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressions\"};"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundColour_noPetFound() throws CommandException {"},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Purple\"};"},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressions\"};"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":429,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":430,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundBloodType_noPetFound() throws CommandException {"},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"ABD\"};"},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressions\"};"},{"lineNumber":445,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":446,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":447,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":448,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":449,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":461,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"    public void executePetAllFields_noFoundTag_noPetFound() throws CommandException {"},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0)"},{"lineNumber":464,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 0);"},{"lineNumber":466,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":467,"author":{"gitID":"wynonaK"},"content":"        String[] name \u003d {\"Jewel\"};"},{"lineNumber":468,"author":{"gitID":"wynonaK"},"content":"        String[] species \u003d {\"Cat\"};"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":"        String[] breed \u003d {\"Persian\"};"},{"lineNumber":470,"author":{"gitID":"wynonaK"},"content":"        String[] colour \u003d {\"Calico\"};"},{"lineNumber":471,"author":{"gitID":"wynonaK"},"content":"        String[] bloodType \u003d {\"AB\"};"},{"lineNumber":472,"author":{"gitID":"wynonaK"},"content":"        String[] tag \u003d {\"Depressionsss\"};"},{"lineNumber":473,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":474,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":475,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":476,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", name);"},{"lineNumber":477,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", species);"},{"lineNumber":478,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", breed);"},{"lineNumber":479,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", colour);"},{"lineNumber":480,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", bloodType);"},{"lineNumber":481,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", tag);"},{"lineNumber":482,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":483,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":484,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":485,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":486,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":487,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":488,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":489,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":490,"author":{"gitID":"wynonaK"},"content":"    public void execute_petNameKeyword_personFoundForPet() throws CommandException {"},{"lineNumber":491,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":492,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":493,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":494,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetNameCommand(\"Joker\");"},{"lineNumber":495,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":496,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":497,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":498,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":499,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleNameKeyword_multiplePersonsFoundForPet() throws CommandException {"},{"lineNumber":500,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":501,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":502,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 2);"},{"lineNumber":503,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetNameCommand(\"Jewel Joker\");"},{"lineNumber":504,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":505,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":507,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":508,"author":{"gitID":"wynonaK"},"content":"    public void execute_petSpeciesKeyword_personFoundForPetDog() throws CommandException {"},{"lineNumber":509,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":510,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":511,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":512,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetSpeciesCommand(\"Dog\");"},{"lineNumber":513,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":514,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":515,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":516,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":517,"author":{"gitID":"wynonaK"},"content":"    public void execute_petSpeciesKeyword_multiplePersonFoundForPetCat() throws CommandException {"},{"lineNumber":518,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":519,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":520,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 2);"},{"lineNumber":521,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetSpeciesCommand(\"Cat\");"},{"lineNumber":522,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":523,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":524,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":525,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":526,"author":{"gitID":"wynonaK"},"content":"    public void execute_multiplePetSpeciesKeyword_multiplePersonFoundForPet() throws CommandException {"},{"lineNumber":527,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":528,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":529,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":530,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetSpeciesCommand(\"Dog Cat\");"},{"lineNumber":531,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":532,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":533,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":534,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":535,"author":{"gitID":"wynonaK"},"content":"    public void execute_breedKeyword_personFoundForPet() throws CommandException {"},{"lineNumber":536,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":537,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":538,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":539,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBreedCommand(\"Golden Retriever\");"},{"lineNumber":540,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":541,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":543,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":544,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleBreedKeyword_multiplePersonFoundForPet() throws CommandException {"},{"lineNumber":545,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":546,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":547,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":548,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBreedCommand(\"Persian Ragdoll Golden Retriever Domestic Shorthair\");"},{"lineNumber":549,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":550,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":551,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":552,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":553,"author":{"gitID":"wynonaK"},"content":"    public void execute_colorKeyword_personFoundForPet() throws CommandException {"},{"lineNumber":554,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":555,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":556,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":557,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetColorCommand(\"Brown\");"},{"lineNumber":558,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":559,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":560,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":561,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":562,"author":{"gitID":"wynonaK"},"content":"    public void execute_multiplePetColorKeyword_multiplePersonFoundForPet() throws CommandException {"},{"lineNumber":563,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":564,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":565,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":566,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetColorCommand(\"Calico Brown Golden\");"},{"lineNumber":567,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":568,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":569,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":570,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":571,"author":{"gitID":"wynonaK"},"content":"    public void execute_bloodTypeKeyword_personFoundForPet() throws CommandException {"},{"lineNumber":572,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":573,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":574,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":575,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBloodTypeCommand(\"AB\");"},{"lineNumber":576,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE));"},{"lineNumber":577,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":578,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":579,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":580,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleBloodTypeKeyword_multiplePersonFoundForPet() throws CommandException {"},{"lineNumber":581,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":582,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":583,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 3);"},{"lineNumber":584,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetBloodTypeCommand(\"AB A DEA 4+\");"},{"lineNumber":585,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":586,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":587,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":588,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":589,"author":{"gitID":"wynonaK"},"content":"    public void execute_tagKeyword_personFoundForPet() throws CommandException {"},{"lineNumber":590,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"},{"lineNumber":591,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":592,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 1);"},{"lineNumber":593,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetTagCommand(\"3legged\");"},{"lineNumber":594,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":595,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":596,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":597,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":598,"author":{"gitID":"wynonaK"},"content":"    public void execute_multipleTagKeyword_multiplePersonsFoundForPets() throws CommandException {"},{"lineNumber":599,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2)"},{"lineNumber":600,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":601,"author":{"gitID":"wynonaK"},"content":"                + String.format(MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, 2);"},{"lineNumber":602,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d preparePetTagCommand(\"Depression 3Legged\");"},{"lineNumber":603,"author":{"gitID":"wynonaK"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON));"},{"lineNumber":604,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":605,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":606,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":607,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":608,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":609,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePersonNameCommand(String userInput) {"},{"lineNumber":610,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":611,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":612,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerName\", split);"},{"lineNumber":613,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":614,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":615,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":616,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":617,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":618,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":619,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":620,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":621,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePersonNricCommand(String userInput) {"},{"lineNumber":622,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":623,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":624,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerNric\", split);"},{"lineNumber":625,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":626,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":627,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":628,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":629,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":630,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":631,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":632,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":633,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePersonTagCommand(String userInput) {"},{"lineNumber":634,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":635,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":636,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"ownerTag\", split);"},{"lineNumber":637,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":638,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":639,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":640,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":641,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":642,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":643,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":644,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":645,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetNameCommand(String userInput) {"},{"lineNumber":646,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":647,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":648,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petName\", split);"},{"lineNumber":649,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":650,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":651,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":652,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":653,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":654,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":655,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":656,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":657,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetSpeciesCommand(String userInput) {"},{"lineNumber":658,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":659,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":660,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petSpecies\", split);"},{"lineNumber":661,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":662,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":663,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":664,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":665,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":666,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":667,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":668,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":669,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetBreedCommand(String userInput) {"},{"lineNumber":670,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":671,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":672,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBreed\", split);"},{"lineNumber":673,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":674,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":675,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":676,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":677,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":678,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":679,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":680,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":681,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetColorCommand(String userInput) {"},{"lineNumber":682,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":683,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":684,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petColour\", split);"},{"lineNumber":685,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":686,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":687,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":688,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":689,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":690,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":691,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":692,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":693,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetBloodTypeCommand(String userInput) {"},{"lineNumber":694,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":695,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":696,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petBloodType\", split);"},{"lineNumber":697,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":698,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":699,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":700,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":701,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":702,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":703,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":704,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":705,"author":{"gitID":"wynonaK"},"content":"    private FindCommand preparePetTagCommand(String userInput) {"},{"lineNumber":706,"author":{"gitID":"wynonaK"},"content":"        String[] split \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":707,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e hashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":708,"author":{"gitID":"wynonaK"},"content":"        hashMap.put(\"petTag\", split);"},{"lineNumber":709,"author":{"gitID":"wynonaK"},"content":"        FindCommand command \u003d new FindCommand(hashMap);"},{"lineNumber":710,"author":{"gitID":"wynonaK"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":711,"author":{"gitID":"wynonaK"},"content":"        return command;"},{"lineNumber":712,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":713,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":714,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":715,"author":{"gitID":"wynonaK"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":716,"author":{"gitID":"wynonaK"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":717,"author":{"gitID":"wynonaK"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":718,"author":{"gitID":"wynonaK"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":719,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":720,"author":{"gitID":"wynonaK"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList)"},{"lineNumber":721,"author":{"gitID":"wynonaK"},"content":"            throws CommandException {"},{"lineNumber":722,"author":{"gitID":"wynonaK"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":723,"author":{"gitID":"wynonaK"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":724,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":725,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":726,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":727,"author":{"gitID":"wynonaK"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":728,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":729,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":730,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":731,"author":{"gitID":"wynonaK"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":732,"author":{"gitID":"wynonaK"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":733,"author":{"gitID":"wynonaK"},"content":"     * - the CommandException message matches {@code expectedMessage}"},{"lineNumber":734,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":735,"author":{"gitID":"wynonaK"},"content":"    public static void assertCommandFailure(Command command, String expectedMessage) {"},{"lineNumber":736,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":737,"author":{"gitID":"wynonaK"},"content":"            command.execute();"},{"lineNumber":738,"author":{"gitID":"wynonaK"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":739,"author":{"gitID":"wynonaK"},"content":"        } catch (CommandException e) {"},{"lineNumber":740,"author":{"gitID":"wynonaK"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":741,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":742,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":743,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":716,"-":27}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    private static final String INVALID_NRIC \u003d \"A012345AB\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE,"},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"            VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null,"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"            VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE,"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":"            null, VALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_NRIC, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE,"},{"lineNumber":103,"author":{"gitID":"Robert-Peng"},"content":"            VALID_EMAIL, null, VALID_NRIC, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_NRIC, VALID_TAGS);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE,"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                VALID_EMAIL, VALID_ADDRESS, null, VALID_TAGS);"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_NRIC, invalidTags);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":15,"wynonaK":18,"-":100}},{"path":"src/test/java/seedu/address/logic/commands/ListAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeDayViewRequestEvent;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeMonthViewRequestEvent;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeWeekViewRequestEvent;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeYearViewRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"public class ListAppointmentCommandTest {"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    public void execute_getYear_success() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        CommandResult result \u003d new ListAppointmentCommand(1, Year.now()).execute();"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        assertEquals(String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"year\"), result.feedbackToUser);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeYearViewRequestEvent);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void execute_getMonth_success() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        CommandResult result \u003d new ListAppointmentCommand(2, YearMonth.now()).execute();"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        assertEquals(String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"month\"), result.feedbackToUser);"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeMonthViewRequestEvent);"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    public void execute_getWeek_success() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        CommandResult result \u003d new ListAppointmentCommand(3, LocalDate.now()).execute();"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        assertEquals(String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"week\"), result.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeWeekViewRequestEvent);"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public void execute_getDate_success() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        CommandResult result \u003d new ListAppointmentCommand(4, LocalDate.now()).execute();"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        assertEquals(String.format(ListAppointmentCommand.MESSAGE_SUCCESS, \"day\"), result.feedbackToUser);"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeDayViewRequestEvent);"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    public void execute_getPastYearNoAppt_failure() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        Year year \u003d Year.of(2017);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        new ListAppointmentCommand(1, year).execute();"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public void execute_getPastMonthYearNoAppt_failure() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        YearMonth yearMonth \u003d YearMonth.of(2017, 01);"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        new ListAppointmentCommand(2, yearMonth).execute();"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    public void execute_getPastWeekNoAppt_failure() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        LocalDate date \u003d LocalDate.of(2017, 01, 01);"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        new ListAppointmentCommand(3, date).execute();"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    public void execute_getPastDayNoAppt_failure() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        LocalDate date \u003d LocalDate.of(2017, 01, 01);"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        new ListAppointmentCommand(4, date).execute();"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    public void execute_getPast_failure() throws CommandException {"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        LocalDate date \u003d LocalDate.of(2017, 01, 01);"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        new ListAppointmentCommand(5, date).execute();"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":86,"-":11}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.storage.XmlAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APP;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_OWNER_NRIC \u003d \"S012345AB\";"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_PET_PATIENT_NAME \u003d \"L@osai\";"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_REMARK \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_DATETIME \u003d \"MAAAY 2018 8PM\";"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private static final String INVALID_APPOINTMENT_TAG \u003d \"#checkup\";"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_OWNER_NRIC \u003d ALICE_APP.getOwnerNric().toString();"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_PET_PATIENT_NAME \u003d ALICE_APP.getPetPatientName().toString();"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_REMARK \u003d ALICE_APP.getRemark().toString();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    private static final String VALID_DATETIME \u003d ALICE_APP.getFormattedLocalDateTime();"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_APPOINTMENT_TAGS \u003d ALICE_APP.getAppointmentTags().stream()"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(ALICE_APP);"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        assertEquals(ALICE_APP, appointment.toModelType());"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidOwnerNric_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                        INVALID_OWNER_NRIC,"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d Nric.MESSAGE_NRIC_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullOwnerNric_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidPetName_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                        INVALID_PET_PATIENT_NAME,"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS;"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullPetName_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName());"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidRemark_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"                        INVALID_REMARK,"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d Remark.MESSAGE_REMARK_CONSTRAINTS;"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullRemark_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment("},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"                        VALID_OWNER_NRIC,"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                        null,"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidDateTime_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"                        INVALID_DATETIME,"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"                        VALID_APPOINTMENT_TAGS);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d \"Please follow the format of yyyy-MM-dd HH:mm\";"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_nullDateTime_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"                VALID_PET_PATIENT_NAME,"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"                VALID_REMARK,"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"                null,"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"                VALID_APPOINTMENT_TAGS);"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"    public void toModelType_invalidType_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENT_TAGS);"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_APPOINTMENT_TAG));"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"                new XmlAdaptedAppointment(VALID_OWNER_NRIC,"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                        VALID_PET_PATIENT_NAME,"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"                        VALID_REMARK,"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"                        VALID_DATETIME,"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"                        invalidTags);"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalValueException.class, appointment::toModelType);"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":148,"-":8}},{"path":"src/test/java/seedu/address/model/appointment/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"    @Rule"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"        UniqueAppointmentList uniquePersonList \u003d new UniqueAppointmentList();"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":14,"-":4}},{"path":"src/test/java/seedu/address/model/appointment/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class RemarkTest {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Remark(null));"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public void constructor_invalidRemark_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"        String invalidRemark \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public void isValidRemark() {"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"        // null remark"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"        // invalid remarks"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        assertFalse(Remark.isValidRemark(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        // valid remarks"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit.\"));"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        assertTrue(Remark.isValidRemark(\"Might need a house visit, and medication.\")); // long address"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":32,"-":6}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e newAppointments \u003d Arrays.asList(ALICE_APP);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        List\u003cTag\u003e newAppointmentTags \u003d new ArrayList\u003c\u003e(ALICE_APP.getAppointmentTags());"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAppointments, newAppointmentTags);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public void removeUnusedTag_addressBookUnchanged() throws Exception {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookExpected \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        //should be equal as unused tag removed"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookExpected, addressBookAmyBob);"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"    public void removeTag_multiplePersons_addressBookChanged() throws Exception {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAmyBob \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        addressBookAmyBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        assertEquals(addressBookAfterChange, addressBookAmyBob);"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        private final ObservableList\u003cTag\u003e appointmentTags \u003d FXCollections.observableArrayList();"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cPetPatient\u003e petPatients \u003d FXCollections.observableArrayList();"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        private final ObservableList\u003cTag\u003e petPatientTags \u003d FXCollections.observableArrayList();"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"                        Collection\u003cAppointment\u003e appointments, Collection\u003c? extends Tag\u003e appointmentTags) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            this.appointmentTags.setAll(appointmentTags);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"            return appointments;"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"            return petPatients;"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":7,"wynonaK":52,"-":91}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPetPatientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_BREED_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_COLOUR_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_NAME_FIELD_MESSAGE_FORMAT;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_OWNER_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.storage.XmlAdaptedPetPatient.MISSING_SPECIES_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.testutil.TypicalPetPatients.JEWEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"public class XmlAdaptedPetPatientTest {"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_NAME \u003d \"H@zel\";"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private static final String EMPTY_FIELD \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_NAME \u003d JEWEL.getName().toString();"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_SPECIES \u003d JEWEL.getSpecies().toString();"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_BREED \u003d JEWEL.getBreed().toString();"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_COLOUR \u003d JEWEL.getColour().toString();"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_BLOODTYPE \u003d JEWEL.getBloodType().toString();"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private static final String VALID_OWNER \u003d JEWEL.getOwner().toString();"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d JEWEL.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    public void toModelType_validPetPatientDetails_returnsPetPatient() throws Exception {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient(JEWEL);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        assertEquals(JEWEL, petPatient.toModelType());"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"                INVALID_NAME,"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"                MISSING_NAME_FIELD_MESSAGE_FORMAT,"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullSpecies_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"                MISSING_SPECIES_FIELD_MESSAGE_FORMAT,"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullBreed_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"                MISSING_BREED_FIELD_MESSAGE_FORMAT,"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullColour_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"                MISSING_COLOUR_FIELD_MESSAGE_FORMAT,"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"                MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT,"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"    public void toModelType_nullOwner_throwsIllegalValueException() {"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"                null,"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"                VALID_TAGS"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"                MISSING_OWNER_FIELD_MESSAGE_FORMAT,"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"                PetPatientName.class.getSimpleName()"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, petPatient::toModelType);"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient petPatient \u003d new XmlAdaptedPetPatient("},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"                VALID_NAME,"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"                VALID_SPECIES,"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"                VALID_BREED,"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                VALID_COLOUR,"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"                VALID_BLOODTYPE,"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                VALID_OWNER,"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"                invalidTags"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalValueException.class, petPatient::toModelType);"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":171,"-":11}},{"path":"src/test/java/seedu/address/model/petpatient/PetPatientNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class PetPatientNameTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetPatientName(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetPatientName(invalidName));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetPatientName.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        assertFalse(PetPatientName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"joker the second\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(PetPatientName.isValidName(\"Aye Captain Howdy There Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":36,"-":5}},{"path":"src/test/java/seedu/address/model/UniquePetPatientListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.UniquePetPatientList;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"public class UniquePetPatientListTest {"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"        UniquePetPatientList uniquePetPatientList \u003d new UniquePetPatientList();"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"        uniquePetPatientList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":14,"-":6}},{"path":"src/test/java/seedu/address/model/petpatient/BreedTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class BreedTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Breed(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidBreed \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Breed(invalidBreed));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null breed"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Breed.isValidBreed(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid breed"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\"ragdoll*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\"12345\")); // numbers only"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertFalse(Breed.isValidBreed(\"persian 234\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        // valid breed"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(Breed.isValidBreed(\"poodle\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(Breed.isValidBreed(\"Domestic Shorthair\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(Breed.isValidBreed(\"Domestic Shorthair Persian Ragdoll\")); // long breed"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":33,"-":8}},{"path":"src/test/java/seedu/address/model/petpatient/SpeciesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class SpeciesTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Species(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidSpecies \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Species(invalidSpecies));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null species"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Species.isValidSpecies(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid species"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\"cat*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\"12345\")); // numbers only"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertFalse(Species.isValidSpecies(\"cat 234\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        // valid species"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(Species.isValidSpecies(\"dog\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(Species.isValidSpecies(\"Some Species\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(Species.isValidSpecies(\"Some Species That Has Very Long Naming Term\")); // long species"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":33,"-":8}},{"path":"src/test/java/seedu/address/model/petpatient/ColourTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class ColourTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Colour(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidBreed \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Colour(invalidBreed));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null colour"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Colour.isValidColour(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid colour"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\"white*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\"12345\")); // numbers only"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertFalse(Colour.isValidColour(\"black 234\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        // valid colour"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(Colour.isValidColour(\"brown\")); // alphabets only"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(Colour.isValidColour(\"Orange Brown\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(Colour.isValidColour(\"Orange Brown White Red Blue Yellow Green\")); // long colour"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":33,"-":8}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public void getFilteredPetPatientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        modelManager.getFilteredPetPatientList().remove(0);"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        modelManager.getFilteredAppointmentList().remove(0);"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    public void deleteUnusedTag_modelUnchanged() throws Exception {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        //unused tag removed, should remain the same"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    // Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag_multiplePersons_modelChanged() throws Exception {"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        AddressBook addressBookAfterChange \u003d"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                new AddressBookBuilder().withPerson(amyWithoutFriendTag).withPerson(bobWithoutFriendTag).build();"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        ModelManager modelManagerAfterChange \u003d new ModelManager(addressBookAfterChange, userPrefs);"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        assertTrue(modelManager.equals(modelManagerAfterChange));"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e namePredicate \u003d  person -\u003e Arrays.stream(keywords)"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        modelManager.updateFilteredPersonList(namePredicate);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":45,"-":77}},{"path":"src/test/java/seedu/address/model/petpatient/BloodTypeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class BloodTypeTest {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new BloodType(null));"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"        String invalidBloodType \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BloodType(invalidBloodType));"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public void isValidBloodType() {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"        // null blood type"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e BloodType.isValidBloodType(null));"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"        // invalid blood type"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"        assertFalse(BloodType.isValidBloodType(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        assertFalse(BloodType.isValidBloodType(\" \")); // one space only"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        assertFalse(BloodType.isValidBloodType(\"       \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        // valid blood type"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"dea\")); // alphabets only"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"dea 1\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"DEA 1\")); // with capital letters"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"Some Blood Type That Has A Very Long Name\")); // long"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType(\"DEA 1.0+\")); // with special characters"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        assertTrue(BloodType.isValidBloodType("},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"                \"Some Blood Type That Has A Very Long Name DEA 1.0-\")); // long with special character"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":35,"-":8}},{"path":"src/test/java/seedu/address/testutil/TypicalThemes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":6,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Aquarinte"},"content":" * A utility class containing a list of {@code Theme} objects to be used in tests."},{"lineNumber":8,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"public class TypicalThemes {"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":"    public static final Theme DARK \u003d new Theme(\"dark\");"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":"    public static final Theme LIGHT \u003d new Theme(\"light\");"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":9,"-":4}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"        descriptor.setNric(person.getNric());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"     * Sets the {@code NRIC } of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"     * @param nric"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"        descriptor.setNric(new Nric(nric));"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":11,"-":86}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"public class TypicalAppointments {"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public static final Appointment ALICE_APP \u003d new AppointmentBuilder()"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"            .withOwnerNric(TypicalPersons.ALICE.getNric().toString())"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"            .withPetPatientName(TypicalPetPatients.JEWEL.getName().toString())"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"            .withRemark(\"Requires Home Visit\")"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"            .withDateTime(\"2018-05-28 12:30\")"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"            .withAppointmentTags(\"checkup\").build();"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final Appointment BENSON_APP \u003d new AppointmentBuilder()"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"            .withOwnerNric(TypicalPersons.BENSON.getNric().toString())"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"            .withPetPatientName(TypicalPetPatients.JOKER.getName().toString())"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"            .withRemark(\"May require isolation\")"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            .withDateTime(\"2018-04-22 14:30\")"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            .withAppointmentTags(\"vaccination\").build();"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    public static final Appointment BOB_APP \u003d new AppointmentBuilder()"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"            .withOwnerNric(TypicalPersons.BOB.getNric().toString())"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"            .withPetPatientName(TypicalPetPatients.NERO.getName().toString())"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"            .withRemark(\"May require isolation\")"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"            .withDateTime(\"2018-12-22 14:30\")"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            .withAppointmentTags(\"vaccination\").build();"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    private TypicalAppointments() {} // prevents instantiation"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APP, BENSON_APP));"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":35,"-":4}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + OPTION_OWNER + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getAddCommandAlias(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + OPTION_OWNER + \" \" + getPersonDetails(person);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"        sb.append(PREFIX_NRIC + person.getNric().value + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":44,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":2,"-":46}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_FIRST_PETPATIENT \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_SECOND_PETPATIENT \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_THIRD_PETPATIENT \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":12}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_APPOINTMENT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" * A utility class for Appointment."},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"public class AppointmentUtil {"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"     * Returns an add command string for adding the {@code petpatient}."},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public static String getAddCommand(Appointment appt, Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"        return AddCommand.COMMAND_WORD + OPTION_APPOINTMENT + \" \" + getAppointmentDetails(appt)"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"                + OPTION_OWNER + \" \" + PREFIX_NRIC + ownerNric.toString() + OPTION_PET + \" \" + petPatientName.fullName;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details."},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    public static String getAppointmentDetails(Appointment appointment) {"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_DATE + appointment.getFormattedLocalDateTime() + \" \");"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        sb.append(PREFIX_REMARK + appointment.getRemark().value + \" \");"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        appointment.getAppointmentTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":33,"-":7}},{"path":"src/test/java/seedu/address/testutil/EditPetPatientDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" * A utility class to help with building EditPetPatientDescriptor objects."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"public class EditPetPatientDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private EditPetPatientDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptor();"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder(EditPetPatientDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        this.descriptor \u003d new EditPetPatientDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"     * Returns an {@code EditPetPatientDescriptor} with fields containing {@code petPatient}\u0027s details"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder(PetPatient petPatient) {"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditPetPatientDescriptor();"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        descriptor.setName(petPatient.getName());"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        descriptor.setSpecies(petPatient.getSpecies());"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        descriptor.setBreed(petPatient.getBreed());"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        descriptor.setColour(petPatient.getColour());"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        descriptor.setBloodType(petPatient.getBloodType());"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        descriptor.setOwnerNric(petPatient.getOwner());"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        descriptor.setTags(petPatient.getTags());"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code PetPatientName} of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withName(String name) {"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        descriptor.setName(new PetPatientName(name));"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Species} of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withSpecies(String species) {"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        descriptor.setSpecies(new Species(species));"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Breed} of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withBreed(String breed) {"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        descriptor.setBreed(new Breed(breed));"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Colour} of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withColour(String colour) {"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"        descriptor.setColour(new Colour(colour));"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code BloodType } of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withBloodType(String bloodType) {"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        descriptor.setBloodType(new BloodType(bloodType));"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code NRIC } of the {@code EditPetPatientDescriptor} that we are building."},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withOwnerNric(String nric) {"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        descriptor.setOwnerNric(new Nric(nric));"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPetPatientDescriptor}"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"     * that we are building."},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptorBuilder withTags(String... tags) {"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptor build() {"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        return descriptor;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"}"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":""}],"authorContributionMap":{"chialejing":103,"-":6}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withNric(\"G1111111B\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"            .withNric(\"S0123456Q\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"Wall Street\").withNric(\"F2345678U\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th Street\").withNric(\"T0123456L\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"Michegan Ave\").withNric(\"T0120956W\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"Little Tokyo\").withNric(\"S0156956W\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th Street\").withNric(\"F0184556R\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"Little India\").withNric(\"G0380956E\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"Chicago Ave\").withNric(\"G0508956T\").build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"            .withNric(VALID_NRIC_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"            .withNric(VALID_NRIC_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    public static final String NRIC_KEYWORD_MATCHING_MEIER \u003d \"T0123456L\" + \" \" + \"S0123456Q\";"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    public static final String OWES_MONEY_TAG \u003d \"owesMoney\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            } catch (DuplicateNricException e) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Cannot have duplicate NRIC\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":6,"chialejing":7,"wynonaK":2,"-":75}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"//import com.sun.deploy.perf.PerfRollup;"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    public static final String DEFAULT_NRIC \u003d \"G1234567B\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    private Nric nric;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"        nric \u003d personToCopy.getNric();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"Robert-Peng"},"content":"     * Sets the {@code NRIC} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitID":"Robert-Peng"},"content":"     * @param nric"},{"lineNumber":100,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":101,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"    public PersonBuilder withNric(String nric) {"},{"lineNumber":103,"author":{"gitID":"Robert-Peng"},"content":"        this.nric \u003d new Nric(nric);"},{"lineNumber":104,"author":{"gitID":"Robert-Peng"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":108,"author":{"gitID":"Robert-Peng"},"content":"        return new Person(name, phone, email, address, nric, tags);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":18,"-":93}},{"path":"src/test/java/seedu/address/testutil/PetPatientUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_OWNER;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.OPTION_PET;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":" * A utility class for Pet Patient."},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"public class PetPatientUtil {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"     * Returns an add command string for adding the {@code petpatient}."},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"    public static String getAddCommand(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        return AddCommand.COMMAND_WORD + OPTION_PET + \" \" + getPetPatientDetails(petPatient)"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"                + OPTION_OWNER + \" \" + PREFIX_NRIC + ownerNric.toString();"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"     * Returns an add command string for adding the {@code petpatient}."},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    public static String getAddCommandAlias(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + OPTION_PET + \" \" + getPetPatientDetails(petPatient)"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"                + \" \" + OPTION_OWNER + \" \" + PREFIX_NRIC + ownerNric.toString();"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    public static String getPetPatientDetails(PetPatient petPatient) {"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_NAME + petPatient.getName().fullName + \" \");"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_SPECIES + petPatient.getSpecies().species + \" \");"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_BREED + petPatient.getBreed().breed + \" \");"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_COLOUR + petPatient.getColour().colour + \" \");"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        sb.append(PREFIX_BLOODTYPE + petPatient.getBloodType().bloodType + \" \");"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"        petPatient.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"        return sb.toString();"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":35,"Robert-Peng":1,"chialejing":2,"-":13}},{"path":"src/test/java/seedu/address/testutil/TypicalPetPatients.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_NERO;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BREED_NERO;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_NERO;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_NERO;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SPECIES_NERO;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * A utility class containing a list of {@code PetPatient} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class TypicalPetPatients {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    // Pet patient with tags"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient JEWEL \u003d new PetPatientBuilder()"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"            .withName(\"Jewel\")"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Persian Ragdoll\")"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"            .withColour(\"calico\")"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"AB\")"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.ALICE.getNric().toString())"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"            .withTags(\"depression\", \"test\").build();"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    // Pet patient with no tags"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient JOKER \u003d new PetPatientBuilder()"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"            .withName(\"Joker\")"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Domestic Shorthair\")"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"            .withColour(\"brown and white\")"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"A\")"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.BENSON.getNric().toString())"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    // Pet patient with tags"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient JENN \u003d new PetPatientBuilder()"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"            .withName(\"Jenn\")"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Dog\")"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Golden Retriever\")"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"            .withColour(\"golden\")"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"DEA 4+\")"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.BENSON.getNric().toString())"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"            .withTags(\"3legged\").build();"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    // Manually added"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient KARUPIN \u003d new PetPatientBuilder()"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"            .withName(\"Karupin\")"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"            .withSpecies(\"Cat\")"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"            .withBreed(\"Himalayan\")"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"            .withColour(\"sealpoint\")"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"            .withBloodType(\"AB\")"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(TypicalPersons.ALICE.getNric().toString())"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    // Manually added - Pet Patient\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"    public static final PetPatient NERO \u003d new PetPatientBuilder()"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"            .withName(VALID_NAME_NERO)"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"            .withSpecies(VALID_SPECIES_NERO)"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            .withBreed(VALID_BREED_NERO)"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"            .withColour(VALID_COLOUR_NERO)"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"            .withBloodType(VALID_BLOODTYPE_NERO)"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"            .withOwnerNric(VALID_NRIC_BOB)"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"            .withTags(new String[]{}).build();"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    private TypicalPetPatients() {}"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    public static List\u003cPetPatient\u003e getTypicalPetPatients() {"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(JOKER, JEWEL, JENN));"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":62,"-":14}},{"path":"src/test/java/seedu/address/testutil/PetPatientBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" * A utility class to help with building PetPatient objects."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"public class PetPatientBuilder {"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_NAME \u003d \"Joseph\";"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_SPECIES \u003d \"Cat\";"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_BREED \u003d \"Persian Ragdoll\";"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_COLOUR \u003d \"Brown\";"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"AB\";"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_OWNER \u003d \"G1234567B\";"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    public static final String DEFAULT_TAGS \u003d \"Injured\";"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private PetPatientName name;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private Species species;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    private Breed breed;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private Colour colour;"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    private BloodType bloodType;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder() {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        name \u003d new PetPatientName(DEFAULT_NAME);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        species \u003d new Species(DEFAULT_SPECIES);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        breed \u003d new Breed(DEFAULT_BREED);"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        colour \u003d new Colour(DEFAULT_COLOUR);"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d new Nric(DEFAULT_OWNER);"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     * Initializes the PetPatientBuilder with the data of {@code petPatientToCopy}."},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder(PetPatient petPatientToCopy) {"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"        name \u003d petPatientToCopy.getName();"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        species \u003d petPatientToCopy.getSpecies();"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        breed \u003d petPatientToCopy.getBreed();"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        colour \u003d petPatientToCopy.getColour();"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d petPatientToCopy.getBloodType();"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d petPatientToCopy.getOwner();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        tags \u003d new HashSet\u003c\u003e(petPatientToCopy.getTags());"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code PetPatientName} of the {@code PetPatient} that we are building."},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withName(String name) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.name \u003d new PetPatientName(name);"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code PetPatient} that we are building."},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withTags(String ... tags) {"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"     * Sets the species of the {@code PetPatient} that we are building."},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withSpecies(String species) {"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        this.species \u003d new Species(species);"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"     * Sets the breed of the {@code PetPatient} that we are building."},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withBreed(String breed) {"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d new Breed(breed);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"     * Sets the colour of the {@code PetPatient} that we are building."},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withColour(String colour) {"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d new Colour(colour);"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"     * Sets the blood type of the {@code PetPatient} that we are building."},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withBloodType(String bloodType) {"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d new BloodType(bloodType);"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Nric} of the {@code PetPatient} that we are building."},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"     * @param nric"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"     * @return"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"    public PetPatientBuilder withOwnerNric(String nric) {"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d new Nric(nric);"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    public PetPatient build() {"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"        return new PetPatient(name, species, breed, colour, bloodType, ownerNric, tags);"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":117,"-":6}},{"path":"src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" * A utility class to help with building EditAppointmentDescriptor objects."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"public class EditAppointmentDescriptorBuilder {"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private EditAppointmentDescriptor descriptor;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        descriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        descriptor.setOwnerNric(appointment.getOwnerNric());"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        descriptor.setPetPatientName(appointment.getPetPatientName());"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        descriptor.setRemark(appointment.getRemark());"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        descriptor.setLocalDateTime(appointment.getDateTime());"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        descriptor.setTags(appointment.getAppointmentTags());"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code NRIC } of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder withOwnerNric(String ownerNric) {"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        descriptor.setOwnerNric(new Nric(ownerNric));"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code PetPatientName} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder withPetPatientName(String petPatientName) {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        descriptor.setPetPatientName(new PetPatientName(petPatientName));"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code Remark} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder withRemark(String remark) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        descriptor.setRemark(new Remark(remark));"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"     * Sets the {@code LocalDateTime} of the {@code EditAppointmentDescriptor} that we are building."},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder withLocalDateTime(String localDateTime) {"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        descriptor.setLocalDateTime(LocalDateTime.parse(localDateTime, formatter));"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditAppointmentDescriptor}"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"     * that we are building."},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptorBuilder withTags(String... tags) {"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptor build() {"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        return descriptor;"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":80,"wynonaK":3,"-":8}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * A utility class to help with building Appointment Objects."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"public class AppointmentBuilder {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_OWNER_NRIC \u003d \"S1012341B\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_PET_PATIENT_NAME \u003d \"Joker\";"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_REMARK \u003d \"Requires home visit\";"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_DATE \u003d \"2018-12-31 12:30\";"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public static final String DEFAULT_APPOINTMENT_TAG \u003d \"surgery\";"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private Nric ownerNric;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private Remark remark;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    private Set\u003cTag\u003e appointmentTags;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder() {"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d new Nric(DEFAULT_OWNER_NRIC);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d new PetPatientName(DEFAULT_PET_PATIENT_NAME);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d LocalDateTime.parse(DEFAULT_DATE, formatter);"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        appointmentTags \u003d SampleDataUtil.getTagSet(DEFAULT_APPOINTMENT_TAG);"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}."},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d appointmentToCopy.getOwnerNric();"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d appointmentToCopy.getPetPatientName();"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        remark \u003d appointmentToCopy.getRemark();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        localDateTime \u003d appointmentToCopy.getDateTime();"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        appointmentTags \u003d new HashSet\u003c\u003e(appointmentToCopy.getAppointmentTags());"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Nric} of the person of the {@code Appointment} that we are building."},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withOwnerNric(String ownerNric) {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d new Nric(ownerNric);"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code PetPatientName} of the pet of the {@code Appointment} that we are building."},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withPetPatientName(String petPatientName) {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d new PetPatientName(petPatientName);"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"     * Parses the {@code appointmentTags} into a {@code Set\u003cTag\u003e}"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"     * and set it to the {@code Appointment} that we are building."},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withAppointmentTags(String ... appointmentTags) {"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d SampleDataUtil.getTagSet(appointmentTags);"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code Remark} of the {@code Appointment} that we are building."},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withRemark(String remark) {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"     * Sets the {@code DateTime} of the {@code Appointment} that we are building."},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    public AppointmentBuilder withDateTime(String stringDateTime) {"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(stringDateTime, formatter);"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d dateTime;"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    public Appointment build() {"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        return new Appointment(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":93,"-":4}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter twice."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean run_withAutocomplete(String command) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"     * Types text into the command box and sets caret at the end of text."},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"     * Overwrites previous input."},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    public void setText(String input) {"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(input));"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().positionCaret(getInput().length()));"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"     * Inserts text into command box."},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"    public void insertText(String input) {"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        int caretPos \u003d getRootNode().getCaretPosition();"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().insertText(caretPos, input));"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().positionCaret(caretPos + input.length()));"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"     * Sets the caret position in the command box to {@code index}."},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"    public void setCaretPosition(int index) {"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        guiRobot.interact(() -\u003e getRootNode().positionCaret(index));"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"     * Removes change listener for autocomplete, so that it will not interfere with JUnit System Tests."},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"    public void disableAutocomplete() {"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"        getRootNode().textProperty().removeListener(CommandBox.getAutocompleteListener());"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":33,"-":61}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"    private final PetPatientListPanelHandle petPatientListPanel;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    //private final BrowserPanelHandle browserPanel;"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDARPANEL_ID));"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListPanel \u003d new PetPatientListPanelHandle("},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"            getChildNode(PetPatientListPanelHandle.PETPATIENT_LIST_VIEW_ID));"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"        //browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"        return calendarPanel;"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientListPanelHandle getPetPatientListPanel() {"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"        return petPatientListPanel;"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"    //public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    //    return browserPanel;"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"    //}"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":23,"-":46}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":" *"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"    public static final String CALENDARPANEL_ID \u003d \"#calendarPlaceholder\";"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"    protected CalendarPanelHandle(Node calendarPanelNode) {"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"        super(calendarPanelNode);"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":16}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"                .findFirst()"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":""}],"authorContributionMap":{"Robert-Peng":8,"-":73}},{"path":"src/main/java/seedu/address/ui/PetPatientListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.events.ui.PetPatientPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":" * Panel containing list of PetPatients"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"    private static final String FXML \u003d \"PetPatientListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PetPatientListPanel.class);"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    private ListView\u003cPetPatientCard\u003e petPatientListView;"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientListPanel(ObservableList\u003cPetPatient\u003e petPatientList) {"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"        setConnections(petPatientList);"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"    private void setConnections(ObservableList\u003cPetPatient\u003e petPatientList) {"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"        ObservableList\u003cPetPatientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"            petPatientList, (petPatient) -\u003e new PetPatientCard(petPatient, petPatientList.indexOf(petPatient) + 1));"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListView.setCellFactory(listView -\u003e new PetPatientListViewCell());"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"            .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"                if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"                    logger.fine(\"Selection in petPatient list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"                    raise(new PetPatientPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"                }"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"            });"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"     * Scrolls to the {@code PetPatientCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"            petPatientListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"            petPatientListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PetPatientCard}."},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"    class PetPatientListViewCell extends ListCell\u003cPetPatientCard\u003e {"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"        protected void updateItem(PetPatientCard petPatient, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"            super.updateItem(petPatient, empty);"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"            if (empty || petPatient \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"                setGraphic(petPatient.getRoot());"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":88,"chialejing":1}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.geometry.Side;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ContextMenu;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static ChangeListener\u003cString\u003e autocompleteListener;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private ContextMenu suggestionBox;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private boolean isAutocompleting;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Autocomplete autocompleteLogic;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        suggestionBox \u003d new ContextMenu();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        commandTextField.setContextMenu(suggestionBox);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        autocompleteLogic \u003d Autocomplete.getInstance();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        autocompleteLogic.init(logic);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":57,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"content":"        //@@author aquarinte-reused"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /** Caret position bug fix from https://bugs.openjdk.java.net/browse/JDK-8088614 */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        autocompleteListener \u003d new ChangeListener\u003cString\u003e() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            public void changed(ObservableValue\u003c? extends String\u003e observable, String oldValue, String newValue) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                Platform.runLater(new Runnable() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    public void run() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                        triggerAutocomplete(newValue);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener(autocompleteListener);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        isAutocompleting \u003d true;"},{"lineNumber":73,"content":"        //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case F2:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            toggleAutocomplete();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            hideSuggestionBox();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":167,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"     * Toggles autocomplete on or off."},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"    private void toggleAutocomplete() {"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        if (isAutocompleting) {"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"            commandTextField.textProperty().removeListener(getAutocompleteListener());"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"            isAutocompleting \u003d false;"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"            hideSuggestionBox();"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"            logger.info(\"Autocomplete has been toggled [OFF]\");"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"            commandTextField.textProperty().addListener(getAutocompleteListener());"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"            isAutocompleting \u003d true;"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"            logger.info(\"Autocomplete has been toggled [ON]\");"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"    private void hideSuggestionBox() {"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        if (suggestionBox.isShowing()) {"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"            suggestionBox.hide();"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"     * Calls Autocomplete class to process commandTextField\u0027s content."},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"     * @param newValue New user input."},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"    private void triggerAutocomplete(String newValue) {"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        suggestionBox.getItems().clear();"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        if (!newValue.equals(\"\")) {"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d autocompleteLogic.getSuggestions(commandTextField);"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"            if (!suggestions.isEmpty()) {"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"                setContextMenu(suggestions);"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"     * Sets the context menu {@code suggestionBox} with autocomplete suggestions."},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"    private void setContextMenu(List\u003cString\u003e suggestions) {"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        for (String s : suggestions) {"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"            MenuItem m \u003d new MenuItem(s);"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"            String autocompleteValue \u003d StringUtil.removeDescription(s);"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"            m.setOnAction(event -\u003e handleAutocompleteSelection(autocompleteValue));"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"            suggestionBox.getItems().add(m);"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        suggestionBox.show(commandTextField, Side.BOTTOM, 0, 0);"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"     * Updates text in commandTextField with autocomplete selection {@code toAdd}."},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"     * Supports insertion of autocomplete selection in the middle of commandTextField."},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"     * user input: \u0027a\u0027, selected autocomplete \u0027add\u0027 --\u003e commandTextField will show \u0027add\u0027 and not \u0027aadd\u0027."},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"     * user input: \u0027nr/F012\u0027, selected autocomplete \u0027F0123456B\u0027 --\u003e commandTextField will show \u0027nr/F0123456B\u0027"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"     * and not \u0027nr/F012F0123456B\u0027."},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"    private void handleAutocompleteSelection(String toAdd) {"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"        int cursorPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"        int userInputLength \u003d commandTextField.getText().length();"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"        // .split() retains all whitespaces in array."},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        String[] words \u003d commandTextField.getText(0, cursorPosition).split(\"((?\u003c\u003d )|(?\u003d ))\", -1);"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"        String targetWord \u003d words[words.length - 1];"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        String restOfInput \u003d getRemainingInput(cursorPosition, userInputLength);"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        if (containsPrefix(targetWord)) {"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"            String[] splitByPrefix \u003d targetWord.split(\"/\");"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"            words[words.length - 1] \u003d splitByPrefix[0] + \"/\" + toAdd;"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"            words[words.length - 1] \u003d toAdd;"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"        String updatedInput \u003d String.join(\"\", words);"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"        int newCursorPosition \u003d updatedInput.length();"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"        commandTextField.setText(updatedInput + restOfInput);"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"        commandTextField.positionCaret(newCursorPosition);"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"     * Returns remaining text in {@code commandTextField} after {@code cursorPosition}, if any."},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"    private String getRemainingInput(int cursorPosition, int userInputLength) {"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        String restOfInput \u003d \"\";"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"        if (userInputLength \u003e cursorPosition + 1) {"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"            restOfInput \u003d commandTextField.getText(cursorPosition, commandTextField.getText().length());"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        return restOfInput;"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if {@code toCheck} contains a prefix or is a prefix."},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"    private boolean containsPrefix(String toCheck) {"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"        if (toCheck.contains(\"/\")) {"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"        } else if (toCheck.length() \u003e 0 \u0026\u0026 toCheck.substring(toCheck.length() - 1).equals(\"/\")) {"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"    public static ChangeListener getAutocompleteListener() {"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"        return autocompleteListener;"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"null":2,"Aquarinte":112,"-":187}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class that contains an {@code AddressBook} object to be used in tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class TypicalAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons, typical pet patients and typical appointments."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        for (Person person : TypicalPersons.getTypicalPersons()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            } catch (DuplicateNricException e) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Cannot have duplicate NRIC.\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        for (PetPatient petPatient : TypicalPetPatients.getTypicalPetPatients()) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ab.addPetPatient(petPatient);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            } catch (DuplicatePetPatientException e) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate pet patient.\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        for (Appointment appt : TypicalAppointments.getTypicalAppointments()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ab.addAppointment(appt);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate appointment.\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            } catch (DuplicateDateTimeException e) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Duplicate date time.\");"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"            } catch (ConcurrentAppointmentException e) {"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"                throw new AssertionError(\"Concurrent appointment.\");"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"            } catch (PastAppointmentException e) {"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"                throw new AssertionError(\"Past-date appointment.\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":6,"chialejing":2,"wynonaK":2,"-":47}},{"path":"src/main/java/seedu/address/ui/PetPatientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":" * AN UI component that displays the information of a {@code PetPatient}"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    private static final String FXML \u003d \"PetPatientListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\","},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"            \"black\", \"grey\"};"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    public final PetPatient petPatient;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"    private HBox cardPane;"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    private Label name;"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"    private Label id;"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"    private Label species;"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"    private Label breed;"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"    private Label colour;"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"    private Label bloodType;"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"    private Label ownerNric;"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCard(PetPatient petPatient, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"        name.setText(petPatient.getName().toString());"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"        species.setText(\"Species:\\t\\t\" + petPatient.getSpecies().toString());"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"        breed.setText(\"Breed:\\t\\t\" + petPatient.getBreed().toString());"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"        colour.setText(\"Colour:\\t\\t\" + petPatient.getColour().toString());"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"        bloodType.setText(\"Blood Type:\\t\" + petPatient.getBloodType().toString());"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"        ownerNric.setText(\"Owner NRIC:\\t\" + petPatient.getOwner().toString());"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"        createTags(petPatient);"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"     * Solution below adopted from :"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"     * Creates the tag labels for {@code PetPatient}."},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    private void createTags(PetPatient petPatient) {"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        petPatient.getTags().forEach(tag -\u003e {"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"        // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"        // instanceof handles nulls"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        if (!(other instanceof PetPatientCard)) {"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"            return false;"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"        // state check"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"        PetPatientCard card \u003d (PetPatientCard) other;"},{"lineNumber":91,"author":{"gitID":"Robert-Peng"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":92,"author":{"gitID":"Robert-Peng"},"content":"            \u0026\u0026 petPatient.equals(card.petPatient);"},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":85,"-":8}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/pawprint.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"        //mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":1,"-":118}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"//import com.calendarfx.view.CalendarView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"    private CalendarWindow calendarWindow;"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    //private BrowserPanel browserPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"    private PetPatientListPanel petPatientListPanel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    private StackPane petPatientListPanelPlaceholder;"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultTheme(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":"        //browserPanel \u003d new BrowserPanel();"},{"lineNumber":130,"author":{"gitID":"Robert-Peng"},"content":"        //@@author Robert-Peng"},{"lineNumber":131,"author":{"gitID":"Robert-Peng"},"content":"        calendarWindow \u003d new CalendarWindow(logic.getFilteredAppointmentList());"},{"lineNumber":132,"author":{"gitID":"Robert-Peng"},"content":"        this.calendarPlaceholder.getChildren().add(calendarWindow.getRoot());"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":134,"author":{"gitID":"Robert-Peng"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListPanel \u003d new PetPatientListPanel(logic.getFilteredPetPatientList());"},{"lineNumber":138,"author":{"gitID":"Robert-Peng"},"content":"        petPatientListPanelPlaceholder.getChildren().add(petPatientListPanel.getRoot());"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"        //@@author"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        getRoot().getScene().getStylesheets().add(prefs.getGuiSettings().getCurrentTheme());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"     * Sets the default theme based on user preferences."},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"    private void setWindowDefaultTheme(UserPrefs prefs) {"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(prefs.getGuiSettings().getCurrentTheme());"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"     * Returns the current size, position, and theme of the main Window."},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        ObservableList\u003cString\u003e cssFiles \u003d getRoot().getScene().getStylesheets();"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        assert cssFiles.size() \u003d\u003d 2 : \"There should only be 2 stylesheets used in main Window.\";"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        String theme \u003d cssFiles.stream().filter(c -\u003e !c.contains(\"/view/Extensions.css\")).findFirst().get();"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), theme);"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"    //@@author"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":218,"author":{"gitID":"Robert-Peng"},"content":"    /*void releaseResources() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":220,"author":{"gitID":"Robert-Peng"},"content":"    }*/"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"     * Changes the theme of Medeina."},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"    @Subscribe"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    public void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        String userSelectedTheme \u003d event.theme.getThemePath();"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        String userSelectedStyleSheet \u003d this.getClass().getResource(userSelectedTheme).toExternalForm();"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"        if (!hasStyleSheet(userSelectedStyleSheet)) {"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"            changeStyleSheet(userSelectedStyleSheet);"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"     * Checks whether {@code theme} is already in use by the application."},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"    public Boolean hasStyleSheet(String theme) {"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e styleSheetsInUsed \u003d getRoot().getScene().getStylesheets();"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        if (styleSheetsInUsed.contains(theme)) {"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"     * Removes all existing stylesheets and add the given {@code theme} to style sheets."},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"     * Re-adds Extensions.css to style sheets."},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"    public void changeStyleSheet(String theme) {"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"        String extensions \u003d this.getClass().getResource(\"/view/Extensions.css\").toExternalForm();"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().clear();"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        getRoot().getScene().getStylesheets().add(extensions); //re-add Extensions.css"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        boolean isChanged \u003d getRoot().getScene().getStylesheets().add(theme);"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"        assert isChanged \u003d\u003d true : \"Medeina\u0027s theme is not successfully changed.\";"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":58,"Robert-Peng":22,"-":184}},{"path":"src/main/java/seedu/address/ui/Autocomplete.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_APPOINTMENT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_OWNER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_PETPATIENT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.CliSyntax;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":" * Handles case-insensitive autocompletion of command line syntax,"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":" * and also some user input parameters: Nric, pet patient name, species, tags etc."},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"public class Autocomplete {"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Autocomplete.class);"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    private static final int MAX_SUGGESTION_COUNT \u003d CliSyntax.MAX_SYNTAX_SIZE;"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    private static Autocomplete instance;"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    private String trimmedCommandInput;"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    private String[] trimmedCommandInputArray;"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    private String commandWord;"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    private String option;"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    private String targetWord;"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    private Set\u003cString\u003e tagSet;"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"    public static Autocomplete getInstance() {"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"            instance \u003d new Autocomplete();"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"            EventsCenter.getInstance().registerHandler(instance);"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"        return instance;"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"     * Initalizes or updates data required for autocomplete."},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"    public void init(Logic logic) {"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        logic.setAttributesForPersonObjects();"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"        logic.setAttributesForPetPatientObjects();"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"        logic.setAttributesForAppointmentObjects();"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"     * Returns a list of suggestions for autocomplete based on user input (up to current caret position)."},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"     * @param commandTextField Command box that holds user input."},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"    public List\u003cString\u003e getSuggestions(TextField commandTextField) {"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"        int cursorPosition \u003d commandTextField.getCaretPosition();"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        trimmedCommandInput \u003d StringUtil.leftTrim(commandTextField.getText(0, cursorPosition));"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"        // split string, but retain all whitespaces in array \"trimmedCommandInputArray\""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"        trimmedCommandInputArray \u003d trimmedCommandInput.split(\"((?\u003c\u003d )|(?\u003d ))\", -1);"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        commandWord \u003d trimmedCommandInputArray[0];"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        targetWord \u003d trimmedCommandInputArray[trimmedCommandInputArray.length - 1].toLowerCase();"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"        setOption();"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"        if (trimmedCommandInputArray.length \u003c\u003d 2) {"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"            return getCommandWordSuggestions();"},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"        if (!targetWord.equals(\"\") \u0026\u0026 hasOptionsAndPrefixes()) {"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"            if (hasAddCommandReferNric() || hasEditCommandReferNric() || hasFindCommandReferNric()) {"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"                return getNricSuggestions();"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"            if (hasReferenceToExistingPetPatientNames()) {"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"                return getPetPatientNameSuggestions();"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(PREFIX_SPECIES.toString())) {"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"                return getPetPatientSpeciesSuggestions();"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(PREFIX_BREED.toString())) {"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"                return getPetPatientBreedSuggestions();"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(PREFIX_COLOUR.toString())) {"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"                return getPetPatientColourSuggestions();"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(PREFIX_BLOODTYPE.toString())) {"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"                return getPetPatientBloodTypeSuggestions();"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(PREFIX_TAG.toString())) {"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"                return getTagSuggestions();"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"            if (targetWord.startsWith(\"-\")) {"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"                return getOptionSuggestions();"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"            return getPrefixSuggestions();"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"            if (hasOptionsAndPrefixes()) {"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"                return getPrefixSuggestions();"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"        return new ArrayList\u003cString\u003e();"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"     * Returns false if the command is one that does not require any options or prefixes in its syntax."},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasOptionsAndPrefixes() {"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"        if (logic.getCommandWordsWithOptionPrefix().contains(commandWord)) {"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input {@code trimmedCommandInputArray} contains the \"add\" command with reference to existing"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"     * persons\u0027 Nric, and determine if autocomplete for persons\u0027 Nric is necessary."},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"     * Returns false if the command input is to add a new person."},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasAddCommandReferNric() {"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"        // adding a new owner will not have autocomplete for Nric"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"        if (commandWord.equals(AddCommand.COMMAND_WORD)"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 trimmedCommandInputArray[2].equals(OPTION_OWNER)) {"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        if (commandWord.equals(AddCommand.COMMAND_WORD)"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 trimmedCommandInputArray[trimmedCommandInputArray.length - 3].equals(OPTION_OWNER)"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 targetWord.startsWith(PREFIX_NRIC.toString())) {"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input {@code trimmedCommandInputArray} contains the \"edit\" command with reference to existing"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"     * persons\u0027 Nric, and determine if autocomplete for persons\u0027 Nric is necessary."},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if editing the owner\u0027s nric of a pet patient."},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasEditCommandReferNric() {"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        if (commandWord.equals(EditCommand.COMMAND_WORD)"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 option.equals(OPTION_PETPATIENT)"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 targetWord.startsWith(PREFIX_NRIC.toString())) {"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"     * Checks if command input {@code trimmedCommandInputArray} contains the \"find\" command with reference to existing"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"     * persons\u0027 Nric, and determine if autocomplete for persons\u0027 Nric is necessary."},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if finding a person by nric."},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasFindCommandReferNric() {"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"        if (commandWord.equals(FindCommand.COMMAND_WORD)"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 option.equals(OPTION_OWNER) \u0026\u0026 targetWord.startsWith(PREFIX_NRIC.toString())) {"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"     *Returns true if command input {@code trimmedCommandInput} is the syntax for adding a new appointment."},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasReferenceToExistingPetPatientNames() {"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"        final Pattern addNewAppointment \u003d Pattern.compile(AddCommand.COMMAND_WORD + \" -(a)+(?\u003capptInfo\u003e.*)\""},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"                + \"-(o)+(?\u003cownerNric\u003e.*)\" + \"-(p)+(?\u003cpetName\u003e.*)\");"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewAppt \u003d addNewAppointment.matcher(trimmedCommandInput);"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewAppt.matches()) {"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"     * Sets {@code option} based on the last option found in {@code trimmedCommandInput}."},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"    private void setOption() {"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        option \u003d \"nil\";"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"        int o \u003d trimmedCommandInput.lastIndexOf(OPTION_OWNER);"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        int p \u003d trimmedCommandInput.lastIndexOf(OPTION_PETPATIENT);"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"        int a \u003d trimmedCommandInput.lastIndexOf(OPTION_APPOINTMENT);"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"        int index \u003d (a \u003e p) ? a : p;"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        index \u003d (index \u003e o) ? index : o;"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        if (index \u003e -1 \u0026\u0026 (trimmedCommandInput.length() \u003e\u003d index + 2)) {"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"            option \u003d trimmedCommandInput.substring(index, index + 2); // (inclusive, exclusive)"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"     * Returns a string that contains the parameter part of {@code targetWord}."},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    private String getParameter() {"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"        String[] splitByPrefix \u003d targetWord.split(\"/\");"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"        String parameter \u003d splitByPrefix[1];"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"        return parameter;"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for tags."},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getTagSuggestions() {"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"        setTagListBasedOnOption();"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_TAG.toString())) {"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d tagSet"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"            String targetTag \u003d getParameter();"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d tagSet"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"                    .filter(t -\u003e t.toLowerCase().startsWith(targetTag) \u0026\u0026 !t.toLowerCase().equals(targetTag))"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"     * Sets {@code tagList} based on {@code option}."},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"     * -o option will set elements of {@code tagList} to be persons\u0027 tags."},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"     * -p option will set elements of {@code tagList} to be pet patients\u0027 tags."},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"     * -a option will set elements of {@code tagList} to be appointments\u0027 tags."},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"    private void setTagListBasedOnOption() {"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        switch(option) {"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"        case OPTION_OWNER:"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"            tagSet \u003d logic.getAllPersonTags();"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"            break;"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        case OPTION_PETPATIENT:"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"            tagSet \u003d logic.getAllPetPatientTags();"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"            break;"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        case OPTION_APPOINTMENT:"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"            tagSet \u003d logic.getAllAppointmentTags();"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"            break;"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"        default:"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"            tagSet \u003d logic.getAllTagsInModel();"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient names."},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPetPatientNameSuggestions() {"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_NAME.toString())) {"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientNames()"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"            String targetPetName \u003d getParameter();"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientNames()"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":"                    .filter(pn -\u003e pn.toLowerCase().startsWith(targetPetName) \u0026\u0026 !pn.toLowerCase().equals(targetPetName))"},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient species."},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPetPatientSpeciesSuggestions() {"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_SPECIES.toString())) {"},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientSpecies()"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"            String targetSpecies \u003d getParameter();"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientSpecies()"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":332,"author":{"gitID":"Aquarinte"},"content":"                    .filter(s -\u003e s.toLowerCase().startsWith(targetSpecies) \u0026\u0026 !s.toLowerCase().equals(targetSpecies))"},{"lineNumber":333,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":334,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":335,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":336,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":337,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":338,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":340,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient breeds."},{"lineNumber":342,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":343,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":344,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPetPatientBreedSuggestions() {"},{"lineNumber":345,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_BREED.toString())) {"},{"lineNumber":346,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientBreeds()"},{"lineNumber":347,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":348,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":349,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":350,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":351,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":352,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":353,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":354,"author":{"gitID":"Aquarinte"},"content":"            String targetBreed \u003d getParameter();"},{"lineNumber":355,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientBreeds()"},{"lineNumber":356,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":357,"author":{"gitID":"Aquarinte"},"content":"                    .filter(b -\u003e b.toLowerCase().startsWith(targetBreed) \u0026\u0026 !b.toLowerCase().equals(targetBreed))"},{"lineNumber":358,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":359,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":360,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":361,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":362,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":363,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":365,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":366,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient colours."},{"lineNumber":367,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":368,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPetPatientColourSuggestions() {"},{"lineNumber":370,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_COLOUR.toString())) {"},{"lineNumber":371,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientColours()"},{"lineNumber":372,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":373,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":374,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":375,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":376,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":377,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":378,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":379,"author":{"gitID":"Aquarinte"},"content":"            String targetPetColour \u003d getParameter();"},{"lineNumber":380,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientColours()"},{"lineNumber":381,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":382,"author":{"gitID":"Aquarinte"},"content":"                    .filter(c -\u003e c.toLowerCase().startsWith(targetPetColour)"},{"lineNumber":383,"author":{"gitID":"Aquarinte"},"content":"                            \u0026\u0026 !c.toLowerCase().equals(targetPetColour))"},{"lineNumber":384,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":385,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":386,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":387,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":388,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":389,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":391,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":392,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for pet patient blood types."},{"lineNumber":393,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":394,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":395,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPetPatientBloodTypeSuggestions() {"},{"lineNumber":396,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_BLOODTYPE.toString())) {"},{"lineNumber":397,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientBloodTypes()"},{"lineNumber":398,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":399,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":400,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":401,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":402,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":403,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":404,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":405,"author":{"gitID":"Aquarinte"},"content":"            String targetPetBloodType \u003d getParameter();"},{"lineNumber":406,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllPetPatientBloodTypes()"},{"lineNumber":407,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":408,"author":{"gitID":"Aquarinte"},"content":"                    .filter(bt -\u003e bt.toLowerCase().startsWith(targetPetBloodType)"},{"lineNumber":409,"author":{"gitID":"Aquarinte"},"content":"                            \u0026\u0026 !bt.toLowerCase().equals(targetPetBloodType))"},{"lineNumber":410,"author":{"gitID":"Aquarinte"},"content":"                    .sorted(String::compareToIgnoreCase)"},{"lineNumber":411,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":412,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":413,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":414,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":415,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":417,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":418,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for Nric."},{"lineNumber":419,"author":{"gitID":"Aquarinte"},"content":"     * List size conforms to max size {@code MAX_SUGGESTION_COUNT}."},{"lineNumber":420,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getNricSuggestions() {"},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"        if (targetWord.equals(PREFIX_NRIC.toString())) {"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllNric()"},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"            String targetNric \u003d getParameter().toUpperCase();"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"            List\u003cString\u003e suggestions \u003d logic.getAllNric()"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":"                    .stream()"},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"                    .filter(n -\u003e n.startsWith(targetNric) \u0026\u0026 !n.equals(targetNric))"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"                    .sorted()"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"                    .limit(MAX_SUGGESTION_COUNT)"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"            return suggestions;"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for prefixes."},{"lineNumber":444,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":445,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getPrefixSuggestions() {"},{"lineNumber":446,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllPrefixes()"},{"lineNumber":447,"author":{"gitID":"Aquarinte"},"content":"                .stream()"},{"lineNumber":448,"author":{"gitID":"Aquarinte"},"content":"                .filter(p -\u003e p.startsWith(targetWord) \u0026\u0026 !(StringUtil.removeDescription(p).equals(targetWord)))"},{"lineNumber":449,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":450,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":451,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":452,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":453,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":454,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":455,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for options."},{"lineNumber":456,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":457,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getOptionSuggestions() {"},{"lineNumber":458,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllOptions()"},{"lineNumber":459,"author":{"gitID":"Aquarinte"},"content":"                .stream()"},{"lineNumber":460,"author":{"gitID":"Aquarinte"},"content":"                .filter(o -\u003e o.startsWith(targetWord) \u0026\u0026 !(StringUtil.removeDescription(o).equals(targetWord)))"},{"lineNumber":461,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":462,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":463,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":464,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":465,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":466,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":467,"author":{"gitID":"Aquarinte"},"content":"     * Returns a sorted list of suggestions for command words."},{"lineNumber":468,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":469,"author":{"gitID":"Aquarinte"},"content":"    private List\u003cString\u003e getCommandWordSuggestions() {"},{"lineNumber":470,"author":{"gitID":"Aquarinte"},"content":"        List\u003cString\u003e suggestions \u003d logic.getAllCommandWords()"},{"lineNumber":471,"author":{"gitID":"Aquarinte"},"content":"                .stream()"},{"lineNumber":472,"author":{"gitID":"Aquarinte"},"content":"                .filter(c -\u003e c.startsWith(targetWord) \u0026\u0026 !c.equals(targetWord))"},{"lineNumber":473,"author":{"gitID":"Aquarinte"},"content":"                .sorted()"},{"lineNumber":474,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toList());"},{"lineNumber":475,"author":{"gitID":"Aquarinte"},"content":"        return suggestions;"},{"lineNumber":476,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":477,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":478,"author":{"gitID":"Aquarinte"},"content":"    @Subscribe"},{"lineNumber":479,"author":{"gitID":"Aquarinte"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent a) {"},{"lineNumber":480,"author":{"gitID":"Aquarinte"},"content":"        init(this.logic);"},{"lineNumber":481,"author":{"gitID":"Aquarinte"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(a, \"Local data has changed,\""},{"lineNumber":482,"author":{"gitID":"Aquarinte"},"content":"                + \" update autocomplete data\"));"},{"lineNumber":483,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":484,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":485,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":451,"-":34}},{"path":"src/main/java/seedu/address/ui/CalendarWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.time.temporal.WeekFields;"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"//import com.calendarfx.model.CalendarEvent;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.view.DayView;"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.view.DayViewBase;"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"import com.calendarfx.view.WeekView;"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"import javafx.application.Platform;"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"//import javafx.event.EventHandler;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeDayViewRequestEvent;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeMonthViewRequestEvent;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeWeekViewRequestEvent;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeYearViewRequestEvent;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"//import javafx.application.Application;"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"//import javafx.application.Platform;"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"//import javafx.scene.Scene;"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"//import javafx.stage.Stage;"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"//import java.time.Duration;"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"//import java.time.LocalDateTime;"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"//import java.time.ZoneId;"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.MainApp;"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.commons.core.LogsCenter;"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":" * Implement CalendarView from CalendarFX to show appointments"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"public class CalendarWindow extends UiPart\u003cRegion\u003e {"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    public static final String DEFAULT_PAGE \u003d \"CalendarPanel.fxml\";"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    private  ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"    private Calendar calendar;"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"    private CalendarView calendarView;"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"    private DayView dayView;"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    private WeekView weekView;"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"     * @param OwnerList"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"    public CalendarWindow(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"        super(DEFAULT_PAGE);"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"        this.appointmentList \u003d appointmentList;"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"        setView();"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":"        setTime();"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"        setCalendar();"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        disableViews();"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"    private void setView() {"},{"lineNumber":91,"author":{"gitID":"Robert-Peng"},"content":"        this.dayView \u003d calendarView.getDayPage().getDetailedDayView().getDayView();"},{"lineNumber":92,"author":{"gitID":"Robert-Peng"},"content":"        dayView.setHoursLayoutStrategy(DayViewBase.HoursLayoutStrategy.FIXED_HOUR_HEIGHT);"},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"        dayView.setHourHeight(250);"},{"lineNumber":94,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":"        this.weekView \u003d calendarView.getWeekPage().getDetailedWeekView().getWeekView();"},{"lineNumber":96,"author":{"gitID":"Robert-Peng"},"content":"        weekView.setHoursLayoutStrategy(DayViewBase.HoursLayoutStrategy.FIXED_HOUR_HEIGHT);"},{"lineNumber":97,"author":{"gitID":"Robert-Peng"},"content":"        weekView.setHourHeight(250);"},{"lineNumber":98,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":100,"author":{"gitID":"Robert-Peng"},"content":"    private void setTime() {"},{"lineNumber":101,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":103,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":104,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":106,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Robert-Peng"},"content":"     * Creates a new a calendar"},{"lineNumber":108,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Robert-Peng"},"content":"    private void setCalendar() {"},{"lineNumber":110,"author":{"gitID":"Robert-Peng"},"content":"        setTime();"},{"lineNumber":111,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.getCalendarSources().clear();"},{"lineNumber":112,"author":{"gitID":"Robert-Peng"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"Appointments\");"},{"lineNumber":113,"author":{"gitID":"Robert-Peng"},"content":"        int styleNumber \u003d 0;"},{"lineNumber":114,"author":{"gitID":"Robert-Peng"},"content":"        int appointmentCounter \u003d 0;"},{"lineNumber":115,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":116,"author":{"gitID":"Robert-Peng"},"content":"        for (Appointment appointment : appointmentList) {"},{"lineNumber":117,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":118,"author":{"gitID":"Robert-Peng"},"content":"            Calendar calendar \u003d createCalendar(styleNumber, appointment);"},{"lineNumber":119,"author":{"gitID":"Robert-Peng"},"content":"            calendar.setReadOnly(true);"},{"lineNumber":120,"author":{"gitID":"Robert-Peng"},"content":"            calendarSource.getCalendars().add(calendar);"},{"lineNumber":121,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":122,"author":{"gitID":"Robert-Peng"},"content":"            LocalDateTime ldt \u003d appointment.getDateTime();"},{"lineNumber":123,"author":{"gitID":"Robert-Peng"},"content":"            appointmentCounter++;"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":125,"author":{"gitID":"Robert-Peng"},"content":"            Entry entry \u003d new Entry (buildAppointment(appointment, appointmentCounter).toString());"},{"lineNumber":126,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":127,"author":{"gitID":"Robert-Peng"},"content":"            entry.setInterval(new Interval(ldt, ldt.plusMinutes(30)));"},{"lineNumber":128,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":"            styleNumber++;"},{"lineNumber":130,"author":{"gitID":"Robert-Peng"},"content":"            styleNumber \u003d styleNumber % 7;"},{"lineNumber":131,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":132,"author":{"gitID":"Robert-Peng"},"content":"            calendar.addEntry(entry);"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":134,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.getCalendarSources().add(calendarSource);"},{"lineNumber":136,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":138,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"Robert-Peng"},"content":"     * @param appointment"},{"lineNumber":141,"author":{"gitID":"Robert-Peng"},"content":"     * @param appointmentCounter"},{"lineNumber":142,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":143,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"Robert-Peng"},"content":"    private StringBuilder buildAppointment (Appointment appointment, int appointmentCounter) {"},{"lineNumber":145,"author":{"gitID":"Robert-Peng"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":146,"author":{"gitID":"Robert-Peng"},"content":"        builder.append(appointmentCounter)"},{"lineNumber":147,"author":{"gitID":"Robert-Peng"},"content":"            .append(\". \")"},{"lineNumber":148,"author":{"gitID":"Robert-Peng"},"content":"            .append(appointment.getPetPatientName().toString() + \"\\n\")"},{"lineNumber":149,"author":{"gitID":"Robert-Peng"},"content":"            .append(\"Contact Nric: \" + appointment.getOwnerNric() + \"\\n\")"},{"lineNumber":150,"author":{"gitID":"Robert-Peng"},"content":"            .append(\"Appointment type: \" + appointment.getTagString());"},{"lineNumber":151,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":152,"author":{"gitID":"Robert-Peng"},"content":"        builder.append(\"\\n\");"},{"lineNumber":153,"author":{"gitID":"Robert-Peng"},"content":"        builder.append(\"Remarks: \" + appointment.getRemark().toString());"},{"lineNumber":154,"author":{"gitID":"Robert-Peng"},"content":"        return builder;"},{"lineNumber":155,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":157,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"Robert-Peng"},"content":"     * @param styleNumber"},{"lineNumber":160,"author":{"gitID":"Robert-Peng"},"content":"     * @param appointment"},{"lineNumber":161,"author":{"gitID":"Robert-Peng"},"content":"     * @return a calendar with given info and corresponding style"},{"lineNumber":162,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Robert-Peng"},"content":"    private Calendar createCalendar(int styleNumber, Appointment appointment) {"},{"lineNumber":164,"author":{"gitID":"Robert-Peng"},"content":"        Calendar calendar \u003d new Calendar(appointment.getPetPatientName().toString());"},{"lineNumber":165,"author":{"gitID":"Robert-Peng"},"content":"        calendar.setStyle(Calendar.Style.getStyle(styleNumber));"},{"lineNumber":166,"author":{"gitID":"Robert-Peng"},"content":"        calendar.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":167,"author":{"gitID":"Robert-Peng"},"content":"        calendar.setLookBackDuration(Duration.ofDays(365));"},{"lineNumber":168,"author":{"gitID":"Robert-Peng"},"content":"        return calendar;"},{"lineNumber":169,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":171,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"Robert-Peng"},"content":"     * close unwanted UI components"},{"lineNumber":173,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":175,"author":{"gitID":"Robert-Peng"},"content":"    private void disableViews() {"},{"lineNumber":176,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":177,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":178,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":179,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":180,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":181,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":182,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":183,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.showDayPage();"},{"lineNumber":184,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":185,"author":{"gitID":"Robert-Peng"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":186,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":188,"author":{"gitID":"Robert-Peng"},"content":"    public CalendarView getRoot() {"},{"lineNumber":189,"author":{"gitID":"Robert-Peng"},"content":"        return this.calendarView;"},{"lineNumber":190,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":192,"author":{"gitID":"Robert-Peng"},"content":"    @Subscribe"},{"lineNumber":193,"author":{"gitID":"Robert-Peng"},"content":"    private void handleNewAppointmentEvent(AddressBookChangedEvent event) {"},{"lineNumber":194,"author":{"gitID":"Robert-Peng"},"content":"        appointmentList \u003d event.data.getAppointmentList();"},{"lineNumber":195,"author":{"gitID":"Robert-Peng"},"content":"        Platform.runLater("},{"lineNumber":196,"author":{"gitID":"Robert-Peng"},"content":"                this::setCalendar"},{"lineNumber":197,"author":{"gitID":"Robert-Peng"},"content":"        );"},{"lineNumber":198,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":199,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"    private void changeYearView(Year year) {"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"        calendarView.showYear(year);"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"    private void changeMonthView(YearMonth yearMonth) {"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"        calendarView.showYearMonth(yearMonth);"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"     * changes the week view based on {@code date}."},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"     * Does some particular checks (as weekFields give diff result from calendarFX),"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"     * to ensure that it runs smoothly."},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"    private void changeWeekView(LocalDate date) {"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"        WeekFields weekFields \u003d WeekFields.SUNDAY_START;"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"        int week \u003d date.get(weekFields.weekOfWeekBasedYear()) - 1;"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"        if (week \u003d\u003d 0 \u0026\u0026 date.getMonthValue() \u003d\u003d 12) {"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"            //wraparound"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"            week \u003d 52;"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"            calendarView.showWeek(Year.of(date.getYear()), week);"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        } else if (week \u003d\u003d 0 \u0026\u0026 date.getMonthValue() \u003d\u003d 1) {"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"            //wraparound"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"            LocalDate dateOfFirstJan \u003d LocalDate.of(date.getYear(), 1, 1);"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"            if (dateOfFirstJan.getDayOfWeek().getValue() !\u003d 7) {"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"                week \u003d 52;"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"                calendarView.showWeek(Year.of(date.getYear() - 1), week);"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"                week \u003d 53;"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"                calendarView.showWeek(Year.of(date.getYear() - 1), week);"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"            calendarView.showWeek(Year.of(date.getYear()), week);"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"    private void changeDayView(LocalDate date) {"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"        calendarView.showDate(date);"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"    @Subscribe"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"    private void handleChangeYearView(ChangeYearViewRequestEvent event) {"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"        Year year \u003d event.year;"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"        Platform.runLater(() -\u003e changeYearView(year));"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"    @Subscribe"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    private void handleChangeMonthView(ChangeMonthViewRequestEvent event) {"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        YearMonth yearMonth \u003d event.yearMonth;"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"        Platform.runLater(() -\u003e changeMonthView(yearMonth));"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"    @Subscribe"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"    private void handleChangeWeekView(ChangeWeekViewRequestEvent event) {"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        LocalDate date \u003d event.date;"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"        Platform.runLater(() -\u003e changeWeekView(date));"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"    @Subscribe"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"    private void handleChangeDayView(ChangeDayViewRequestEvent event) {"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"        LocalDate date \u003d event.date;"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"        Platform.runLater(() -\u003e changeDayView(date));"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":""}],"authorContributionMap":{"Robert-Peng":189,"wynonaK":76,"-":3}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\","},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"            \"black\", \"grey\"};"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    private Label nric;"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        phone.setText(\"Phone:\\t\\t\" + person.getPhone().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        address.setText(\"Address:\\t\\t\" + person.getAddress().value);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        nric.setText(\"NRIC:\\t\\t\" + person.getNric().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        email.setText(\"Email:\\t\\t\" + person.getEmail().value);"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"        createTags(person);"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"     * Solution below adopted from :"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"    private void createTags(Person person) {"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"        });"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":34,"-":67}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"    private String appTitle \u003d \"Medeina\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PARAMETER_FORMAT \u003d \"Please check your parameters for: %1$s\";"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_INVALID_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DEPENDENCIES_EXIST \u003d \"Relevant dependencies still exist!\";"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The contact index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX \u003d \"The pet patient index \""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"            + \"provided is invalid\";"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d \"The appointment index \""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"            + \"provided is invalid\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d contacts listed!\";"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_PET_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d pet patients listed!\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":4,"wynonaK":6,"-":11}},{"path":"src/test/java/guitests/guihandles/PetPatientCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":" * Provides a handle to a petPatient card in the petPatient list panel"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"    private static final String SPECIES_FIELD_ID \u003d \"#species\";"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"    private static final String BREED_FIELD_ID \u003d \"#breed\";"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"    private static final String COLOUR_FIELD_ID \u003d \"#colour\";"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    private static final String BLOODTYPE_FIELD_ID \u003d \"#bloodType\";"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"    private static final String OWNERNRIC_FIELD_ID \u003d \"#ownerNric\";"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"    private final Label idLabel;"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"    private final Label speciesLabel;"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"    private final Label breedLabel;"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    private final Label colourLabel;"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"    private final Label bloodTypeLabel;"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"    private final Label ownerNricLabel;"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCardHandle(Node cardNode) {"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"        super(cardNode);"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"        this.speciesLabel \u003d getChildNode(SPECIES_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"        this.breedLabel \u003d getChildNode(BREED_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"        this.colourLabel \u003d getChildNode(COLOUR_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"        this.bloodTypeLabel \u003d getChildNode(BLOODTYPE_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"        this.ownerNricLabel \u003d getChildNode(OWNERNRIC_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"            .getChildrenUnmodifiable()"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"            .stream()"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"            .map(Label.class::cast)"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"            .collect(Collectors.toList());"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"    public String getId() {"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"        return idLabel.getText();"},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"    public String getName() {"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"        return nameLabel.getText();"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    public String getSpecies() {"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"        return speciesLabel.getText();"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":"    public String getBreed() {"},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"        return breedLabel.getText();"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    public String getColour() {"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        return colourLabel.getText();"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"    public String getBloodType() {"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"        return  bloodTypeLabel.getText();"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"    public String getOwnerNric() {"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"        return ownerNricLabel.getText();"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"        return tagLabels"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":"            .stream()"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"            .map(Label::getText)"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"            .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"        return tagLabels"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"            .stream()"},{"lineNumber":91,"author":{"gitID":"Robert-Peng"},"content":"            .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":92,"author":{"gitID":"Robert-Peng"},"content":"            .map(Label::getStyleClass)"},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"            .findFirst()"},{"lineNumber":94,"author":{"gitID":"Robert-Peng"},"content":"            .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":97,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":88,"-":9}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final Pattern STRING_LEFT_TRIM \u003d Pattern.compile(\"^\\\\s+\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"     * Returns the actual required value of a String. Removes description (starts with \"\\t:\")."},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"    public static String removeDescription(String s) {"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"        int descriptionStart \u003d s.indexOf(\"\\t:\");"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"        if (descriptionStart \u003e 0) {"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"            return s.substring(0, descriptionStart);"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        return s;"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte-reused"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns a string with trailing whitespaces on the left removed."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Reused from: http://tutorial4java.blogspot.sg/2013/05/trim-ltrim-and-rtrim-in-java.html"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static String leftTrim(String s) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return STRING_LEFT_TRIM.matcher(s).replaceAll(\"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Aquarinte":15,"-":83}},{"path":"src/test/java/guitests/guihandles/PetPatientListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.ui.PetPatientCard;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":" * Provides a handle for {@code PetPatientListPanel} containing the list of {@code PetPatientCard}."},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientListPanelHandle extends NodeHandle\u003cListView\u003cPetPatientCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    public static final String PETPATIENT_LIST_VIEW_ID \u003d \"#petPatientListView\";"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    private Optional\u003cPetPatientCard\u003e lastRememberedSelectedPetPatientCard;"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientListPanelHandle(ListView\u003cPetPatientCard\u003e petPatientListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"        super(petPatientListPanelNode);"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"     * Returns a handle to the selected {@code PetPatientCardHandle}."},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cPetPatientCard\u003e petPatientList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"        if (petPatientList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"            throw new AssertionError(\"PetPatient list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"        return new PetPatientCardHandle(petPatientList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cPetPatientCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"     * Navigates the listview to display and select the petPatient."},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"    public void navigateToCard(PetPatient petPatient) {"},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cPetPatientCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"        Optional\u003cPetPatientCard\u003e matchingCard \u003d cards.stream().filter("},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"            card -\u003e card.petPatient.equals(petPatient)).findFirst();"},{"lineNumber":65,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":66,"author":{"gitID":"Robert-Peng"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":67,"author":{"gitID":"Robert-Peng"},"content":"            throw new IllegalArgumentException(\"PetPatient does not exist.\");"},{"lineNumber":68,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":71,"author":{"gitID":"Robert-Peng"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"Robert-Peng"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"        });"},{"lineNumber":74,"author":{"gitID":"Robert-Peng"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":75,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":77,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the petPatient card handle of a petPatient associated with the {@code index} in the list."},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCardHandle getPetPatientCardHandle(int index) {"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"        return getPetPatientCardHandle(getRootNode().getItems().get(index).petPatient);"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the {@code PetPatientCardHandle} of the specified {@code petPatient} in the list."},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCardHandle getPetPatientCardHandle(PetPatient petPatient) {"},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"        Optional\u003cPetPatientCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"            .filter(card -\u003e card.petPatient.equals(petPatient))"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"            .map(card -\u003e new PetPatientCardHandle(card.getRoot()))"},{"lineNumber":91,"author":{"gitID":"Robert-Peng"},"content":"            .findFirst();"},{"lineNumber":92,"author":{"gitID":"Robert-Peng"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"PetPatient does not exist.\"));"},{"lineNumber":93,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"Robert-Peng"},"content":"     * Selects the {@code PetPatientCard} at {@code index} in the list."},{"lineNumber":97,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Robert-Peng"},"content":"    public void select(int index) {"},{"lineNumber":99,"author":{"gitID":"Robert-Peng"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":100,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Robert-Peng"},"content":"     * Remembers the selected {@code PetPatientCard} in the list."},{"lineNumber":104,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"Robert-Peng"},"content":"    public void rememberSelectedPetPatientCard() {"},{"lineNumber":106,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cPetPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":107,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":108,"author":{"gitID":"Robert-Peng"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":109,"author":{"gitID":"Robert-Peng"},"content":"            lastRememberedSelectedPetPatientCard \u003d Optional.empty();"},{"lineNumber":110,"author":{"gitID":"Robert-Peng"},"content":"        } else {"},{"lineNumber":111,"author":{"gitID":"Robert-Peng"},"content":"            lastRememberedSelectedPetPatientCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":112,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":115,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Robert-Peng"},"content":"     * Returns true if the selected {@code PetPatientCard} is different from the value remembered by the most recent"},{"lineNumber":117,"author":{"gitID":"Robert-Peng"},"content":"     * {@code rememberSelectedPetPatientCard()} call."},{"lineNumber":118,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Robert-Peng"},"content":"    public boolean isSelectedPetPatientCardChanged() {"},{"lineNumber":120,"author":{"gitID":"Robert-Peng"},"content":"        List\u003cPetPatientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":121,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":122,"author":{"gitID":"Robert-Peng"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitID":"Robert-Peng"},"content":"            return lastRememberedSelectedPetPatientCard.isPresent();"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"Robert-Peng"},"content":"            return !lastRememberedSelectedPetPatientCard.isPresent()"},{"lineNumber":126,"author":{"gitID":"Robert-Peng"},"content":"                || !lastRememberedSelectedPetPatientCard.get().equals(selectedItems.get(0));"},{"lineNumber":127,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":130,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"Robert-Peng"},"content":"     * Returns the size of the list."},{"lineNumber":132,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"Robert-Peng"},"content":"    public int getListSize() {"},{"lineNumber":134,"author":{"gitID":"Robert-Peng"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":130,"-":6}},{"path":"src/main/java/seedu/address/commons/events/ui/PetPatientPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.ui.PetPatientCard;"},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":" * Represents a selection change in the PetPatient list Panel"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"public class PetPatientPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"    private final PetPatientCard newSelection;"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientPanelSelectionChangedEvent(PetPatientCard newSelection) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"    public PetPatientCard getNewSelection() {"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"        return newSelection;"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":13,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":7,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Aquarinte"},"content":" * Indicates a request to change Medeina\u0027s theme"},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":"    public final Theme theme;"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeRequestEvent(Theme theme) {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":16,"-":5}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeYearViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Indicates a request to change to the year view of the year requested."},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class ChangeYearViewRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public final Year year;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public ChangeYearViewRequestEvent(Year year) {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        this.year \u003d year;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":21,"-":2}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"                + \", number of appointments \" + data.getAppointmentList().size()"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"                + \", number of pet patients \" + data.getPetPatientList().size();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":3,"wynonaK":1,"-":18}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeWeekViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Indicates a request to change to the week view of the date requested."},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class ChangeWeekViewRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public final LocalDate date;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public ChangeWeekViewRequestEvent(LocalDate date) {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":21,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeDayViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Indicates a request to change to the day view of the date requested."},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class ChangeDayViewRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public final LocalDate date;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public ChangeDayViewRequestEvent(LocalDate date) {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":21,"-":2}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    /** Returns an unmodifiable view of the filtered list of petPatients */"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"    ObservableList\u003cPetPatient\u003e getFilteredPetPatientList();"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"    /** Returns an unmodifiable view of the filtered list of Appointments */"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /** Processes and sets attributes for pet patients objects. */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    void setAttributesForPetPatientObjects();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /** Processes and sets attributes for person objects. */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void setAttributesForPersonObjects();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Processes and sets attributes for appointment. */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    void setAttributesForAppointmentObjects();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Returns a set of all command words. */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllCommandWords();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /** Returns a set of command words that require prefixes and options in syntax */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getCommandWordsWithOptionPrefix();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns a set of all prefixes. */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPrefixes();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /** Returns a set of all options used in command syntax. */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllOptions();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /** Returns a set of all Nric found in model. */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllNric();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient names found in model. */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientNames();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient species found in model. */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientSpecies();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient breeds found in model. */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientBreeds();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient colours found in model. */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientColours();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patient blood types found in model. */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientBloodTypes();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /** Returns a set of all persons\u0027 tags found in model. */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPersonTags();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /** Returns a set of all pet patients\u0027 tags found in model. */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllPetPatientTags();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /** Returns a set of all appointments\u0027 tags found in model. */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllAppointmentTags();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /** Returns a set of all tags (persons\u0027, pet patients\u0027 \u0026 appointments\u0027) found in model. */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    Set\u003cString\u003e getAllTagsInModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":1,"Robert-Peng":6,"wynonaK":1,"-":81}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeMonthViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Indicates a request to change to the yearmonth view of the yearmonth requested."},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class ChangeMonthViewRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public final YearMonth yearMonth;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"    public ChangeMonthViewRequestEvent(YearMonth yearMonth) {"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"        this.yearMonth \u003d yearMonth;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"}"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":""}],"authorContributionMap":{"wynonaK":22,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_OWNER \u003d Pattern.compile(\"-(o)+(?\u003cindex\u003e.*)\");"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cindex\u003e.*)\");"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_APPOINTMENT \u003d Pattern.compile(\"-(a)+(?\u003cindex\u003e.*)\");"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_FORCE_OWNER \u003d Pattern.compile(\"-(fo)+(?\u003cindex\u003e.*)\");"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT \u003d Pattern.compile(\"-(fp)+(?\u003cindex\u003e.*)\");"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     * type changes depending on what pattern it matches"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForOwner \u003d DELETE_COMMAND_FORMAT_OWNER.matcher(trimmedArgs);"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        if (matcherForOwner.matches()) {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 1;"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForOwner.group(\"index\"));"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_OWNER));"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPetPatient \u003d DELETE_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        if (matcherForPetPatient.matches()) {"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 2;"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForPetPatient.group(\"index\"));"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_PET_PATIENT));"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForAppointment \u003d DELETE_COMMAND_FORMAT_APPOINTMENT.matcher(trimmedArgs);"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        if (matcherForAppointment.matches()) {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 3;"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForAppointment.group(\"index\"));"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_APPOINTMENT));"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForForceOwner \u003d DELETE_COMMAND_FORMAT_FORCE_OWNER.matcher(trimmedArgs);"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        if (matcherForForceOwner.matches()) {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 4;"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForForceOwner.group(\"index\"));"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_OWNER));"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForForcePetPatient \u003d DELETE_COMMAND_FORMAT_FORCE_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        if (matcherForForcePetPatient.matches()) {"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 5;"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                Index index \u003d ParserUtil.parseIndex(matcherForForcePetPatient.group(\"index\"));"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"                return new DeleteCommand(type, index);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_FORCE_PET_PATIENT));"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":86,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        case ListAppointmentCommand.COMMAND_ALIAS:"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        case ListAppointmentCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            return new ListAppointmentCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_ALIAS:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_ALIAS:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":1,"wynonaK":4,"-":109}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PARAMETER_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":" * Parses input arguments and creates a new AddCommand object."},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_ALL_NEW \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"        + \"-(p)+(?\u003cpetInfo\u003e.*)-(a)+(?\u003capptInfo\u003e.*)\");"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_OWNER_ONLY \u003d Pattern.compile(\"-(o)+(?\u003cownerInfo\u003e.*)\");"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_NEW_PET_EXISTING_OWNER \u003d Pattern.compile(\"-(p)+(?\u003cpetInfo\u003e.*)\""},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"        + \"-(o)+(?\u003cownerNric\u003e.*)\");"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    private static final Pattern ADD_COMMAND_FORMAT_NEW_APPT_EXISTING_OWNER_PET \u003d Pattern.compile(\"-(a)+(?\u003capptInfo\u003e.*)\""},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"        + \"-(o)+(?\u003cownerNric\u003e.*)\" + \"-(p)+(?\u003cpetName\u003e.*)\");"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Person class"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"     * and returns an Person object."},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"    public Person parsePerson(String ownerInfo) throws ParseException {"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimapOwner \u003d"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"            ArgumentTokenizer.tokenize(ownerInfo, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"                PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimapOwner, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC)"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"            || !argMultimapOwner.getPreamble().isEmpty()) {"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_PERSON));"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"            Name ownerName \u003d ParserUtil.parseName(argMultimapOwner.getValue(PREFIX_NAME)).get();"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimapOwner.getValue(PREFIX_PHONE)).get();"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimapOwner.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimapOwner.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimapOwner.getValue(PREFIX_NRIC)).get();"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e ownerTagList \u003d ParserUtil.parseTags(argMultimapOwner.getAllValues(PREFIX_TAG));"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"            Person owner \u003d new Person(ownerName, phone, email, address, nric, ownerTagList);"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"            return owner;"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Appointment class"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"     * and returns an Appointment object."},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"    public Appointment parseAppointment(String apptInfo) throws ParseException {"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"            ArgumentTokenizer.tokenize(apptInfo, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG)"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"            || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"                String.format(MESSAGE_INVALID_PARAMETER_FORMAT, AddCommand.MESSAGE_ERROR_APPOINTMENT));"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"            LocalDateTime localDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"            if (localDateTime.isBefore(LocalDateTime.now())) {"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"                throw new PastAppointmentException();"},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK)).get();"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e type \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"            Appointment appointment \u003d new Appointment(remark, localDateTime, type);"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"            return appointment;"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the PetPatient class"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"     * and returns an PetPatient object."},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    public PetPatient parsePetPatient(String petInfo) throws ParseException {"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"            ArgumentTokenizer.tokenize(petInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED, PREFIX_COLOUR,"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"                PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent("},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"            argMultimap, PREFIX_NAME, PREFIX_BREED, PREFIX_SPECIES, PREFIX_COLOUR, PREFIX_BLOODTYPE)"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"            || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"                    AddCommand.MESSAGE_ERROR_PETPATIENT));"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"            PetPatientName name \u003d ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"            Species species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES)).get();"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"            Breed breed \u003d ParserUtil.parseBreed(argMultimap.getValue(PREFIX_BREED)).get();"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"            Colour color \u003d ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR)).get();"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"            BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE)).get();"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"            PetPatient petPatient \u003d new PetPatient(name, species, breed, color, bloodType, tagList);"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"            return petPatient;"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the Nric class"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"     * and returns a Nric object."},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"    public Nric parseNric(String nric) throws ParseException {"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(nric, PREFIX_NRIC);"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_NRIC_PREFIX));"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"            Nric validNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).get();"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"            return validNric;"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the PetPatientName class"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"     * and returns a PetPatientName object."},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"    public PetPatientName parsePetPatientName(String petName) throws ParseException {"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(petName, PREFIX_NAME);"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_PARAMETER_FORMAT,"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"                AddCommand.MESSAGE_MISSING_PET_PATIENT_NAME_PREFIX));"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"            PetPatientName petPatientName \u003d ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"            return petPatientName;"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewOwnerPetAppt(String ownerInfo, String petInfo, String apptInfo)"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"        throws ParseException {"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"        PetPatient petPatient \u003d parsePetPatient(petInfo);"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        petPatient.setOwnerNric(owner.getNric());"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d parseAppointment(apptInfo);"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        appt.setOwnerNric(owner.getNric());"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"        appt.setPetPatientName(petPatient.getName());"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(owner, petPatient, appt);"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewApptforExistingOwnerAndPet(String apptInfo, String ownerNric, String petName)"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        throws ParseException {"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"        Appointment appt \u003d parseAppointment(apptInfo);"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d parseNric(ownerNric);"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"        PetPatientName petPatientName \u003d parsePetPatientName(petName);"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"        appt.setOwnerNric(nric);"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        appt.setPetPatientName(petPatientName);"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(appt, nric, petPatientName);"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand createNewPetForExistingPerson(String petInfo, String ownerNric) throws ParseException {"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"        PetPatient petPatient \u003d parsePetPatient(petInfo);"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":"        Nric nric \u003d parseNric(ownerNric);"},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"        petPatient.setOwnerNric(nric);"},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(petPatient, nric);"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    private AddCommand parseNewOwnerOnly(String ownerInfo) throws ParseException {"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"        Person owner \u003d parsePerson(ownerInfo);"},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"        return new AddCommand(owner);"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of AddCommand"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"     * and returns an AddCommand object."},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"        //to add a new person (owner), new pet patient, and a new appointment"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForAllNew \u003d ADD_COMMAND_FORMAT_ALL_NEW.matcher(trimmedArgs);"},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForAllNew.matches()) {"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"            String ownerInfo \u003d matcherForAllNew.group(\"ownerInfo\");"},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"            String petInfo \u003d matcherForAllNew.group(\"petInfo\");"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"            String apptInfo \u003d matcherForAllNew.group(\"apptInfo\");"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"            return createNewOwnerPetAppt(ownerInfo, petInfo, apptInfo);"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        //add a new appointment for existing person and pet patient"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewAppt \u003d ADD_COMMAND_FORMAT_NEW_APPT_EXISTING_OWNER_PET.matcher(trimmedArgs);"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewAppt.matches()) {"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":"            String apptInfo \u003d matcherForNewAppt.group(\"apptInfo\");"},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"            String ownerNric \u003d matcherForNewAppt.group(\"ownerNric\");"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"            String petName \u003d matcherForNewAppt.group(\"petName\");"},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"            return createNewApptforExistingOwnerAndPet(apptInfo, ownerNric, petName);"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"        //add a new patient to an existing owner"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewPet \u003d ADD_COMMAND_FORMAT_NEW_PET_EXISTING_OWNER.matcher(trimmedArgs);"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewPet.matches()) {"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"            String petInfo \u003d matcherForNewPet.group(\"petInfo\");"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"            String ownerNric \u003d matcherForNewPet.group(\"ownerNric\");"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"            return createNewPetForExistingPerson(petInfo, ownerNric);"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        //add a new person"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"        final Matcher matcherForNewPerson \u003d ADD_COMMAND_FORMAT_OWNER_ONLY.matcher(trimmedArgs);"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"        if (matcherForNewPerson.matches()) {"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":"            String ownerInfo \u003d matcherForNewPerson.group(\"ownerInfo\");"},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"            return parseNewOwnerOnly(ownerInfo);"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":270,"Robert-Peng":3,"chialejing":6,"wynonaK":2,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import java.util.HashMap;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Matcher;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Pattern;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"//@@Author wynonaK"},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern FIND_COMMAND_FORMAT_OWNER \u003d Pattern.compile(\"-(o)+(?\u003cpersonInfo\u003e.*)\");"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern FIND_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cpetPatientInfo\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"     * and returns an FindCommand object for execution. Currently acceptable formats are:"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"     * find -o n/ nr/ t/ (inclusive of individual and all combinations)"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     * find -p n/ s/ b/ c/ bt/ t/ (inclusive of individual and all combinations)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPerson \u003d FIND_COMMAND_FORMAT_OWNER.matcher(trimmedArgs);"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForPetPatient \u003d FIND_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        // Eind-owner related, else find-pet related, else error"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        if (matcherForPerson.matches()) {"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            String personInfo \u003d matcherForPerson.group(\"personInfo\");"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"            return parsePerson(personInfo);"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        } else if (matcherForPetPatient.matches()) {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"            String petPatientInfo \u003d matcherForPetPatient.group(\"petPatientInfo\");"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            return parsePetPatient(petPatientInfo);"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":66,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code personInfo} to find out what the user is parsing to find."},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if the {@code personInfo} cannot be identified to a known prefix."},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    private FindCommand parsePerson(String personInfo) throws ParseException {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        ArgumentMultimap argMultimapOwner \u003d"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                ArgumentTokenizer.tokenize(personInfo, PREFIX_NAME, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        if ((!arePrefixesPresent(argMultimapOwner, PREFIX_NAME)"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapOwner, PREFIX_NRIC)"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapOwner, PREFIX_TAG)"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"                || !argMultimapOwner.getPreamble().isEmpty())) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e finalHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_NAME))) {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d getNameKeyword(argMultimapOwner);"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"ownerName\", nameKeywords);"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_NRIC))) {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"            String[] nricKeywords \u003d getNricKeyword(argMultimapOwner);"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"ownerNric\", nricKeywords);"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapOwner, PREFIX_TAG))) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d getTagKeyword(argMultimapOwner);"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"ownerTag\", tagKeywords);"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        return new FindCommand(finalHashMap);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"     * Gets the nric keywords from {@code argMultimap}."},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    private String[] getTagKeyword(ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"            String tagWithoutPrefix \u003d argMultimap.getAllValues(PREFIX_TAG).get(0);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d tagWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"            for (String tagKeyword : tagKeywords) {"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                Tag tag \u003d ParserUtil.parseTag(tagKeyword);"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            return tagKeywords;"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"     * Gets the nric keywords from {@code argMultimapOwner}."},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"    private String[] getNricKeyword(ArgumentMultimap argMultimapOwner) throws ParseException {"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"            String nricWithoutPrefix \u003d argMultimapOwner.getAllValues(PREFIX_NRIC).get(0);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"            String[] nricKeywords \u003d nricWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"            for (String nricKeyword : nricKeywords) {"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"                Nric nric \u003d ParserUtil.parseNric(nricKeyword);"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"            return nricKeywords;"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"     * Gets the name keywords from {@code argMultimapOwner}."},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"    private String[] getNameKeyword(ArgumentMultimap argMultimapOwner) throws ParseException {"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"            String nameWithoutPrefix \u003d argMultimapOwner.getAllValues(PREFIX_NAME).get(0);"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d nameWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"            for (String nameKeyword : nameKeywords) {"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"                Name name \u003d ParserUtil.parseName(nameKeyword);"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"            return nameKeywords;"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"     * Gets the name keywords from {@code argMultimapPetPatient}."},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"    private String[] getPetPatientNameKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"            String nameWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_NAME).get(0);"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d nameWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"            for (String nameKeyword : nameKeywords) {"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"                PetPatientName name \u003d ParserUtil.parsePetPatientName(nameKeyword);"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"            return nameKeywords;"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"     * Gets the species keywords from {@code argMultimapPetPatient}"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"    private String[] getSpeciesKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"            String speciesWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_SPECIES).get(0);"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"            String[] speciesKeywords \u003d speciesWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"            for (String speciesKeyword : speciesKeywords) {"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"                Species species \u003d ParserUtil.parseSpecies(speciesKeyword);"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"            return speciesKeywords;"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"     * Gets the breed keywords from {@code argMultimapPetPatient}."},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"    private String[] getBreedKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"            String breedWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_BREED).get(0);"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"            String[] breedKeywords \u003d breedWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"            for (String breedKeyword : breedKeywords) {"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"                Breed breed \u003d ParserUtil.parseBreed(breedKeyword);"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"            return breedKeywords;"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"     * Gets the color keywords from {@code argMultimapPetPatient}."},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"    private String[] getColourKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"            String colourWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_COLOUR).get(0);"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"            String[] colourKeywords \u003d colourWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"            for (String colourKeyword : colourKeywords) {"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"                Colour colour \u003d ParserUtil.parseColour(colourKeyword);"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"            return colourKeywords;"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"     * Gets the blood type keywords from {@code argMultimapPetPatient}."},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if there is an illegal value found."},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"    private String[] getBloodTypeKeyword(ArgumentMultimap argMultimapPetPatient) throws ParseException {"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"            String bloodTypeWithoutPrefix \u003d argMultimapPetPatient.getAllValues(PREFIX_BLOODTYPE).get(0);"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"            String[] bloodTypeKeywords \u003d bloodTypeWithoutPrefix.trim().split(\"\\\\s+\");"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"            for (String bloodTypeKeyword : bloodTypeKeywords) {"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"                BloodType bloodType \u003d ParserUtil.parseBloodType(bloodTypeKeyword);"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"            return bloodTypeKeywords;"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code petPatientInfo} to find out what the user is parsing to find."},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    private FindCommand parsePetPatient(String petPatientInfo) throws ParseException, IllegalArgumentException {"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        ArgumentMultimap argMultimapPetPatient \u003d"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"                ArgumentTokenizer.tokenize(petPatientInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED,"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"                        PREFIX_COLOUR, PREFIX_BLOODTYPE, PREFIX_TAG);"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        if ((!arePrefixesPresent(argMultimapPetPatient, PREFIX_NAME)"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_SPECIES)"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_BREED)"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_COLOUR)"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_BLOODTYPE)"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimapPetPatient, PREFIX_TAG)"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"                || !argMultimapPetPatient.getPreamble().isEmpty())) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":264,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"        HashMap\u003cString, String[]\u003e finalHashMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_NAME))) {"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d getPetPatientNameKeyword(argMultimapPetPatient);"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petName\", nameKeywords);"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_SPECIES))) {"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"            String[] speciesKeywords \u003d getSpeciesKeyword(argMultimapPetPatient);"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petSpecies\", speciesKeywords);"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_BREED))) {"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"            String[] breedKeywords \u003d getBreedKeyword(argMultimapPetPatient);"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petBreed\", breedKeywords);"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_COLOUR))) {"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"            String[] colourKeywords \u003d getColourKeyword(argMultimapPetPatient);"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petColour\", colourKeywords);"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_BLOODTYPE))) {"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"            String[] bloodTypeKeywords \u003d getBloodTypeKeyword(argMultimapPetPatient);"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petBloodType\", bloodTypeKeywords);"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"        if ((arePrefixesPresent(argMultimapPetPatient, PREFIX_TAG))) {"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d getTagKeyword(argMultimapPetPatient);"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"            finalHashMap.put(\"petTag\", tagKeywords);"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"        return new FindCommand(finalHashMap);"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":262,"-":39}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.text.DateFormat;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.text.ParseException;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.DateTimeException;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":38,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"     * First character of each word will be set to upper case."},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"     * All other characters will be set to lower case."},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"        String[] wordsInName \u003d trimmedName.split(\" \");"},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"        StringBuilder formattedName \u003d new StringBuilder();"},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"        for (String n : wordsInName) {"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"            formattedName \u003d formattedName.append(n.substring(0, 1).toUpperCase())"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"                    .append(n.substring(1).toLowerCase()).append(\" \");"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"        return new Name(formattedName.toString().trim());"},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"        String[] wordsInAddress \u003d trimmedAddress.split(\" \");"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"        StringBuilder formattedAddress \u003d new StringBuilder();"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        for (String s : wordsInAddress) {"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"            formattedAddress \u003d formattedAddress"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(0, 1).toUpperCase())"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(1).toLowerCase())"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"                    .append(\" \");"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"        return new Address(formattedAddress.toString().trim());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String remark} into an {@code Remark}."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code remark} is invalid."},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"    public static Remark parseRemark(String remark) throws IllegalValueException {"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"        String trimmedRemark \u003d remark.trim();"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        if (!Remark.isValidRemark(trimmedRemark)) {"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        return new Remark(trimmedRemark);"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code Optional\u003cString\u003e remark} into an {@code Optional\u003cRemark\u003e} if {@code remark} is present."},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cRemark\u003e parseRemark(Optional\u003cString\u003e remark) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        return remark.isPresent() ? Optional.of(parseRemark(remark.get())) : Optional.empty();"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime} object."},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code dateTime} is invalid."},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws IllegalValueException {"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"        dateTime \u003d dateTime.trim();"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"            String[] dateTimeArray \u003d dateTime.split(\"\\\\s+\");"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"            DateFormat df \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"            df.setLenient(false);"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"            df.parse(dateTimeArray[0]);"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        } catch (ParseException e) {"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid date and time based on the format yyyy-MM-dd HH:mm!\");"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime localDateTime \u003d null;"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid date and time based on the format yyyy-MM-dd HH:mm!\");"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e dateTime} into an {@code Optional\u003cLocalDateTime\u003e} if {@code dateTime} is present."},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cLocalDateTime\u003e parseDateTime(Optional\u003cString\u003e dateTime) throws IllegalValueException {"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(dateTime);"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"        return dateTime.isPresent() ? Optional.of(parseDateTime(dateTime.get())) : Optional.empty();"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String date} into an {@code LocalDate} object."},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code dateTime} is invalid."},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"    public static LocalDate parseDate(String date) throws IllegalValueException {"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        LocalDate localDate \u003d null;"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"        date \u003d date.trim();"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"        if (date.isEmpty()) {"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"            localDate \u003d LocalDate.now();"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"            return localDate;"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"            df.setLenient(false);"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"            df.parse(date);"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"            localDate \u003d LocalDate.parse(date, formatter);"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"        } catch (ParseException | DateTimeParseException e) {"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid date based on the format yyyy-MM-dd!\");"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"        return localDate;"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e date} into an {@code Optional\u003cLocalDate\u003e} if {@code date} is present."},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cLocalDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(date);"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String stringYear} into an {@code Year} object."},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code stringYear} is invalid."},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"    public static Year parseYear(String stringYear) throws IllegalValueException {"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"        Year year \u003d null;"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"yyyy\");"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy\");"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"        stringYear \u003d stringYear.trim();"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"        if (stringYear.isEmpty()) {"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"            year \u003d Year.now();"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"            return year;"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"            df.setLenient(false);"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"            df.parse(stringYear);"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"            year \u003d Year.parse(stringYear, formatter);"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"        } catch (ParseException | DateTimeParseException e) {"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid year based on the format yyyy!\");"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        return year;"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e month} into an {@code Optional\u003cYear\u003e} if {@code year} is present."},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cYear\u003e parseYear(Optional\u003cString\u003e year) throws IllegalValueException {"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(year);"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"        return year.isPresent() ? Optional.of(parseYear(year.get())) : Optional.empty();"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"     * Parses a {@code String stringMonth} into an {@code YearMonth} object."},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if the given {@code stringMonth} is invalid."},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"    public static YearMonth parseMonth(String stringMonth) throws IllegalValueException {"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"        YearMonth yearMonth \u003d null;"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"        DateFormat df \u003d new SimpleDateFormat(\"yyyy-MM\");"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM\");"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        stringMonth \u003d stringMonth.trim();"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        if (stringMonth.isEmpty()) {"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"            yearMonth \u003d YearMonth.now();"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"            return yearMonth;"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"            if (stringMonth.length() \u003d\u003d 2) {"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":"                int month \u003d Integer.parseInt(stringMonth);"},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"                yearMonth \u003d YearMonth.now().withMonth(month);"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"                return yearMonth;"},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"            df.setLenient(false);"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"            df.parse(stringMonth);"},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"            yearMonth \u003d YearMonth.parse(stringMonth, formatter);"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"        } catch (ParseException e) {"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid year and month based on the format yyyy-MM!\");"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please input integer for month in the format MM!\");"},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeException dte) {"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please give a valid month based on the format MM!\");"},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":"        return yearMonth;"},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"     * Parses {@code Optional\u003cString\u003e month} into an {@code Optional\u003cYearMonth\u003e} if {@code month} is present."},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":"    public static Optional\u003cYearMonth\u003e parseMonth(Optional\u003cString\u003e month) throws IllegalValueException {"},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(month);"},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":"        return month.isPresent() ? Optional.of(parseMonth(month.get())) : Optional.empty();"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":342,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":344,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":349,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":352,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":356,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":357,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":364,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":365,"author":{"gitID":"Robert-Peng"},"content":"     * Parses a {@code String nric} into a {@code NRIC}."},{"lineNumber":366,"author":{"gitID":"Robert-Peng"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":367,"author":{"gitID":"Robert-Peng"},"content":"     * @param nric"},{"lineNumber":368,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":369,"author":{"gitID":"Robert-Peng"},"content":"     * @throws IllegalValueException"},{"lineNumber":370,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":371,"author":{"gitID":"Robert-Peng"},"content":"    public static Nric parseNric(String nric) throws IllegalValueException {"},{"lineNumber":372,"author":{"gitID":"Robert-Peng"},"content":"        requireNonNull(nric);"},{"lineNumber":373,"author":{"gitID":"Robert-Peng"},"content":"        String trimmedNric \u003d nric.trim();"},{"lineNumber":374,"author":{"gitID":"Robert-Peng"},"content":"        if (!Nric.isValidNric(trimmedNric)) {"},{"lineNumber":375,"author":{"gitID":"Robert-Peng"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":376,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":377,"author":{"gitID":"Robert-Peng"},"content":"        return new Nric(trimmedNric);"},{"lineNumber":378,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":379,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":380,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":381,"author":{"gitID":"Robert-Peng"},"content":"     * Parses a {@code Optional\u003cString\u003e nric} into an {@code Optional\u003cNRIC\u003e} if {@code nric} is present."},{"lineNumber":382,"author":{"gitID":"Robert-Peng"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":383,"author":{"gitID":"Robert-Peng"},"content":"     * @param nric"},{"lineNumber":384,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":385,"author":{"gitID":"Robert-Peng"},"content":"     * @throws IllegalValueException"},{"lineNumber":386,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"Robert-Peng"},"content":"    public static Optional\u003cNric\u003e parseNric(Optional\u003cString\u003e nric) throws IllegalValueException {"},{"lineNumber":388,"author":{"gitID":"Robert-Peng"},"content":"        requireNonNull(nric);"},{"lineNumber":389,"author":{"gitID":"Robert-Peng"},"content":"        return nric.isPresent() ? Optional.of(parseNric(nric.get())) : Optional.empty();"},{"lineNumber":390,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":392,"author":{"gitID":"Robert-Peng"},"content":"    //@@author"},{"lineNumber":393,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":394,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":395,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":396,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":397,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":398,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":400,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":401,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":402,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":403,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":404,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"        trimmedTag \u003d trimmedTag.toLowerCase();"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":410,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":411,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":412,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":413,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":414,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":415,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":416,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":417,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":418,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":419,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":421,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":422,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":423,"author":{"gitID":"Aquarinte"},"content":"     * Parses a {@code String name} into a {@code PetPatientName}."},{"lineNumber":424,"author":{"gitID":"Aquarinte"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":425,"author":{"gitID":"Aquarinte"},"content":"     * First character of each word will be set to upper case."},{"lineNumber":426,"author":{"gitID":"Aquarinte"},"content":"     * All other characters will be set to lower case."},{"lineNumber":427,"author":{"gitID":"Aquarinte"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":428,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":429,"author":{"gitID":"Aquarinte"},"content":"    public static PetPatientName parsePetPatientName(String name) throws IllegalValueException {"},{"lineNumber":430,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(name);"},{"lineNumber":431,"author":{"gitID":"Aquarinte"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":432,"author":{"gitID":"Aquarinte"},"content":"        if (!PetPatientName.isValidName(trimmedName)) {"},{"lineNumber":433,"author":{"gitID":"Aquarinte"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":434,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":435,"author":{"gitID":"Aquarinte"},"content":"        String[] wordsInName \u003d trimmedName.split(\" \");"},{"lineNumber":436,"author":{"gitID":"Aquarinte"},"content":"        StringBuilder formattedName \u003d new StringBuilder();"},{"lineNumber":437,"author":{"gitID":"Aquarinte"},"content":"        for (String n : wordsInName) {"},{"lineNumber":438,"author":{"gitID":"Aquarinte"},"content":"            formattedName \u003d formattedName.append(n.substring(0, 1).toUpperCase())"},{"lineNumber":439,"author":{"gitID":"Aquarinte"},"content":"                    .append(n.substring(1).toLowerCase()).append(\" \");"},{"lineNumber":440,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":441,"author":{"gitID":"Aquarinte"},"content":"        return new PetPatientName(formattedName.toString().trim());"},{"lineNumber":442,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":444,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":447,"author":{"gitID":"chialejing"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":448,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":449,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cPetPatientName\u003e parsePetPatientName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":450,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":451,"author":{"gitID":"chialejing"},"content":"        return name.isPresent() ? Optional.of(parsePetPatientName(name.get())) : Optional.empty();"},{"lineNumber":452,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":453,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":454,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String species} into a {@code Species}."},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":"    public static Species parseSpecies(String species) throws IllegalValueException {"},{"lineNumber":459,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":"        String trimmedSpecies \u003d species.trim();"},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":"        if (!Species.isValidSpecies(trimmedSpecies)) {"},{"lineNumber":462,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Species.MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":463,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":464,"author":{"gitID":"chialejing"},"content":"        String[] wordsInSpecies \u003d trimmedSpecies.split(\" \");"},{"lineNumber":465,"author":{"gitID":"chialejing"},"content":"        StringBuilder formattedSpecies \u003d new StringBuilder();"},{"lineNumber":466,"author":{"gitID":"chialejing"},"content":"        for (String s : wordsInSpecies) {"},{"lineNumber":467,"author":{"gitID":"chialejing"},"content":"            formattedSpecies \u003d formattedSpecies"},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(0, 1).toUpperCase())"},{"lineNumber":469,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(1).toLowerCase())"},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":"                    .append(\" \");"},{"lineNumber":471,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":472,"author":{"gitID":"chialejing"},"content":"        return new Species(formattedSpecies.toString().trim());"},{"lineNumber":473,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":474,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":475,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":476,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e species} into an {@code Optional\u003cSpecies\u003e} if {@code species} is present."},{"lineNumber":477,"author":{"gitID":"chialejing"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":478,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":479,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cSpecies\u003e parseSpecies(Optional\u003cString\u003e species) throws IllegalValueException {"},{"lineNumber":480,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":481,"author":{"gitID":"chialejing"},"content":"        return species.isPresent() ? Optional.of(parseSpecies(species.get())) : Optional.empty();"},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":485,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String breed} into a {@code Breed}."},{"lineNumber":486,"author":{"gitID":"chialejing"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":487,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"    public static Breed parseBreed(String breed) throws IllegalValueException {"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"        String trimmedBreed \u003d breed.trim();"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":"        if (!Breed.isValidBreed(trimmedBreed)) {"},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Breed.MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":"        String[] wordsInBreed \u003d trimmedBreed.split(\" \");"},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"        StringBuilder formattedBreed \u003d new StringBuilder();"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"        for (String s : wordsInBreed) {"},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":"            formattedBreed \u003d formattedBreed"},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(0, 1).toUpperCase())"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(1).toLowerCase())"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":"                    .append(\" \");"},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"        return new Breed(formattedBreed.toString().trim());"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e breed} into an {@code Optional\u003cBreed\u003e} if {@code breed} is present."},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cBreed\u003e parseBreed(Optional\u003cString\u003e breed) throws IllegalValueException {"},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"        return breed.isPresent() ? Optional.of(parseBreed(breed.get())) : Optional.empty();"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String colour} into a {@code Colour}."},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"    public static Colour parseColour(String colour) throws IllegalValueException {"},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":"        String trimmedColour \u003d colour.trim();"},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":"        if (!Colour.isValidColour(trimmedColour)) {"},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Colour.MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"        String[] wordsInColour \u003d trimmedColour.split(\" \");"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"        StringBuilder formattedColour \u003d new StringBuilder();"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"        for (String s : wordsInColour) {"},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"            formattedColour \u003d formattedColour"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(0).toLowerCase())"},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":"                    .append(\" \");"},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":"        return new Colour(formattedColour.toString().trim());"},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e colour} into an {@code Optional\u003cColour\u003e} if {@code colour} is present."},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cColour\u003e parseColour(Optional\u003cString\u003e colour) throws IllegalValueException {"},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":"        return colour.isPresent() ? Optional.of(parseColour(colour.get())) : Optional.empty();"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code String bloodType} into a {@code String}."},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":"    public static BloodType parseBloodType(String bloodType) throws IllegalValueException {"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"        String trimmedBloodType \u003d bloodType.trim();"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":"        if (!BloodType.isValidBloodType(trimmedBloodType)) {"},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"        String[] wordsInBloodType \u003d trimmedBloodType.split(\" \");"},{"lineNumber":554,"author":{"gitID":"chialejing"},"content":"        StringBuilder formattedBloodType \u003d new StringBuilder();"},{"lineNumber":555,"author":{"gitID":"chialejing"},"content":"        for (String s : wordsInBloodType) {"},{"lineNumber":556,"author":{"gitID":"chialejing"},"content":"            formattedBloodType \u003d formattedBloodType"},{"lineNumber":557,"author":{"gitID":"chialejing"},"content":"                    .append(s.substring(0).toUpperCase())"},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":"                    .append(\" \");"},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":560,"author":{"gitID":"chialejing"},"content":"        return new BloodType(formattedBloodType.toString().trim());"},{"lineNumber":561,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":562,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":563,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":564,"author":{"gitID":"chialejing"},"content":"     * Parses a {@code Optional\u003cString\u003e bloodType} into an {@code Optional\u003cBloodType\u003e} if {@code bloodType} is present."},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":566,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":567,"author":{"gitID":"chialejing"},"content":"    public static Optional\u003cBloodType\u003e parseBloodType(Optional\u003cString\u003e bloodType) throws IllegalValueException {"},{"lineNumber":568,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":569,"author":{"gitID":"chialejing"},"content":"        return bloodType.isPresent() ? Optional.of(parseBloodType(bloodType.get())) : Optional.empty();"},{"lineNumber":570,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":571,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"Aquarinte":46,"Robert-Peng":31,"chialejing":144,"wynonaK":199,"-":151}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import java.util.regex.Matcher;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"import java.util.regex.Pattern;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_PERSON \u003d Pattern.compile(\"-(o)+(?\u003cpersonInfo\u003e.*)\");"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_PET_PATIENT \u003d Pattern.compile(\"-(p)+(?\u003cpetPatientInfo\u003e.*)\");"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    private static final Pattern EDIT_COMMAND_FORMAT_APPOINTMENT \u003d Pattern.compile(\"-(a)+(?\u003cappointmentInfo\u003e.*)\");"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"     * Parses the different types of Objects (Person, PetPatient or Appointment) based on whether user has"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     * provided \"-o\", \"-p\" or \"-a\" in the command"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     * @param args String to parse"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     * @return EditCommand object to edit the object"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if invalid format is detected"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"        // Edit existing person"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForPerson \u003d EDIT_COMMAND_FORMAT_PERSON.matcher(trimmedArgs);"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        if (matcherForPerson.matches()) {"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"            String personInfo \u003d matcherForPerson.group(\"personInfo\");"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"            return parsePerson(personInfo);"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        // Edit existing pet patient"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForPetPatient \u003d EDIT_COMMAND_FORMAT_PET_PATIENT.matcher(trimmedArgs);"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        if (matcherForPetPatient.matches()) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            String petPatientInfo \u003d matcherForPetPatient.group(\"petPatientInfo\");"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"            return parsePetPatient(petPatientInfo);"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        // Edit existing appointment"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        final Matcher matcherForAppointment \u003d EDIT_COMMAND_FORMAT_APPOINTMENT.matcher(trimmedArgs);"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"        if (matcherForAppointment.matches()) {"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"            String appointmentInfo \u003d matcherForAppointment.group(\"appointmentInfo\");"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            return parseAppointment(appointmentInfo);"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        // throws exception for invalid format"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code personInfo} of arguments in the context of the EditCommand"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"    public EditCommand parsePerson(String personInfo) throws ParseException {"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        requireNonNull(personInfo);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(personInfo, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"                    PREFIX_ADDRESS, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":106,"author":{"gitID":"Robert-Peng"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC)).ifPresent(editPersonDescriptor::setNric);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code petPatientInfo} of arguments in the context of the EditCommand"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"    public EditCommand parsePetPatient(String petPatientInfo) throws ParseException {"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        requireNonNull(petPatientInfo);"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(petPatientInfo, PREFIX_NAME, PREFIX_SPECIES, PREFIX_BREED,"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"                        PREFIX_COLOUR, PREFIX_BLOODTYPE, PREFIX_NRIC, PREFIX_TAG);"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"        Index index;"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor editPetPatientDescriptor \u003d new EditPetPatientDescriptor();"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setName);"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES))"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setSpecies);"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseBreed(argMultimap.getValue(PREFIX_BREED))"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setBreed);"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR))"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setColour);"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE))"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setBloodType);"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC))"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setOwnerNric);"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editPetPatientDescriptor::setTags);"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"        if (!editPetPatientDescriptor.isAnyFieldEdited()) {"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        return new EditCommand(index, editPetPatientDescriptor);"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"     * Parses the given {@code appointmentInfo} of arguments in the context of the EditCommand"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"    public EditCommand parseAppointment(String appointmentInfo) throws ParseException {"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"        requireNonNull(appointmentInfo);"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"                ArgumentTokenizer.tokenize(appointmentInfo, PREFIX_DATE, PREFIX_REMARK, PREFIX_TAG);"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"        Index index;"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"            // ParserUtil.parsePetPatientName(argMultimap.getValue(PREFIX_NAME))"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"            //        .ifPresent(editAppointmentDescriptor::setPetPatientName);"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATE))"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setLocalDateTime);"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"            ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK))"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setRemark);"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"            //ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC))"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"            //        .ifPresent(editAppointmentDescriptor::setOwnerNric);"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"                    .ifPresent(editAppointmentDescriptor::setTags);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"        return new EditCommand(index, editAppointmentDescriptor);"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":152,"Robert-Peng":3,"-":69}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"     * and returns a ChangeThemeCommand object for execution."},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        if (hasMoreThanOneArgument(trimmedArgs)) {"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"        if (!Theme.hasValidThemeName(trimmedArgs.toLowerCase())) {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"            throw new ParseException(Theme.MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"        return new ChangeThemeCommand(new Theme(trimmedArgs.toLowerCase()));"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if {@code trimmedArgs} contains more than 1 argument/word (separated by space)."},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    private boolean hasMoreThanOneArgument(String trimmedArgs) {"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"        String[] splitArgs \u003d trimmedArgs.split(\" \");"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"        if (splitArgs.length \u003e 1) {"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":43,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nr/\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BREED \u003d new Prefix(\"b/\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_COLOUR \u003d new Prefix(\"c/\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"bt/\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    /* Prefix with description */"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_NAME_DESC \u003d PREFIX_NAME.toString() + \"\\t: name\";"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_PHONE_DESC \u003d PREFIX_PHONE.toString() + \"\\t: phone\";"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_EMAIL_DESC \u003d PREFIX_EMAIL.toString() + \"\\t: email\";"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_ADDRESS_DESC \u003d PREFIX_ADDRESS.toString() + \"\\t: address\";"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_NRIC_DESC \u003d PREFIX_NRIC.toString() + \"\\t: NRIC\";"},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_TAG_DESC \u003d PREFIX_TAG.toString() + \"\\t: tag\";"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_REMARK_DESC \u003d PREFIX_REMARK.toString() + \"\\t: remark\";"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_DATE_DESC \u003d PREFIX_DATE.toString() + \"\\t: yyyy-mm-dd hh:mm\";"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_SPECIES_DESC \u003d PREFIX_SPECIES.toString() + \"\\t: species\";"},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_BREED_DESC \u003d PREFIX_BREED.toString() + \"\\t: breed\";"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_COLOUR_DESC \u003d PREFIX_COLOUR.toString() + \"\\t: colour\";"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"    public static final String PREFIX_BLOODTYPE_DESC \u003d PREFIX_BLOODTYPE.toString() + \"\\t: blood type\";"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"    /* Option definitions */"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_OWNER \u003d \"-o\";"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_PETPATIENT \u003d \"-p\";"},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_APPOINTMENT \u003d \"-a\";"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTIONFORCE_OWNER \u003d \"-fo\";"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTIONFORCE_PETPATIENT \u003d \"-fp\";"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_YEAR \u003d \"-y\";"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_MONTH \u003d \"-m\";"},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_WEEK \u003d \"-w\";"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_DAY \u003d \"-d\";"},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    /* Option with description */"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_OWNER_DESC \u003d OPTION_OWNER + \"\\t: person/owner\";"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_PETPATIENT_DESC \u003d OPTION_PETPATIENT + \"\\t: pet patient\";"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_APPOINTMENT_DESC \u003d OPTION_APPOINTMENT + \"\\t: appointment\";"},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTIONFORCE_OWNER_DESC \u003d OPTIONFORCE_OWNER + \"\\t: force delete person/owner\";"},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTIONFORCE_PETPATIENT_DESC \u003d OPTIONFORCE_PETPATIENT + \"\\t: force delete pet patient\";"},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_YEAR_DESC \u003d OPTION_YEAR + \"\\t: calendar year view\";"},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_MONTH_DESC \u003d OPTION_MONTH + \"\\t: calendar month view\";"},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_WEEK_DESC \u003d OPTION_WEEK + \"\\t: calendar week view\";"},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"    public static final String OPTION_DAY_DESC \u003d OPTION_DAY + \"\\t: calendar day view\";"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"    private static CliSyntax instance;"},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e prefixes \u003d Stream.of("},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"            PREFIX_NAME_DESC, PREFIX_PHONE_DESC, PREFIX_EMAIL_DESC, PREFIX_ADDRESS_DESC, PREFIX_NRIC_DESC,"},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"            PREFIX_BREED_DESC, PREFIX_SPECIES_DESC, PREFIX_COLOUR_DESC, PREFIX_BLOODTYPE_DESC, PREFIX_DATE_DESC,"},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"            PREFIX_REMARK_DESC, PREFIX_TAG_DESC)"},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e commandWordsWithOptionPrefix \u003d Stream.of("},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"            AddCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"            ListAppointmentCommand.COMMAND_WORD).collect(Collectors.toSet());"},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e commandWords \u003d Stream.of("},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"            AddCommand.COMMAND_WORD, EditCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD, ListCommand.COMMAND_WORD,"},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"            FindCommand.COMMAND_WORD, ChangeThemeCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":"            HelpCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD,"},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"            HistoryCommand.COMMAND_WORD, ListAppointmentCommand.COMMAND_WORD).collect(Collectors.toSet());"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"    private static final Set\u003cString\u003e options \u003d Stream.of(OPTION_OWNER_DESC, OPTION_PETPATIENT_DESC,"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"            OPTION_APPOINTMENT_DESC, OPTIONFORCE_OWNER_DESC, OPTIONFORCE_PETPATIENT_DESC,"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"            OPTION_YEAR_DESC, OPTION_MONTH_DESC, OPTION_WEEK_DESC, OPTION_DAY_DESC)"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"            .collect(Collectors.toSet());"},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"    public static final int MAX_SYNTAX_SIZE \u003d Math.max(commandWords.size(), Math.max(prefixes.size(), options.size()));"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    public static CliSyntax getInstance() {"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"            instance \u003d new CliSyntax();"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        return instance;"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getCommandWords() {"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"        return CliSyntax.commandWords;"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getCommandWordsWithOptionPrefix() {"},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"        return CliSyntax.commandWordsWithOptionPrefix;"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getPrefixes() {"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"        return CliSyntax.prefixes;"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getOptions() {"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"        return CliSyntax.options;"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":86,"Robert-Peng":1,"wynonaK":3,"-":34}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":" * Deletes a person, pet patient or appointment from the address book."},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"            + \" -[f]o/-[f]p/-a\""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the contact/pet/appointment identified by the index number used in the latest listing.\\n\""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"            + \"Additional -[f] options indicates forcefully deleting object all of its related dependencies.\\n\""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -o 1\";"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_OWNER \u003d COMMAND_WORD"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            + \" -o\""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the contact identified by the index number used in the latest contact listing.\\n\""},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -o 1\";"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_PET_PATIENT \u003d COMMAND_WORD"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"            + \" -p\""},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the pet patient identified by the index number used in the latest pet patient listing.\\n\""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -p 1\";"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_APPOINTMENT \u003d COMMAND_WORD"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"            + \" -a\""},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            + \": Deletes the appointment identified by the index number used in the latest appointment listing.\\n\""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -a 1\";"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_FORCE_OWNER \u003d COMMAND_WORD"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"            + \" -fo\""},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"            + \": Forcefully deletes a contact and all related dependencies \""},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            + \"identified by the index number used in the latest contact listing.\\n\""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -fo 1\";"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE_FORCE_PET_PATIENT \u003d COMMAND_WORD"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            + \" -fp\""},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"            + \": Forcefully deletes a pet patient and all related dependencies \""},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            + \"identified by the index number used in the latest pet patient listing.\\n\""},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: INDEX (must be a positive integer, must not be invalid)\\n\""},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -fp 1\";"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Contact: %1$s\";"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_PET_PATIENT_SUCCESS \u003d \"Deleted Pet Patient: %1$s\";"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    private final Index targetIndex;"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"    private final int type;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    private Person personToDelete;"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    private PetPatient petPatientToDelete;"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    private Appointment appointmentToDelete;"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"    public DeleteCommand(int type, Index targetIndex) {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d type;"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(model);"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            switch (type) {"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"            case 1: return deletePerson();"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"            case 2: return deletePetPatient();"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"            case 3: return deleteAppointment();"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            case 4: return deleteForcePerson();"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"            case 5: return deleteForcePetPatient();"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            default:"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        } catch (AppointmentDependencyNotEmptyException e) {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_DEPENDENCIES_EXIST);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"     * Deletes {@code personToDelete} from the address book."},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deletePerson() throws PetDependencyNotEmptyException {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(personToDelete);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target contact cannot be missing\");"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"    private void getPersonToDelete() throws CommandException {"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     * Deletes the pet patient {@code petPatientToDelete} from the address book."},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deletePetPatient() throws AppointmentDependencyNotEmptyException {"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(petPatientToDelete);"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"            model.deletePetPatient(petPatientToDelete);"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target pet patient cannot be missing\");"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete));"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"    private void getPetPatientToDelete() throws CommandException {"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e lastShownList \u003d model.getFilteredPetPatientList();"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        petPatientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"     * Deletes the appointment {@code appointmentToDelete} from the address book."},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteAppointment() {"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(appointmentToDelete);"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"            model.deleteAppointment(appointmentToDelete);"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete));"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"    private void getAppointmentToDelete() throws CommandException {"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"     * Forcefully deletes {@code personToDelete} from the address book."},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"     * All related dependencies (pet patients, appointments) will be deleted as well."},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteForcePerson() {"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"        String deleteDependenciesList \u003d \"\";"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(personToDelete);"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"            List\u003cPetPatient\u003e petPatientsDeleted \u003d model.deletePetPatientDependencies(personToDelete);"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"            List\u003cAppointment\u003e appointmentsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"            for (PetPatient pp : petPatientsDeleted) {"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"                appointmentsDeleted.addAll(model.deleteAppointmentDependencies(pp));"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, pp));"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : appointmentsDeleted) {"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment));"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target contact cannot be missing\");"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"        } catch (PetDependencyNotEmptyException e) {"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Pet dependencies still exist!\");"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete)"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"                + deleteDependenciesList);"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"     * Forcefully deletes {@code petPatientToDelete} from the address book."},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"     * All related dependencies (appointments) will be deleted as well."},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"    private CommandResult deleteForcePetPatient() {"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"        String deleteDependenciesList \u003d \"\";"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"            requireNonNull(petPatientToDelete);"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"            List\u003cAppointment\u003e appointmentDependenciesDeleted \u003d model.deleteAppointmentDependencies(petPatientToDelete);"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : appointmentDependenciesDeleted) {"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"                deleteDependenciesList +\u003d \"\\n\" + (String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointment));"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"            model.deletePetPatient(petPatientToDelete);"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"The target pet patient cannot be missing\");"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"        }  catch (AppointmentDependencyNotEmptyException e) {"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Appointment dependencies still exist!\");"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PET_PATIENT_SUCCESS, petPatientToDelete)"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"                + deleteDependenciesList);"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"            switch (type) {"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"            case 1: getPersonToDelete();"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"            case 2: getPetPatientToDelete();"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"            case 3: getAppointmentToDelete();"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"            case 4: getPersonToDelete();"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"            case 5: getPetPatientToDelete();"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"                break;"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"            default:"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"        } catch (CommandException e) {"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":244,"-":13}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET_PATIENTS;"},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":" * Lists all persons and petpatients in Medeina to the user."},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"    public static final String COMMAND_ALIAS \u003d \"ls\";"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all contacts and pet patients\";"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"        model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":22,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Changes the theme of Medeina."},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change Medeina\u0027s theme to the\""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"            + \"specified theme name (case-insensitive)\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: THEME NAME\\n\""},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + COMMAND_WORD + \" light\";"},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":"    private String result;"},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"    private final Theme theme;"},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"    public ChangeThemeCommand(Theme theme) {"},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(theme);"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"        this.theme \u003d theme;"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        result \u003d \"Current theme: \" + theme.getThemeName();"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(theme));"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(result);"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 theme.equals(((ChangeThemeCommand) other).theme));"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":36,"-":8}},{"path":"src/main/java/seedu/address/logic/descriptors/EditPetPatientDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.logic.descriptors;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" * Stores the details to edit the pet patient with. Each non-empty field value will replace the"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" * corresponding field value of the pet patient."},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"public class EditPetPatientDescriptor {"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private PetPatientName name;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private Species species;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private Breed breed;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    private Colour colour;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private BloodType bloodType;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric;"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptor() {}"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"     * Copy constructor."},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"    public EditPetPatientDescriptor(EditPetPatientDescriptor toCopy) {"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        setName(toCopy.name);"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        setSpecies(toCopy.species);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        setBreed(toCopy.breed);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        setColour(toCopy.colour);"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        setBloodType(toCopy.bloodType);"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        setOwnerNric(toCopy.ownerNric);"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        setTags(toCopy.tags);"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        return CollectionUtil.isAnyNonNull(this.name, this.species, this.breed,"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                this.colour, this.bloodType, this.ownerNric, this.tags);"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    public void setName(PetPatientName name) {"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cPetPatientName\u003e getName() {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(name);"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    public void setSpecies(Species species) {"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cSpecies\u003e getSpecies() {"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(species);"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    public void setBreed(Breed breed) {"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cBreed\u003e getBreed() {"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(breed);"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"    public void setColour(Colour colour) {"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cColour\u003e getColour() {"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(colour);"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    public void setBloodType(BloodType bloodType) {"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cBloodType\u003e getBloodType() {"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(bloodType);"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    public void setOwnerNric(Nric nric) {"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d nric;"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cNric\u003e getOwnerNric() {"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(ownerNric);"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"     * if modification is attempted."},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"        // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof EditPetPatientDescriptor)) {"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"        // state check"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor e \u003d (EditPetPatientDescriptor) other;"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        return getName().equals(e.getName())"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getSpecies().equals(e.getSpecies())"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getBreed().equals(e.getBreed())"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getColour().equals(e.getColour())"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getBloodType().equals(e.getBloodType())"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getOwnerNric().equals(e.getOwnerNric())"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":135,"-":8}},{"path":"src/main/java/seedu/address/logic/descriptors/EditPersonDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.logic.descriptors;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"content":"//@@author chialejing-reused"},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * corresponding field value of the person."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"public class EditPersonDescriptor {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"    private Nric nric;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Copy constructor."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        setName(toCopy.name);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        setPhone(toCopy.phone);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        setEmail(toCopy.email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        setAddress(toCopy.address);"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"        setNric(toCopy.nric);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setTags(toCopy.tags);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":"        return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"                this.address, this.nric, this.tags);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setName(Name name) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Optional\u003cName\u003e getName() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(name);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setPhone(Phone phone) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(phone);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setEmail(Email email) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(email);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setAddress(Address address) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return Optional.ofNullable(address);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"    public void setNric(Nric nric) {"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        this.nric \u003d nric;"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":88,"author":{"gitID":"Robert-Peng"},"content":"    public Optional\u003cNric\u003e getNric() {"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"        return Optional.ofNullable(nric);"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return getName().equals(e.getName())"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":128,"author":{"gitID":"Robert-Peng"},"content":"                \u0026\u0026 getNric().equals(e.getNric())"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"chialejing":5,"Robert-Peng":14,"-":111}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of pet patients."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public static String getMessageForPetPatientListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        return String.format(Messages.MESSAGE_PET_PATIENTS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":6,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_OWNER;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.OPTION_PETPATIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":" * Adds a Person, Petpatient and/or Appointment to Medeina."},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_USAGE \u003d \"To add a new contact: \""},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" \" + OPTION_OWNER + \" \" + PREFIX_NAME + \"NAME \""},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"            + \"To add a new pet patient: \""},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" \" + OPTION_PETPATIENT + \" \" + PREFIX_NAME + \"PET_NAME \""},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \" + OPTION_OWNER + \" \" + PREFIX_NRIC + \"NRIC\\n\""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"            + \"To add a new appointment: \""},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"            + COMMAND_WORD + \" \" + OPTION_APPOINTMENT + \" \" + PREFIX_DATE + \"DATE \""},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"TYPE OF APPOINTMENT... \" + OPTION_OWNER + \" \" + PREFIX_NRIC + \"NRIC \""},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":"            + OPTION_PETPATIENT + \" \" + PREFIX_NAME + \" PET_NAME\\n\""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"            + \"To add all new: \" + COMMAND_WORD + \" \" + OPTION_OWNER + \" \" + PREFIX_NAME + \"NAME \""},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \" + OPTION_PETPATIENT + \" \" + PREFIX_NAME + \"PET_NAME \""},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":69,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":70,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":71,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":72,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \" + OPTION_APPOINTMENT + \" \"  + PREFIX_DATE + \"DATE \""},{"lineNumber":73,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":74,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"TYPE OF APPOINTMENT...\";"},{"lineNumber":75,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":76,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_ERROR_PERSON \u003d \"option \" + OPTION_OWNER + \"\\n\""},{"lineNumber":77,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":78,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":79,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":80,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":81,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":82,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"NRIC \""},{"lineNumber":83,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":84,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + OPTION_OWNER + \" \""},{"lineNumber":85,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":86,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":87,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":88,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":89,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NRIC + \"S1234567Q \""},{"lineNumber":90,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"supplier\";"},{"lineNumber":91,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_ERROR_APPOINTMENT \u003d \"option \" + OPTION_APPOINTMENT + \"\\n\""},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"REMARK \""},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"TYPE OF APPOINTMENT...\\n\""},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + OPTION_APPOINTMENT + \" \""},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_DATE + \"2018-12-31 12:30 \""},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_REMARK + \"nil \""},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"checkup \""},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"vaccination\";"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_ERROR_PETPATIENT \u003d \"option \" + OPTION_PETPATIENT + \"\\n\""},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"            + \"Parameters: \""},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"PET_NAME \""},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"SPECIES \""},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"BREED \""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"COLOUR \""},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"BLOOD_TYPE \""},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"            + \"Example: \" + OPTION_PETPATIENT + \" \""},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_NAME + \"Jewel \""},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_SPECIES + \"Cat \""},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BREED + \"Persian Ragdoll \""},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_COLOUR + \"calico \""},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_BLOODTYPE + \"AB \""},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":"            + PREFIX_TAG + \"underweight\";"},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_SUCCESS_PERSON \u003d \"New contact added: %1$s\\n\";"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_SUCCESS_PETPATIENT \u003d \"New pet patient added: %1$s \\n\""},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"            + \"under contact: %2$s\";"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_SUCCESS_APPOINTMENT \u003d \"New appointment made: %1$s\\n\""},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"            + \"under contact: %2$s\\n\""},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"            + \"for pet patient: %3$s\";"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_SUCCESS_EVERYTHING \u003d MESSAGE_SUCCESS_PERSON"},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"            + \"New pet patient added: %2$s\\n\""},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"            + \"New appointment made: %3$s\";"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in Medeina.\";"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_NRIC \u003d \"There is already a contact with this NRIC.\";"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This particular appointment already exists in Medeina.\";"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_DATETIME \u003d \"This date time is already taken by another appointment.\";"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_DUPLICATE_PET_PATIENT \u003d \"This pet patient already exists in Medeina\";"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_INVALID_NRIC \u003d \"The specified NRIC does not belong to anyone in Medeina.\""},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"            + \" Please add a new contact.\";"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_INVALID_PET_PATIENT \u003d \"The specified pet cannot be found under the specified \""},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"            + \"contact in Medeina. Please add a new pet patient.\";"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_MISSING_NRIC_PREFIX \u003d \"option -o\\n\""},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"            + \"Missing prefix nr/ for NRIC.\";"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_MISSING_PET_PATIENT_NAME_PREFIX \u003d \"option -p\\n\""},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"            + \"Missing prefix n/ for pet patient name.\";"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_CONCURRENT_APPOINTMENT \u003d \"Appointment cannot be concurrent with other \""},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"            + \"appointments.\";"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_PAST_APPOINTMENT \u003d \"Appointment cannot be created with past DateTime.\";"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"    private Person person;"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"    private PetPatient petPatient;"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    private Appointment appt;"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"    private Nric ownerNric;"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":"    private int type;"},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Person} and {@code PetPatient} and {@code Appointment}."},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Person person, PetPatient petPatient, Appointment appt) {"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(person);"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatient);"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(appt);"},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"        this.person \u003d person;"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"        this.appt \u003d appt;"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 1;"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Appointment} if an existing Person object getNric() is"},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"     * equivalent to {@code Nric}, and an existing PetPatient object getOwner() is equivalent to {@code ownerNric}"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"     * and getName() equivalent to {@code PetPatientName}."},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Appointment appt, Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(appt);"},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(ownerNric);"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatientName);"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"        this.appt \u003d appt;"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 2;"},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code PetPatient} if an existing Person object getNric() is"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"     * equivalent to {@code Nric}."},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(PetPatient petPatient, Nric ownerNric) {"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(petPatient);"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(ownerNric);"},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        this.petPatient \u003d petPatient;"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 3;"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"     * Creates an AddCommand to add the specified {@code Person}."},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"    public AddCommand(Person owner) {"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(owner);"},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"        person \u003d owner;"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"        type \u003d 4;"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(model);"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"            switch (type) {"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"            case 1: return addAllNew();"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"            case 2: return addNewAppointment();"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"            case 3: return addNewPetPatient();"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"            case 4: return addNewPerson();"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"            default: throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":214,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":215,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":216,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_NRIC);"},{"lineNumber":217,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":218,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":219,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":220,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":221,"author":{"gitID":"Aquarinte"},"content":"        } catch (DuplicateDateTimeException e) {"},{"lineNumber":222,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DATETIME);"},{"lineNumber":223,"author":{"gitID":"Aquarinte"},"content":"        } catch (ConcurrentAppointmentException e) {"},{"lineNumber":224,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_CONCURRENT_APPOINTMENT);"},{"lineNumber":225,"author":{"gitID":"Aquarinte"},"content":"        } catch (PastAppointmentException e) {"},{"lineNumber":226,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_PAST_APPOINTMENT);"},{"lineNumber":227,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":230,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewPerson() throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":231,"author":{"gitID":"Aquarinte"},"content":"        model.addPerson(person);"},{"lineNumber":232,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_PERSON, person));"},{"lineNumber":233,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":235,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"Aquarinte"},"content":"     * Adds a new pet patient under an existing person."},{"lineNumber":237,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewPetPatient() throws DuplicatePetPatientException, CommandException {"},{"lineNumber":239,"author":{"gitID":"Aquarinte"},"content":"        person \u003d getValidOwner(ownerNric);"},{"lineNumber":240,"author":{"gitID":"Aquarinte"},"content":"        model.addPetPatient(petPatient);"},{"lineNumber":241,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_PETPATIENT, petPatient, person));"},{"lineNumber":242,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":244,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"Aquarinte"},"content":"     * Adds a new appointment for an existing pet patient, under an existing person."},{"lineNumber":246,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addNewAppointment() throws CommandException, DuplicateAppointmentException,"},{"lineNumber":248,"author":{"gitID":"Aquarinte"},"content":"            DuplicateDateTimeException, ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":249,"author":{"gitID":"Aquarinte"},"content":"        person \u003d getValidOwner(ownerNric);"},{"lineNumber":250,"author":{"gitID":"Aquarinte"},"content":"        petPatient \u003d getValidPetPatient(ownerNric, petPatientName);"},{"lineNumber":251,"author":{"gitID":"Aquarinte"},"content":"        model.addAppointment(appt);"},{"lineNumber":252,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_APPOINTMENT, appt, person, petPatient));"},{"lineNumber":253,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":255,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"Aquarinte"},"content":"     * Adds a new appointment for a new pet patient under a new person."},{"lineNumber":257,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"Aquarinte"},"content":"    private CommandResult addAllNew() throws DuplicatePersonException, DuplicateNricException,"},{"lineNumber":259,"author":{"gitID":"Aquarinte"},"content":"            DuplicatePetPatientException, DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":260,"author":{"gitID":"Aquarinte"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":261,"author":{"gitID":"Aquarinte"},"content":"        model.addPerson(person);"},{"lineNumber":262,"author":{"gitID":"Aquarinte"},"content":"        model.addPetPatient(petPatient);"},{"lineNumber":263,"author":{"gitID":"Aquarinte"},"content":"        model.addAppointment(appt);"},{"lineNumber":264,"author":{"gitID":"Aquarinte"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_EVERYTHING, person, petPatient, appt));"},{"lineNumber":265,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":267,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"Aquarinte"},"content":"     * Returns a person object that exists in Medeina."},{"lineNumber":269,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"Aquarinte"},"content":"    private Person getValidOwner(Nric ownerNric) throws CommandException {"},{"lineNumber":271,"author":{"gitID":"Aquarinte"},"content":"        Person validOwner \u003d model.getPersonWithNric(ownerNric);"},{"lineNumber":272,"author":{"gitID":"Aquarinte"},"content":"        if (validOwner \u003d\u003d null) {"},{"lineNumber":273,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_NRIC);"},{"lineNumber":274,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"Aquarinte"},"content":"        return validOwner;"},{"lineNumber":276,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":278,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"Aquarinte"},"content":"     * Returns a petpatient object that exists in Medeina."},{"lineNumber":280,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"Aquarinte"},"content":"    private PetPatient getValidPetPatient(Nric ownerNric, PetPatientName petPatientName) throws CommandException {"},{"lineNumber":282,"author":{"gitID":"Aquarinte"},"content":"        PetPatient validPatient  \u003d model.getPetPatientWithNricAndName(ownerNric, petPatientName);"},{"lineNumber":283,"author":{"gitID":"Aquarinte"},"content":"        if (validPatient \u003d\u003d null) {"},{"lineNumber":284,"author":{"gitID":"Aquarinte"},"content":"            throw new CommandException(MESSAGE_INVALID_PET_PATIENT);"},{"lineNumber":285,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"Aquarinte"},"content":"        return validPatient;"},{"lineNumber":287,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":289,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"Aquarinte"},"content":"     * Checks if two objects are the same for equals() method."},{"lineNumber":291,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":292,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if both objects are equivalent."},{"lineNumber":293,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if both objects are null."},{"lineNumber":294,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"Aquarinte"},"content":"    public boolean isTheSame(Object one, Object two) {"},{"lineNumber":296,"author":{"gitID":"Aquarinte"},"content":"        if (one !\u003d null \u0026\u0026 two !\u003d null) {"},{"lineNumber":297,"author":{"gitID":"Aquarinte"},"content":"            if (one.equals(two)) {"},{"lineNumber":298,"author":{"gitID":"Aquarinte"},"content":"                return true;"},{"lineNumber":299,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":300,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":302,"author":{"gitID":"Aquarinte"},"content":"        if (one \u003d\u003d null \u0026\u0026 two \u003d\u003d null) {"},{"lineNumber":303,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":304,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":306,"author":{"gitID":"Aquarinte"},"content":"        return false;"},{"lineNumber":307,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":309,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":310,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":311,"author":{"gitID":"Aquarinte"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":312,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":313,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":315,"author":{"gitID":"Aquarinte"},"content":"        if (!(other instanceof AddCommand)) {"},{"lineNumber":316,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":317,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":319,"author":{"gitID":"Aquarinte"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;"},{"lineNumber":320,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":321,"author":{"gitID":"Aquarinte"},"content":"        boolean personSame \u003d isTheSame(person, otherAddCommand.person);"},{"lineNumber":322,"author":{"gitID":"Aquarinte"},"content":"        boolean petPatientSame \u003d isTheSame(petPatient, otherAddCommand.petPatient);"},{"lineNumber":323,"author":{"gitID":"Aquarinte"},"content":"        boolean appointmentSame \u003d isTheSame(appt, otherAddCommand.appt);"},{"lineNumber":324,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":325,"author":{"gitID":"Aquarinte"},"content":"        if (personSame \u0026\u0026 petPatientSame \u0026\u0026 appointmentSame) {"},{"lineNumber":326,"author":{"gitID":"Aquarinte"},"content":"            return true;"},{"lineNumber":327,"author":{"gitID":"Aquarinte"},"content":"        } else {"},{"lineNumber":328,"author":{"gitID":"Aquarinte"},"content":"            return false;"},{"lineNumber":329,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":298,"Robert-Peng":3,"chialejing":3,"wynonaK":3,"-":24}},{"path":"src/main/java/seedu/address/logic/descriptors/EditAppointmentDescriptor.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.logic.descriptors;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" * Stores the details to edit the appointment with. Each non-empty field value will replace the"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * corresponding field value of the appointment."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class EditAppointmentDescriptor {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private Remark remark;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private LocalDateTime localDateTime;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptor() {}"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"     * Copy constructor."},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"        setOwnerNric(toCopy.ownerNric);"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"        setPetPatientName(toCopy.petPatientName);"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"        setRemark(toCopy.remark);"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"        setLocalDateTime(toCopy.localDateTime);"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"        setTags(toCopy.tags);"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"     * Returns true if at least one field is edited."},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public boolean isAnyFieldEdited() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return CollectionUtil.isAnyNonNull(this.ownerNric, this.petPatientName, this.remark,"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"                this.localDateTime, this.tags);"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cNric\u003e getOwnerNric() {"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(ownerNric);"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    public void setPetPatientName(PetPatientName petPatientName) {"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cPetPatientName\u003e getPetPatientName() {"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(petPatientName);"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"    public void setRemark(Remark remark) {"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        this.remark \u003d remark;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cRemark\u003e getRemark() {"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(remark);"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    public void setLocalDateTime(LocalDateTime localDateTime) {"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cLocalDateTime\u003e getLocalDateTime() {"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        return Optional.ofNullable(localDateTime);"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"     * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"     * A defensive copy of {@code tags} is used internally."},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"     * if modification is attempted."},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"     * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"        // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof EditAppointmentDescriptor)) {"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        // state check"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"        return getOwnerNric().equals(e.getOwnerNric())"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getPetPatientName().equals(e.getPetPatientName())"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getRemark().equals(e.getRemark())"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getLocalDateTime().equals(e.getLocalDateTime())"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":110,"wynonaK":2,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/ListAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.logic.commands.ListAppointmentCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * Parses input arguments and creates a new ListAppointmentCommand object"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"public class ListAppointmentCommandParser implements Parser\u003cListAppointmentCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern LIST_APPOINTMENT_COMMAND_FORMAT_YEAR \u003d Pattern.compile(\"-(y)+(?\u003cinfo\u003e.*)\");"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern LIST_APPOINTMENT_COMMAND_FORMAT_MONTH \u003d Pattern.compile(\"-(m)+(?\u003cinfo\u003e.*)\");"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern LIST_APPOINTMENT_COMMAND_FORMAT_WEEK \u003d Pattern.compile(\"-(w)+(?\u003cinfo\u003e.*)\");"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private static final Pattern LIST_APPOINTMENT_COMMAND_FORMAT_DAY \u003d Pattern.compile(\"-(d)+(?\u003cinfo\u003e.*)\");"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     * Parses the given {@code String} of arguments in the context of the ListAppointmentCommand"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * and returns an ListAppointmentCommand object for execution."},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"     * type changes depending on what pattern it matches"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public ListAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForYear \u003d LIST_APPOINTMENT_COMMAND_FORMAT_YEAR.matcher(trimmedArgs);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        if (matcherForYear.matches()) {"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            int type \u003d 1;"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"                Year year \u003d ParserUtil.parseYear(matcherForYear.group(\"info\"));"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"                return new ListAppointmentCommand(type, year);"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForMonth \u003d LIST_APPOINTMENT_COMMAND_FORMAT_MONTH.matcher(trimmedArgs);"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        if (matcherForMonth.matches()) {"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 2;"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"                YearMonth yearMonth \u003d ParserUtil.parseMonth(matcherForMonth.group(\"info\"));"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"                return new ListAppointmentCommand(type, yearMonth);"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForWeek \u003d LIST_APPOINTMENT_COMMAND_FORMAT_WEEK.matcher(trimmedArgs);"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"        if (matcherForWeek.matches()) {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 3;"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"                LocalDate date \u003d ParserUtil.parseDate(matcherForWeek.group(\"info\"));"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                return new ListAppointmentCommand(type, date);"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        final Matcher matcherForDay \u003d LIST_APPOINTMENT_COMMAND_FORMAT_DAY.matcher(trimmedArgs);"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        if (matcherForDay.matches()) {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                int type \u003d 4;"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"                LocalDate date \u003d ParserUtil.parseDate(matcherForDay.group(\"info\"));"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                return new ListAppointmentCommand(type, date);"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"                throw new ParseException("},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":80,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":" * Keyword matching is case sensitive."},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"public class FindCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all fields that matches any of\""},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"            + \" the specified option, prefixes \u0026 keywords (case-sensitive)\""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"            + \" and displays them as a list with index numbers.\\n\""},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: OPTION PREFIX/KEYWORD [MORE_PREFIX/MORE_KEYWORDS]...\\n\""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"            + \"Accepted Options: -o (CONTACT-RELATED), -p (PET-PATIENT-RELATED)\\n\""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"            + \"Accepted Prefixes for Contacts: n/NAME, nr/NRIC, t/TAG\\n\""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"            + \"Accepted Prefixes for Pet Patient: n/NAME, s/SPECIES, b/BREED, c/COLOUR, bt/BLOODTYPE, t/TAG\\n\""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"            + \"Example: \" + COMMAND_WORD + \" -o n/alice bob charlie\";"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private HashMap\u003cString, String[]\u003e hashMap;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    private int type \u003d 0;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    public FindCommand(HashMap\u003cString, String[]\u003e hashMap) {"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        this.hashMap \u003d hashMap;"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"ownerName\")"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"ownerNric\")"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"ownerTag\")) {"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"            type \u003d 1;"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"        } else if (hashMap.containsKey(\"petName\")"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"petSpecies\")"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"petBreed\")"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"petColour\")"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"petBloodType\")"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"                || hashMap.containsKey(\"petTag\")) {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"            type \u003d 2;"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        switch (type) {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        case 1:"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"            return findOwner();"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        case 2:"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            return findPetPatient();"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"     * Finds owners with given {@code predicate} in this {@code addressbook}."},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    private CommandResult findOwner() {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e finalPredicate \u003d null;"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"ownerName\")) {"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d hashMap.get(\"ownerName\");"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e namePredicate \u003d  person -\u003e Arrays.stream(nameKeywords)"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d namePredicate;"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"ownerNric\")) {"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"            String[] nricKeywords \u003d hashMap.get(\"ownerNric\");"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e  nricPredicate \u003d person -\u003e Arrays.stream(nricKeywords)"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getNric().toString(), keyword));"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d nricPredicate;"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(nricPredicate);"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"ownerTag\")) {"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d hashMap.get(\"ownerTag\");"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPerson\u003e tagPredicate \u003d person -\u003e Arrays.stream(tagKeywords)"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagString(), keyword));"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d tagPredicate;"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(tagPredicate);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(finalPredicate);"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        updatePetListForOwner();"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size())"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"                + getMessageForPetPatientListShownSummary(model.getFilteredPetPatientList().size()));"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     * Finds owners with given {@code predicate} in this {@code addressbook}."},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    private CommandResult findPetPatient() {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPetPatient\u003e finalPredicate \u003d null;"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petName\")) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"            String[] nameKeywords \u003d hashMap.get(\"petName\");"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e namePredicate \u003d  petPatient -\u003e Arrays.stream(nameKeywords)"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getName().fullName, keyword));"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            finalPredicate \u003d namePredicate;"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petSpecies\")) {"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"            String[] speciesKeywords \u003d hashMap.get(\"petSpecies\");"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e speciesPredicate \u003d  petPatient -\u003e Arrays.stream(speciesKeywords)"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getSpecies().species, keyword));"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d speciesPredicate;"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(speciesPredicate);"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petBreed\")) {"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"            String[] breedKeywords \u003d hashMap.get(\"petBreed\");"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e breedPredicate \u003d  petPatient -\u003e Arrays.stream(breedKeywords)"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getBreed().breed, keyword));"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d breedPredicate;"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(breedPredicate);"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petColour\")) {"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"            String[] colourKeywords \u003d hashMap.get(\"petColour\");"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e colourPredicate \u003d  petPatient -\u003e Arrays.stream(colourKeywords)"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getColour().colour, keyword));"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d colourPredicate;"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(colourPredicate);"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petBloodType\")) {"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"            String[] bloodTypeKeywords \u003d hashMap.get(\"petBloodType\");"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e bloodTypePredicate \u003d  petPatient -\u003e Arrays.stream(bloodTypeKeywords)"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"                            petPatient.getBloodType().bloodType, keyword));"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d bloodTypePredicate;"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(bloodTypePredicate);"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"        if (hashMap.containsKey(\"petTag\")) {"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"            String[] tagKeywords \u003d hashMap.get(\"petTag\");"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"            Predicate\u003cPetPatient\u003e tagPredicate \u003d petPatient -\u003e Arrays.stream(tagKeywords)"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getTagString(), keyword));"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"            if (finalPredicate \u003d\u003d null) {"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d tagPredicate;"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"            } else {"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"                finalPredicate \u003d finalPredicate.and(tagPredicate);"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPetPatientList(finalPredicate);"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"        updateOwnerListForPets();"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size())"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"                + \"\\n\""},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"                + getMessageForPetPatientListShownSummary(model.getFilteredPetPatientList().size()));"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"     * Updates the filtered pet list with the changed owners in this {@code addressbook}."},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"    private void updatePetListForOwner() {"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"        List\u003cString\u003e nricKeywordsForPets \u003d new ArrayList\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        for (Person person : model.getFilteredPersonList()) {"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"            nricKeywordsForPets.add(person.getNric().toString());"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPetPatient\u003e petPatientNricPredicate \u003d  petPatient -\u003e nricKeywordsForPets.stream()"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(petPatient.getOwner().toString(), keyword));"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPetPatientList(petPatientNricPredicate);"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"     * Updates the filtered person list with the changed pets in this {@code addressbook}."},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"    private void updateOwnerListForPets() {"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"        List\u003cString\u003e nricKeywordsForOwner \u003d new ArrayList\u003c\u003e();"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"        for (PetPatient petPatient : model.getFilteredPetPatientList()) {"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"            if (!nricKeywordsForOwner.contains(petPatient.getOwner().toString())) {"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"                nricKeywordsForOwner.add(petPatient.getOwner().toString());"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"        Predicate\u003cPerson\u003e ownerNricPredicate \u003d  person -\u003e nricKeywordsForOwner.stream()"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getNric().toString(), keyword));"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredPersonList(ownerNricPredicate);"},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.hashMap.equals(((FindCommand) other).hashMap)); // state check"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":212,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_PERSON;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.commands.EditCommand.Type.EDIT_PET_PATIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BREED;"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPECIES;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET_PATIENTS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditAppointmentDescriptor;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"import seedu.address.logic.descriptors.EditPetPatientDescriptor;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":" * Edits the details of an existing person, pet patient or appointment in the address book."},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"            + \": Edits the details of the contact / owner / appointment identified by their respective index numbers. \""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"            + \"Existing values will be overwritten by the input values. \""},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"            + \"Note that INDEX must be a positive integer.\\n\""},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing contact: \""},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -o \" + \"INDEX \""},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NAME + \"CONTACT_NAME] \""},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing pet patient: \""},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -p \" + \"INDEX \""},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NAME + \"PET_PATIENT_NAME] \""},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_BREED + \"BREED] \""},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_COLOUR + \"COLOUR] \""},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_BLOODTYPE + \"BLOOD_TYPE] \""},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_NRIC + \"OWNER_NRIC] \""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"            + \"To edit the details of an existing appointment: \""},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"            + COMMAND_WORD + \" -a \" + \"INDEX \""},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_DATE + \"YYYY-MM-DD HH:MM] \""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_REMARK + \"REMARK] \""},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"            // + \"[\" + PREFIX_NRIC + \"OWNER_NRIC] \""},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"            // + \"[\" + PREFIX_NAME + \"PET_PATIENT_NAME] \""},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"            + \"\\n\";"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Contact: %1$s\";"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_PET_PATIENT_SUCCESS \u003d \"Edited Pet Patient: %1$s\";"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment: %1$s\";"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This contact already exists in the address book.\";"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_PET_PATIENT \u003d \"This pet patient already exists in the address book.\";"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book.\";"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_MISSING_PERSON \u003d \"The target contact cannot be missing.\";"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_MISSING_PET_PATIENT \u003d \"The target pet patient cannot be missing\";"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_MISSING_APPOINTMENT \u003d \"The target appointment cannot be missing.\";"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT_TIMING \u003d \"Duplicate in appointment timing.\";"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PAST_APPOINTMENT \u003d \"Appointment cannot be in the past.\";"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_CONCURRENT_APPOINTMENT \u003d \"Appointment cannot be concurrent \""},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"            + \"with other appointments.\";"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"     * Enum to support the type of edit command that the user wishes to execute."},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"    public enum Type { EDIT_PERSON, EDIT_PET_PATIENT, EDIT_APPOINTMENT };"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    private Index index;"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    private EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    private EditPetPatientDescriptor editPetPatientDescriptor;"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    private EditAppointmentDescriptor editAppointmentDescriptor;"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"    private Type type;"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"    private Person personToEdit; // original"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"    private Person editedPerson; // edited"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"    private PetPatient petPatientToEdit;"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"    private PetPatient editedPetPatient;"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"    private Appointment appointmentToEdit;"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    private Appointment editedAppointment;"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_PERSON;"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"     * @param index of the pet patient in the filtered pet patient list to edit"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"     * @param editPetPatientDescriptor details to edit the pet patient with"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editPetPatientDescriptor);"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"        this.editPetPatientDescriptor \u003d new EditPetPatientDescriptor(editPetPatientDescriptor);"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_PET_PATIENT;"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"     * @param index of the appointment in the filtered appointment list to edit"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"     * @param editAppointmentDescriptor details to edit the appointment with"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"    public EditCommand(Index index, EditAppointmentDescriptor editAppointmentDescriptor) {"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        requireNonNull(index);"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editAppointmentDescriptor);"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"        this.index \u003d index;"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"        this.editAppointmentDescriptor \u003d new EditAppointmentDescriptor(editAppointmentDescriptor);"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"        this.type \u003d EDIT_APPOINTMENT;"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"            switch (type) {"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"            case EDIT_PERSON:"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                resolvePersonDependencies();"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"            case EDIT_PET_PATIENT:"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"                resolvePetPatientDependencies();"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"                model.updatePetPatient(petPatientToEdit, editedPetPatient);"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"            case EDIT_APPOINTMENT:"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"                checkForClashes();"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"                // checkForSameAppointmentTiming();"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"                checkForConcurrentAppointments();"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"                checkForPastAppointment();"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"                model.updateAppointment(appointmentToEdit, editedAppointment);"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"            default:"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"                break;"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_MISSING_PERSON);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException dppe) {"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET_PATIENT);"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"        } catch (PetPatientNotFoundException ppnfe) {"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_MISSING_PET_PATIENT);"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicateDateTimeException ddte) {"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT_TIMING);"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_MISSING_APPOINTMENT);"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"        } catch (PastAppointmentException pae) {"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_PAST_APPOINTMENT);"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"        } catch (ConcurrentAppointmentException cae) {"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(MESSAGE_CONCURRENT_APPOINTMENT);"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PET_PATIENT_SUCCESS, editedPetPatient));"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, editedAppointment));"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"            return null;"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"     * Checks whether person\u0027s NRIC has been modified"},{"lineNumber":228,"author":{"gitID":"chialejing"},"content":"     * If yes, update all other relevant pet patients and appointments under the same person"},{"lineNumber":229,"author":{"gitID":"chialejing"},"content":"     * If no, do nothing"},{"lineNumber":230,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"chialejing"},"content":"    private void resolvePersonDependencies() throws DuplicatePetPatientException, PetPatientNotFoundException,"},{"lineNumber":232,"author":{"gitID":"chialejing"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":233,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":234,"author":{"gitID":"chialejing"},"content":"        Nric oldNric \u003d personToEdit.getNric();"},{"lineNumber":235,"author":{"gitID":"chialejing"},"content":"        Nric newNric \u003d editedPerson.getNric();"},{"lineNumber":236,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":237,"author":{"gitID":"chialejing"},"content":"        if (!oldNric.equals(newNric)) {"},{"lineNumber":238,"author":{"gitID":"chialejing"},"content":"            updatePetPatientsByOwnerNric(oldNric, newNric);"},{"lineNumber":239,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByOwnerNric(oldNric, newNric);"},{"lineNumber":240,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":243,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"chialejing"},"content":"     * Checks whether pet patient\u0027s name or owner NRIC has been modified"},{"lineNumber":245,"author":{"gitID":"chialejing"},"content":"     * If yes, update all other relevant appointments and also the update the new owner for the pet"},{"lineNumber":246,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"chialejing"},"content":"    private void resolvePetPatientDependencies() throws CommandException,"},{"lineNumber":248,"author":{"gitID":"chialejing"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":249,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":250,"author":{"gitID":"chialejing"},"content":"        Nric oldNric \u003d petPatientToEdit.getOwner();"},{"lineNumber":251,"author":{"gitID":"chialejing"},"content":"        Nric newNric \u003d editedPetPatient.getOwner();"},{"lineNumber":252,"author":{"gitID":"chialejing"},"content":"        PetPatientName oldPetName \u003d petPatientToEdit.getName();"},{"lineNumber":253,"author":{"gitID":"chialejing"},"content":"        PetPatientName newPetName \u003d editedPetPatient.getName();"},{"lineNumber":254,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"        if (!oldNric.equals(newNric)) { // nric edited, I want to change owner"},{"lineNumber":256,"author":{"gitID":"chialejing"},"content":"            Person newOwner \u003d model.getPersonWithNric(newNric); // new owner must exist"},{"lineNumber":257,"author":{"gitID":"chialejing"},"content":"            if (newOwner \u003d\u003d null) {"},{"lineNumber":258,"author":{"gitID":"chialejing"},"content":"                throw new CommandException(\"New owner must exist first before updating pet patient\u0027s owner NRIC!\");"},{"lineNumber":259,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":260,"author":{"gitID":"chialejing"},"content":"            // we only update nric for appointments for that specific pet patient!"},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"            // this is because it might be an owner transfer. If there are some other pets under the previous owner,"},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":"            // he/she may still be holding on to these pets."},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByOwnerNricForSpecificPetName(oldNric, newNric, oldPetName);"},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":"        if (!oldPetName.equals(newPetName)) { // name edited"},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"            updateAppointmentByPetPatientName(newNric, oldPetName, newPetName);"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"     * Checks whether there are clashes in appointment date and time (i.e. same timing with another appointment)"},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"    private void checkForClashes() throws DuplicateDateTimeException {"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"        LocalDateTime oldDateTime \u003d appointmentToEdit.getDateTime();"},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"        LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"        if (!oldDateTime.equals(newDateTime)) {"},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"            Appointment appointmentWithClash \u003d model.getClashingAppointment(newDateTime);"},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":"            if (appointmentWithClash !\u003d null) {"},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":"                throw new DuplicateDateTimeException();"},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":282,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":285,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"chialejing"},"content":"     * Checks whether there are clashes in appointment date and time (concurrent appointments)"},{"lineNumber":287,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"chialejing"},"content":"    private void checkForConcurrentAppointments() throws ConcurrentAppointmentException {"},{"lineNumber":289,"author":{"gitID":"chialejing"},"content":"        LocalDateTime oldDateTime \u003d appointmentToEdit.getDateTime();"},{"lineNumber":290,"author":{"gitID":"chialejing"},"content":"        LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":291,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":292,"author":{"gitID":"chialejing"},"content":"        if (model.hasConcurrentAppointment(oldDateTime, newDateTime)) {"},{"lineNumber":293,"author":{"gitID":"chialejing"},"content":"            throw new ConcurrentAppointmentException();"},{"lineNumber":294,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":297,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"chialejing"},"content":"     * Checks whether appointment datetime given is in the past"},{"lineNumber":299,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"chialejing"},"content":"    private void checkForPastAppointment() throws PastAppointmentException {"},{"lineNumber":301,"author":{"gitID":"chialejing"},"content":"        LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":302,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":303,"author":{"gitID":"chialejing"},"content":"        if (newDateTime.isBefore(LocalDateTime.now())) {"},{"lineNumber":304,"author":{"gitID":"chialejing"},"content":"            throw new PastAppointmentException();"},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"     * Checks whether the new timing for the appointment is equivalent to the old one"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":"    private void checkForSameAppointmentTiming() throws CommandException {"},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"        LocalDateTime oldDateTime \u003d appointmentToEdit.getDateTime();"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"        LocalDateTime newDateTime \u003d editedAppointment.getDateTime();"},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"        if (newDateTime.equals(oldDateTime)) {"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(\"Appointment timing has not changed.\");"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":"     * Helper function to update pet patient\u0027s owner from an old nric to new nric"},{"lineNumber":322,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"chialejing"},"content":"    private void updatePetPatientsByOwnerNric(Nric oldNric, Nric newNric) throws"},{"lineNumber":324,"author":{"gitID":"chialejing"},"content":"            PetPatientNotFoundException, DuplicatePetPatientException {"},{"lineNumber":325,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":326,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cPetPatient\u003e petPatientArrayList \u003d model.getPetPatientsWithNric(oldNric);"},{"lineNumber":327,"author":{"gitID":"chialejing"},"content":"        EditPetPatientDescriptor eppd \u003d new EditPetPatientDescriptor();"},{"lineNumber":328,"author":{"gitID":"chialejing"},"content":"        eppd.setOwnerNric(newNric);"},{"lineNumber":329,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":330,"author":{"gitID":"chialejing"},"content":"        for (PetPatient currPetPatient : petPatientArrayList) {"},{"lineNumber":331,"author":{"gitID":"chialejing"},"content":"            PetPatient modifiedPetPatient \u003d createEditedPetPatient(currPetPatient, eppd);"},{"lineNumber":332,"author":{"gitID":"chialejing"},"content":"            model.updatePetPatient(currPetPatient, modifiedPetPatient);"},{"lineNumber":333,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":334,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":337,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"chialejing"},"content":"     * Helper function to update appointment\u0027s owner from an old nric to new nric"},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"chialejing"},"content":"    private void updateAppointmentByOwnerNric(Nric oldNric, Nric newNric) throws"},{"lineNumber":341,"author":{"gitID":"chialejing"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":342,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":343,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d model.getAppointmentsWithNric(oldNric);"},{"lineNumber":344,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor ead \u003d new EditAppointmentDescriptor();"},{"lineNumber":345,"author":{"gitID":"chialejing"},"content":"        ead.setOwnerNric(newNric);"},{"lineNumber":346,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":347,"author":{"gitID":"chialejing"},"content":"        for (Appointment currAppointment : appointmentArrayList) {"},{"lineNumber":348,"author":{"gitID":"chialejing"},"content":"            Appointment modifiedAppointment \u003d createEditedAppointment(currAppointment, ead);"},{"lineNumber":349,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(currAppointment, modifiedAppointment);"},{"lineNumber":350,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":351,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":352,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":353,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":354,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":355,"author":{"gitID":"chialejing"},"content":"     * Helper function to update pet patient name in appointment"},{"lineNumber":356,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":357,"author":{"gitID":"chialejing"},"content":"    private void updateAppointmentByPetPatientName(Nric ownerNric, PetPatientName oldPetName,"},{"lineNumber":358,"author":{"gitID":"chialejing"},"content":"                                                   PetPatientName newPetName) throws"},{"lineNumber":359,"author":{"gitID":"chialejing"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":360,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":361,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d"},{"lineNumber":362,"author":{"gitID":"chialejing"},"content":"                model.getAppointmentsWithNricAndPetName(ownerNric, oldPetName);"},{"lineNumber":363,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor ead \u003d new EditAppointmentDescriptor();"},{"lineNumber":364,"author":{"gitID":"chialejing"},"content":"        ead.setPetPatientName(newPetName);"},{"lineNumber":365,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":366,"author":{"gitID":"chialejing"},"content":"        for (Appointment currAppointment : appointmentArrayList) {"},{"lineNumber":367,"author":{"gitID":"chialejing"},"content":"            Appointment modifiedAppointment \u003d createEditedAppointment(currAppointment, ead);"},{"lineNumber":368,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(currAppointment, modifiedAppointment);"},{"lineNumber":369,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":370,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":371,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":372,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":373,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":374,"author":{"gitID":"chialejing"},"content":"     * Helper function to update the pet patient owner\u0027s NRIC for all its appointment"},{"lineNumber":375,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":376,"author":{"gitID":"chialejing"},"content":"    private void updateAppointmentByOwnerNricForSpecificPetName(Nric oldNric, Nric newNric, PetPatientName oldPetName)"},{"lineNumber":377,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":378,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":379,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d"},{"lineNumber":380,"author":{"gitID":"chialejing"},"content":"                model.getAppointmentsWithNricAndPetName(oldNric, oldPetName);"},{"lineNumber":381,"author":{"gitID":"chialejing"},"content":"        EditAppointmentDescriptor ead \u003d new EditAppointmentDescriptor();"},{"lineNumber":382,"author":{"gitID":"chialejing"},"content":"        ead.setOwnerNric(newNric);"},{"lineNumber":383,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":384,"author":{"gitID":"chialejing"},"content":"        for (Appointment currAppointment : appointmentArrayList) {"},{"lineNumber":385,"author":{"gitID":"chialejing"},"content":"            Appointment modifiedAppointment \u003d createEditedAppointment(currAppointment, ead);"},{"lineNumber":386,"author":{"gitID":"chialejing"},"content":"            model.updateAppointment(currAppointment, modifiedAppointment);"},{"lineNumber":387,"author":{"gitID":"chialejing"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":388,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":389,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":391,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":392,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":393,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":394,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":395,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForPerson();"},{"lineNumber":396,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":397,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":398,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForPetPatient();"},{"lineNumber":399,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":400,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":401,"author":{"gitID":"chialejing"},"content":"            preprocessUndoableCommandForAppointment();"},{"lineNumber":402,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":403,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":404,"author":{"gitID":"chialejing"},"content":"            break;"},{"lineNumber":405,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":406,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":408,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown person list."},{"lineNumber":409,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":410,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForPerson() throws CommandException {"},{"lineNumber":411,"author":{"gitID":"chialejing"},"content":"        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":412,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":413,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownPersonList.size()) {"},{"lineNumber":414,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":415,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":416,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":417,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":418,"author":{"gitID":"chialejing"},"content":"        personToEdit \u003d lastShownPersonList.get(index.getZeroBased());"},{"lineNumber":419,"author":{"gitID":"chialejing"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":420,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":422,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":423,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown pet patient list."},{"lineNumber":424,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":425,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForPetPatient() throws CommandException {"},{"lineNumber":426,"author":{"gitID":"chialejing"},"content":"        List\u003cPetPatient\u003e lastShownPetPatientList \u003d model.getFilteredPetPatientList();"},{"lineNumber":427,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":428,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownPetPatientList.size()) {"},{"lineNumber":429,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PET_PATIENT_DISPLAYED_INDEX);"},{"lineNumber":430,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":431,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":432,"author":{"gitID":"chialejing"},"content":"        petPatientToEdit \u003d lastShownPetPatientList.get(index.getZeroBased());"},{"lineNumber":433,"author":{"gitID":"chialejing"},"content":"        editedPetPatient \u003d createEditedPetPatient(petPatientToEdit, editPetPatientDescriptor);"},{"lineNumber":434,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":435,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":436,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":437,"author":{"gitID":"chialejing"},"content":"     * Obtains the last shown appointment list."},{"lineNumber":438,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":439,"author":{"gitID":"chialejing"},"content":"    protected void preprocessUndoableCommandForAppointment() throws CommandException {"},{"lineNumber":440,"author":{"gitID":"chialejing"},"content":"        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":441,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":442,"author":{"gitID":"chialejing"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownAppointmentList.size()) {"},{"lineNumber":443,"author":{"gitID":"chialejing"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);"},{"lineNumber":444,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":445,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":446,"author":{"gitID":"chialejing"},"content":"        appointmentToEdit \u003d lastShownAppointmentList.get(index.getZeroBased());"},{"lineNumber":447,"author":{"gitID":"chialejing"},"content":"        editedAppointment \u003d createEditedAppointment(appointmentToEdit, editAppointmentDescriptor);"},{"lineNumber":448,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":450,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":451,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":452,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":453,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":454,"author":{"gitID":"chialejing"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":455,"author":{"gitID":"chialejing"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":456,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":457,"author":{"gitID":"chialejing"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":458,"author":{"gitID":"chialejing"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":459,"author":{"gitID":"chialejing"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":460,"author":{"gitID":"chialejing"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":461,"author":{"gitID":"chialejing"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());"},{"lineNumber":462,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":463,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":464,"author":{"gitID":"chialejing"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedNric, updatedTags);"},{"lineNumber":465,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":466,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":467,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":468,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code PetPatient} with the details of {@code petPatientToEdit}"},{"lineNumber":469,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editPetPatientDescriptor}."},{"lineNumber":470,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":471,"author":{"gitID":"chialejing"},"content":"    private static PetPatient createEditedPetPatient(PetPatient petPatientToEdit,"},{"lineNumber":472,"author":{"gitID":"chialejing"},"content":"                                                     EditPetPatientDescriptor editPetPatientDescriptor) {"},{"lineNumber":473,"author":{"gitID":"chialejing"},"content":"        assert petPatientToEdit !\u003d null;"},{"lineNumber":474,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":475,"author":{"gitID":"chialejing"},"content":"        PetPatientName updatedName \u003d editPetPatientDescriptor.getName().orElse(petPatientToEdit.getName());"},{"lineNumber":476,"author":{"gitID":"chialejing"},"content":"        Species updatedSpecies \u003d editPetPatientDescriptor.getSpecies().orElse(petPatientToEdit.getSpecies());"},{"lineNumber":477,"author":{"gitID":"chialejing"},"content":"        Breed updatedBreed \u003d editPetPatientDescriptor.getBreed().orElse(petPatientToEdit.getBreed());"},{"lineNumber":478,"author":{"gitID":"chialejing"},"content":"        Colour updatedColour \u003d editPetPatientDescriptor.getColour().orElse(petPatientToEdit.getColour());"},{"lineNumber":479,"author":{"gitID":"chialejing"},"content":"        BloodType updatedBloodType \u003d editPetPatientDescriptor.getBloodType().orElse(petPatientToEdit.getBloodType());"},{"lineNumber":480,"author":{"gitID":"chialejing"},"content":"        Nric updatedOwnerNric \u003d editPetPatientDescriptor.getOwnerNric().orElse(petPatientToEdit.getOwner());"},{"lineNumber":481,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPetPatientDescriptor.getTags().orElse(petPatientToEdit.getTags());"},{"lineNumber":482,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":483,"author":{"gitID":"chialejing"},"content":"        return new PetPatient("},{"lineNumber":484,"author":{"gitID":"chialejing"},"content":"                updatedName,"},{"lineNumber":485,"author":{"gitID":"chialejing"},"content":"                updatedSpecies,"},{"lineNumber":486,"author":{"gitID":"chialejing"},"content":"                updatedBreed,"},{"lineNumber":487,"author":{"gitID":"chialejing"},"content":"                updatedColour,"},{"lineNumber":488,"author":{"gitID":"chialejing"},"content":"                updatedBloodType,"},{"lineNumber":489,"author":{"gitID":"chialejing"},"content":"                updatedOwnerNric,"},{"lineNumber":490,"author":{"gitID":"chialejing"},"content":"                updatedTags"},{"lineNumber":491,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":492,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":493,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":494,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":495,"author":{"gitID":"chialejing"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToEdit}"},{"lineNumber":496,"author":{"gitID":"chialejing"},"content":"     * edited with {@code editAppointmentDescriptor}."},{"lineNumber":497,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":498,"author":{"gitID":"chialejing"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,"},{"lineNumber":499,"author":{"gitID":"chialejing"},"content":"                                                       EditAppointmentDescriptor editAppointmentDescriptor) {"},{"lineNumber":500,"author":{"gitID":"chialejing"},"content":"        assert appointmentToEdit !\u003d null;"},{"lineNumber":501,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":502,"author":{"gitID":"chialejing"},"content":"        Nric updatedOwnerNric \u003d editAppointmentDescriptor.getOwnerNric()"},{"lineNumber":503,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getOwnerNric());"},{"lineNumber":504,"author":{"gitID":"chialejing"},"content":"        PetPatientName updatedPetPatientName \u003d editAppointmentDescriptor.getPetPatientName()"},{"lineNumber":505,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getPetPatientName());"},{"lineNumber":506,"author":{"gitID":"chialejing"},"content":"        Remark updatedRemark \u003d editAppointmentDescriptor.getRemark()"},{"lineNumber":507,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getRemark());"},{"lineNumber":508,"author":{"gitID":"chialejing"},"content":"        LocalDateTime updatedLocalDateTime \u003d editAppointmentDescriptor.getLocalDateTime()"},{"lineNumber":509,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getDateTime());"},{"lineNumber":510,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e updatedTags \u003d editAppointmentDescriptor.getTags()"},{"lineNumber":511,"author":{"gitID":"chialejing"},"content":"                .orElse(appointmentToEdit.getAppointmentTags());"},{"lineNumber":512,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":513,"author":{"gitID":"chialejing"},"content":"        return new Appointment("},{"lineNumber":514,"author":{"gitID":"chialejing"},"content":"                updatedOwnerNric,"},{"lineNumber":515,"author":{"gitID":"chialejing"},"content":"                updatedPetPatientName,"},{"lineNumber":516,"author":{"gitID":"chialejing"},"content":"                updatedRemark,"},{"lineNumber":517,"author":{"gitID":"chialejing"},"content":"                updatedLocalDateTime,"},{"lineNumber":518,"author":{"gitID":"chialejing"},"content":"                updatedTags"},{"lineNumber":519,"author":{"gitID":"chialejing"},"content":"        );"},{"lineNumber":520,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":521,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":522,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":523,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"        // short circuit if same object"},{"lineNumber":525,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":527,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":528,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":529,"author":{"gitID":"chialejing"},"content":"        // instanceof handles nulls"},{"lineNumber":530,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":531,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":532,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":533,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":534,"author":{"gitID":"chialejing"},"content":"        // state check"},{"lineNumber":535,"author":{"gitID":"chialejing"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":536,"author":{"gitID":"chialejing"},"content":"        switch (type) {"},{"lineNumber":537,"author":{"gitID":"chialejing"},"content":"        case EDIT_PERSON:"},{"lineNumber":538,"author":{"gitID":"chialejing"},"content":"            return index.equals(e.index)"},{"lineNumber":539,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":540,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"        case EDIT_PET_PATIENT:"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"            return index.equals(e.index)"},{"lineNumber":543,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 editPetPatientDescriptor.equals(e.editPetPatientDescriptor)"},{"lineNumber":544,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 Objects.equals(petPatientToEdit, e.petPatientToEdit);"},{"lineNumber":545,"author":{"gitID":"chialejing"},"content":"        case EDIT_APPOINTMENT:"},{"lineNumber":546,"author":{"gitID":"chialejing"},"content":"            return index.equals(e.index)"},{"lineNumber":547,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor)"},{"lineNumber":548,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 Objects.equals(appointmentToEdit, e.appointmentToEdit);"},{"lineNumber":549,"author":{"gitID":"chialejing"},"content":"        default:"},{"lineNumber":550,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":551,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":552,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":553,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":524,"Robert-Peng":2,"wynonaK":1,"-":26}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"     * Backups the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"     * @throws IOException if there was any problem backing up the file."},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":6,"-":45}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":4,"-":92}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.CliSyntax;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CliSyntax cliSyntax;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // person details"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e nricInModel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e personTagsInModel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    // pet patient details"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e petPatientNamesInModel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e speciesInModel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e breedsInModel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e coloursInModel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e bloodTypesInModel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e petPatientTagsInModel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // appointment details"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e appointmentTagsInModel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        cliSyntax \u003d CliSyntax.getInstance();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"Robert-Peng"},"content":"    public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":80,"author":{"gitID":"Robert-Peng"},"content":"        return model.getFilteredPetPatientList();"},{"lineNumber":81,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":83,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        return model.getFilteredAppointmentList(); }"},{"lineNumber":86,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":93,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllCommandWords() {"},{"lineNumber":95,"author":{"gitID":"Aquarinte"},"content":"        return cliSyntax.getCommandWords();"},{"lineNumber":96,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":98,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getCommandWordsWithOptionPrefix() {"},{"lineNumber":100,"author":{"gitID":"Aquarinte"},"content":"        return cliSyntax.getCommandWordsWithOptionPrefix();"},{"lineNumber":101,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":103,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPrefixes() {"},{"lineNumber":105,"author":{"gitID":"Aquarinte"},"content":"        return cliSyntax.getPrefixes();"},{"lineNumber":106,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":108,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllOptions() {"},{"lineNumber":110,"author":{"gitID":"Aquarinte"},"content":"        return cliSyntax.getOptions();"},{"lineNumber":111,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":113,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllNric() {"},{"lineNumber":115,"author":{"gitID":"Aquarinte"},"content":"        return nricInModel;"},{"lineNumber":116,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":118,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPersonTags() {"},{"lineNumber":120,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e personTags \u003d personTagsInModel.stream()"},{"lineNumber":121,"author":{"gitID":"Aquarinte"},"content":"                .map(pt -\u003e pt.tagName)"},{"lineNumber":122,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":123,"author":{"gitID":"Aquarinte"},"content":"        return personTags;"},{"lineNumber":124,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":126,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientNames() {"},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"        return petPatientNamesInModel;"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientSpecies() {"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"        return speciesInModel;"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientBreeds() {"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":"        return breedsInModel;"},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientColours() {"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"        return coloursInModel;"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientBloodTypes() {"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":"        return bloodTypesInModel;"},{"lineNumber":149,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":151,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllPetPatientTags() {"},{"lineNumber":153,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e petPatientTags \u003d petPatientTagsInModel.stream()"},{"lineNumber":154,"author":{"gitID":"Aquarinte"},"content":"                .map(ppt -\u003e ppt.tagName)"},{"lineNumber":155,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":156,"author":{"gitID":"Aquarinte"},"content":"        return petPatientTags;"},{"lineNumber":157,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":159,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllAppointmentTags() {"},{"lineNumber":161,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e appointmentTags \u003d appointmentTagsInModel.stream()"},{"lineNumber":162,"author":{"gitID":"Aquarinte"},"content":"                .map(a -\u003e a.tagName)"},{"lineNumber":163,"author":{"gitID":"Aquarinte"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":164,"author":{"gitID":"Aquarinte"},"content":"        return appointmentTags;"},{"lineNumber":165,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":167,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"Aquarinte"},"content":"    public void setAttributesForPersonObjects() {"},{"lineNumber":169,"author":{"gitID":"Aquarinte"},"content":"        nricInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":170,"author":{"gitID":"Aquarinte"},"content":"        personTagsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":172,"author":{"gitID":"Aquarinte"},"content":"        for (Person p : model.getAddressBook().getPersonList()) {"},{"lineNumber":173,"author":{"gitID":"Aquarinte"},"content":"            nricInModel.add(p.getNric().toString());"},{"lineNumber":174,"author":{"gitID":"Aquarinte"},"content":"            personTagsInModel.addAll(p.getTags());"},{"lineNumber":175,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":178,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"Aquarinte"},"content":"    public void setAttributesForPetPatientObjects() {"},{"lineNumber":180,"author":{"gitID":"Aquarinte"},"content":"        petPatientNamesInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":181,"author":{"gitID":"Aquarinte"},"content":"        speciesInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":182,"author":{"gitID":"Aquarinte"},"content":"        breedsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":183,"author":{"gitID":"Aquarinte"},"content":"        coloursInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":184,"author":{"gitID":"Aquarinte"},"content":"        bloodTypesInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":185,"author":{"gitID":"Aquarinte"},"content":"        petPatientTagsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":186,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":187,"author":{"gitID":"Aquarinte"},"content":"        for (PetPatient p : model.getAddressBook().getPetPatientList()) {"},{"lineNumber":188,"author":{"gitID":"Aquarinte"},"content":"            petPatientNamesInModel.add(p.getName().toString());"},{"lineNumber":189,"author":{"gitID":"Aquarinte"},"content":"            speciesInModel.add(p.getSpecies().toString());"},{"lineNumber":190,"author":{"gitID":"Aquarinte"},"content":"            breedsInModel.add(p.getBreed().toString());"},{"lineNumber":191,"author":{"gitID":"Aquarinte"},"content":"            coloursInModel.add(p.getColour().toString());"},{"lineNumber":192,"author":{"gitID":"Aquarinte"},"content":"            bloodTypesInModel.add(p.getBloodType().toString());"},{"lineNumber":193,"author":{"gitID":"Aquarinte"},"content":"            petPatientTagsInModel.addAll(p.getTags());"},{"lineNumber":194,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":197,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"Aquarinte"},"content":"    public void setAttributesForAppointmentObjects() {"},{"lineNumber":199,"author":{"gitID":"Aquarinte"},"content":"        appointmentTagsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":200,"author":{"gitID":"Aquarinte"},"content":"        for (Appointment a : model.getAddressBook().getAppointmentList()) {"},{"lineNumber":201,"author":{"gitID":"Aquarinte"},"content":"            appointmentTagsInModel.addAll(a.getTag());"},{"lineNumber":202,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":205,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"Aquarinte"},"content":"    public Set\u003cString\u003e getAllTagsInModel() {"},{"lineNumber":207,"author":{"gitID":"Aquarinte"},"content":"        Set\u003cString\u003e tagsInModel \u003d new HashSet\u003c\u003e();"},{"lineNumber":208,"author":{"gitID":"Aquarinte"},"content":"        for (Tag t : model.getTagList()) {"},{"lineNumber":209,"author":{"gitID":"Aquarinte"},"content":"            tagsInModel.add(t.tagName);"},{"lineNumber":210,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"Aquarinte"},"content":"        return tagsInModel;"},{"lineNumber":212,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":122,"chialejing":1,"Robert-Peng":9,"wynonaK":1,"-":80}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        String backupFilePath \u003d filePath + \".backup\";"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        saveAddressBook(addressBook, backupFilePath);"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":1,"chialejing":6,"-":82}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.model.person.NRIC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Contact\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"    private String nric;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"                            String nric, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"        this.nric \u003d nric;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":73,"author":{"gitID":"Robert-Peng"},"content":"        nric \u003d source.getNric().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"Robert-Peng"},"content":"        if (this.nric \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Robert-Peng"},"content":"        if (!Nric.isValidNric(this.nric)) {"},{"lineNumber":127,"author":{"gitID":"Robert-Peng"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Robert-Peng"},"content":"        final Nric nric \u003d new Nric(this.nric);"},{"lineNumber":130,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":132,"author":{"gitID":"Robert-Peng"},"content":"        return new Person(name, phone, email, address, nric, tags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":150,"author":{"gitID":"Robert-Peng"},"content":"                \u0026\u0026 Objects.equals(nric, otherPerson.nric)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":17,"wynonaK":1,"-":135}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedPetPatient\u003e petPatients;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new)"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new)"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new)"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"        petPatients.addAll(src.getPetPatientList().stream().map(XmlAdaptedPetPatient::new)"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    public AddressBook toModelType() throws IllegalValueException,"},{"lineNumber":64,"author":{"gitID":"Robert-Peng"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        for (XmlAdaptedAppointment a : appointments) {"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedPetPatient pp : petPatients) {"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"            addressBook.addPetPatient(pp.toModelType());"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments)"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 petPatients.equals(otherAb.petPatients);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":4,"chialejing":12,"wynonaK":12,"-":69}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":"//import com.calendarfx.view.CalendarView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Medeina ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"                logger.info(\"Data file not found. Will be starting with a sample Medeina\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Medeina\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Medeina\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":136,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Medeina\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"        logger.info(\"Starting Medeina \" + MainApp.VERSION);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Medeina ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":2,"chialejing":1,"wynonaK":7,"-":203}},{"path":"src/main/java/seedu/address/logic/commands/ListAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.time.Year;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.time.YearMonth;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeDayViewRequestEvent;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeMonthViewRequestEvent;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeWeekViewRequestEvent;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.commons.events.ui.ChangeYearViewRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.NoAppointmentInYearException;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":" * Lists appointments based on the specified year, month, week or day."},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"public class ListAppointmentCommand extends Command {"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_WORD \u003d \"listappt\";"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    public static final String COMMAND_ALIAS \u003d \"la\";"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully listed appointments in the %1$s view requested.\";"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": To handle all appointment related listings.\\n\""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"            + \"Parameters: OPTION FIELD\\n\""},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"            + \"Accepted Options: -y (YEAR VIEW), -m (MONTH VIEW), -w (WEEK VIEW), -d (DAY VIEW)\\n\""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"            + \"YEAR VIEW accepts a year field in the format of yyyy.\\n\""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"            + \"MONTH VIEW accepts a year and month field in the format of yyyy-MM\""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"            + \" or just a month field in the format of MM, of which the year will be defaulted to this current year.\\n\""},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"            + \"WEEK VIEW accepts a date field in the format of yyyy-MM-dd.\\n\""},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"            + \"DAY VIEW accepts a date field in the format of yyyy-MM-dd.\\n\""},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"            + \"If nothing is given as a FIELD, it will return the specified view of the current date.\\n\""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"            + \"You can only list past appointments if you had an appointment in the year of the specified field.\";"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"    private int type \u003d 0; //year \u003d 1, month \u003d 2, week \u003d 3, day \u003d 4."},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    private Year year \u003d null;"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    private YearMonth yearMonth \u003d null;"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    private LocalDate date \u003d null;"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public ListAppointmentCommand(int type, Year year) {"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d type;"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        this.year \u003d year;"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    public ListAppointmentCommand(int type, YearMonth yearMonth) {"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d type;"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        this.yearMonth \u003d yearMonth;"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"    public ListAppointmentCommand(int type, LocalDate date) {"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        this.type \u003d type;"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        this.date \u003d date;"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    private CommandResult getYearView() throws NoAppointmentInYearException {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"        if (year.isBefore(Year.now())) {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"            if (!checkPastAppointment(year.getValue())) {"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"                throw new NoAppointmentInYearException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        EventsCenter.getInstance().post(new ChangeYearViewRequestEvent(year));"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"year\"));"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    private CommandResult getMonthView() throws NoAppointmentInYearException {"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        if (yearMonth.isBefore(YearMonth.now())) {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            if (!checkPastAppointment(yearMonth.getYear())) {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                throw new NoAppointmentInYearException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        EventsCenter.getInstance().post(new ChangeMonthViewRequestEvent(yearMonth));"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"month\"));"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    private CommandResult getWeekView() throws NoAppointmentInYearException {"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        if (date.isBefore(LocalDate.now())) {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            if (!checkPastAppointment(date.getYear())) {"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                throw new NoAppointmentInYearException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        EventsCenter.getInstance().post(new ChangeWeekViewRequestEvent(date));"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"week\"));"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    private CommandResult getDayView() throws NoAppointmentInYearException {"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        if (date.isBefore(LocalDate.now())) {"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"            if (!checkPastAppointment(date.getYear())) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"                throw new NoAppointmentInYearException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        EventsCenter.getInstance().post(new ChangeDayViewRequestEvent(date));"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, \"day\"));"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"     * Check if there exists a past appointment with in the {@code model} with the {@code year} specified."},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    private boolean checkPastAppointment(int year) {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        for (Appointment appointment : appointmentList) {"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"            if  (appointment.getDateTime().getYear() \u003d\u003d year)  {"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                return true;"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        return false;"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            switch (type) {"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"            case 1:"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"                return getYearView();"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            case 2:"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"                return getMonthView();"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"            case 3:"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"                return getWeekView();"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"            case 4:"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"                return getDayView();"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"            default:"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"                throw new CommandException(MESSAGE_USAGE);"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"        } catch (NoAppointmentInYearException e) {"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"            throw new CommandException(\"You can only list past appointments if you had an appointment\""},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"                    + \" in the year of the specified field!\");"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof ListAppointmentCommand)) {"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"        ListAppointmentCommand otherListAppointmentCommand \u003d (ListAppointmentCommand) other;"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"        boolean yearSame \u003d isTheSame(year, otherListAppointmentCommand.year);"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"        boolean yearMonthSame \u003d isTheSame(yearMonth, otherListAppointmentCommand.yearMonth);"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"        boolean dateSame \u003d isTheSame(date, otherListAppointmentCommand.date);"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"        if (yearSame || yearMonthSame || dateSame) {"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"     * Checks if both objects are the same."},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"     * Returns true if both objects are equivalent."},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"     * Returns true if both objects are null."},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"    public boolean isTheSame(Object one, Object two) {"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"        if (one !\u003d null \u0026\u0026 two !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"            if (one.equals(two)) {"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"                return true;"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"        if (one \u003d\u003d null \u0026\u0026 two \u003d\u003d null) {"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"        return false;"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":1,"wynonaK":176,"-":5}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":" * Represents an Appointment."},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"public class Appointment {"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"    private Nric ownerNric;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    private PetPatientName petPatientName;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"    private Remark remark; //remarks"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    private LocalDateTime localDateTime; //date of appointment"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    private UniqueTagList appointmentTags; //type of appointment"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    public Appointment(Nric ownerNric, PetPatientName petPatientName, Remark remark,"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"                       LocalDateTime localDateTime, Set\u003cTag\u003e appointmentTags) {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d new UniqueTagList(appointmentTags);"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"     * ownerNric and petName can be set later using setter methods."},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    public Appointment(Remark remark, LocalDateTime localDateTime, Set\u003cTag\u003e type) {"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(remark, localDateTime, type);"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        this.localDateTime \u003d localDateTime;"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        this.appointmentTags \u003d new UniqueTagList(type);"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public Nric getOwnerNric() {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        return ownerNric;"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"    public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"    public PetPatientName getPetPatientName() {"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"        return petPatientName;"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    public void setPetPatientName(PetPatientName petPatientName) {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public Remark getRemark() {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        return remark;"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"        return localDateTime;"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    public String getFormattedLocalDateTime() {"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        return localDateTime.format(formatter);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"     * if modification is attempted."},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"    public Set\u003cTag\u003e getAppointmentTags() {"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        return Collections.unmodifiableSet(appointmentTags.toSet());"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        return otherAppointment.getOwnerNric().equals(this.getOwnerNric())"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getPetPatientName().equals((this.getPetPatientName()))"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getRemark().equals(this.getRemark())"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 otherAppointment.getDateTime().equals(this.getDateTime());"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"        return Objects.hash(ownerNric, petPatientName, remark, localDateTime, appointmentTags);"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        builder.append(\"    \")"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                .append(getFormattedLocalDateTime())"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"                .append(\"    Remarks: \")"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"                .append(getRemark())"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"                .append(\"    Type(s): \");"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        getAppointmentTags().forEach(builder::append);"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"        return builder.toString();"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"     * if modification is attempted."},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    public Set\u003cTag\u003e getTag() {"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        return Collections.unmodifiableSet(appointmentTags.toSet());"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":135,"author":{"gitID":"Robert-Peng"},"content":"    //@@author Robert-Peng"},{"lineNumber":136,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"     * Returns a list of tags as a string"},{"lineNumber":138,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"    public String getTagString() {"},{"lineNumber":140,"author":{"gitID":"Robert-Peng"},"content":"        StringBuilder tagString \u003d new StringBuilder();"},{"lineNumber":141,"author":{"gitID":"Robert-Peng"},"content":"        Set\u003cTag\u003e tagSet \u003d Collections.unmodifiableSet(appointmentTags.toSet());"},{"lineNumber":142,"author":{"gitID":"Robert-Peng"},"content":"        Iterator iterator \u003d tagSet.iterator();"},{"lineNumber":143,"author":{"gitID":"Robert-Peng"},"content":"        Tag tag \u003d (Tag) iterator.next();"},{"lineNumber":144,"author":{"gitID":"Robert-Peng"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":145,"author":{"gitID":"Robert-Peng"},"content":"            tagString.append(tag.tagName);"},{"lineNumber":146,"author":{"gitID":"Robert-Peng"},"content":"            tagString.append(\", \");"},{"lineNumber":147,"author":{"gitID":"Robert-Peng"},"content":"            tag \u003d (Tag) iterator.next();"},{"lineNumber":148,"author":{"gitID":"Robert-Peng"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"Robert-Peng"},"content":"        tagString.append(tag.tagName);"},{"lineNumber":150,"author":{"gitID":"Robert-Peng"},"content":"        return tagString.toString().trim();"},{"lineNumber":151,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":19,"chialejing":1,"wynonaK":126,"-":6}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":" *"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment to the list."},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"        PastAppointmentException, ConcurrentAppointmentException {"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"        if (contains(toAdd)) {"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"        ArrayList\u003cLocalDateTime\u003e timeList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        for (Appointment a : internalList) {"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"            timeList.add(a.getDateTime());"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"            if (a.getDateTime().equals(toAdd.getDateTime())) {"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"                throw new DuplicateDateTimeException();"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"        for (LocalDateTime dateTime : timeList) {"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"            if (toAdd.getDateTime().isAfter(dateTime) \u0026\u0026 toAdd.getDateTime().isBefore(dateTime.plusMinutes(30))) {"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                throw new ConcurrentAppointmentException();"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            if (toAdd.getDateTime().isBefore(dateTime) \u0026\u0026 toAdd.getDateTime().plusMinutes(30).isAfter(dateTime)) {"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                throw new ConcurrentAppointmentException();"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        internalList.add(toAdd);"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if the replacement is equivalent to"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"     * another existing appointment in the list."},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"        if (!target.equals(editedAppointment) \u0026\u0026 internalList.contains(editedAppointment)) {"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        internalList.set(index, editedAppointment);"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"     * Removes the equivalent pet patient from the list."},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if no such pet patient could be found in the list."},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(toRemove);"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        if (!appointmentFoundAndDeleted) {"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"        return appointmentFoundAndDeleted;"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        for (final Appointment appointment : appointments) {"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"            replacement.add(appointment);"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        setAppointments(replacement);"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        return internalList.iterator();"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"        return internalList.hashCode();"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"Robert-Peng":4,"wynonaK":139,"-":4}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentDependencyNotEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to continue because there are still appointments dependent."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"public class AppointmentDependencyNotEmptyException extends Exception {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"    public AppointmentDependencyNotEmptyException(String message) {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":12}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":" * JAXB-friendly version of an Appointment."},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    private String ownerNric;"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    private String petPatientName;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    private String remark;"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"    private String dateTime;"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    private List\u003cXmlAdaptedTag\u003e appointmentTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment(String ownerNric, String petPatientName, String remark,"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                                 String dateTime, List\u003cXmlAdaptedTag\u003e appointmentTagged) {"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"        this.petPatientName \u003d petPatientName;"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"        this.remark \u003d remark;"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"        if (appointmentTagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"            this.appointmentTagged \u003d new ArrayList\u003c\u003e(appointmentTagged);"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"        ownerNric \u003d source.getOwnerNric().toString();"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"        petPatientName \u003d source.getPetPatientName().toString();"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"        dateTime \u003d source.getFormattedLocalDateTime();"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        appointmentTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        for (Tag tag : source.getAppointmentTags()) {"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"            appointmentTagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"        final List\u003cTag\u003e appointmentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"        for (XmlAdaptedTag tag : appointmentTagged) {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            appointmentTags.add(tag.toModelType());"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"        if (this.ownerNric \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"        if (!Nric.isValidNric(this.ownerNric)) {"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"        final Nric ownerNric \u003d new Nric(this.ownerNric);"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"        if (this.petPatientName \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException("},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        if (!PetPatientName.isValidName(this.petPatientName)) {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"        final PetPatientName petPatientName \u003d new PetPatientName(this.petPatientName);"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"        if (this.remark \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        if (!Remark.isValidRemark(this.remark)) {"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(Remark.MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException("},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"        LocalDateTime localDateTime \u003d null;"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"            localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"            throw new IllegalValueException(\"Please follow the format of yyyy-MM-dd HH:mm\");"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"        final LocalDateTime dateTime \u003d localDateTime;"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"        final Set\u003cTag\u003e thisAppointmentTags \u003d new HashSet\u003c\u003e(appointmentTags);"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"        return new Appointment(ownerNric, petPatientName, remark, dateTime, thisAppointmentTags);"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"            return false;"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"        return Objects.equals(ownerNric, otherAppointment.ownerNric)"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(petPatientName, otherAppointment.petPatientName)"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(remark, otherAppointment.remark)"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 Objects.equals(dateTime, otherAppointment.dateTime)"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 appointmentTagged.equals(otherAppointment.appointmentTagged);"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"Robert-Peng":1,"chialejing":1,"wynonaK":140,"-":11}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to find the specified appointment."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class AppointmentNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":" * JAXB-friendly version of the PetPatient."},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"public class XmlAdaptedPetPatient {"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_NAME_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s name field is missing!\";"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_SPECIES_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s species field is missing!\";"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_BREED_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s breed field is missing!\";"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_COLOUR_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s colour field is missing!\";"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s blood type field is missing!\";"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    public static final String MISSING_OWNER_FIELD_MESSAGE_FORMAT \u003d \"Pet patient\u0027s owner field is missing!\";"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    private String name;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    private String species;"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    private String breed;"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    private String colour;"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"    private String bloodType;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    private String ownerNric;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    private String dateOfBirth;"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"    @XmlElement"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    private String medicalHistory;"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"     * Constructs an XmlAdaptedPetPatient."},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient() {}"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"     * Constructs an {@code XmlAdaptedPetPatient} with the given pet patient details."},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(String name, String species, String breed, String colour,"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"                            String bloodType, String ownerNric, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"     * Converts a given PetPatient into this class for JAXB use."},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPetPatient"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"    public XmlAdaptedPetPatient(PetPatient source) {"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        species \u003d source.getSpecies().species;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        breed \u003d source.getBreed().breed;"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        colour \u003d source.getColour().colour;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        bloodType \u003d source.getBloodType().bloodType;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        ownerNric \u003d source.getOwner().toString();"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"     * Converts this jaxb-friendly adapted pet patient object into the model\u0027s PetPatient object."},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted pet patient"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    public PetPatient toModelType() throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"        final List\u003cTag\u003e petPatientTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"            petPatientTags.add(tag.toModelType());"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_NAME_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"        if (!PetPatientName.isValidName(this.name)) {"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(PetPatientName.MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"        final PetPatientName name \u003d new PetPatientName(this.name);"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"        if (this.species \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_SPECIES_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"        if (!Species.isValidSpecies(this.species)) {"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Species.MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"        final Species species \u003d new Species(this.species);"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        if (this.breed \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_BREED_FIELD_MESSAGE_FORMAT, Breed.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        if (!Breed.isValidBreed(this.breed)) {"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Breed.MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        final Breed breed \u003d new Breed(this.breed);"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"        if (this.colour \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_COLOUR_FIELD_MESSAGE_FORMAT, Colour.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        if (!Colour.isValidColour(this.colour)) {"},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Colour.MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        final Colour colour \u003d new Colour(this.colour);"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":"        if (this.bloodType \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(String.format(MISSING_BLOODTYPE_FIELD_MESSAGE_FORMAT));"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"        if (!BloodType.isValidBloodType(this.bloodType)) {"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_PET_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"        final BloodType bloodType \u003d new BloodType(this.bloodType);"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"        if (this.ownerNric \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException("},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"                    String.format(MISSING_OWNER_FIELD_MESSAGE_FORMAT, PetPatientName.class.getSimpleName()));"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"        if (!Nric.isValidNric(this.ownerNric)) {"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"            throw new IllegalValueException(Nric.MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"        final Nric ownerNric \u003d new Nric(this.ownerNric);"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(petPatientTags);"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        return new PetPatient(name, species, breed, colour, bloodType, ownerNric, tags);"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof XmlAdaptedPetPatient)) {"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"        XmlAdaptedPetPatient otherPetPatient \u003d (XmlAdaptedPetPatient) other;"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"        return Objects.equals(name, otherPetPatient.name)"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(species, otherPetPatient.species)"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(breed, otherPetPatient.breed)"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(colour, otherPetPatient.colour)"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(bloodType, otherPetPatient.bloodType)"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 Objects.equals(ownerNric, otherPetPatient.ownerNric)"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 tagged.equals(otherPetPatient.tagged);"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":170,"-":10}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/NoAppointmentInYearException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation cannot be done as there is no appointments in said year."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class NoAppointmentInYearException extends Exception {"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"    public NoAppointmentInYearException(String message) {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":11}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation will result in duplicate Appointment objects."},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"public class DuplicateAppointmentException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":12,"-":1}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateDateTimeException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation will result in double booking."},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"public class DuplicateDateTimeException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    public DuplicateDateTimeException() {"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation would result in multiple bookings in the same time slot\");"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":12,"-":1}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Remark;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"//import seedu.address.model.person.NRIC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.BloodType;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Breed;"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Colour;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.Species;"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"public class SampleDataUtil {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"        return new Person[] {"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Nric(\"S0123456B\"),"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Nric(\"T0123456C\"),"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Nric(\"G0123456A\"),"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Nric(\"F0123456B\"),"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Nric(\"S0163456E\"),"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Nric(\"F0123056T\"),"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Alexia Tan\"), new Phone(\"67321372\"), new Email(\"alexia@example.com\"),"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"                new Address(\"260 Orchard Road, The Heeren ,04-30/31 238855, Singapore\"), new Nric(\"S1199380Z\"),"},{"lineNumber":61,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":62,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Bernard Yeong\"), new Phone(\"65457582\"), new Email(\"bernardyeong@example.com\"),"},{"lineNumber":63,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Nric(\"S8267808E\"),"},{"lineNumber":64,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"John Cena\"), new Phone(\"93282203\"), new Email(\"johncena@example.com\"),"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"                new Address(\"5 Airport Cargo Road #452A Core H 4th Storey, 819462, Singapore\"), new Nric(\"S6654649G\"),"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Rick Sanchez\"), new Phone(\"62653105\"), new Email(\"ricksanchez@example.com\"),"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"                new Address(\"15 Kian Teck Road 628770, Singapore\"), new Nric(\"S5985945E\"),"},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Lee Tze Ting\"), new Phone(\"63392060\"), new Email(\"tzeting@example.com\"),"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"                new Address(\"73 Bras Basah, 07-01 470765, Singapore\"), new Nric(\"S1209036F\"),"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"volunteer\")),"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Lee Yan Hwa\"), new Phone(\"68845060\"), new Email(\"yanhwa@example.com\"),"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"                new Address(\"69 Mohamed Sultan Raod, 239015, Singapore\"), new Nric(\"S3643153I\"),"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"volunteer\")),"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Yuuri Katsuki\"), new Phone(\"63353388\"), new Email(\"yuuriviktor@example.com\"),"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"                new Address(\"180 Clemenceau Avenue #06-01 Haw Par Centre, 239922, Singapore\"), new Nric(\"S4176809F\"),"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"supplier\")),"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Lu Li Ming\"), new Phone(\"62255154\"), new Email(\"liming@example.com\"),"},{"lineNumber":81,"author":{"gitID":"wynonaK"},"content":"                new Address(\"69 Choa Chu Kang Loop #02-12, 689672, Singapore\"), new Nric(\"S2557566J\"),"},{"lineNumber":82,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\", \"spca\")),"},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Eileen Yeo\"), new Phone(\"67797976\"), new Email(\"eileen@example.com\"),"},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Block 51 Ayer Rajah Crescent 02-15/16 Singapore 139948, Singapore\"), new Nric(\"S9408343E\"),"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"volunteer\", \"owner\")),"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Liew Chin Chuan\"), new Phone(\"63921480\"), new Email(\"chinchuan@example.com\"),"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"                new Address(\"71 Sultan Gate, 198496, Singapore\"), new Nric(\"S2330718I\"),"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\", \"volunteer\")),"},{"lineNumber":89,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Samson Yeow\"), new Phone(\"63488686\"), new Email(\"samson@example.com\"),"},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"                new Address(\"86 East Coast Road, 428788, Singapore\"), new Nric(\"S7165937B\"),"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\", \"spca\")),"},{"lineNumber":92,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Codee Ong\"), new Phone(\"63488686\"), new Email(\"codeeo@example.com\"),"},{"lineNumber":93,"author":{"gitID":"wynonaK"},"content":"                new Address(\"35 Changi North Crescent, 499641, Singapore\"), new Nric(\"S1317219F\"),"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"owner\")),"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Fuji Syuusuke\"), new Phone(\"90245123\"), new Email(\"fujis@example.com\"),"},{"lineNumber":96,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 106 Bukit Purmei Street 10, #20-20\"), new Nric(\"S9015638A\"),"},{"lineNumber":97,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"supplier\", \"owner\")),"},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"            new Person(new Name(\"Tezuka Kunimitsu\"), new Phone(\"92247377\"), new Email(\"teuzkak@example.com\"),"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"                new Address(\"Blk 106 Bukit Purmei Street 10, #20-20\"), new Nric(\"S2012044D\"),"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"supplier\", \"owner\"))"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    public static PetPatient[] getSamplePetPatients() {"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":"        return new PetPatient[] {"},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Ane\"), new Species(\"Cat\"), new Breed(\"Siamese\"),"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown\"), new BloodType(\"A\"), new Nric(\"S0123456B\"),"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"hostile\")),"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Bei\"), new Species(\"Cat\"), new Breed(\"British Shorthair\"),"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"grey\"), new BloodType(\"B\"), new Nric(\"T0123456C\"),"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"depression\")),"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Nei\"), new Species(\"Cat\"), new Breed(\"Maine Coon\"),"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black\"), new BloodType(\"AB\"), new Nric(\"T0123456C\"),"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\")),"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Chae\"), new Species(\"Cat\"), new Breed(\"Russian Blue\"),"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"grey\"), new BloodType(\"A\"), new Nric(\"G0123456A\"),"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"fiv\")),"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Don\"), new Species(\"Dog\"), new Breed(\"German Shepherd\"),"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown\"), new BloodType(\"DEA 4+\"), new Nric(\"F0123456B\"),"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\")),"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Este\"), new Species(\"Dog\"), new Breed(\"Golden Retriever\"),"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"golden\"), new BloodType(\"DEA 6+\"), new Nric(\"S0163456E\"),"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\")),"},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Famm\"), new Species(\"Dog\"), new Breed(\"Pug\"),"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"golden\"), new BloodType(\"DEA 1.1-\"), new Nric(\"F0123056T\"),"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"3legged\")),"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Plan\"), new Species(\"Dog\"), new Breed(\"Siberian Husky\"),"},{"lineNumber":128,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"DEA 1.1+\"), new Nric(\"F0123056T\"),"},{"lineNumber":129,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"hostile\", \"newborn\")),"},{"lineNumber":130,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Blu\"), new Species(\"Cat\"), new Breed(\"Burmese\"),"},{"lineNumber":131,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown\"), new BloodType(\"A\"), new Nric(\"S1199380Z\"),"},{"lineNumber":132,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"hostile\", \"fiv\")),"},{"lineNumber":133,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Red\"), new Species(\"Cat\"), new Breed(\"Cornish Rex\"),"},{"lineNumber":134,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"B\"), new Nric(\"S8267808E\"),"},{"lineNumber":135,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"fiv\")),"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Fluffy\"), new Species(\"Cat\"), new Breed(\"Birman\"),"},{"lineNumber":137,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"AB\"), new Nric(\"S6654649G\"),"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\")),"},{"lineNumber":139,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Scooby\"), new Species(\"Cat\"), new Breed(\"Ocicat\"),"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"A\"), new Nric(\"S5985945E\"),"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"hostile\", \"newborn\")),"},{"lineNumber":142,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Snowball\"), new Species(\"Dog\"), new Breed(\"Rottweiler\"),"},{"lineNumber":143,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown and black\"), new BloodType(\"DEA 4+\"), new Nric(\"S2557566J\"),"},{"lineNumber":144,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\", \"microchipped\")),"},{"lineNumber":145,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Wabbit\"), new Species(\"Dog\"), new Breed(\"Beagle\"),"},{"lineNumber":146,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown and white\"), new BloodType(\"DEA 6+\"), new Nric(\"S2557566J\"),"},{"lineNumber":147,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\")),"},{"lineNumber":148,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Oreo\"), new Species(\"Dog\"), new Breed(\"Dalmation\"),"},{"lineNumber":149,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black and white\"), new BloodType(\"DEA 1.1+\"), new Nric(\"S9408343E\"),"},{"lineNumber":150,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"3legged\")),"},{"lineNumber":151,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Milkshake\"), new Species(\"Bird\"), new Breed(\"Black Throated Sparrow\"),"},{"lineNumber":152,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black and white\"), new BloodType(\"NIL\"), new Nric(\"S2330718I\"),"},{"lineNumber":153,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"newborn\", \"missing\")),"},{"lineNumber":154,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Ginger\"), new Species(\"Bird\"), new Breed(\"Amazon Parrot\"),"},{"lineNumber":155,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"green\"), new BloodType(\"NIL\"), new Nric(\"S2330718I\"),"},{"lineNumber":156,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"hostile\")),"},{"lineNumber":157,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Juniper\"), new Species(\"Chinchilla\"), new Breed(\"Lanigera Chinchilla\"),"},{"lineNumber":158,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"grey\"), new BloodType(\"NIL\"), new Nric(\"S2330718I\"),"},{"lineNumber":159,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"newborn\")),"},{"lineNumber":160,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Baron\"), new Species(\"Chinchilla\"), new Breed(\"Brevicaudata Chinchilla\"),"},{"lineNumber":161,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black\"), new BloodType(\"NIL\"), new Nric(\"S7165937B\"),"},{"lineNumber":162,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"allergy\")),"},{"lineNumber":163,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Sting\"), new Species(\"Guinea Pig\"), new Breed(\"Abyssinian Guinea Pig\"),"},{"lineNumber":164,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"B RH-\"), new Nric(\"S7165937B\"),"},{"lineNumber":165,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"newborn\", \"hostile\")),"},{"lineNumber":166,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Riddle\"), new Species(\"Guinea Pig\"), new Breed(\"Skinny Pig\"),"},{"lineNumber":167,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black and white\"), new BloodType(\"A RH+\"), new Nric(\"S7165937B\"),"},{"lineNumber":168,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\", \"allergy\")),"},{"lineNumber":169,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Tiki\"), new Species(\"Guinea Pig\"), new Breed(\"Teddy Guinea Pig\"),"},{"lineNumber":170,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"golden\"), new BloodType(\"AB RH+\"), new Nric(\"S0163456E\"),"},{"lineNumber":171,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"drooling\", \"newborn\")),"},{"lineNumber":172,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Hero\"), new Species(\"Dog\"), new Breed(\"German Shepherd\"),"},{"lineNumber":173,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black\"), new BloodType(\"DEA 1.1+\"), new Nric(\"S2012044D\"),"},{"lineNumber":174,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"newborn\")),"},{"lineNumber":175,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Thorn\"), new Species(\"Cat\"), new Breed(\"Chinchilla Persian\"),"},{"lineNumber":176,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"white\"), new BloodType(\"AB\"), new Nric(\"S9015638A\"),"},{"lineNumber":177,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"newborn\")),"},{"lineNumber":178,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Alpha\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black and white\"), new BloodType(\"DEA 4+\"), new Nric(\"S1317219F\"),"},{"lineNumber":180,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"aggressive\", \"newborn\")),"},{"lineNumber":181,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Beta\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":182,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown and white\"), new BloodType(\"DEA 6+\"), new Nric(\"S1317219F\"),"},{"lineNumber":183,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"hostile\")),"},{"lineNumber":184,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Gamma\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":185,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"red and white\"), new BloodType(\"DEA 1.1-\"), new Nric(\"S1317219F\"),"},{"lineNumber":186,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\")),"},{"lineNumber":187,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Delta\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":188,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown and white\"), new BloodType(\"DEA 1.1+\"), new Nric(\"S1317219F\"),"},{"lineNumber":189,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\")),"},{"lineNumber":190,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Epsilon\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":191,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"seal and white\"), new BloodType(\"DEA 4+\"), new Nric(\"S1317219F\"),"},{"lineNumber":192,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"aggressive\")),"},{"lineNumber":193,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Zeta\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":194,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"sable and white\"), new BloodType(\"DEA 4-\"), new Nric(\"F0123056T\"),"},{"lineNumber":195,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"senior\")),"},{"lineNumber":196,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Eta\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":197,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"brown and white\"), new BloodType(\"DEA 6+\"), new Nric(\"S1317219F\"),"},{"lineNumber":198,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\")),"},{"lineNumber":199,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Theta\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":200,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"gray and white\"), new BloodType(\"DEA 1.1+\"), new Nric(\"S1317219F\"),"},{"lineNumber":201,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"senior\")),"},{"lineNumber":202,"author":{"gitID":"wynonaK"},"content":"            new PetPatient(new PetPatientName(\"Iota\"), new Species(\"Dog\"), new Breed(\"Alaskan Malamute\"),"},{"lineNumber":203,"author":{"gitID":"wynonaK"},"content":"                new Colour(\"black and white\"), new BloodType(\"DEA 1.1+\"), new Nric(\"S1317219F\"),"},{"lineNumber":204,"author":{"gitID":"wynonaK"},"content":"                getTagSet(\"microchipped\", \"arthritis\"))"},{"lineNumber":205,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":206,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":208,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":209,"author":{"gitID":"wynonaK"},"content":"    public static Appointment[] getSampleAppointments() {"},{"lineNumber":210,"author":{"gitID":"wynonaK"},"content":"        return new Appointment[] {"},{"lineNumber":211,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S0123456B\"), new PetPatientName(\"Ane\"), new Remark(\"nil\"),"},{"lineNumber":212,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-01 10:30\"), getTagSet(\"checkup\")),"},{"lineNumber":213,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":214,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-02 10:30\"), getTagSet(\"presurgery\")),"},{"lineNumber":215,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123056T\"), new PetPatientName(\"Famm\"), new Remark(\"Home visit\"),"},{"lineNumber":216,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-03 10:30\"), getTagSet(\"vaccination\")),"},{"lineNumber":217,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123056T\"), new PetPatientName(\"Plan\"), new Remark(\"Home visit\"),"},{"lineNumber":218,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-03 11:00\"), getTagSet(\"vaccination\")),"},{"lineNumber":219,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":220,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-06 10:30\"), getTagSet(\"surgery\")),"},{"lineNumber":221,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"G0123456A\"), new PetPatientName(\"Chae\"), new Remark(\"nil\"),"},{"lineNumber":222,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-07 09:30\"), getTagSet(\"checkup\")),"},{"lineNumber":223,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123456B\"), new PetPatientName(\"Don\"), new Remark(\"nil\"),"},{"lineNumber":224,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-07 15:30\"), getTagSet(\"microchipping\")),"},{"lineNumber":225,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Bei\"), new Remark(\"nil\"),"},{"lineNumber":226,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-09 15:30\"), getTagSet(\"postsurgery\")),"},{"lineNumber":227,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"T0123456C\"), new PetPatientName(\"Nei\"), new Remark(\"nil\"),"},{"lineNumber":228,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-10-09 16:00\"), getTagSet(\"checkup\")),"},{"lineNumber":229,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S1199380Z\"), new PetPatientName(\"Blu\"), new Remark(\"nil\"),"},{"lineNumber":230,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-01 10:30\"), getTagSet(\"vaccination\")),"},{"lineNumber":231,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S8267808E\"), new PetPatientName(\"Red\"), new Remark(\"Home visit\"),"},{"lineNumber":232,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-01 11:30\"), getTagSet(\"checkup\")),"},{"lineNumber":233,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S6654649G\"), new PetPatientName(\"Fluffy\"), new Remark(\"nil\"),"},{"lineNumber":234,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-02 10:30\"), getTagSet(\"vaccination\")),"},{"lineNumber":235,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S9408343E\"), new PetPatientName(\"Oreo\"), new Remark(\"nil\"),"},{"lineNumber":236,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-02 11:00\"), getTagSet(\"microchipping\")),"},{"lineNumber":237,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S2557566J\"), new PetPatientName(\"Wabbit\"), new Remark(\"nil\"),"},{"lineNumber":238,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-03 10:30\"), getTagSet(\"sterilisation\")),"},{"lineNumber":239,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S2330718I\"), new PetPatientName(\"Ginger\"), new Remark(\"nil\"),"},{"lineNumber":240,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-03 09:30\"), getTagSet(\"checkup\")),"},{"lineNumber":241,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"F0123456B\"), new PetPatientName(\"Juniper\"), new Remark(\"Might require stay\"),"},{"lineNumber":242,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-04 15:30\"), getTagSet(\"sterilisation\")),"},{"lineNumber":243,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S7165937B\"), new PetPatientName(\"Baron\"), new Remark(\"nil\"),"},{"lineNumber":244,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-04 16:30\"), getTagSet(\"checkup\")),"},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S7165937B\"), new PetPatientName(\"Sting\"), new Remark(\"Home visit\"),"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-05 16:00\"), getTagSet(\"vaccination\")),"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S7165937B\"), new PetPatientName(\"Riddle\"), new Remark(\"Might require stay\"),"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-06 15:30\"), getTagSet(\"sterilisation\")),"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S0163456E\"), new PetPatientName(\"Tiki\"), new Remark(\"nil\"),"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-07 16:30\"), getTagSet(\"checkup\")),"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S2012044D\"), new PetPatientName(\"Hero\"), new Remark(\"Might require stay\"),"},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-08 16:00\"), getTagSet(\"sterilisation\")),"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"            new Appointment(new Nric(\"S9015638A\"), new PetPatientName(\"Thorn\"), new Remark(\"Might require stay\"),"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"                    getLocalDateTime(\"2018-06-08 18:00\"), getTagSet(\"sterilisation\")),"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"        };"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"            for (PetPatient petPatient : getSamplePetPatients()) {"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addPetPatient(petPatient);"},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"            for (Appointment appointment : getSampleAppointments()) {"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":"                sampleAb.addAppointment(appointment);"},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":270,"author":{"gitID":"wynonaK"},"content":"            return sampleAb;"},{"lineNumber":271,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":272,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":273,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":274,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate NRIC values\", e);"},{"lineNumber":275,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":276,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate pet patients\", e);"},{"lineNumber":277,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateDateTimeException e) {"},{"lineNumber":278,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain double booked appointments\", e);"},{"lineNumber":279,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":280,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate appointments\", e);"},{"lineNumber":281,"author":{"gitID":"wynonaK"},"content":"        } catch (ConcurrentAppointmentException cae) {"},{"lineNumber":282,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"AddressBook should not add appointments to on-going appointment slots\");"},{"lineNumber":283,"author":{"gitID":"wynonaK"},"content":"        } catch (PastAppointmentException pae) {"},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"AddressBook should not add appointments with past DateTime\");"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"        for (String s : strings) {"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"            tags.add(new Tag(s));"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"        return tags;"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"     * Returns a LocalDateTime object of the given string."},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"    private static LocalDateTime getLocalDateTime(String string) {"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"        return LocalDateTime.parse(string, formatter);"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"Robert-Peng":4,"chialejing":5,"wynonaK":284,"-":16}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/ConcurrentAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" * Represents an error message when user attempt to add new appointment that"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":" * interfere with other appointment time interval"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"public class ConcurrentAppointmentException extends IllegalValueException {"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"    public ConcurrentAppointmentException () {"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"        super(\"Medeina should not add appointments to on-going appointment slots\");"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"}"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":""}],"authorContributionMap":{"Robert-Peng":16,"wynonaK":2}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Contact emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":66}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"            \"Contact addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":57}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/PastAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":3,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":4,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" * Represents an error message when adding appointment with a past date"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"public class PastAppointmentException extends IllegalValueException {"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"    public PastAppointmentException() {"},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"        super(\"Medeina should not add appointments with past DateTime\");"},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"}"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""}],"authorContributionMap":{"Robert-Peng":14,"wynonaK":2}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"    private final Nric nric;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Nric nric, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"        requireAllNonNull(name, phone, email, address, nric, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"        this.nric \u003d nric;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"    public Nric getNric() {"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"        return nric;"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"wynonaK"},"content":"     * Returns a list of tags as a string, for find command."},{"lineNumber":70,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":"    public String getTagString() {"},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"        StringBuilder tagString \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e tagSet \u003d Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":"        for (Tag tag : tagSet) {"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"            tagString.append(tag.tagName);"},{"lineNumber":76,"author":{"gitID":"wynonaK"},"content":"            tagString.append(\" \");"},{"lineNumber":77,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"wynonaK"},"content":"        return tagString.toString().trim();"},{"lineNumber":79,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":95,"author":{"gitID":"Robert-Peng"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":96,"author":{"gitID":"Robert-Peng"},"content":"                \u0026\u0026 otherPerson.getNric().equals(this.getNric());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":102,"author":{"gitID":"Robert-Peng"},"content":"        return Objects.hash(name, phone, email, address, nric, tags);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        builder.append(\"    \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getName())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .append(\"    Phone: \")"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\"    Email: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\"    Address: \")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\"    NRIC: \")"},{"lineNumber":117,"author":{"gitID":"Robert-Peng"},"content":"                .append(getNric())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\"    Tags: \");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Robert-Peng":12,"wynonaK":13,"-":98}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicatePersonException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Person objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicatePersonException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicatePersonException() {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation would result in duplicate contacts\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":11}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"            \"Contact names should only contain alphanumeric characters and spaces, and it should not be blank.\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":58}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the pet patient list."},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * This list will not contain any duplicate pet patients."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cPetPatient\u003e getPetPatientList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":5,"wynonaK":8,"-":26}},{"path":"src/main/java/seedu/address/model/person/Nric.java","lines":[{"lineNumber":1,"author":{"gitID":"Robert-Peng"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Robert-Peng"},"content":"//@@author Robert-Peng"},{"lineNumber":6,"author":{"gitID":"Robert-Peng"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Robert-Peng"},"content":" * Represents a Person\u0027s email in the address book."},{"lineNumber":8,"author":{"gitID":"Robert-Peng"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNRIC(String)}"},{"lineNumber":9,"author":{"gitID":"Robert-Peng"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Robert-Peng"},"content":"public class Nric {"},{"lineNumber":11,"author":{"gitID":"Robert-Peng"},"content":"    public static final String MESSAGE_NRIC_CONSTRAINTS \u003d \"Contact NRIC should be of the format #0000000@ \""},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"        + \"where # is a letter that can be S T F or G,\\n\""},{"lineNumber":13,"author":{"gitID":"Robert-Peng"},"content":"        + \"0000000 represents 7 digits which can be any number from 0-9,\\n\""},{"lineNumber":14,"author":{"gitID":"Robert-Peng"},"content":"        + \"@ can be any alphabet A-Z.\\n\""},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"        + \"Both # and @ must be in upper case.\";"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"Robert-Peng"},"content":"    private static final String FIRST_CHAR_REGEX \u003d \"[STFG]\";"},{"lineNumber":18,"author":{"gitID":"Robert-Peng"},"content":"    private static final String MIDDLE_NUM_REGEX \u003d \"[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\";"},{"lineNumber":19,"author":{"gitID":"Robert-Peng"},"content":"    private static final String LAST_CHAR_REGEX \u003d \"[A-Z]\";"},{"lineNumber":20,"author":{"gitID":"Robert-Peng"},"content":"    public static final String NRIC_VALIDATION_REGEX \u003d FIRST_CHAR_REGEX + MIDDLE_NUM_REGEX"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"        + LAST_CHAR_REGEX;"},{"lineNumber":22,"author":{"gitID":"Robert-Peng"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Robert-Peng"},"content":"     * Constructs a NRIC."},{"lineNumber":26,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"Robert-Peng"},"content":"     * @param nric A valid NRIC number"},{"lineNumber":28,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Robert-Peng"},"content":"    public Nric(String nric) {"},{"lineNumber":30,"author":{"gitID":"Robert-Peng"},"content":"        requireNonNull(nric);"},{"lineNumber":31,"author":{"gitID":"Robert-Peng"},"content":"        checkArgument(isValidNric(nric), MESSAGE_NRIC_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"Robert-Peng"},"content":"        this.value \u003d nric;"},{"lineNumber":33,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":35,"author":{"gitID":"Robert-Peng"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Robert-Peng"},"content":"     * Returns if a given String is a valid NRIC"},{"lineNumber":37,"author":{"gitID":"Robert-Peng"},"content":"     * @param test"},{"lineNumber":38,"author":{"gitID":"Robert-Peng"},"content":"     * @return"},{"lineNumber":39,"author":{"gitID":"Robert-Peng"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Robert-Peng"},"content":"    public static boolean isValidNric(String test) {"},{"lineNumber":41,"author":{"gitID":"Robert-Peng"},"content":"        return test.matches(NRIC_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":44,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Robert-Peng"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"Robert-Peng"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":49,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"Robert-Peng"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"Robert-Peng"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"Robert-Peng"},"content":"            || (other instanceof Nric // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"Robert-Peng"},"content":"            \u0026\u0026 this.value.equals(((Nric) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":56,"author":{"gitID":"Robert-Peng"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"Robert-Peng"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"Robert-Peng"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":61,"author":{"gitID":"Robert-Peng"},"content":"}"}],"authorContributionMap":{"Robert-Peng":58,"-":3}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/medeina.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"Medeina\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String defaultTheme \u003d \"/view/LightTheme.css\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0, defaultTheme);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y, String theme) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y, theme);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":75,"author":{"gitID":"wynonaK"},"content":"        sb.append(\"\\nMedeina name : \" + addressBookName);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":78}},{"path":"src/main/java/seedu/address/model/appointment/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"wynonaK"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":" * Represents a Appointment\u0027s remarks."},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":" * Guarantees: is valid as declared in {@link #isValidRemark(String)}"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"public class Remark {"},{"lineNumber":12,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"            \"Remarks can take any values, and it should not be blank. Leave \\\"nil\\\" for no remarks.\";"},{"lineNumber":15,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":16,"author":{"gitID":"wynonaK"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"     * The first character of the remark must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"    public static final String REMARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"wynonaK"},"content":"     * @param remark A valid address."},{"lineNumber":28,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"wynonaK"},"content":"    public Remark(String remark) {"},{"lineNumber":30,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(remark);"},{"lineNumber":31,"author":{"gitID":"wynonaK"},"content":"        checkArgument(isValidRemark(remark), MESSAGE_REMARK_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"wynonaK"},"content":"        this.value \u003d remark;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"wynonaK"},"content":"     * Returns true if a given string is a valid remark."},{"lineNumber":37,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"wynonaK"},"content":"    public static boolean isValidRemark(String test) {"},{"lineNumber":39,"author":{"gitID":"wynonaK"},"content":"        return test.matches(REMARK_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":42,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"wynonaK"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":47,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"wynonaK"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"wynonaK"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"wynonaK"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":54,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"wynonaK"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":59,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"wynonaK":55,"-":4}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateNricException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Nric objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicateNricException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicateNricException() {"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"        super(\"Operation will result in two contacts having the same nric value\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wynonaK":1,"-":11}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.theme;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Aquarinte"},"content":"//@@author aquarinte"},{"lineNumber":10,"author":{"gitID":"Aquarinte"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Aquarinte"},"content":" * Represents a Theme in the address book."},{"lineNumber":12,"author":{"gitID":"Aquarinte"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Aquarinte"},"content":"public class Theme {"},{"lineNumber":14,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":15,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themes \u003d {\"dark\", \"light\"};"},{"lineNumber":16,"author":{"gitID":"Aquarinte"},"content":"    private static String[] themesLocation \u003d {\"/view/DarkTheme.css\", \"/view/LightTheme.css\"};"},{"lineNumber":17,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":18,"author":{"gitID":"Aquarinte"},"content":"    public static final String MESSAGE_THEME_CONSTRAINTS \u003d \"Please specify one of the following themes:\\n\""},{"lineNumber":19,"author":{"gitID":"Aquarinte"},"content":"            + Arrays.stream(themes).collect(Collectors.joining(\", \"));"},{"lineNumber":20,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":21,"author":{"gitID":"Aquarinte"},"content":"    public final String selectedThemePath;"},{"lineNumber":22,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":23,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Aquarinte"},"content":"     * Constructs a {@code Theme}."},{"lineNumber":25,"author":{"gitID":"Aquarinte"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"Aquarinte"},"content":"     * @param themeName A valid theme name."},{"lineNumber":27,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Aquarinte"},"content":"    public Theme(String themeName) {"},{"lineNumber":29,"author":{"gitID":"Aquarinte"},"content":"        requireNonNull(themeName);"},{"lineNumber":30,"author":{"gitID":"Aquarinte"},"content":"        checkArgument(hasValidThemeName(themeName.toLowerCase()), MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"Aquarinte"},"content":"        selectedThemePath \u003d themesLocation[Arrays.asList(themes).indexOf(themeName.toLowerCase())];"},{"lineNumber":32,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":34,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"Aquarinte"},"content":"     * Returns true if a given string is a valid theme name."},{"lineNumber":36,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Aquarinte"},"content":"    public static boolean hasValidThemeName(String themeName) {"},{"lineNumber":38,"author":{"gitID":"Aquarinte"},"content":"        boolean isValid \u003d Arrays.stream(themes).anyMatch(themeName::equals);"},{"lineNumber":39,"author":{"gitID":"Aquarinte"},"content":"        return isValid;"},{"lineNumber":40,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":42,"author":{"gitID":"Aquarinte"},"content":"    public String getThemeName() {"},{"lineNumber":43,"author":{"gitID":"Aquarinte"},"content":"        return themes[Arrays.asList(themesLocation).indexOf(selectedThemePath)];"},{"lineNumber":44,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":46,"author":{"gitID":"Aquarinte"},"content":"    public String getThemePath() {"},{"lineNumber":47,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath;"},{"lineNumber":48,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":50,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Aquarinte"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"Aquarinte"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"Aquarinte"},"content":"                || (other instanceof Theme // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"Aquarinte"},"content":"                \u0026\u0026 this.selectedThemePath.equals(((Theme) other).selectedThemePath)); // state check"},{"lineNumber":55,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":57,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Aquarinte"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"Aquarinte"},"content":"        return selectedThemePath.hashCode();"},{"lineNumber":60,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":62,"author":{"gitID":"Aquarinte"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"Aquarinte"},"content":"     * Format state as text for viewing."},{"lineNumber":64,"author":{"gitID":"Aquarinte"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Aquarinte"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"Aquarinte"},"content":"        return \u0027[\u0027 + selectedThemePath + \u0027]\u0027;"},{"lineNumber":67,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Aquarinte"},"content":"}"}],"authorContributionMap":{"Aquarinte":60,"-":8}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/PetPatientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":" * Signals that the operation is unable to find the specified pet patient."},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"public class PetPatientNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":8}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":17,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.UniquePetPatientList;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    private final UniquePetPatientList petPatients;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"         * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        *   among constructors."},{"lineNumber":55,"author":{"gitID":"Robert-Peng"},"content":"        */ {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":58,"author":{"gitID":"wynonaK"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        petPatients \u003d new UniquePetPatientList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Robert-Peng"},"content":"    public AddressBook() {"},{"lineNumber":63,"author":{"gitID":"Robert-Peng"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"wynonaK"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":84,"author":{"gitID":"Robert-Peng"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":85,"author":{"gitID":"Robert-Peng"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":89,"author":{"gitID":"Robert-Peng"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException,"},{"lineNumber":90,"author":{"gitID":"Robert-Peng"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        this.petPatients.setPetPatients(petPatients);"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not have duplicate contacts.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (DuplicateNricException e) {"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not have two contacts sharing the same NRIC.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e syncedAppointmentList \u003d newData.getAppointmentList().stream()"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"            setAppointments(syncedAppointmentList);"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateAppointmentException dae) {"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not have duplicate appointments.\");"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":"        } catch (DuplicateDateTimeException ddte) {"},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not have appointments on the same slot\");"},{"lineNumber":122,"author":{"gitID":"Robert-Peng"},"content":"        } catch (ConcurrentAppointmentException cae) {"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not add appointments to on-going appointment slots\");"},{"lineNumber":124,"author":{"gitID":"Robert-Peng"},"content":"        } catch (PastAppointmentException pae) {"},{"lineNumber":125,"author":{"gitID":"Robert-Peng"},"content":"            throw new AssertionError(\"AddressBook should not add appointments with past DateTime\");"},{"lineNumber":126,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"        List\u003cPetPatient\u003e syncedPetPatientList \u003d newData.getPetPatientList().stream()"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"            setPetPatients(syncedPetPatientList);"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"        } catch (DuplicatePetPatientException e) {"},{"lineNumber":136,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not have duplicate pet patients\");"},{"lineNumber":137,"author":{"gitID":"Robert-Peng"},"content":"        } catch (ConcurrentAppointmentException cae) {"},{"lineNumber":138,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not add appointments to on-going appointment slots\");"},{"lineNumber":139,"author":{"gitID":"Robert-Peng"},"content":"        } catch (PastAppointmentException pe) {"},{"lineNumber":140,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Medeina should not add appointments with past DateTime\");"},{"lineNumber":141,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":179,"author":{"gitID":"wynonaK"},"content":"        removeUselessTags();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the address book."},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"     * Also checks the new pet patient\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"     * and updates the Tag objects in the pet patient to point to those in {@link #tags}."},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if an equivalent person already exists."},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"    public void addPetPatient(PetPatient p) throws DuplicatePetPatientException {"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"        PetPatient petPatient \u003d syncWithMasterTagList(p);"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"        petPatients.add(petPatient);"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"     * Replaces the given pet patient {@code target} in the list with {@code editedPetPatient}."},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPetPatient}."},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if updating the pet patient\u0027s details causes the pet patient to be"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"     *                                      equivalent to another existing pet patient in the list."},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"     * @see #syncWithMasterTagList(PetPatient)"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"    public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedPetPatient);"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"        PetPatient syncEditedPetPatient \u003d syncWithMasterTagList(editedPetPatient);"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"        petPatients.setPetPatient(target, syncEditedPetPatient);"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":"        removeUselessTags();"},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedAppointment}."},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicateAppointmentException if updating the appointment\u0027s details causes the appointment to be"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"     *                                       equivalent to another existing appointment in the list."},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":"     * @throws AppointmentNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"     * @see #syncWithMasterTagList(Appointment)"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"    public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":224,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"        Appointment syncEditedPetPatient \u003d syncWithMasterTagList(editedAppointment);"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"        appointments.setAppointment(target, syncEditedPetPatient);"},{"lineNumber":228,"author":{"gitID":"chialejing"},"content":"        removeUselessTags();"},{"lineNumber":229,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":231,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":234,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":248,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":251,"author":{"gitID":"Robert-Peng"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":252,"author":{"gitID":"Robert-Peng"},"content":"            person.getNric(), correctTagReferences);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":256,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"chialejing"},"content":"     * Updates the master tag list to include tags in {@code petPatient} that are not in the list."},{"lineNumber":258,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":259,"author":{"gitID":"chialejing"},"content":"     * @return a copy of this {@code petPatient} such that every tag in this pet patient points to a Tag object in the"},{"lineNumber":260,"author":{"gitID":"chialejing"},"content":"     * master list."},{"lineNumber":261,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"chialejing"},"content":"    private PetPatient syncWithMasterTagList (PetPatient petPatient) {"},{"lineNumber":263,"author":{"gitID":"chialejing"},"content":"        final UniqueTagList currentPetPatientTags \u003d new UniqueTagList(petPatient.getTags());"},{"lineNumber":264,"author":{"gitID":"chialejing"},"content":"        tags.mergeFrom(currentPetPatientTags);"},{"lineNumber":265,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":266,"author":{"gitID":"chialejing"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":267,"author":{"gitID":"chialejing"},"content":"        // used for checking person tag references"},{"lineNumber":268,"author":{"gitID":"chialejing"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":269,"author":{"gitID":"chialejing"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":270,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":271,"author":{"gitID":"chialejing"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":272,"author":{"gitID":"chialejing"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":273,"author":{"gitID":"chialejing"},"content":"        currentPetPatientTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":274,"author":{"gitID":"chialejing"},"content":"        return new PetPatient("},{"lineNumber":275,"author":{"gitID":"chialejing"},"content":"                petPatient.getName(),"},{"lineNumber":276,"author":{"gitID":"chialejing"},"content":"                petPatient.getSpecies(),"},{"lineNumber":277,"author":{"gitID":"chialejing"},"content":"                petPatient.getBreed(),"},{"lineNumber":278,"author":{"gitID":"chialejing"},"content":"                petPatient.getColour(),"},{"lineNumber":279,"author":{"gitID":"chialejing"},"content":"                petPatient.getBloodType(),"},{"lineNumber":280,"author":{"gitID":"chialejing"},"content":"                petPatient.getOwner(),"},{"lineNumber":281,"author":{"gitID":"chialejing"},"content":"                correctTagReferences);"},{"lineNumber":282,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":284,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":"     * Updates the master tag list to include tags in {@code appointment} that are not in the list."},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"     * @return a copy of this {@code appointment} such that every tag in this appointment"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"     * points to a Tag object in the master list."},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"    private Appointment syncWithMasterTagList(Appointment appointment) {"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"        final UniqueTagList appointmentTags \u003d new UniqueTagList(appointment.getAppointmentTags());"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"        tags.mergeFrom(appointmentTags);"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":"        // used for checking person tag references"},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":"        appointmentTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"        return new Appointment("},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":"                appointment.getOwnerNric(),"},{"lineNumber":305,"author":{"gitID":"wynonaK"},"content":"                appointment.getPetPatientName(),"},{"lineNumber":306,"author":{"gitID":"wynonaK"},"content":"                appointment.getRemark(),"},{"lineNumber":307,"author":{"gitID":"wynonaK"},"content":"                appointment.getDateTime(),"},{"lineNumber":308,"author":{"gitID":"wynonaK"},"content":"                correctTagReferences);"},{"lineNumber":309,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":311,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"wynonaK"},"content":"     * Adds an appointment."},{"lineNumber":313,"author":{"gitID":"wynonaK"},"content":"     * Also checks the new appointment\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":314,"author":{"gitID":"wynonaK"},"content":"     * and updates the Tag objects in the appointment to point to those in {@link #tags}."},{"lineNumber":315,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":316,"author":{"gitID":"wynonaK"},"content":"     * @throws DuplicateAppointmentException if an equivalent person already exists."},{"lineNumber":317,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":318,"author":{"gitID":"wynonaK"},"content":"    public void addAppointment(Appointment a) throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":319,"author":{"gitID":"wynonaK"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":320,"author":{"gitID":"wynonaK"},"content":"        Appointment appointment \u003d syncWithMasterTagList(a);"},{"lineNumber":321,"author":{"gitID":"wynonaK"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":322,"author":{"gitID":"wynonaK"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any appointment"},{"lineNumber":323,"author":{"gitID":"wynonaK"},"content":"        // in the appointment list."},{"lineNumber":324,"author":{"gitID":"wynonaK"},"content":"        appointments.add(appointment);"},{"lineNumber":325,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":327,"author":{"gitID":"wynonaK"},"content":"    ////Delete operations"},{"lineNumber":328,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":329,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":330,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":332,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":333,"author":{"gitID":"wynonaK"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":334,"author":{"gitID":"wynonaK"},"content":"     * @throws PetDependencyNotEmptyException if the {@code key} still contains pet patients it is tied to."},{"lineNumber":335,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"wynonaK"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException, PetDependencyNotEmptyException {"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"        petPatientDependenciesExist(key);"},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":339,"author":{"gitID":"wynonaK"},"content":"        if (persons.remove(key)) {"},{"lineNumber":340,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":341,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":342,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":343,"author":{"gitID":"wynonaK"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":344,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":347,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":348,"author":{"gitID":"wynonaK"},"content":"     * Removes pet patient {@code key} from this {@code AddressBook}."},{"lineNumber":349,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":350,"author":{"gitID":"wynonaK"},"content":"     * @throws PetPatientNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":351,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentDependencyNotEmptyException if the {@code key} still contains appointments it is tied to."},{"lineNumber":352,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"wynonaK"},"content":"    public boolean removePetPatient(PetPatient key)"},{"lineNumber":354,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException {"},{"lineNumber":355,"author":{"gitID":"wynonaK"},"content":"        appointmentDependenciesExist(key);"},{"lineNumber":356,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":357,"author":{"gitID":"wynonaK"},"content":"        if (petPatients.remove(key)) {"},{"lineNumber":358,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":359,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":360,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":361,"author":{"gitID":"wynonaK"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":362,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":363,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":365,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":366,"author":{"gitID":"wynonaK"},"content":"     * Forcefully removes all pet patients dependencies on {@code key} from this {@code AddressBook}."},{"lineNumber":367,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":368,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":369,"author":{"gitID":"wynonaK"},"content":"    public List\u003cPetPatient\u003e removeAllPetPatientDependencies(Person key) {"},{"lineNumber":370,"author":{"gitID":"wynonaK"},"content":"        Iterator\u003cPetPatient\u003e petPatientIterator \u003d petPatients.iterator();"},{"lineNumber":371,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e petPatientsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":372,"author":{"gitID":"wynonaK"},"content":"        while (petPatientIterator.hasNext()) {"},{"lineNumber":373,"author":{"gitID":"wynonaK"},"content":"            PetPatient petPatient \u003d petPatientIterator.next();"},{"lineNumber":374,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":375,"author":{"gitID":"wynonaK"},"content":"            if (petPatient.getOwner().equals(key.getNric())) {"},{"lineNumber":376,"author":{"gitID":"wynonaK"},"content":"                petPatientsDeleted.add(petPatient);"},{"lineNumber":377,"author":{"gitID":"wynonaK"},"content":"                petPatientIterator.remove();"},{"lineNumber":378,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":379,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"wynonaK"},"content":"        return petPatientsDeleted;"},{"lineNumber":381,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":383,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":384,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentDependencyNotEmptyException if appointment dependencies of {@code key}"},{"lineNumber":385,"author":{"gitID":"wynonaK"},"content":"     * still exists in {@code AddressBook}."},{"lineNumber":386,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"wynonaK"},"content":"    private void appointmentDependenciesExist(PetPatient key) throws AppointmentDependencyNotEmptyException {"},{"lineNumber":388,"author":{"gitID":"wynonaK"},"content":"        for (Appointment appointment : appointments) {"},{"lineNumber":389,"author":{"gitID":"wynonaK"},"content":"            if (appointment.getPetPatientName().equals(key.getName())"},{"lineNumber":390,"author":{"gitID":"wynonaK"},"content":"                    \u0026\u0026 appointment.getOwnerNric().equals(key.getOwner())) {"},{"lineNumber":391,"author":{"gitID":"wynonaK"},"content":"                throw new AppointmentDependencyNotEmptyException(\"Appointment dependency still exist!\");"},{"lineNumber":392,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":393,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":394,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":395,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":396,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":397,"author":{"gitID":"wynonaK"},"content":"     * @throws PetDependencyNotEmptyException if pet dependencies of {@code key} still exists in {@code AddressBook}."},{"lineNumber":398,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":399,"author":{"gitID":"wynonaK"},"content":"    private void petPatientDependenciesExist(Person key) throws PetDependencyNotEmptyException {"},{"lineNumber":400,"author":{"gitID":"wynonaK"},"content":"        for (PetPatient petPatient : petPatients) {"},{"lineNumber":401,"author":{"gitID":"wynonaK"},"content":"            if (petPatient.getOwner().equals(key.getNric())) {"},{"lineNumber":402,"author":{"gitID":"wynonaK"},"content":"                throw new PetDependencyNotEmptyException(\"Pet Patient dependency still exist!\");"},{"lineNumber":403,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":404,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":407,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":408,"author":{"gitID":"wynonaK"},"content":"     * Forcefully removes all dependencies relying on pet patient {@code key} from this {@code AddressBook}."},{"lineNumber":409,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":410,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":411,"author":{"gitID":"wynonaK"},"content":"    public List\u003cAppointment\u003e removeAllAppointmentDependencies(PetPatient key) {"},{"lineNumber":412,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e appointmentsDeleted \u003d new ArrayList\u003c\u003e();"},{"lineNumber":413,"author":{"gitID":"wynonaK"},"content":"        Iterator\u003cAppointment\u003e appointmentIterator \u003d appointments.iterator();"},{"lineNumber":414,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":415,"author":{"gitID":"wynonaK"},"content":"        while (appointmentIterator.hasNext()) {"},{"lineNumber":416,"author":{"gitID":"wynonaK"},"content":"            Appointment appointment \u003d appointmentIterator.next();"},{"lineNumber":417,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":418,"author":{"gitID":"wynonaK"},"content":"            if (appointment.getPetPatientName().equals(key.getName())"},{"lineNumber":419,"author":{"gitID":"wynonaK"},"content":"                    \u0026\u0026 appointment.getOwnerNric().equals(key.getOwner())) {"},{"lineNumber":420,"author":{"gitID":"wynonaK"},"content":"                appointmentsDeleted.add(appointment);"},{"lineNumber":421,"author":{"gitID":"wynonaK"},"content":"                appointmentIterator.remove();"},{"lineNumber":422,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":423,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":424,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":425,"author":{"gitID":"wynonaK"},"content":"        return appointmentsDeleted;"},{"lineNumber":426,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":428,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":429,"author":{"gitID":"wynonaK"},"content":"     * Removes appointment {@code key} from this {@code AddressBook}."},{"lineNumber":430,"author":{"gitID":"wynonaK"},"content":"     *"},{"lineNumber":431,"author":{"gitID":"wynonaK"},"content":"     * @throws AppointmentNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":432,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":433,"author":{"gitID":"wynonaK"},"content":"    public boolean removeAppointment(Appointment key) throws AppointmentNotFoundException {"},{"lineNumber":434,"author":{"gitID":"wynonaK"},"content":"        if (appointments.remove(key)) {"},{"lineNumber":435,"author":{"gitID":"wynonaK"},"content":"            removeUselessTags();"},{"lineNumber":436,"author":{"gitID":"wynonaK"},"content":"            return true;"},{"lineNumber":437,"author":{"gitID":"wynonaK"},"content":"        } else {"},{"lineNumber":438,"author":{"gitID":"wynonaK"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":439,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":440,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":442,"author":{"gitID":"wynonaK"},"content":"    //// tag operations"},{"lineNumber":443,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":444,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":445,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":446,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":447,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"content":"    //@@author wynonaK-reused"},{"lineNumber":450,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":451,"author":{"gitID":"wynonaK"},"content":"     * Removes all {@code tag}s not used by anyone in this {@code AddressBook}."},{"lineNumber":452,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":453,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":454,"author":{"gitID":"wynonaK"},"content":"    private void removeUselessTags() {"},{"lineNumber":455,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e personTags \u003d"},{"lineNumber":456,"author":{"gitID":"wynonaK"},"content":"                persons.asObservableList()"},{"lineNumber":457,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":458,"author":{"gitID":"wynonaK"},"content":"                        .map(Person::getTags)"},{"lineNumber":459,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":460,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":461,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e appointmentTags \u003d"},{"lineNumber":462,"author":{"gitID":"wynonaK"},"content":"                appointments.asObservableList()"},{"lineNumber":463,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":464,"author":{"gitID":"wynonaK"},"content":"                        .map(Appointment::getAppointmentTags)"},{"lineNumber":465,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":466,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":467,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e petPatientTags \u003d"},{"lineNumber":468,"author":{"gitID":"wynonaK"},"content":"                petPatients.asObservableList()"},{"lineNumber":469,"author":{"gitID":"wynonaK"},"content":"                        .stream()"},{"lineNumber":470,"author":{"gitID":"wynonaK"},"content":"                        .map(PetPatient::getTags)"},{"lineNumber":471,"author":{"gitID":"wynonaK"},"content":"                        .flatMap(Set::stream)"},{"lineNumber":472,"author":{"gitID":"wynonaK"},"content":"                        .collect(Collectors.toSet());"},{"lineNumber":473,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":474,"author":{"gitID":"wynonaK"},"content":"        personTags.addAll(appointmentTags);"},{"lineNumber":475,"author":{"gitID":"wynonaK"},"content":"        personTags.addAll(petPatientTags);"},{"lineNumber":476,"author":{"gitID":"wynonaK"},"content":"        tags.setTags(personTags);"},{"lineNumber":477,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"Robert-Peng"},"content":""},{"lineNumber":479,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":480,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from {@code person} with that tag this {@code AddressBook}."},{"lineNumber":481,"author":{"gitID":"Robert-Peng"},"content":"     *"},{"lineNumber":482,"author":{"gitID":"wynonaK"},"content":"     * @throws PersonNotFoundException if {@code person} is not found in this {@code AddressBook}."},{"lineNumber":483,"author":{"gitID":"Robert-Peng"},"content":"     *                                 Reused from https://github.com/se-edu/addressbook-level4/"},{"lineNumber":484,"author":{"gitID":"Robert-Peng"},"content":"     *                                 pull/790/files with minor modifications"},{"lineNumber":485,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":486,"author":{"gitID":"wynonaK"},"content":"    private void removeTagParticular(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":487,"author":{"gitID":"wynonaK"},"content":"        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e(person.getTags()); //gets all the tags from a person"},{"lineNumber":488,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":489,"author":{"gitID":"wynonaK"},"content":"        if (tagList.remove(tag)) {"},{"lineNumber":490,"author":{"gitID":"wynonaK"},"content":"            Person updatedPerson \u003d"},{"lineNumber":491,"author":{"gitID":"Robert-Peng"},"content":"                    new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":492,"author":{"gitID":"Robert-Peng"},"content":"                        person.getAddress(), person.getNric(), tagList);"},{"lineNumber":493,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":494,"author":{"gitID":"wynonaK"},"content":"            try {"},{"lineNumber":495,"author":{"gitID":"wynonaK"},"content":"                updatePerson(person, updatedPerson);"},{"lineNumber":496,"author":{"gitID":"wynonaK"},"content":"            } catch (DuplicatePersonException dpe) {"},{"lineNumber":497,"author":{"gitID":"wynonaK"},"content":"                throw new AssertionError(\"Modifying tag only should not result in duplicate contact.\");"},{"lineNumber":498,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":499,"author":{"gitID":"Robert-Peng"},"content":"        } else {"},{"lineNumber":500,"author":{"gitID":"wynonaK"},"content":"            return;"},{"lineNumber":501,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":502,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":503,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":504,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":505,"author":{"gitID":"wynonaK"},"content":"     * Removes {@code tag} from all person with that tag this {@code AddressBook}."},{"lineNumber":506,"author":{"gitID":"wynonaK"},"content":"     * Reused from https://github.com/se-edu/addressbook-level4/pull/790/files with minor modifications"},{"lineNumber":507,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":508,"author":{"gitID":"wynonaK"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":509,"author":{"gitID":"wynonaK"},"content":"        try {"},{"lineNumber":510,"author":{"gitID":"wynonaK"},"content":"            for (Person currPerson : persons) {"},{"lineNumber":511,"author":{"gitID":"wynonaK"},"content":"                removeTagParticular(tag, currPerson);"},{"lineNumber":512,"author":{"gitID":"wynonaK"},"content":"            }"},{"lineNumber":513,"author":{"gitID":"wynonaK"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":514,"author":{"gitID":"wynonaK"},"content":"            throw new AssertionError(\"Impossible as obtained from Medeina.\");"},{"lineNumber":515,"author":{"gitID":"wynonaK"},"content":"        }"},{"lineNumber":516,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"content":"    //@@author"},{"lineNumber":521,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":522,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":523,"author":{"gitID":"wynonaK"},"content":"        return persons.asObservableList().size() + \" contacts, \""},{"lineNumber":524,"author":{"gitID":"chialejing"},"content":"                + petPatients.asObservableList().size() + \" pet patients, \""},{"lineNumber":525,"author":{"gitID":"wynonaK"},"content":"                + appointments.asObservableList().size() + \" appointments, \""},{"lineNumber":526,"author":{"gitID":"chialejing"},"content":"                + tags.asObservableList().size() + \" tags\";"},{"lineNumber":527,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":528,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":531,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":532,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":533,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":536,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":537,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":538,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":541,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e getPetPatientList() {"},{"lineNumber":542,"author":{"gitID":"chialejing"},"content":"        return petPatients.asObservableList();"},{"lineNumber":543,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":544,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":545,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":546,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":547,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":548,"author":{"gitID":"wynonaK"},"content":"        return appointments.asObservableList();"},{"lineNumber":549,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":550,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":551,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":552,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":553,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":554,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":555,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":556,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":557,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":558,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.petPatients.equals(((AddressBook) other).petPatients)"},{"lineNumber":559,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":560,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":563,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":564,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":565,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(persons, appointments, petPatients, tags);"},{"lineNumber":566,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":567,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Robert-Peng":25,"chialejing":99,"wynonaK":268,"-":173}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/DuplicatePetPatientException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":5,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":" * Signals that the operation will result in duplicate PetPatient objects."},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":"public class DuplicatePetPatientException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":"    public DuplicatePetPatientException() {"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"        super(\"Operation would result in duplicate pet patients\");"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":12,"-":1}},{"path":"src/main/java/seedu/address/model/petpatient/exceptions/PetDependencyNotEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient.exceptions;"},{"lineNumber":2,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":3,"author":{"gitID":"wynonaK"},"content":"//@@author wynonaK"},{"lineNumber":4,"author":{"gitID":"wynonaK"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":" * Signals that the operation is unable to continue because there are still pets dependent."},{"lineNumber":6,"author":{"gitID":"wynonaK"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wynonaK"},"content":"public class PetDependencyNotEmptyException extends Exception {"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"    public PetDependencyNotEmptyException(String message) {"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"}"}],"authorContributionMap":{"chialejing":2,"wynonaK":9}},{"path":"src/main/java/seedu/address/model/petpatient/Breed.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s breed in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBreed(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class Breed {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_BREED_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient breed should only contain alphabetic characters and spaces, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String BREED_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public final String breed;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code Breed}."},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * @param breed A valid breed."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public Breed(String breed) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(breed);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidBreed(breed), MESSAGE_PET_BREED_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid breed."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidBreed(String test) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        return test.matches(BREED_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return breed;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                || (other instanceof Breed // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.breed.equals(((Breed) other).breed)); // state check"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        return breed.hashCode();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":55,"-":4}},{"path":"src/main/java/seedu/address/model/petpatient/BloodType.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s blood type in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class BloodType {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_BLOODTYPE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient blood type should only contain alphabetic characters, punctuations and spaces, \""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"                    + \"and it should not be blank.\";"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    public static final String BLOODTYPE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct}\\\\p{Blank}]*\";"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    public final String bloodType;"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code BloodType}."},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     * @param bloodType A valid bloodType."},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    public BloodType(String bloodType) {"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        requireNonNull(bloodType);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidBloodType(bloodType), MESSAGE_PET_BLOODTYPE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid bloodType."},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidBloodType(String test) {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        return test.matches(BLOODTYPE_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        return bloodType;"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                || (other instanceof BloodType // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.bloodType.equals(((BloodType) other).bloodType)); // state check"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"        return bloodType.hashCode();"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":56,"-":4}},{"path":"src/main/java/seedu/address/model/petpatient/Colour.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s colour in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidColour(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class Colour {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_COLOUR_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient colour should only contain alphabetic characters and spaces, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String COLOUR_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public final String colour;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code Colour}."},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * @param colour A valid colour."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public Colour(String colour) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(colour);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidColour(colour), MESSAGE_PET_COLOUR_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid colour."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidColour(String test) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        return test.matches(COLOUR_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return colour;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                || (other instanceof Colour // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.colour.equals(((Colour) other).colour)); // state check"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        return colour.hashCode();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":55,"-":4}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatientName.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class PetPatientName {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_NAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient names should only contain alphanumeric characters and spaces, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public final String fullName;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code PetPatientName}."},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * @param name A valid name."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public PetPatientName(String name) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(name);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidName(name), MESSAGE_PET_NAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        this.fullName \u003d name;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid pet patient name."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                || (other instanceof PetPatientName // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.fullName.equals(((PetPatientName) other).fullName)); // state check"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":56,"-":4}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":20,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":22,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":23,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":24,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":33,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":35,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":39,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":46,"author":{"gitID":"wynonaK"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":"    private final FilteredList\u003cPetPatient\u003e filteredPetPatients;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"wynonaK"},"content":"        logger.fine(\"Initializing with Medeina: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":60,"author":{"gitID":"wynonaK"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients \u003d new FilteredList\u003c\u003e(this.addressBook.getPetPatientList());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deletePerson(Person target)"},{"lineNumber":86,"author":{"gitID":"wynonaK"},"content":"            throws PersonNotFoundException, PetDependencyNotEmptyException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":99,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deletePetPatient(PetPatient target)"},{"lineNumber":101,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException {"},{"lineNumber":102,"author":{"gitID":"wynonaK"},"content":"        addressBook.removePetPatient(target);"},{"lineNumber":103,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":106,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"wynonaK"},"content":"    public synchronized List\u003cPetPatient\u003e deletePetPatientDependencies(Person target) {"},{"lineNumber":108,"author":{"gitID":"wynonaK"},"content":"        List\u003cPetPatient\u003e petPatients \u003d addressBook.removeAllPetPatientDependencies(target);"},{"lineNumber":109,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":110,"author":{"gitID":"wynonaK"},"content":"        return petPatients;"},{"lineNumber":111,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":113,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"wynonaK"},"content":"    public synchronized List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target) {"},{"lineNumber":115,"author":{"gitID":"wynonaK"},"content":"        List\u003cAppointment\u003e dependenciesDeleted \u003d addressBook.removeAllAppointmentDependencies(target);"},{"lineNumber":116,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"        return dependenciesDeleted;"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"    public synchronized void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException {"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"        addressBook.addPetPatient(petPatient);"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":"        updateFilteredPetPatientList(PREDICATE_SHOW_ALL_PET_PATIENTS);"},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"        indicateAddressBookChanged();"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":128,"author":{"gitID":"Aquarinte"},"content":"    //@@author aquarinte"},{"lineNumber":129,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"Aquarinte"},"content":"    public Person getPersonWithNric(Nric ownerNric) {"},{"lineNumber":131,"author":{"gitID":"Aquarinte"},"content":"        for (Person p : addressBook.getPersonList()) {"},{"lineNumber":132,"author":{"gitID":"Aquarinte"},"content":"            if (p.getNric().equals(ownerNric)) {"},{"lineNumber":133,"author":{"gitID":"Aquarinte"},"content":"                return p;"},{"lineNumber":134,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"Aquarinte"},"content":"        return null;"},{"lineNumber":137,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":139,"author":{"gitID":"Aquarinte"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"Aquarinte"},"content":"    public PetPatient getPetPatientWithNricAndName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":141,"author":{"gitID":"Aquarinte"},"content":"        for (PetPatient p : addressBook.getPetPatientList()) {"},{"lineNumber":142,"author":{"gitID":"Aquarinte"},"content":"            if (p.getOwner().equals(ownerNric) \u0026\u0026 p.getName().equals(petPatientName)) {"},{"lineNumber":143,"author":{"gitID":"Aquarinte"},"content":"                return p;"},{"lineNumber":144,"author":{"gitID":"Aquarinte"},"content":"            }"},{"lineNumber":145,"author":{"gitID":"Aquarinte"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"Aquarinte"},"content":"        return null;"},{"lineNumber":147,"author":{"gitID":"Aquarinte"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Aquarinte"},"content":""},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric) {"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cPetPatient\u003e petPatientArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":"        for (PetPatient p : addressBook.getPetPatientList()) {"},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"            if (p.getOwner().equals(ownerNric)) {"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"                petPatientArrayList.add(p);"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        return petPatientArrayList;"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric) {"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"            if (a.getOwnerNric().equals(ownerNric)) {"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"                appointmentArrayList.add(a);"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"        return appointmentArrayList;"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"    public ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName) {"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"        ArrayList\u003cAppointment\u003e appointmentArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"            if (a.getOwnerNric().equals(ownerNric) \u0026\u0026 a.getPetPatientName().equals(petPatientName)) {"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"                appointmentArrayList.add(a);"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"        return appointmentArrayList;"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"    public Appointment getClashingAppointment(LocalDateTime dateTime) {"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"            if (a.getDateTime().equals(dateTime)) {"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"                return a;"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"        return null;"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"    public boolean hasConcurrentAppointment(LocalDateTime oldDateTime, LocalDateTime newDateTime) {"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"        for (Appointment a : addressBook.getAppointmentList()) {"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"            LocalDateTime dateTime \u003d a.getDateTime();"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"            if (newDateTime.isAfter(dateTime)"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 newDateTime.isBefore(dateTime.plusMinutes(30))"},{"lineNumber":199,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 !dateTime.equals(oldDateTime)) {"},{"lineNumber":200,"author":{"gitID":"chialejing"},"content":"                return true;"},{"lineNumber":201,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":202,"author":{"gitID":"chialejing"},"content":"            if (newDateTime.isBefore(dateTime)"},{"lineNumber":203,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 newDateTime.plusMinutes(30).isAfter(dateTime)"},{"lineNumber":204,"author":{"gitID":"chialejing"},"content":"                    \u0026\u0026 !dateTime.equals(oldDateTime)) {"},{"lineNumber":205,"author":{"gitID":"chialejing"},"content":"                return true;"},{"lineNumber":206,"author":{"gitID":"chialejing"},"content":"            }"},{"lineNumber":207,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"chialejing"},"content":"        return false;"},{"lineNumber":209,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":211,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":212,"author":{"gitID":"chialejing"},"content":"    public void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":213,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":214,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(target, editedPetPatient);"},{"lineNumber":215,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":216,"author":{"gitID":"chialejing"},"content":"        addressBook.updatePetPatient(target, editedPetPatient);"},{"lineNumber":217,"author":{"gitID":"chialejing"},"content":"        indicateAddressBookChanged();"},{"lineNumber":218,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":220,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"chialejing"},"content":"    public void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":222,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":223,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(target, editedAppointment);"},{"lineNumber":224,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":225,"author":{"gitID":"chialejing"},"content":"        addressBook.updateAppointment(target, editedAppointment);"},{"lineNumber":226,"author":{"gitID":"chialejing"},"content":"        indicateAddressBookChanged();"},{"lineNumber":227,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":229,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public List\u003cTag\u003e getTagList() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return addressBook.getTagList();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"content":"    //@@author"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":246,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"wynonaK"},"content":"    public synchronized void deleteAppointment(Appointment target) throws AppointmentNotFoundException {"},{"lineNumber":248,"author":{"gitID":"wynonaK"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":249,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":250,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":252,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"wynonaK"},"content":"    public synchronized void addAppointment(Appointment appointment)"},{"lineNumber":254,"author":{"gitID":"wynonaK"},"content":"            throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":255,"author":{"gitID":"wynonaK"},"content":"        ConcurrentAppointmentException, PastAppointmentException {"},{"lineNumber":256,"author":{"gitID":"wynonaK"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":257,"author":{"gitID":"wynonaK"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);"},{"lineNumber":258,"author":{"gitID":"wynonaK"},"content":"        indicateAddressBookChanged();"},{"lineNumber":259,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":261,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":262,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":263,"author":{"gitID":"wynonaK"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":264,"author":{"gitID":"wynonaK"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":265,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":267,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":268,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":269,"author":{"gitID":"wynonaK"},"content":"    //@@author"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":286,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":287,"author":{"gitID":"wynonaK"},"content":"    //@@author wynonaK"},{"lineNumber":288,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"wynonaK"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":290,"author":{"gitID":"wynonaK"},"content":"     * {@code addressBook}"},{"lineNumber":291,"author":{"gitID":"wynonaK"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":293,"author":{"gitID":"wynonaK"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":294,"author":{"gitID":"wynonaK"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":295,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":297,"author":{"gitID":"wynonaK"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"wynonaK"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":299,"author":{"gitID":"wynonaK"},"content":"        requireNonNull(predicate);"},{"lineNumber":300,"author":{"gitID":"wynonaK"},"content":"        filteredAppointments.setPredicate(predicate);"},{"lineNumber":301,"author":{"gitID":"wynonaK"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":303,"author":{"gitID":"wynonaK"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pet Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":304,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":305,"author":{"gitID":"chialejing"},"content":"    //@@author chialejing"},{"lineNumber":306,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"chialejing"},"content":"     * Returns an unmodifiable view of the list of {@code PetPatient} backed by the internal list of"},{"lineNumber":308,"author":{"gitID":"chialejing"},"content":"     * {@code addressBook}"},{"lineNumber":309,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":311,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e getFilteredPetPatientList() {"},{"lineNumber":312,"author":{"gitID":"chialejing"},"content":"        return FXCollections.unmodifiableObservableList(filteredPetPatients);"},{"lineNumber":313,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":315,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":316,"author":{"gitID":"chialejing"},"content":"    public void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate) {"},{"lineNumber":317,"author":{"gitID":"chialejing"},"content":"        requireNonNull(predicate);"},{"lineNumber":318,"author":{"gitID":"chialejing"},"content":"        filteredPetPatients.setPredicate(predicate);"},{"lineNumber":319,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":321,"author":{"gitID":"chialejing"},"content":"    //@@author"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":337,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":338,"author":{"gitID":"wynonaK"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments)"},{"lineNumber":339,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 filteredPetPatients.equals(other.filteredPetPatients);"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Aquarinte":21,"chialejing":114,"Robert-Peng":2,"wynonaK":83,"-":121}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric \""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"            + \"and should only consist of one word\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":2,"-":53}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chialejing"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"chialejing"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"wynonaK"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDependencyNotEmptyException;"},{"lineNumber":11,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":12,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.ConcurrentAppointmentException;"},{"lineNumber":13,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":14,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.appointment.exceptions.DuplicateDateTimeException;"},{"lineNumber":15,"author":{"gitID":"Robert-Peng"},"content":"import seedu.address.model.appointment.exceptions.PastAppointmentException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicateNricException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatient;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.PetPatientName;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":24,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetDependencyNotEmptyException;"},{"lineNumber":25,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":26,"author":{"gitID":"wynonaK"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":34,"author":{"gitID":"wynonaK"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    Predicate\u003cPetPatient\u003e PREDICATE_SHOW_ALL_PET_PATIENTS \u003d unused -\u003e true;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":44,"author":{"gitID":"wynonaK"},"content":"    void deletePerson(Person target) throws PersonNotFoundException, PetDependencyNotEmptyException;"},{"lineNumber":45,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException, DuplicateNricException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"    void updatePetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException;"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"    void updateAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":65,"author":{"gitID":"wynonaK"},"content":"    /** Removes the specific {@code tag} from all {@code persons} with that tag **/"},{"lineNumber":66,"author":{"gitID":"wynonaK"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":67,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":68,"author":{"gitID":"wynonaK"},"content":"    /** Adds the given appointment */"},{"lineNumber":69,"author":{"gitID":"Robert-Peng"},"content":"    void addAppointment(Appointment appointment) throws DuplicateAppointmentException, DuplicateDateTimeException,"},{"lineNumber":70,"author":{"gitID":"Robert-Peng"},"content":"        ConcurrentAppointmentException, PastAppointmentException;"},{"lineNumber":71,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":72,"author":{"gitID":"wynonaK"},"content":"    /** Deletes the given appointment. */"},{"lineNumber":73,"author":{"gitID":"wynonaK"},"content":"    void deleteAppointment(Appointment target) throws AppointmentNotFoundException;"},{"lineNumber":74,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"wynonaK"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":85,"author":{"gitID":"wynonaK"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"wynonaK"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"    ObservableList\u003cPetPatient\u003e getFilteredPetPatientList();"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":90,"author":{"gitID":"wynonaK"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"wynonaK"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"wynonaK"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":95,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    void updateFilteredPetPatientList(Predicate\u003cPetPatient\u003e predicate);"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    void addPetPatient(PetPatient petPatient) throws DuplicatePetPatientException;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /** Returns a person object that has the given {@code Nric}. */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    Person getPersonWithNric(Nric ownerNric);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /** Returns a petpatient object that has the given {@code Nric} and {@code PetPatientName}. */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    PetPatient getPetPatientWithNricAndName(Nric ownerNric, PetPatientName petPatientName);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /** Returns a list of tags used in the application. */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    List\u003cTag\u003e getTagList();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cPetPatient\u003e getPetPatientsWithNric(Nric ownerNric);"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cAppointment\u003e getAppointmentsWithNric(Nric ownerNric);"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    ArrayList\u003cAppointment\u003e getAppointmentsWithNricAndPetName(Nric ownerNric, PetPatientName petPatientName);"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    Appointment getClashingAppointment(LocalDateTime dateTime);"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"wynonaK"},"content":"    /** Deletes the given pet. */"},{"lineNumber":118,"author":{"gitID":"wynonaK"},"content":"    void deletePetPatient(PetPatient target)"},{"lineNumber":119,"author":{"gitID":"wynonaK"},"content":"            throws PetPatientNotFoundException, AppointmentDependencyNotEmptyException;"},{"lineNumber":120,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":121,"author":{"gitID":"wynonaK"},"content":"    /** Deletes all pet dependencies. */"},{"lineNumber":122,"author":{"gitID":"wynonaK"},"content":"    List\u003cPetPatient\u003e deletePetPatientDependencies(Person key);"},{"lineNumber":123,"author":{"gitID":"wynonaK"},"content":""},{"lineNumber":124,"author":{"gitID":"wynonaK"},"content":"    /** Deletes all appointment dependencies. */"},{"lineNumber":125,"author":{"gitID":"wynonaK"},"content":"    List\u003cAppointment\u003e deleteAppointmentDependencies(PetPatient target);"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"    boolean hasConcurrentAppointment(LocalDateTime oldDateTime, LocalDateTime newDateTime);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chialejing":28,"Robert-Peng":4,"wynonaK":36,"-":60}},{"path":"src/main/java/seedu/address/model/petpatient/PetPatient.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Nric;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient in the address book."},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * Guarantees: details are present, field values are validated."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"public class PetPatient {"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":"    private final PetPatientName name;"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    private final Species species; // e.g. dogs, cats, birds, etc."},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"    private final Breed breed; // different varieties of the same species"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private final Colour colour;"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"    private final BloodType bloodType;"},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    private final Optional\u003cDate\u003e dateOfBirth; // can be null"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"    private Nric ownerNric; // can be null (initially)"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"    private StringBuilder medicalHistory; // can be null (initially)"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    //keep this constructor, as owner NRIC can be null initially when adding a new PetPatient"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"                      Species species,"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"                      Breed breed,"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"                      Colour colour,"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"                      BloodType bloodType,"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, tags);"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d null;"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d null;"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"                      Species species,"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"                      Breed breed,"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"                      Colour colour,"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"                      BloodType bloodType,"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"                      Nric ownerNric,"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, tags);"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d null;"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"    //keep this constructor"},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"    public PetPatient(PetPatientName name,"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"                      Species species,"},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"                      Breed breed,"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"                      Colour colour,"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"                      BloodType bloodType,"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"                      Nric ownerNric,"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"                      Optional\u003cDate\u003e dateOfBirth,"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"                      Set\u003cTag\u003e tags) {"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(name, species, breed, colour, bloodType, ownerNric, dateOfBirth, tags);"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        this.name \u003d name;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":"        this.breed \u003d breed;"},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"        this.colour \u003d colour;"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.bloodType \u003d bloodType;"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":"        this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory \u003d new StringBuilder();"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"    public PetPatientName getName() {"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        return name;"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":"    public Optional\u003cDate\u003e getDateOfBirth() {"},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"        return dateOfBirth;"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public Species getSpecies() {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return species;"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    public Breed getBreed() {"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"        return breed;"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":"    public Colour getColour() {"},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"        return colour;"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"    public BloodType getBloodType() {"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"        return bloodType;"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    public Nric getOwner() {"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"        return ownerNric;"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"    public void setOwnerNric(Nric ownerNric) {"},{"lineNumber":122,"author":{"gitID":"chialejing"},"content":"        this.ownerNric \u003d ownerNric;"},{"lineNumber":123,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":125,"author":{"gitID":"chialejing"},"content":"    public StringBuilder getMedicalHistory() {"},{"lineNumber":126,"author":{"gitID":"chialejing"},"content":"        return medicalHistory;"},{"lineNumber":127,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":129,"author":{"gitID":"chialejing"},"content":"    public void updateMedicalHistory(String newContent) {"},{"lineNumber":130,"author":{"gitID":"chialejing"},"content":"        this.medicalHistory.append(newContent);"},{"lineNumber":131,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":133,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"chialejing"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":135,"author":{"gitID":"chialejing"},"content":"     * if modification is attempted."},{"lineNumber":136,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"chialejing"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":138,"author":{"gitID":"chialejing"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":139,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":141,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"chialejing"},"content":"     * Returns a list of tags as a string, for find command."},{"lineNumber":143,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"chialejing"},"content":"    public String getTagString() {"},{"lineNumber":145,"author":{"gitID":"chialejing"},"content":"        StringBuilder tagString \u003d new StringBuilder();"},{"lineNumber":146,"author":{"gitID":"chialejing"},"content":"        Set\u003cTag\u003e tagSet \u003d Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":147,"author":{"gitID":"chialejing"},"content":"        for (Tag tag : tagSet) {"},{"lineNumber":148,"author":{"gitID":"chialejing"},"content":"            tagString.append(tag.tagName);"},{"lineNumber":149,"author":{"gitID":"chialejing"},"content":"            tagString.append(\" \");"},{"lineNumber":150,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"chialejing"},"content":"        return tagString.toString().trim();"},{"lineNumber":152,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":154,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":156,"author":{"gitID":"chialejing"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":157,"author":{"gitID":"chialejing"},"content":"            return true;"},{"lineNumber":158,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":160,"author":{"gitID":"chialejing"},"content":"        if (!(other instanceof PetPatient)) {"},{"lineNumber":161,"author":{"gitID":"chialejing"},"content":"            return false;"},{"lineNumber":162,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":164,"author":{"gitID":"chialejing"},"content":"        PetPatient otherPetPatient \u003d (PetPatient) other;"},{"lineNumber":165,"author":{"gitID":"chialejing"},"content":"        return otherPetPatient.getName().equals(this.getName())"},{"lineNumber":166,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getSpecies().equals(this.getSpecies())"},{"lineNumber":167,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBreed().equals(this.getBreed())"},{"lineNumber":168,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getColour().equals(this.getColour())"},{"lineNumber":169,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getBloodType().equals(this.getBloodType())"},{"lineNumber":170,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 otherPetPatient.getOwner().equals(this.getOwner());"},{"lineNumber":171,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":173,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":175,"author":{"gitID":"chialejing"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":176,"author":{"gitID":"chialejing"},"content":"        return Objects.hash(name, species, breed, colour, bloodType, tags, ownerNric);"},{"lineNumber":177,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":179,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":180,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":181,"author":{"gitID":"chialejing"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":182,"author":{"gitID":"chialejing"},"content":"        builder.append(\"\\t\")"},{"lineNumber":183,"author":{"gitID":"chialejing"},"content":"                .append(getName())"},{"lineNumber":184,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tSpecies: \")"},{"lineNumber":185,"author":{"gitID":"chialejing"},"content":"                .append(getSpecies())"},{"lineNumber":186,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tBreed: \")"},{"lineNumber":187,"author":{"gitID":"chialejing"},"content":"                .append(getBreed())"},{"lineNumber":188,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tColor: \")"},{"lineNumber":189,"author":{"gitID":"chialejing"},"content":"                .append(getColour())"},{"lineNumber":190,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tBlood Type: \")"},{"lineNumber":191,"author":{"gitID":"chialejing"},"content":"                .append(getBloodType())"},{"lineNumber":192,"author":{"gitID":"chialejing"},"content":"                .append(\"\\t\\tOwner\u0027s NRIC: \")"},{"lineNumber":193,"author":{"gitID":"chialejing"},"content":"                .append(getOwner())"},{"lineNumber":194,"author":{"gitID":"chialejing"},"content":"                .append(\"\\tTags: \");"},{"lineNumber":195,"author":{"gitID":"chialejing"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":196,"author":{"gitID":"chialejing"},"content":"        return builder.toString();"},{"lineNumber":197,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":186,"-":12}},{"path":"src/main/java/seedu/address/model/petpatient/Species.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":7,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chialejing"},"content":" * Represents a PetPatient\u0027s species in the address book."},{"lineNumber":9,"author":{"gitID":"chialejing"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSpecies(String)}"},{"lineNumber":10,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"public class Species {"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":"    public static final String MESSAGE_PET_SPECIES_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"            \"Pet Patient species should only contain alphabetic characters and spaces, and it should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":"    public static final String SPECIES_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":"    public final String species;"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":"     * Constructs a {@code Species}."},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * @param species A valid species."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public Species(String species) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(species);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        checkArgument(isValidSpecies(species), MESSAGE_PET_SPECIES_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"        this.species \u003d species;"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     * Returns true if a given string is a valid species."},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"    public static boolean isValidSpecies(String test) {"},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"        return test.matches(SPECIES_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        return species;"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"                || (other instanceof Species // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.species.equals(((Species) other).species)); // state check"},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        return species.hashCode();"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":55,"-":4}},{"path":"src/main/java/seedu/address/model/petpatient/UniquePetPatientList.java","lines":[{"lineNumber":1,"author":{"gitID":"chialejing"},"content":"package seedu.address.model.petpatient;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.DuplicatePetPatientException;"},{"lineNumber":12,"author":{"gitID":"chialejing"},"content":"import seedu.address.model.petpatient.exceptions.PetPatientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":14,"author":{"gitID":"chialejing"},"content":"//@@author chialejing"},{"lineNumber":15,"author":{"gitID":"chialejing"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"chialejing"},"content":" * A list of pet patients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":18,"author":{"gitID":"chialejing"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"chialejing"},"content":" *"},{"lineNumber":20,"author":{"gitID":"chialejing"},"content":" * @see PetPatient#equals(Object)"},{"lineNumber":21,"author":{"gitID":"chialejing"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"chialejing"},"content":" */"},{"lineNumber":23,"author":{"gitID":"chialejing"},"content":"public class UniquePetPatientList implements Iterable\u003cPetPatient\u003e {"},{"lineNumber":24,"author":{"gitID":"chialejing"},"content":"    private final ObservableList\u003cPetPatient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":26,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"chialejing"},"content":"     * Returns true if the list contains an equivalent pet patient as the given argument."},{"lineNumber":28,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chialejing"},"content":"    public boolean contains(PetPatient toCheck) {"},{"lineNumber":30,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"chialejing"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":34,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chialejing"},"content":"     * Adds a pet patient to the list."},{"lineNumber":36,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the pet patient to add is a duplicate of an existing pet patient"},{"lineNumber":38,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":39,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"chialejing"},"content":"    public void add(PetPatient toAdd) throws DuplicatePetPatientException {"},{"lineNumber":41,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"chialejing"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":44,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"chialejing"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":48,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"chialejing"},"content":"     * Replaces the pet patient {@code target} in the list with {@code editedPetPatient}."},{"lineNumber":50,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"chialejing"},"content":"     * @throws DuplicatePetPatientException if the replacement is equivalent to another existing pet patient"},{"lineNumber":52,"author":{"gitID":"chialejing"},"content":"     * in the list."},{"lineNumber":53,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"chialejing"},"content":"    public void setPetPatient(PetPatient target, PetPatient editedPetPatient)"},{"lineNumber":56,"author":{"gitID":"chialejing"},"content":"            throws DuplicatePetPatientException, PetPatientNotFoundException {"},{"lineNumber":57,"author":{"gitID":"chialejing"},"content":"        requireNonNull(editedPetPatient);"},{"lineNumber":58,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":59,"author":{"gitID":"chialejing"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"chialejing"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":62,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":64,"author":{"gitID":"chialejing"},"content":"        if (!target.equals(editedPetPatient) \u0026\u0026 internalList.contains(editedPetPatient)) {"},{"lineNumber":65,"author":{"gitID":"chialejing"},"content":"            throw new DuplicatePetPatientException();"},{"lineNumber":66,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":68,"author":{"gitID":"chialejing"},"content":"        internalList.set(index, editedPetPatient);"},{"lineNumber":69,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":71,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"chialejing"},"content":"     * Removes the equivalent pet patient from the list."},{"lineNumber":73,"author":{"gitID":"chialejing"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"chialejing"},"content":"     * @throws PetPatientNotFoundException if no such pet patient could be found in the list."},{"lineNumber":75,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"chialejing"},"content":"    public boolean remove(PetPatient toRemove) throws PetPatientNotFoundException {"},{"lineNumber":77,"author":{"gitID":"chialejing"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"chialejing"},"content":"        final boolean petPatientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"chialejing"},"content":"        if (!petPatientFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"chialejing"},"content":"            throw new PetPatientNotFoundException();"},{"lineNumber":81,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"chialejing"},"content":"        return petPatientFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":85,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(UniquePetPatientList replacement) {"},{"lineNumber":86,"author":{"gitID":"chialejing"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":89,"author":{"gitID":"chialejing"},"content":"    public void setPetPatients(List\u003cPetPatient\u003e petPatients) throws DuplicatePetPatientException {"},{"lineNumber":90,"author":{"gitID":"chialejing"},"content":"        requireAllNonNull(petPatients);"},{"lineNumber":91,"author":{"gitID":"chialejing"},"content":"        final UniquePetPatientList replacement \u003d new UniquePetPatientList();"},{"lineNumber":92,"author":{"gitID":"chialejing"},"content":"        for (final PetPatient petPatient : petPatients) {"},{"lineNumber":93,"author":{"gitID":"chialejing"},"content":"            replacement.add(petPatient);"},{"lineNumber":94,"author":{"gitID":"chialejing"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"chialejing"},"content":"        setPetPatients(replacement);"},{"lineNumber":96,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":98,"author":{"gitID":"chialejing"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"chialejing"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"chialejing"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"chialejing"},"content":"    public ObservableList\u003cPetPatient\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"chialejing"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":105,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"chialejing"},"content":"    public Iterator\u003cPetPatient\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"chialejing"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":110,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"chialejing"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"chialejing"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"chialejing"},"content":"                || (other instanceof UniquePetPatientList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"chialejing"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePetPatientList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"chialejing"},"content":""},{"lineNumber":117,"author":{"gitID":"chialejing"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"chialejing"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"chialejing"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"chialejing"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"chialejing"},"content":"}"}],"authorContributionMap":{"chialejing":112,"-":9}}]
