var resultJson = [{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ContactSails was developed by team W13-B1. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Aadyaa Maddi"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::aadyaa.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}[https://github.com/amad-person[github]] [\u003c\u003caadyaamaddi#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Logic, Documentation, Deliverables and Deadlines"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Alicia Ho Sor Sian"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::suxianalicia.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"{empty}[https://github.com/SuxianAlicia[github]] [\u003c\u003csuxianalicia#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: In charge of Model Component, Code Quality"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"\u003d\u003d\u003d Ang Jing Zhe"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"image::AJZ1995.JPG[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}[https://github.com/AJZ1995[github]] [\u003c\u003cjingzhe#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Kevin Yeong"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::kevinyeong.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}[https://github.com/A0143487X[github]] [\u003c\u003ckevinyeong#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Responsibilities: -"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"AJZ1995":2,"-":43}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ContactSails - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toclevels: 5"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W13-B1/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `Team W13-B1`           Since: `Mar 2018`           Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"ContactSails is for salespersons who prefer to use a desktop app for managing contacts, orders, and events."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"More importantly, it is optimized for those who prefer to work with a Command Line Interface (link:#cli[CLI]), while still having the benefits of a Graphical User Interface (link:#gui[GUI])."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"If you can type fast, ContactSails can get your sales management related tasks done faster than traditional GUI apps."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d About This Guide"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"This User Guide will help you set up ContactSails on your desktop and explain the all the features provided by our application in detail."},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"The User Guide has some text styled in different ways to signify different meanings:"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* `text` : denotes the commands you will need to enter to execute the corresponding functions in ContactSails. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* kbd:[TEXT] : denotes keyboard buttons you might need to press. +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cTEXT\u003e\u003e : denotes links to other parts of the document or links that need to be opened in the browser."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"See \u003c\u003cQuick Start\u003e\u003e for instructions on how to install our application."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"If you are ready to use the application and want to know more about the CLI commands offered by ContactSails, you can jump to \u003c\u003cFeatures\u003e\u003e."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Before you start, ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":44,"author":{"gitID":"-"},"content":"You can download Java from link:https://java.com/en/download/[here]."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8, so make sure you have installed the right version."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"To install and start using ContactSails, do the following:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":".  Download the latest `ContactSails.jar` link:{repoURL}/releases[here]."},{"lineNumber":52,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for ContactSails."},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The User Interface (UI) should appear in a few seconds, as shown in Figure 1 below."},{"lineNumber":54,"author":{"gitID":"-"},"content":"You can resize the application window as required by dragging the corners of the application window."},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":57,"author":{"gitID":"-"},"content":".ContactSails Application UI Interface"},{"lineNumber":58,"author":{"gitID":"-"},"content":"image::ContactSails_Interface_StartUp.PNG[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":59,"author":{"gitID":"-"},"content":"+"},{"lineNumber":60,"author":{"gitID":"-"},"content":".  Type a command in the command box (located right below Menu Bar) and press kbd:[Enter] to execute it. +"},{"lineNumber":61,"author":{"gitID":"-"},"content":"For example, typing `help` and pressing kbd:[Enter] will open the help window."},{"lineNumber":62,"author":{"gitID":"-"},"content":"*  Some example commands you can try:"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"** `list` : lists all contacts."},{"lineNumber":65,"author":{"gitID":"-"},"content":"** `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to ContactSails."},{"lineNumber":66,"author":{"gitID":"-"},"content":"** `delete 3` : deletes the 3rd contact shown in the current list."},{"lineNumber":67,"author":{"gitID":"-"},"content":"** `calendar month`: displays the calendar at the center of ContactSails."},{"lineNumber":68,"author":{"gitID":"-"},"content":"** `exit` : exits the app."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of all the commands you can execute in our application. If you want to see a quick summary of all the commands instead, jump to \u003c\u003cCommand Summary\u003e\u003e."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d Using ContactSails"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"This section first describes the various components of ContactSails\u0027 User Interface and later explains some guidelines you will need to follow to execute commands."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d ContactSails User Interface"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"This section briefly explains the various panels in the UI interface of ContactSails."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":81,"author":{"gitID":"-"},"content":".Breakdown of ContactSails UI."},{"lineNumber":82,"author":{"gitID":"-"},"content":"image::ContactSails_Interface_Breakdown.png[width\u003d\"800\" align\u003d\"center\"]"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"With reference to Figure 2 above, there are 5 important sections in the interface:"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":". *Command Box*: This is the place for you to type your commands. Pressing kbd:[Enter] will execute the command."},{"lineNumber":87,"author":{"gitID":"-"},"content":". *Result Display*: This place shows the result of the command you have executed. It will display messages indicating whether your command has executed successfully or not."},{"lineNumber":88,"author":{"gitID":"-"},"content":"If your command fails to execute, error messages indicating the cause of the failure will be shown here."},{"lineNumber":89,"author":{"gitID":"-"},"content":". *Person List Panel*: This panel displays the list of persons that exist in ContactSails. You can filter this list of persons with `find` commands."},{"lineNumber":90,"author":{"gitID":"-"},"content":". *Center Panel*: This panel can display either a detailed display of a person\u0027s information, or a calendar."},{"lineNumber":91,"author":{"gitID":"-"},"content":"The `select` command will display the selected person\u0027s information, and the `calendar` command will display the calendar."},{"lineNumber":92,"author":{"gitID":"-"},"content":". *Right Panel*: This panel can display either a list of orders or a list of calendar entries in ContactSails. On startup, this panel will show the list of orders by default."},{"lineNumber":93,"author":{"gitID":"-"},"content":"You can use `orderlist` and `entrylist` to switch between the two lists."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"Person List Panel, Center Panel and Right Panel will be explained in greater detail in \u003c\u003cFeatures\u003e\u003e."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Command Format Guidelines"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"Here are some guidelines you will have to take note of to execute commands in ContactSails:"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":". Command words are case sensitive."},{"lineNumber":102,"author":{"gitID":"-"},"content":"** Typing `help` will execute the help command."},{"lineNumber":103,"author":{"gitID":"-"},"content":"** Typing `Help`, or `HELP` will not execute the help command."},{"lineNumber":104,"author":{"gitID":"-"},"content":". Words in `UPPER_CASE` are the parameters to be supplied by the user."},{"lineNumber":105,"author":{"gitID":"-"},"content":"** For example, in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":106,"author":{"gitID":"-"},"content":". Items in square brackets are optional."},{"lineNumber":107,"author":{"gitID":"-"},"content":"** For example, `n/NAME [g/GROUP]` can be used as `n/John Doe g/friend` or simply as `n/John Doe`."},{"lineNumber":108,"author":{"gitID":"-"},"content":". Items with `...` after them can be used multiple times. They can be omitted as well i.e. used 0 times."},{"lineNumber":109,"author":{"gitID":"-"},"content":"** For example, `[g/GROUP]...` can be used as `\u0027{nbsp}\u0027` (i.e. 0 times), as `g/friend`, or  as `g/friend g/family`, etc."},{"lineNumber":110,"author":{"gitID":"-"},"content":". Parameters can be in any order."},{"lineNumber":111,"author":{"gitID":"-"},"content":"** For example, if the command format specifies `n/NAME p/PHONE_NUMBER`, entering `p/PHONE_NUMBER n/NAME` instead will also be acceptable."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"*Command Autocompletion:* +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"ContactSails will automatically complete the command you want to enter if you press the kbd:[Tab] key. +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"For example, typing `ad` in the command box and then pressing kbd:[Tab] will automatically fill `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]...[pr/PREFERENCE]` in the command box."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"This section describes each command in ContactSails in detail."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":124,"author":{"gitID":"-"},"content":"Description: Opens the User Guide in a new window. +"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"****"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Format: `help` +"},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"Command Alias: `?`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"// tag::person[]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Persons"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"This section describes commands you can use to manage person entries in ContactSails."},{"lineNumber":136,"author":{"gitID":"-"},"content":"The figure below shows how ContactSails looks currently."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":".Current state of ContactSails."},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"image::ManagingPersonsInit.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person : `add`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Description: Adds a person to ContactSails. +"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"****"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"****"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Command Alias: `a`"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":152,"author":{"gitID":"-"},"content":"A person can have any number of groups and preferences (including 0)."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Type `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pr/notebooks` OR +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"`a n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pr/notebooks` into the Command Box. +"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"This adds a contact `John Doe`, with `98765432` as phone number, `johnd@example.com` as email, `John street, block 123, #01-01` as address,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"and `notebooks` as a preference tag, as shown below."},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":".Result of executing the \u0027add\u0027 command given above."},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::AddNewPerson.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Description: Edits an existing person in ContactSails. +"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"****"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GROUP]... [pr/PREFERENCE]...` +"},{"lineNumber":171,"author":{"gitID":"-"},"content":"****"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"Command Alias: `e`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":179,"author":{"gitID":"-"},"content":"* When editing groups or preferences, the existing groups and preferences of the person will be removed i.e adding of groups and preferences is not cumulative."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s groups and preferences by typing `g/` and `pr/` without specifying any groups and preferences after it respectively."},{"lineNumber":181,"author":{"gitID":"-"},"content":"****"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"Here\u0027s a picture of how the second contact in ContactSails looks currently:"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".Current state of the 2nd contact in ContactSails."},{"lineNumber":188,"author":{"gitID":"-"},"content":"image::EditPersonBefore.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"Type `edit 2 n/Betsy Crower g/` OR"},{"lineNumber":191,"author":{"gitID":"-"},"content":"`e 2 n/Betsy Crower g/` into the Command Box. +"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"This edits the name of the 2nd person to be `Betsy Crower` and clears all existing groups."},{"lineNumber":194,"author":{"gitID":"-"},"content":"The figure below shows the updated contact."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":".Result of executing the \u0027edit\u0027 command given above."},{"lineNumber":197,"author":{"gitID":"-"},"content":"image::EditPersonAfter.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"// end::person[]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"Description: Deletes the specified person from ContactSails. +"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"****"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Format: `delete INDEX` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"****"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Command Alias: `d`"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"****"},{"lineNumber":212,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":215,"author":{"gitID":"-"},"content":"****"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":". Type `list`, press kbd:[Enter], then type +"},{"lineNumber":220,"author":{"gitID":"-"},"content":"`delete 2` OR `d 2` into the Command Box. +"},{"lineNumber":221,"author":{"gitID":"-"},"content":"This deletes the 2nd person in ContactSails."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":". Type `find Betsy`, press kbd:[Enter], then type +"},{"lineNumber":224,"author":{"gitID":"-"},"content":"`delete 1`  OR `d 1` into the Command Box. +"},{"lineNumber":225,"author":{"gitID":"-"},"content":"This deletes the 1st person in the results of the `find` command."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"Description: Shows a list of all persons in ContactSails. +"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"****"},{"lineNumber":232,"author":{"gitID":"-"},"content":"Format: `list` +"},{"lineNumber":233,"author":{"gitID":"-"},"content":"****"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Command Alias: `l`"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"Description: Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"****"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Format: `select INDEX` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"****"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Command Alias: `s`"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"****"},{"lineNumber":248,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":249,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":250,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":251,"author":{"gitID":"-"},"content":"****"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Type `list`, press kbd:[Enter], then type `select 2` OR `s 2` into the Command Box. +"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"This selects the 2nd person in ContactSails."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding Persons"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"This section describes commands you can use to find person entries using various query types in ContactSails."},{"lineNumber":262,"author":{"gitID":"-"},"content":"The Person List in the interface will only show the persons you are finding after executing the command."},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding persons by name : `find`"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Description: Finds persons whose names contain any of the given keywords. +"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"****"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"****"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"Command Alias: `f`"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"****"},{"lineNumber":275,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":276,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":278,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":279,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":280,"author":{"gitID":"-"},"content":"****"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":". Type `find John` OR `f John` into the Command Box. +"},{"lineNumber":285,"author":{"gitID":"-"},"content":"This shows a list of all persons named `john` and `John Doe`."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":". Type `find Betsy Tim John` OR `f Betsy Tim John` into the Command Box. +"},{"lineNumber":288,"author":{"gitID":"-"},"content":"This shows a list of all persons having names `Betsy`, `Tim`, or `John`."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding persons by groups : `groupfind` `since v1.2`"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"Description: Finds persons whose groups matches any of the given keywords. +"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"****"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Format: `groupfind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"****"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Command Alias: `gf`"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"****"},{"lineNumber":301,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Friends` will match `friends`"},{"lineNumber":302,"author":{"gitID":"-"},"content":"* Only the names of groups of a person is searched."},{"lineNumber":303,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `friend` will not match `friends`"},{"lineNumber":304,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `criminal friends` will return `John Doe`, `Betsy Crowe` who have the groups `friends` and `criminal` respectively."},{"lineNumber":305,"author":{"gitID":"-"},"content":"****"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"Type `groupfind neighbours friends colleagues` OR `gf neighbours friends colleagues` into the Command Box. +"},{"lineNumber":310,"author":{"gitID":"-"},"content":"This shows a list of all persons with groups `neighbours`, `friends`, or `colleagues`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding persons by preferences : `preffind` `since v1.2`"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"Description: Finds persons whose preferences matches any of the given keywords. +"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"****"},{"lineNumber":317,"author":{"gitID":"-"},"content":"Format: `preffind KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":318,"author":{"gitID":"-"},"content":"****"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"Command Alias: `pf`"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"****"},{"lineNumber":323,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `Computers` will match `computers`"},{"lineNumber":324,"author":{"gitID":"-"},"content":"* Only the names of preferences of a person is searched."},{"lineNumber":325,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `computer` will not match `computers`"},{"lineNumber":326,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `computers knives` will return `John Doe`, `Betsy Crowe` who have the preferences `computers` and `knives` respectively."},{"lineNumber":327,"author":{"gitID":"-"},"content":"****"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"Type `preffind computers shoes necklaces` OR `pf computers shoes necklaces` into the Command Box. +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"This shows a list of all persons with preferences `computers`, `shoes`, or `necklaces`."},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"// tag::mgap[]"},{"lineNumber":335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Groups and Preferences"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"This section describes commands you can use to manage preference and group tags in ContactSails."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a group : `groupdelete` `since v1.2`"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"Description: Deletes the specified group from ContactSails. +"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"****"},{"lineNumber":344,"author":{"gitID":"-"},"content":"Format: `groupdelete GROUP_NAME` +"},{"lineNumber":345,"author":{"gitID":"-"},"content":"****"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"Command Alias: `gd`"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"****"},{"lineNumber":350,"author":{"gitID":"-"},"content":"* Deletes the group specified by `GROUP_NAME`."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* The group name must be alphanumeric."},{"lineNumber":352,"author":{"gitID":"-"},"content":"* All persons with specified group will have their group tag removed."},{"lineNumber":353,"author":{"gitID":"-"},"content":"****"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"The figure below shows ContactSails, with the 1st contact selected."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":".ContactSails with the 1st contact selected."},{"lineNumber":360,"author":{"gitID":"amad-person"},"content":"image::BeforeGroupDelete.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"Type `groupdelete friends` OR `gd friends` into the Command Box."},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"All persons in ContactSails with the group `friends` will have the group removed from their contact."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"These changes will be reflected in the list of persons, but the selected contact might still display the `friends` tag, as shown below."},{"lineNumber":367,"author":{"gitID":"-"},"content":"This is because the PersonPanel needs to be refreshed after the deletion."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":".The group \u0027friends\u0027 has been removed but the PersonPanel for \u0027Alex Yeoh\u0027 still shows the tag."},{"lineNumber":370,"author":{"gitID":"-"},"content":"image::GroupDeleteWarning.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"To refresh the PersonPanel, `select` another contact, and then `select 1` again. The PersonPanel will now have the updated information."},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":".After refreshing the PersonPanel, \u0027Alex Yeoh\u0027 will have the updated information."},{"lineNumber":375,"author":{"gitID":"-"},"content":"image::GroupDeleteRefresh.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a preference : `prefdelete` `since v1.2`"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"Description: Deletes the specified preference from ContactSails. +"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"****"},{"lineNumber":382,"author":{"gitID":"-"},"content":"Format: `prefdelete PREFERENCE_NAME` +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"****"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"Command Alias: `pd`"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"****"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* Deletes the preference specified by `PREFERENCE_NAME`."},{"lineNumber":389,"author":{"gitID":"-"},"content":"* The preference name must be alphanumeric."},{"lineNumber":390,"author":{"gitID":"-"},"content":"* All persons with specified preference will have their preference tag removed."},{"lineNumber":391,"author":{"gitID":"-"},"content":"****"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"The figure below shows ContactSails, with the 2nd contact selected."},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":".ContactSails with the 2nd contact selected."},{"lineNumber":398,"author":{"gitID":"-"},"content":"image::Warning3.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"Type `prefdelete shoes` OR `pd shoes` into the Command Box."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"All persons in ContactSails with the preference `shoes` will have the preference removed from their contact."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"These changes will be reflected in the list of persons, but the selected contact might still display the `shoes` tag, as shown below."},{"lineNumber":405,"author":{"gitID":"-"},"content":"This is because the PersonPanel needs to be refreshed after the deletion."},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":".The preference \u0027shoes\u0027 has been removed but the PersonPanel for \u0027Bernice Yu\u0027 still shows the tag."},{"lineNumber":408,"author":{"gitID":"-"},"content":"image::PreferenceWarning1.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"To refresh the PersonPanel, `select` another contact, and then `select 2` again. The PersonPanel will now have the updated information."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":".After refreshing the PersonPanel, \u0027Bernice Yu\u0027 will have the updated information."},{"lineNumber":413,"author":{"gitID":"-"},"content":"image::PreferenceWarning2.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"// end::mgap[]"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"// tag::userguideorders[]"},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Orders"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"This section describes commands you can use to manage order entries in ContactSails. The figure below shows how ContactSails looks currently."},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":423,"author":{"gitID":"-"},"content":".Current state of ContactSails."},{"lineNumber":424,"author":{"gitID":"-"},"content":"image::OrdersInitialAddressbook.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an order : `orderadd` `since v1.2`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"Description: Adds an order to the person specified by the index number used in the last person listing. +"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"****"},{"lineNumber":431,"author":{"gitID":"-"},"content":"Format: `orderadd INDEX i/ORDER INFORMATION pr/PRICE q/QUANTITY d/DELIVERY DATE` +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"****"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"Command Alias: `oa`"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"Type `orderadd 2 i/NBA 2k18 pr/59.99 q/1 d/14-04-2018` OR"},{"lineNumber":439,"author":{"gitID":"-"},"content":"`orderadd 2 i/NBA 2k18 pr/59.99 q/1 d/14-04-2018` into the Command Box. +"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"This adds the `NBA 2k18` order to `Noel Tay`, the 2nd person, as shown in the figure below."},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":444,"author":{"gitID":"-"},"content":".Result of adding the \u0027NBA 2k18\u0027 to \u0027Noel Tay\u0027 in ContactSails."},{"lineNumber":445,"author":{"gitID":"-"},"content":"image::OrderAdd.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":448,"author":{"gitID":"-"},"content":"Currently, the orders added will be shown in the list of all orders in the Right Panel. This means that orders with same"},{"lineNumber":449,"author":{"gitID":"-"},"content":"fields can\u0027t be added to multiple persons yet. We are planning to add this ability, and the ability to view orders of a"},{"lineNumber":450,"author":{"gitID":"-"},"content":"person in their PersonPanel in `v2.0`."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing an order : `orderedit` `since v1.2`"},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"Description: Edits the order specified by the index number used in the order listing. +"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"****"},{"lineNumber":457,"author":{"gitID":"-"},"content":"Format: `orderedit INDEX [i/ORDER_INFORMATION] [pr/PRICE] [q/QUANTITY] [d/DELIVERY_DATE]` +"},{"lineNumber":458,"author":{"gitID":"-"},"content":"****"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"Command Alias: `oe`"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"****"},{"lineNumber":463,"author":{"gitID":"-"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the last order listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":464,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":465,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":466,"author":{"gitID":"-"},"content":"****"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":469,"author":{"gitID":"-"},"content":""},{"lineNumber":470,"author":{"gitID":"-"},"content":"ContactSails currently has the following order:"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":473,"author":{"gitID":"-"},"content":".Initial state of the \u0027Books\u0027 order."},{"lineNumber":474,"author":{"gitID":"-"},"content":"image::OrderEditInit.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"To edit the order above, execute the following command:"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"Type `orderedit 1 pr/12.50 q/5` OR `oe 1 pr/12.50 q/5` into the Command Box. +"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"This edits the price and quantity fields of `Books`, the 1st order, to be `12.50` and `5` respectively. The result is shown in the figure below."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":483,"author":{"gitID":"-"},"content":".Result of editing the \u0027Books\u0027 order."},{"lineNumber":484,"author":{"gitID":"-"},"content":"image::OrderEditResult.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing the order status : `orderstatus` `since v1.4`"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"Description: Changes the order status of the order specified by the index number used in the order listing. +"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"****"},{"lineNumber":491,"author":{"gitID":"-"},"content":"Format: `orderstatus INDEX os/ORDER STATUS` +"},{"lineNumber":492,"author":{"gitID":"-"},"content":"****"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"Command Alias: `os`"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"****"},{"lineNumber":497,"author":{"gitID":"-"},"content":"* Orders can be marked as `ongoing` and `done` only."},{"lineNumber":498,"author":{"gitID":"-"},"content":"****"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"Type `orderstatus 1 os/done` OR `os 1 os/done` into the Command Box. +"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"This marks the order status of `Books`, the 1st order in the order list as `done`. The figure below shows how the UI updates after executing the command above."},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":507,"author":{"gitID":"-"},"content":".Result of marking the status of the \u0027Books\u0027 order as \u0027done\u0027."},{"lineNumber":508,"author":{"gitID":"-"},"content":"image::OrderStatusResult.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting an order : `orderdelete` `since v1.2`"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"Description: Deletes the order specified by the index number used in the order listing. +"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"****"},{"lineNumber":515,"author":{"gitID":"-"},"content":"Format: `orderdelete INDEX` +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"****"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"Command Alias: `od`"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"****"},{"lineNumber":521,"author":{"gitID":"-"},"content":"* Deletes the order at the specified `INDEX`."},{"lineNumber":522,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent order listing."},{"lineNumber":523,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":524,"author":{"gitID":"-"},"content":"****"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"The figure below shows the current order list in the application:"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":531,"author":{"gitID":"-"},"content":".Initial state of the order list."},{"lineNumber":532,"author":{"gitID":"-"},"content":"image::OrderDeleteInit.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"Type `orderdelete 1` OR `od 1` into the Command Box. +"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"This deletes `Books`, the 1st order in the order list from ContactSails. The updated order list is shown below."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":539,"author":{"gitID":"-"},"content":".Result of deleting \u0027Books\u0027, the 1st order in the order list."},{"lineNumber":540,"author":{"gitID":"-"},"content":"image::OrderDeleteResult.png[width\u003d\"200\" align\u003d\"center\"]"},{"lineNumber":541,"author":{"gitID":"-"},"content":"// end::userguideorders[]"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all orders : `orderlist` `since v1.4`"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"Description: Shows a list of all orders in ContactSails. +"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"****"},{"lineNumber":548,"author":{"gitID":"-"},"content":"Format: `orderlist` +"},{"lineNumber":549,"author":{"gitID":"-"},"content":"****"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"Command Alias: `ol`"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"// tag::calendarandentries[]"},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing the Calendar"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"This section describes commands related to viewing the calendar in ContactSails."},{"lineNumber":557,"author":{"gitID":"-"},"content":"The calendar is displayed at the CenterPanel of the interface when you enter any of the commands in this section."},{"lineNumber":558,"author":{"gitID":"-"},"content":"Figure 20 below shows how the calendar looks like."},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"[.text-center]"},{"lineNumber":561,"author":{"gitID":"-"},"content":".ContactSails interface with Calendar and Calendar Entries displayed."},{"lineNumber":562,"author":{"gitID":"-"},"content":"image::ContactSails_Ui_Calendar.PNG[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"In Figure 20, the calendar is set to Day-view, hence it displays all calendar entries that occur in the displayed date (11 April 2018, Wednesday)."},{"lineNumber":565,"author":{"gitID":"-"},"content":"In the calendar, calendar entries appears as colored blocks, such as the green block in Figure 20, indicating the title and starting time of the entry."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"You can change the viewing format of the calendar using `calendar` command to switch to either of the 3 views; Day-view, Week-view and Month-view."},{"lineNumber":568,"author":{"gitID":"-"},"content":"To change the displayed date, you can enter `calendarjump` command to view your desired date."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Displaying the calendar : `calendar` `since v1.3`"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"Description: Displays the calendar in the Center Panel in specified viewing format. +"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"****"},{"lineNumber":575,"author":{"gitID":"-"},"content":"Format: `calendar [VIEW_FORMAT]` +"},{"lineNumber":576,"author":{"gitID":"-"},"content":"****"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"Command Alias: `cal`"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"****"},{"lineNumber":581,"author":{"gitID":"-"},"content":"* Calendar can be set to display 1 of the 3 views; Day, Week, and Month."},{"lineNumber":582,"author":{"gitID":"-"},"content":"* `VIEW_FORMAT` only accepts the keywords, `day`, `week` and `month` to display the calendar in the respective format."},{"lineNumber":583,"author":{"gitID":"-"},"content":"* Calendar is set to Day-view by default if no parameters are entered or invalid parameters are entered."},{"lineNumber":584,"author":{"gitID":"-"},"content":"* Calendar will display all entries within timeframe of the specified view."},{"lineNumber":585,"author":{"gitID":"-"},"content":"****"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"To set display of calendar to Month-view, execute the following command:"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"Type `calendar month` OR `cal month` into the Command Box. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"This shows calendar in Month-view as seen in the figure below."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":".Calendar set to Month-view."},{"lineNumber":596,"author":{"gitID":"-"},"content":"image::Calendar_Month_View.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Go to next page in the calendar : `calendarnext` `since v1.5rc`"},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"Description: Displays next page of current displayed date in calendar. +"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"****"},{"lineNumber":603,"author":{"gitID":"-"},"content":"Format: `calendarnext` +"},{"lineNumber":604,"author":{"gitID":"-"},"content":"****"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"Command Alias: `calnext`"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"****"},{"lineNumber":609,"author":{"gitID":"-"},"content":"* The command has the same effect as pressing the kbd:[\u003e] button at the top left corner of the calendar."},{"lineNumber":610,"author":{"gitID":"-"},"content":"* If calendar is displaying in Day-view, command displays the next day of original date in Day-view."},{"lineNumber":611,"author":{"gitID":"-"},"content":"* If calendar is displaying in Week-view, command displays the next week of original date in Week-view."},{"lineNumber":612,"author":{"gitID":"-"},"content":"* If calendar is displaying in Month-view, command displays next month of original date in Month-view."},{"lineNumber":613,"author":{"gitID":"-"},"content":"****"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Go to previous page in the calendar : `calendarback` `since v1.5rc`"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"Description: Displays previous page of current displayed date in calendar. +"},{"lineNumber":618,"author":{"gitID":"-"},"content":""},{"lineNumber":619,"author":{"gitID":"-"},"content":"****"},{"lineNumber":620,"author":{"gitID":"-"},"content":"Format: `calendarback` +"},{"lineNumber":621,"author":{"gitID":"-"},"content":"****"},{"lineNumber":622,"author":{"gitID":"-"},"content":""},{"lineNumber":623,"author":{"gitID":"-"},"content":"Command Alias: `calback`"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"****"},{"lineNumber":626,"author":{"gitID":"-"},"content":"* The command has the same effect as pressing the kbd:[\u003c] button at the top left corner of the calendar."},{"lineNumber":627,"author":{"gitID":"-"},"content":"* If calendar is displaying in Day-view, command displays the previous day of original date in Day-view."},{"lineNumber":628,"author":{"gitID":"-"},"content":"* If calendar is displaying in Week-view, command displays the previous week of original date in Week-view."},{"lineNumber":629,"author":{"gitID":"-"},"content":"* If calendar is displaying in Month-view, command displays previous month of original date in Month-view."},{"lineNumber":630,"author":{"gitID":"-"},"content":"****"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Display current day in the calendar : `calendartoday` `since v1.5rc`"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"Description: Displays today\u0027s date in the calendar. +"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"****"},{"lineNumber":637,"author":{"gitID":"-"},"content":"Format: `calendartoday` +"},{"lineNumber":638,"author":{"gitID":"-"},"content":"****"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"Command Alias: `caltoday`"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"****"},{"lineNumber":643,"author":{"gitID":"-"},"content":"* The command has the same effect as pressing the kbd:[today] button at the top left corner of the calendar."},{"lineNumber":644,"author":{"gitID":"-"},"content":"* If calendar is displaying in Day-view, command displays today\u0027s date in Day-view."},{"lineNumber":645,"author":{"gitID":"-"},"content":"* If calendar is displaying in Week-view, command displays the current week of today in Week-view."},{"lineNumber":646,"author":{"gitID":"-"},"content":"* If calendar is displaying in Month-view, command displays current month of today in Month-view."},{"lineNumber":647,"author":{"gitID":"-"},"content":"****"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Display given date in the calendar : `calendarjump` `since v1.5`"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"Description: Displays the given date in calendar. +"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"****"},{"lineNumber":654,"author":{"gitID":"-"},"content":"Format: `calendarjump td/TARGET_DATE` +"},{"lineNumber":655,"author":{"gitID":"-"},"content":"****"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"Command Alias: `caljump`"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"****"},{"lineNumber":660,"author":{"gitID":"-"},"content":"* `TARGET_DATE` must follow the format: DD-MM-YYYY (E.g. 04-04-2020 represents 4 April 2020)"},{"lineNumber":661,"author":{"gitID":"-"},"content":"* If calendar is displaying in day-view, command displays `TARGET_DATE` in day-view."},{"lineNumber":662,"author":{"gitID":"-"},"content":"* If calendar is displaying in week-view, command displays the week of `TARGET_DATE` in week-view."},{"lineNumber":663,"author":{"gitID":"-"},"content":"* If calendar is displaying in month-view, command displays the month of `TARGET_DATE` in month-view."},{"lineNumber":664,"author":{"gitID":"-"},"content":"****"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Calendar Entries"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"This section describes commands you can use to manage calendar entries in ContactSails."},{"lineNumber":669,"author":{"gitID":"-"},"content":"You can use calendar entries to represent events, deadlines or meetings. +"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"A calendar entry has a title, start date, end date, start time and end time."},{"lineNumber":672,"author":{"gitID":"-"},"content":"These entries will be displayed in the calendar in the Center Panel and calendar entry list in the Right Panel."},{"lineNumber":673,"author":{"gitID":"-"},"content":"Figure 22 below shows how a calendar entry appears in the calendar entry list."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":".Calendar Entry Description"},{"lineNumber":676,"author":{"gitID":"-"},"content":"image::Calendar_Entry_Card.png[width\u003d\"300\" align\u003d\"center\"]"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"In Figure 22, calendar entry has an index of 1, indicating its position in the list."},{"lineNumber":679,"author":{"gitID":"-"},"content":"Beside the index is the title of the calendar entry (Meet Aaron)."},{"lineNumber":680,"author":{"gitID":"-"},"content":"The description indicates the entry\u0027s starting date (11-04-2018) and ending date (11-04-2018)."},{"lineNumber":681,"author":{"gitID":"-"},"content":"The last sentence indicates the starting time (14:00) and ending time. (17:00) of the entry."},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding entries to calendar entry list : `entryadd` `since v1.3`"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"Description: Adds an entry to the calendar entry list and displays it in the calendar. +"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"****"},{"lineNumber":689,"author":{"gitID":"-"},"content":"Format: `entryadd t/ENTRY_TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` +"},{"lineNumber":690,"author":{"gitID":"-"},"content":"****"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"Command Alias: `ea` +"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"****"},{"lineNumber":695,"author":{"gitID":"-"},"content":"* `ENTRY_TITLE` must be alphanumeric, but whitespaces are allowed in between words."},{"lineNumber":696,"author":{"gitID":"-"},"content":"* If input does not contain `START_DATE`, it is assumed that `START DATE` is the same as `END_DATE`."},{"lineNumber":697,"author":{"gitID":"-"},"content":"* If input does not contain `START_TIME`, it is assumed that `START_TIME` is 00:00."},{"lineNumber":698,"author":{"gitID":"-"},"content":"* `START_DATE` and `END_DATE` must follow the format: DD-MM-YYYY (E.g. 04-04-2020 represents 4 April 2020)"},{"lineNumber":699,"author":{"gitID":"-"},"content":"* `START_TIME` and `END_TIME` must follow the 24-Hour format: HH:MM (E.g. 23:59)"},{"lineNumber":700,"author":{"gitID":"-"},"content":"* Duration of an entry must be at least 15 minutes."},{"lineNumber":701,"author":{"gitID":"-"},"content":"****"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"Type `entryadd t/meet with boss ed/05-05-2020 st/10:00 et/12:00` OR +"},{"lineNumber":706,"author":{"gitID":"-"},"content":"`ea t/meet with boss ed/05-05-2020 st/10:00 et/12:00` into the Command Box. +"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"This creates a calendar entry with listed title, starts from 10:00 am and ends at 12:00 noon on 5 May 2020. +"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing entries in calendar entry list : `entryedit` `since v1.5rc`"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"Description: Edits an existing entry in the calendar entry list and displays the edited entry in the calendar. +"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"****"},{"lineNumber":715,"author":{"gitID":"-"},"content":"Format: `entryedit ENTRY_INDEX [t/ENTRY_TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` +"},{"lineNumber":716,"author":{"gitID":"-"},"content":"****"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"Command Alias: `ee` +"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"****"},{"lineNumber":721,"author":{"gitID":"-"},"content":"* Edits the entry at specified `ENTRY_INDEX`. The index refers to the index number shown in the last entry listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":722,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":723,"author":{"gitID":"-"},"content":"****"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"The calendar entry list currently has the following calendar entry at index 1:"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":".Initial state of \u0027Meet Boss\u0027 calendar entry."},{"lineNumber":730,"author":{"gitID":"-"},"content":"image::Edit_Entry_Before.png[width\u003d\"300\" align\u003d\"center\"]"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"To edit this entry, type `entryedit 1 t/Meeting with Bosses et/14:00` OR `ee 1 t/meet with bosses et/1400` into the Command Box. +"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":"This edits the title and end time of 1st entry in entry list to `Meeting with Bosses` and `1400` respectively."},{"lineNumber":735,"author":{"gitID":"-"},"content":"The result is shown in the figure below. +"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":".Result of editing the \u0027Meet Boss\u0027 calendar entry."},{"lineNumber":738,"author":{"gitID":"-"},"content":"image::Edit_Entry_After.png[width\u003d\"300\" align\u003d\"center\"]"},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting entries in calendar entry list : `entrydelete` `since v1.4`"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"Description: Deletes an existing entry in Calendar entry list. +"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"****"},{"lineNumber":745,"author":{"gitID":"-"},"content":"Format: `entrydelete ENTRY_INDEX` +"},{"lineNumber":746,"author":{"gitID":"-"},"content":"****"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"Command Alias: `ed` +"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"****"},{"lineNumber":751,"author":{"gitID":"-"},"content":"* Deletes entry at specified `ENTRY_INDEX` of entry list."},{"lineNumber":752,"author":{"gitID":"-"},"content":"* The index refers to index number shown in the most recent entry listing."},{"lineNumber":753,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"Type `entrydelete 1` OR `ed 1` into the Command Box. +"},{"lineNumber":759,"author":{"gitID":"-"},"content":"This deletes the entry at index 1 of most recent entry listing. +"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all calendar entries : `entrylist` `since v1.4`"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"Description: Shows a list of all calendar entries in ContactSails. +"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"****"},{"lineNumber":766,"author":{"gitID":"-"},"content":"Format: `entrylist` +"},{"lineNumber":767,"author":{"gitID":"-"},"content":"****"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"Command Alias: `el`"},{"lineNumber":770,"author":{"gitID":"-"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries in list of entries : `entryclear` `since v1.5`"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"Description: Clears all entry list entries from ContactSails. +"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"****"},{"lineNumber":776,"author":{"gitID":"-"},"content":"Format: `entryclear` +"},{"lineNumber":777,"author":{"gitID":"-"},"content":"****"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"Command Alias: `ec`"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"// end::calendarandentries[]"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"// START EXPORT"},{"lineNumber":784,"author":{"gitID":"-"},"content":"// tag::exportdata[]"},{"lineNumber":785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exporting Data"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"This section describes commands you can use to export data from ContactSails"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exporting listed persons : `exportListedPersons`"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"Description: Exports the current contact details of the current person listing. +"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"****"},{"lineNumber":794,"author":{"gitID":"-"},"content":"Format: `exportListedPersons FILENAME` +"},{"lineNumber":795,"author":{"gitID":"-"},"content":"****"},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"Command Alias: `exLP` +"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"****"},{"lineNumber":800,"author":{"gitID":"-"},"content":"* FILENAME refers to the name of file the user wants to save the exported data to."},{"lineNumber":801,"author":{"gitID":"-"},"content":"* FILENAME should only contain characters from digits 0-9 and alphabets a-z or A-Z"},{"lineNumber":802,"author":{"gitID":"-"},"content":"* FILENAME should consist of at least 1 character and at most 30 characters."},{"lineNumber":803,"author":{"gitID":"-"},"content":"****"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"Type `exportListedPersons somePersonFile` OR"},{"lineNumber":808,"author":{"gitID":"-"},"content":"`exLP somePersonFile` into the Command Box. +"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"This creates a somePersonFile.csv file with the contact details of listed persons."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exporting listed orders : `exportListedOrders`"},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"Description: Exports the current details of the current order listing. +"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"****"},{"lineNumber":817,"author":{"gitID":"-"},"content":"Format: `exportListedOrders FILENAME` +"},{"lineNumber":818,"author":{"gitID":"-"},"content":"****"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"Command Alias: `exLO` +"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"****"},{"lineNumber":823,"author":{"gitID":"-"},"content":"* FILENAME refers to the name of file the user wants to save the exported data to."},{"lineNumber":824,"author":{"gitID":"-"},"content":"* FILENAME should only contain characters from digits 0-9 and alphabets a-z or A-Z"},{"lineNumber":825,"author":{"gitID":"-"},"content":"* FILENAME should consist of at least 1 character and at most 30 characters."},{"lineNumber":826,"author":{"gitID":"-"},"content":"****"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"Type `exportListedOrders someOrderFile` OR"},{"lineNumber":831,"author":{"gitID":"-"},"content":"`exLO someOrderFile` into the Command Box. +"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"This creates a someOrderFile.csv file with the details of listed orders."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"// end::exportdata[]"},{"lineNumber":836,"author":{"gitID":"-"},"content":"// END EXPORT"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Miscellaneous Commands"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":"This section describes other commands you can use in ContactSails."},{"lineNumber":841,"author":{"gitID":"-"},"content":""},{"lineNumber":842,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing command history : `history`"},{"lineNumber":843,"author":{"gitID":"-"},"content":""},{"lineNumber":844,"author":{"gitID":"-"},"content":"Description: Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"****"},{"lineNumber":847,"author":{"gitID":"-"},"content":"Format: `history` +"},{"lineNumber":848,"author":{"gitID":"-"},"content":"****"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"Command Alias: `h`"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":853,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":854,"author":{"gitID":"-"},"content":"Pressing the kbd:[Up] and kbd:[Down] arrows will display the previous and next input respectively in the command box."},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"// tag::userguidethemes[]"},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing the theme : `theme` `since v1.3`"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"Description: Changes the theme of the application. +"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"****"},{"lineNumber":863,"author":{"gitID":"-"},"content":"Format: `theme THEME_TYPE` +"},{"lineNumber":864,"author":{"gitID":"-"},"content":"****"},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"Command Alias: `t`"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"****"},{"lineNumber":869,"author":{"gitID":"-"},"content":"* Currently, you can choose between \u0027dark\u0027 and \u0027light\u0027 themes only."},{"lineNumber":870,"author":{"gitID":"-"},"content":"****"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"Type `theme light` OR `t light` into the Command Box. +"},{"lineNumber":875,"author":{"gitID":"-"},"content":"This changes the theme of the application to `light`. The figure below shows the ContactSails UI with the light theme."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":".ContactSails Light Theme."},{"lineNumber":878,"author":{"gitID":"-"},"content":"image::ContactSails_Light_Theme.png[width\u003d\"500\" align\u003d\"center\"]"},{"lineNumber":879,"author":{"gitID":"-"},"content":"// end::userguidethemes[]"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":882,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"Description: Restores ContactSails to the state before the previous `undoable` command was executed. +"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"****"},{"lineNumber":887,"author":{"gitID":"-"},"content":"Format: `undo` +"},{"lineNumber":888,"author":{"gitID":"-"},"content":"****"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"Command Alias: `u`"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":894,"author":{"gitID":"amad-person"},"content":"Undoable commands: All commands that add, edit, or delete any data in ContactSails are undoable commands."},{"lineNumber":895,"author":{"gitID":"amad-person"},"content":"This applies to all commands that perform these operations on persons, orders, and calendar entries."},{"lineNumber":896,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"Type `delete 1` into the Command Box, and press kbd:[Enter]. This deletes the 1st contact. +"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"-"},"content":"Next, type `list` to display the list of persons after the deletion. You can see that the 1st contact has been deleted. +"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"Now, to undo the deletion, type `undo` OR `u`. You can see that the deleted person has been added back to the list of contacts. +"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"Description: Reverses the most recent `undoable` command. +"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"****"},{"lineNumber":911,"author":{"gitID":"-"},"content":"Format: `redo` +"},{"lineNumber":912,"author":{"gitID":"-"},"content":"****"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"Command Alias: `r`"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"Type `delete 1` into the Command Box, and press kbd:[Enter]. This deletes the 1st contact. +"},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"Typing `undo` will add the deleted person back to the list of contacts."},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"Now, if you want to redo the deletion, type `redo` OR `r`. You can see that the same contact has been deleted again. +"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"Description: Clears all entries from ContactSails. +"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"****"},{"lineNumber":931,"author":{"gitID":"-"},"content":"Format: `clear` +"},{"lineNumber":932,"author":{"gitID":"-"},"content":"****"},{"lineNumber":933,"author":{"gitID":"-"},"content":""},{"lineNumber":934,"author":{"gitID":"-"},"content":"Command Alias: `c`"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"Data in ContactSails is saved in the hard disk automatically after you execute any command that changes the data. +"},{"lineNumber":939,"author":{"gitID":"-"},"content":"There is no need to save the data manually."},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"Description: Exits the program. +"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"****"},{"lineNumber":946,"author":{"gitID":"-"},"content":"Format: `exit` +"},{"lineNumber":947,"author":{"gitID":"-"},"content":"****"},{"lineNumber":948,"author":{"gitID":"-"},"content":""},{"lineNumber":949,"author":{"gitID":"-"},"content":"Command Alias: `q`"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"*Q*: I can\u0027t open the ContactSails `.jar` file. What should I do? +"},{"lineNumber":954,"author":{"gitID":"-"},"content":"*A*: Given below are steps you can follow to solve this problem:"},{"lineNumber":955,"author":{"gitID":"-"},"content":""},{"lineNumber":956,"author":{"gitID":"-"},"content":"*For Windows Users:*"},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":". Open the `Command Prompt` application."},{"lineNumber":959,"author":{"gitID":"-"},"content":". Change the current directory to the directory of your `Java JDK`."},{"lineNumber":960,"author":{"gitID":"-"},"content":". Execute the command `\"JAVA_JDK_EXE_FILE_DIRECTORY_PATH\" -jar YOUR_APPLICATION_JAR_FILE_NAME.jar`."},{"lineNumber":961,"author":{"gitID":"-"},"content":"** For example, if your `Java JDK` is in the `\"C:\\Program Files\\Java\\jdk1.8.0_102\\bin\\javaw.exe\"` directory, you would execute the following command: `\"C:\\Program Files\\Java\\jdk1.8.0_102\\bin\\javaw.exe\" -jar ContactSails.jar`."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"*For Mac/Linux users:*"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":". Open the `Terminal` application."},{"lineNumber":966,"author":{"gitID":"-"},"content":". Execute the command `java -jar YOUR_APPLICATION_JAR_FILE_NAME.jar`"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"*Q*: Why is it that an error shows up when I clicked the interface of the calendar twice, as seen in Figure ? below?"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":".Error dialog box when calendar is clicked twice."},{"lineNumber":971,"author":{"gitID":"-"},"content":"image::Calendar_DoubleClick_Error.png[width\u003d\"300\" align\u003d\"center\"]"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"*A*: As of `v1.5`, we have disabled the ability for users to add entries by clicking on the calendar twice, as entries created this way will not be saved in ContactSails."},{"lineNumber":974,"author":{"gitID":"-"},"content":"This ability will be enabled in future versions of ContactSails."},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":977,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ContactSails folder."},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"-"},"content":"// tag::commandsummary[]"},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"The following sections summarize the commands you can use in ContactSails."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Persons"},{"lineNumber":985,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":986,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":987,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":988,"author":{"gitID":"-"},"content":"|Add a person. |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]... [pr/PREFERENCE]...` |`a` |`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 pr/notebooks`"},{"lineNumber":989,"author":{"gitID":"-"},"content":"|Edit an existing person. |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GROUP]... [pr/PREFERENCE]...` |`e` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":990,"author":{"gitID":"-"},"content":"|Delete an existing person. |`delete INDEX` |`d` |`delete 2`"},{"lineNumber":991,"author":{"gitID":"-"},"content":"|Show a list of all persons. |`list` |`l` |`list`"},{"lineNumber":992,"author":{"gitID":"-"},"content":"|Select a person. |`select INDEX` |`s` |`select 3`"},{"lineNumber":993,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding Persons"},{"lineNumber":996,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":997,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":998,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":999,"author":{"gitID":"-"},"content":"|Find persons by name. |`find KEYWORD [MORE_KEYWORDS]` |`f` |`find John`"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"|Find persons by group. |`groupfind KEYWORD [MORE_KEYWORDS]` |`gf` |`groupfind friends`"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"|Finds persons by preference. |`preffind KEYWORD [MORE_KEYWORDS]` |`gf` |`preffind notebooks`"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Groups and Preferences"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|Delete a group. |`groupdelete GROUP_NAME` |`gd` | `groupdelete friends`"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"|Delete a preference. |`prefdelete PREFERENCE_NAME` |`pd` |`prefdelete books`"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Orders"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"|Add an order. |`orderadd INDEX i/ORDER_INFORMATION pr/PRICE q/QUANTITY d/DELIVERY_DATE` |`oa` |`orderadd 1 i/Chocolates pr/10.00 q/5 d/12-08-2018`"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"|Edit an existing order. |`orderedit INDEX [i/ORDER_INFORMATION] [pr/PRICE] [q/QUANTITY] [d/DELIVERY_DATE]` |`oe` |`orderedit 1 q/10`"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"|Change status of existing order. |`orderstatus INDEX os/ORDER_STATUS` |`os` |`orderstatus 2 os/done`"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"|Delete an existing order. |`orderdelete INDEX` |`od` |`orderdelete 2`"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing Calendar"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"|Display the calendar. |`calendar [VIEW_FORMAT]` |`cal` |`calendar month`"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"|Go to the next page of the calendar. |`calendarnext` |`calnext` |`calendarnext`"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"|Go to the previous page of the calendar. |`calendarback` |`calback` |`calendarback`"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"|Go to the current day. |`calendartoday` |`caltoday` |`calendartoday`"},{"lineNumber":1030,"author":{"gitID":"-"},"content":"|Go to specified date. |`calendarjump td/TARGET_DATE` |`caljump` |`calendarjump 10-10-2020`"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Calendar Entries"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1037,"author":{"gitID":"-"},"content":"|Add a calendar entry. |`entryadd t/ENTRY_TITLE [sd/START_DATE] ed/END_DATE [st/START_TIME] et/END_TIME` |`ea` |`entryadd t/meet with boss ed/05-05-2020 st/10:00 et/12:00`"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"|Edit an existing calendar entry. |`entryedit ENTRY_INDEX [t/ENTRY_TITLE] [sd/START_DATE] [ed/END_DATE] [st/START_TIME] [et/END_TIME]` |`ee` |`entryedit 1 t/meet with bosses et/1400`"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"|Delete an existing calendar entry. |`entrydelete ENTRY_INDEX` |`ed` |`entrydelete 1`"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"|List all calendar entries. |`entrylist` |`el` |`entrylist`"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"|Clear all calendar entries. |`entryclear`  |`ec` |`entryclear`"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Export"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1046,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"|Export contact details of listed persons. |`exportListedPersons FILENAME` |`exLP` |`exportListedPersons somePersonFile`"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"|Export details of listed orders. |`exportListedOrders FILENAME` |`exLO` |`exportListedOrders somePersonFile`"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Miscellaneous Commands"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"[width\u003d\"99%\",cols\u003d\"25%,25%,25%,25%\",options\u003d\"header\",]"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"|Function |Command |Alias |Example"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"|View command history. |`history` |`h` |`history`"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"|Change theme. |`theme THEME_TYPE` |`t` |`theme light`"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"|Undo previous command. |`undo` |`u` |`undo`"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"|Redo previous command. |`redo` |`r` |`redo`"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"|Clear all data. |`clear` |`c` |`clear`"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"|Exit ContactSails. |`exit` |`q` |`exit`"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"// end::commandsummary[]"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"\u003d\u003d Coming in v2.0"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"The following section describes some of the proposed features we are planning to add to ContactSails in `v2.0`."},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"// tag::customerstats[]"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing Customer Statistics"},{"lineNumber":1072,"author":{"gitID":"-"},"content":""},{"lineNumber":1073,"author":{"gitID":"-"},"content":"One of the features we are planning to add in ContactSails `v2.0` is the ability to view relevant statistics regarding your customers and sales orders."},{"lineNumber":1074,"author":{"gitID":"-"},"content":"The command descriptions for these features are given below."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing top customers : `topcustomers` `coming in v2.0`"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"Description: Displays a list of the top customers based on the frequency their contacts are accessed. +"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"Format: `topcustomers NUMBER`"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"Command Alias: `tc`"},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"* The command will display the top `NUMBER` amount of people, sorted by most frequently contacted to the least."},{"lineNumber":1088,"author":{"gitID":"-"},"content":"* `NUMBER` must be in the range of 1 to total number of persons in ContactSails, both inclusive."},{"lineNumber":1089,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"Type `topcustomers 10` OR `tc 10` into the Command Box. +"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"This displays the list of the top ten persons in ContactSails based on how frequently you access these contacts."},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing top customers : `topitems` `coming in v2.0`"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"Description: Displays a list of the top items based on amount of items that have been sold to customers. +"},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1102,"author":{"gitID":"-"},"content":"Format: `topitems NUMBER`"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"Command Alias: `ti`"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"* The command will display the top `NUMBER` amount of items, sorted by most bought item to the least."},{"lineNumber":1109,"author":{"gitID":"-"},"content":"* `NUMBER` must be in the range of 1 to total number of items in ContactSails, both inclusive."},{"lineNumber":1110,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"Type `topitems 10` OR `ti 10` into the Command Box. +"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"This displays the list of the top ten items in ContactSails based on how many of the items have been sold."},{"lineNumber":1117,"author":{"gitID":"-"},"content":"// end::customerstats[]"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"// tag::sendingpromos[]"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sending Promotions"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"Another proposed feature we are planning to implement is the ability to send promotions to multiple customers based on their groups or preferences."},{"lineNumber":1123,"author":{"gitID":"-"},"content":"The command descriptions for these features are given below."},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sending promotions based on group : `sendpromogroup` `coming in v2.0`"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"Description: Opens a promotion email draft in the browser, which can be sent to multiple persons having the same group tags."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1130,"author":{"gitID":"-"},"content":"Format: `sendpromogroup GROUP... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":1131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"Command Alias: `spg`"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"* The email draft will use the Default Email Service Provider on your local device."},{"lineNumber":1137,"author":{"gitID":"-"},"content":"* The command will add all the persons with the `GROUP` tag as recipients of the email."},{"lineNumber":1138,"author":{"gitID":"-"},"content":"* Multiple `GROUP` tags can be specified. All persons in these groups will be added as recipients."},{"lineNumber":1139,"author":{"gitID":"-"},"content":"* The subject and body of the email will be specified by the `SUBJECT` and `BODY` parameters respectively."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"Type `sendpromogroup friends sub/New Offer on Sunglasses` OR +"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"`spg friends sub/New Offer on Sunglasses` into the Command Box. +"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"This opens an email draft in the browser with recipients as all persons tagged as \u0027friends\u0027 and subject as \u0027New Offer on Sunglasses\u0027. +"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sending promotions based on preference : `sendpromopref` `coming in v2.0`"},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"Description: Opens a promotion email draft in the browser, which can be sent to multiple persons having the same preference tags."},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"Format: `sendpromopref PREFERENCE... [sub/SUBJECT] [b/BODY]`"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1156,"author":{"gitID":"-"},"content":""},{"lineNumber":1157,"author":{"gitID":"-"},"content":"Command Alias: `spp`"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"* The email draft will use the Default Email Service Provider on your local device."},{"lineNumber":1161,"author":{"gitID":"-"},"content":"* The command will add all the persons with the `PREFERENCE` tag as recipients of the email."},{"lineNumber":1162,"author":{"gitID":"-"},"content":"* Multiple `PREFERENCE` tags can be specified. All persons in these groups will be added as recipients."},{"lineNumber":1163,"author":{"gitID":"-"},"content":"* The subject and body of the email will be specified by the `SUBJECT` and `BODY` parameters respectively."},{"lineNumber":1164,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"Type `sendpromopref books sub/Books on SALE` OR +"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"`spp books sub/Books on SALE` into the Command Box. +"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"This opens an email draft in the browser with recipients as all persons tagged with \u0027books\u0027 and subject as \u0027Books on SALE\u0027. +"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"// end::sendingpromos[]"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"[[cli]]Command Line Interface::"},{"lineNumber":1177,"author":{"gitID":"-"},"content":"A command line interface (or CLI) is an application interface where one issues commands to the application in the form of successive lines of text."},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"[[gui]]Graphical User Interface::"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"A graphical user interface (or GUI) is an application interface where one interacts with the application in a visual manner i.e. using icons, menus, or windows."},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"[[alphanumeric]]Alphanumeric::"},{"lineNumber":1183,"author":{"gitID":"-"},"content":"The parameter can only contain alphabets and/or numbers."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"-"},"content":"[[tag]]Tag::"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"A field that you can add to a person\u0027s contact to represent additional details about that person."},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"[[group]]Group::"},{"lineNumber":1189,"author":{"gitID":"-"},"content":"A Tag to represent the group of persons a person can be in. For example, group tags can be tags like `friends`, `colleagues`, `twitter`, etc."},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"[[preference]]Preference::"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"A Tag to represent what items the person is interested in. For example, preference tags can be tags like `shoes`, `videogames`, etc."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":"[[order]]Order::"},{"lineNumber":1195,"author":{"gitID":"-"},"content":"An Order represents a sales order you might want to keep track of by adding it into ContactSails. It has fields for item description, price, quantity, and delivery date."},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[[entry]]Entry::"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"An Entry represents a calendar event that you can add to the integrated calendar in ContactSails to keep track of your deadlines."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":"[[panel]]Panel::"},{"lineNumber":1201,"author":{"gitID":"-"},"content":"An area in the ContactSails UI that displays all related information in a single place. Different panels have different data to display."},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"[[personpanel]]PersonPanel::"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"A Panel that displays the contact details related to a single person that has been selected."},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":"[[calendarpanel]]CalendarPanel::"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"A Panel that displays the integrated calendar in ContactSails. You can view all your calendar entries in a graphical manner using this panel."},{"lineNumber":1208,"author":{"gitID":"-"},"content":""},{"lineNumber":1209,"author":{"gitID":"-"},"content":"[[orderlistpanel]]OrderListPanel::"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"A Panel that displays all sales orders that you have added to ContactSails."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[[entrylistpanel]]EntryListPanel::"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"A Panel that displays all the calendar entries that you have added to ContactSails."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"[[session]]Session::"},{"lineNumber":1216,"author":{"gitID":"-"},"content":"Each usage session begins when you open ContactSails and ends when you close it."}],"authorContributionMap":{"-":1212,"amad-person":4}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalOrders;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCalendarEntryListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertOrderListMatching;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPersonListMatching;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarEntryListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.OrderListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EntryListClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":51,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":52,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":53,"author":{"gitID":"-"},"content":" */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, this::getInitialCalendarData,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                getAbDataFileLocation(), getCmDataFileLocation());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getAbDataFileLocation()}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (Order order : getTypicalOrders()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                ab.addOrderToOrderList(order);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            } catch (DuplicateOrderException doe) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@Link #getCmDataFileLocation()}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    protected CalendarManager getInitialCalendarData() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        CalendarManager cm \u003d TypicalCalendarEntries.getTypicalCalendarManagerWithEntries();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return cm;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file of address book."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    protected String getAbDataFileLocation() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file of calendar manager."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected String getCmDataFileLocation() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_CALENDAR_TESTING;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public PersonPanelHandle getPersonPanel() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonPanel();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public OrderListPanelHandle getOrderListPanel() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getOrderListPanel();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public CalendarEntryListPanelHandle getCalendarEntryListPanel() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCalendarEntryListPanel();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":168,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"     * Deletes all calendar entries in the calendar manager."},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"    protected void deleteAllCalendarEntries() {"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(EntryListClearCommand.COMMAND_WORD);"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(0, getModel().getCalendarManager().getCalendarEntryList().size());"},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person, order and calendar entry objects"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * as {@code expectedModel} and the person list panel displays the persons in the model correctly."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getCalendarManager(), testApp.readStorageCalendarManager());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertPersonListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code OrderListPanel} is displayed, and order list panel displays orders in model correctly."},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"    protected void assertOrderListDisplaysExpected(Model expectedModel) {"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotNull(getOrderListPanel());"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"        assertOrderListMatching(getOrderListPanel(), expectedModel.getFilteredOrderList());"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code CalendarEntryListPanel} is displayed, and calendar entry list panel"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"     * displays calendar entries in model correctly."},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"    protected void assertCalendarEntryListDisplaysExpected(Model expectedModel) {"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotNull(getCalendarEntryListPanel());"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"        assertCalendarEntryListMatching(getCalendarEntryListPanel(), expectedModel.getFilteredCalendarEntryList());"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember their current state."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the person panel remains displaying the details"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Asserts that the person panel is changed to display the details of the person in the person list panel at"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * Asserts that the person panel and the selected card in the person list panel remain unchanged."},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":322,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":326,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":327,"author":{"gitID":"-"},"content":"            assertPersonListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":328,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":329,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":337,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":27,"-":314}},{"path":"src/test/java/systemtests/DeleteGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.BUDDIES;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.NEIGHBOURS;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.TWITTER;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteGroup() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------- Performing delete group operation while an unfiltered list is being shown -------------- */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete the group \"twitter\" in the list, command with leading spaces and trailing spaces -\u003e"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        deleted */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"     \" + DeleteGroupCommand.COMMAND_WORD + \"      \" + TWITTER.tagName + \"       \";"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        Group deletedGroup \u003d TWITTER;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, TWITTER);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo deleting the group \"twitter\" in the list -\u003e group \"twitter\" restored */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo deleting the group \"twitter\" in the list -\u003e \"twitter\" deleted again */"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(modelBeforeDeletingLast, TWITTER);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedModel, modelBeforeDeletingLast);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        /* -------------- Performing delete group operation while a filtered list is being shown ------------------ */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete existing group but not in filtered person list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        deletedGroup \u003d FRIENDS;"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, FRIENDS);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + FRIENDS.tagName;"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete non-existing group in address book -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        Group invalidGroup \u003d BUDDIES;"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + invalidGroup.tagName;"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        /* ----------------- Performing delete group operation while a person card is selected -------------------- */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete group existing in the selected person -\u003e person list panel still selects the person */"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        deletedGroup \u003d NEIGHBOURS;"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        Index selectedIndex \u003d Index.fromOneBased(5);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        Index expectedIndex \u003d selectedIndex;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeleteGroupCommand.COMMAND_WORD + \" \" + NEIGHBOURS.tagName;"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        removeGroup(expectedModel, NEIGHBOURS);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_GROUP_SUCCESS, deletedGroup);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------------------- Performing invalid delete preference operation ------------------------------ */"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (non-alphanumeric arguments) -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeleteGroupCommand.COMMAND_WORD + \" fr!end3\","},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeleteGroupCommand.COMMAND_WORD + \" friends twitter\","},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_GROUP_COMMAND_FORMAT);"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(\"GrouPDeletE neighbours\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes the {@code Group} in {@code model}\u0027s address book."},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeGroup(Model model, Group toDelete) {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteGroup(toDelete);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (GroupNotFoundException gnfe) {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Group should exist in address book.\");"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"     * @see DeleteGroupCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"}"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":""}],"authorContributionMap":{"SuxianAlicia":169,"-":1}},{"path":"src/test/java/systemtests/FindPreferenceCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public void findPreference() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book by their preferences,"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        command with leading spaces and trailing spaces -\u003e 2 persons found */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"   \" + FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES + \"   \";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // Both Benson and George have preferences \"videoGames\""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: repeat previous find preference command where person list is displaying the persons we are finding"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find persons via their preferences where person list is not displaying the person we are finding"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 3 persons found */"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" computers\";"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE, FIONA);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords -\u003e 3 persons found */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes\";"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, GEORGE);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords in reversed order"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 3 persons found */"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" shoes videoGames\";"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes videoGames\";"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via preferences, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames shoes NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find same persons via preferences in address book after deleting 1 of them -\u003e 2 persons found */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(ALICE));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences,"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        keyword is same as preference name but of different case -\u003e 2 persons found */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" VIdeOGameS\";"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences, keyword is substring of preference name"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videogame\";"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via preferences,"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        preference name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videogamess\";"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person via preferences not in address book -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" facialWash\";"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find name of person in address book with FindPreferenceCommand -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getName().toString();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getPhone().value;"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getAddress().value;"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + ELLE.getEmail().value;"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find groups of person in address book -\u003e 0 persons found */"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cGroup\u003e groups \u003d new ArrayList\u003c\u003e(ELLE.getGroupTags());"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + groups.get(0).tagName;"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find via preferences while a person is selected -\u003e selected card deselected */"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" videoGames\";"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, GEORGE);"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in empty address book via group tags -\u003e 0 persons found */"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        deleteAllPersons();"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindPreferenceCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_VIDEOGAMES;"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d \"PREferenCEFiNd necklaces\";"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"     * error style."},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":206,"-":1}},{"path":"src/test/java/systemtests/AddOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_CHOC;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_COMPUTER;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHOC;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHOC;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_COMPUTER;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.COMICBOOK;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.COMPUTER;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderUtil;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public void addOrder() throws Exception {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        Model model \u003d getModel();"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        /* --------------------- Perform addOrder operations on the shown unfiltered list -------------------------- */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        Order toAdd \u003d COMPUTER;"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        /* Case: add an order to a non-empty address book,"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"         * command with leading spaces and trailing spaces -\u003e added"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        String command \u003d \"   \" + AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + \"   \" + PRICE_DESC_COMPUTER + \"   \" + QUANTITY_DESC_COMPUTER + \"  \""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER + \"   \";"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        /* Case: undo adding Computer to the list -\u003e Computer deleted */"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        /* Case: redo adding Computer to the list -\u003e Computer added again */"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        model.addOrderToOrderList(toAdd);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except order information -\u003e added */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_CHOC)"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_CHOC + PRICE_DESC_COMPUTER"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except price -\u003e added */"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_CHOC)"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_CHOC"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except quantity -\u003e added */"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_CHOC)"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        /* Case: add order with all fields same as another order in address book except delivery date -\u003e added */"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d new OrderBuilder()"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_CHOC)"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        /* Case: add an order command with parameters in random order -\u003e added */"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        toAdd \u003d COMICBOOK;"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"                + \" d/01-01-2018\" + \" i/Comic Book\" + \" q/1\" + \" pr/17.99\";"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, toAdd);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        /* --------------------- Perform addOrder operations on the shown filtered list -------------------------- */"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Perform invalid addOrder operations --------------------------------- */"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        /* Case: missing person index -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        /* Case: missing order information -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"                + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        /* Case: missing price -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        /* Case: missing quantity -\u003e rejected */"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        /* Case: missing delivery date -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"                + PRICE_DESC_COMPUTER + QUANTITY_DESC_COMPUTER;"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        command \u003d \"ordersadds \" + \" \" + index.getOneBased() + OrderUtil.getOrderDetails(toAdd);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid order information -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"                + INVALID_ORDER_INFORMATION_DESC + PRICE_DESC_COMPUTER"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + INVALID_PRICE_DESC"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid quantity -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"                + INVALID_QUANTITY_DESC + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid delivery date -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        command \u003d AddOrderCommand.COMMAND_WORD + \" \" + index.getOneBased()"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_COMPUTER + INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Executes the {@code AddOrderCommand} that adds {@code toAdd} to the model and asserts that the:\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddOrderCommand} with details of"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index index, Order toAdd) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandSuccess(OrderUtil.getAddOrderCommand(index.getZeroBased(), toAdd), index, toAdd);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Index, Order)}. Executes {@code command}"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"     * instead."},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"     * @see AddOrderCommandSystemTest#assertCommandSuccess(Index, Order)"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index index, Order toAdd) {"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"        Person person \u003d expectedModel.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"            expectedModel.addOrderToOrderList(toAdd);"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicateOrderException dpe) {"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"                AddOrderCommand.MESSAGE_ADD_ORDER_SUCCESS, person.getName(), toAdd);"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Order)} except asserts that"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * the:\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 3. {@code OrderListPanel} is equal to the corresponding order list in {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see AddOrderCommandSystemTest#assertCommandSuccess(String, Index, Order)"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the:\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":60,"amad-person":210}},{"path":"src/test/java/systemtests/EditOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_BOOKS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_COMPUTER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_COMPUTER;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_COMPUTER;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public void edit() throws Exception {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Model model \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"         * -\u003e edited"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        Index index \u003d INDEX_THIRD_ORDER;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        String command \u003d \" \" + EditOrderCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"    \""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + \" \" + PRICE_DESC_COMPUTER + \"  \" + QUANTITY_DESC_COMPUTER"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"                + \"    \" + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d new OrderBuilder().withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_COMPUTER).withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, index, editedOrder);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        /* Case: undo editing the order in the list -\u003e order restored */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        /* Case: redo editing the last order in the list -\u003e last order edited again */"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        model.updateOrder("},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                getModel().getFilteredOrderList().get(INDEX_THIRD_ORDER.getZeroBased()), editedOrder);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" 0\" + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" -1\" + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        int invalidIndex \u003d getModel().getFilteredOrderList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + invalidIndex"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + ORDER_INFORMATION_DESC_BOOKS,"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased(),"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                EditOrderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid order information -\u003e rejected */"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                        + INVALID_ORDER_INFORMATION_DESC,"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid price -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                        + INVALID_PRICE_DESC,"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid quantity -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                        + INVALID_QUANTITY_DESC,"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"                Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid delivery date -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(EditOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased()"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"                        + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     * selected card remains unchanged."},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Order, Index)} except that"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"     * the selected card remains unchanged."},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Index, Order, Index)"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder) {"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, toEdit, editedOrder, null);"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditOrderCommand}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the model related components are updated to reflect the order at index {@code toEdit} being"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"     * updated to values specified {@code editedOrder}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"     * @see EditOrderCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder,"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"            expectedModel.updateOrder("},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"                    expectedModel.getFilteredOrderList().get(toEdit.getZeroBased()), editedOrder);"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"            expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicateOrderException | OrderNotFoundException e) {"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"            throw new IllegalArgumentException("},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"                    \"editedOrder is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"                String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder), expectedSelectedCardIndex);"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the selected card updates accordingly depending on the card at"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        executeCommand(command);"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        } else {"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 4. Asserts that the selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":23,"amad-person":188}},{"path":"src/test/java/systemtests/DeletePreferenceCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeletePreferenceCommand.MESSAGE_DELETE_PREFERENCE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.NECKLACES;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT \u003d"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePreferenceCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public void deletePreference() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------ Performing delete preference operation while an unfiltered list is being shown -------------- */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete the preference \"videoGames\" in the list, command with leading spaces and trailing spaces -\u003e"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        deleted */"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"     \" + DeletePreferenceCommand.COMMAND_WORD + \"      \" + VIDEO_GAMES.tagName + \"       \";"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        Preference deletedPreference \u003d VIDEO_GAMES;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, VIDEO_GAMES);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo deleting the preference \"videoGames\" in the list -\u003e preference \"videoGames\" restored */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo deleting the preference \"videoGames\" in the list -\u003e \"videoGames\" deleted again */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(modelBeforeDeletingLast, VIDEO_GAMES);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedModel, modelBeforeDeletingLast);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        /* ------------ Performing delete preference operation while a filtered list is being shown ---------------- */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete existing preference but not in filtered person list -\u003e deleted */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        deletedPreference \u003d NECKLACES;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, NECKLACES);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + NECKLACES.tagName;"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: filtered person list, delete non-existing preference in address book -\u003e rejected */"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        Preference invalidPref \u003d NECKLACES;"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + invalidPref.tagName;"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------- Performing delete preference operation while a person card is selected ------------------ */"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: delete preference existing in the selected person -\u003e person list panel still selects the person */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        deletedPreference \u003d COMPUTERS;"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        Index selectedIndex \u003d Index.fromOneBased(2);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        Index expectedIndex \u003d selectedIndex;"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d DeletePreferenceCommand.COMMAND_WORD + \" \" + COMPUTERS.tagName;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        removePreference(expectedModel, COMPUTERS);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, deletedPreference);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        /* --------------------------- Performing invalid delete preference operation ------------------------------ */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (non-alphanumeric arguments) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeletePreferenceCommand.COMMAND_WORD + \" sh!es\","},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(DeletePreferenceCommand.COMMAND_WORD + \" shoes computers\","},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_DELETE_PREFERENCE_COMMAND_FORMAT);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(\"pREFDelEte shoes\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes the {@code Preference} in {@code model}\u0027s address book."},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    private void removePreference(Model model, Preference toDelete) {"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"            model.deletePreference(toDelete);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PreferenceNotFoundException pnfe) {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Preference should exist in address book.\");"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"     * @see DeletePreferenceCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":165,"-":1}},{"path":"src/test/java/systemtests/DeleteOrderCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getLastOrderIndex;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getMidOrderIndex;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TestUtil.getOrder;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private static final String MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT \u003d"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public void delete() {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the first order in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        String command \u003d \"     \" + DeleteOrderCommand.COMMAND_WORD + \"      \""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"                + INDEX_FIRST_ORDER.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        Order deletedOrder \u003d removeOrder(expectedModel, INDEX_FIRST_ORDER);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the last order in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Index lastOrderIndex \u003d getLastOrderIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(lastOrderIndex);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        /* Case: undo deleting the last order in the list -\u003e last order restored */"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        /* Case: redo deleting the last order in the list -\u003e last order deleted again */"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        removeOrder(modelBeforeDeletingLast, lastOrderIndex);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        /* Case: delete the middle order in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        Index middlePersonIndex \u003d getMidOrderIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        /* --------------------------------- Performing invalid delete operations ----------------------------------- */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"                getModel().getAddressBook().getOrderList().size() + 1);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        command \u003d DeleteOrderCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(DeleteOrderCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(DeleteOrderCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_ORDER_COMMAND_FORMAT);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"     * Removes the {@code Order} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"     * @return the removed order"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    private Order removeOrder(Model model, Index index) {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        Order targetOrder \u003d getOrder(model, index);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            model.deleteOrder(targetOrder);"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"targetOrder is retrieved from model.\");"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        return targetOrder;"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"     * Deletes the order at {@code toDelete} by creating a default {@code DeleteOrderCommand} using {@code toDelete}"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"     * and performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"     * @see DeleteOrderCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        Order deletedOrder \u003d removeOrder(expectedModel, toDelete);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess("},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"                DeleteOrderCommand.COMMAND_WORD + \" \""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                        + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"     * 4. Asserts that the selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * selected card is expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @see DeleteOrderCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertOrderListDisplaysExpected(expectedModel);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":45,"amad-person":130}},{"path":"src/test/java/seedu/address/ui/PersonPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":"import guitests.guihandles.PersonPanelHandle;"},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":"    private PersonPanel personPanel;"},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":"    private PersonPanelHandle personPanelHandle;"},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":"        guiRobot.interact(() -\u003e personPanel \u003d new PersonPanel());"},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":"        uiPartRule.setUiPart(personPanel);"},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":"        personPanelHandle \u003d new PersonPanelHandle(personPanel.getRoot());"},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"    public void display() throws Exception {"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"        personPanelHandle.loadPersonPage(ALICE);"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":"        assertPersonIsDisplayed(ALICE, personPanelHandle);"},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"        personPanelHandle.loadPersonPage(BOB);"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":"        assertPersonIsDisplayed(BOB, personPanelHandle);"},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the details of {@code expectedPerson} correctly"},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":"    private void assertPersonIsDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getName().toString(), personPanelHandle.getName());"},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getPhone().toString(), personPanelHandle.getPhone());"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getEmail().toString(), personPanelHandle.getEmail());"},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getAddress().toString(), personPanelHandle.getAddress());"},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":"    /*"},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the groups of {@code expectedPerson} correctly"},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"    private void assertGroupsAreDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getGroupTags().stream()"},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":"                        .map(groupLabels -\u003e groupLabels.tagName).collect(Collectors.toList()),"},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"                personPanelHandle.getGroups());"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":"    /*"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that {@code personPanelHandle} displays the preferences of {@code expectedPerson} correctly"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"    private void assertPreferencesAreDisplayed(Person expectedPerson, PersonPanelHandle personPanelHandle) {"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedPerson.getPreferenceTags().stream()"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":"                        .map(preferenceLabels -\u003e preferenceLabels.tagName).collect(Collectors.toList()),"},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"                personPanelHandle.getPreferences());"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":64}},{"path":"src/test/java/seedu/address/ui/CalendarEntryCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEntry;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public void display() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard calendarEntryCard \u003d new CalendarEntryCard(calendarEntry, 1);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        uiPartRule.setUiPart(calendarEntryCard);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplay(calendarEntryCard, calendarEntry, 1);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard calendarEntryCard \u003d new CalendarEntryCard(calendarEntry, 0);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        // same calendar entry, same index -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard entryCardCopy \u003d new CalendarEntryCard(calendarEntry, 0);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarEntryCard.equals(entryCardCopy));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarEntryCard.equals(calendarEntryCard));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(null));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(1));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        // different calendar entry, same index -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry differentEntry \u003d new CalendarEntryBuilder().withEntryTitle(\"differentTitle\").build();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(new CalendarEntryCard(differentEntry, 0)));"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        // same calendar entry, different index -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarEntryCard.equals(new CalendarEntryCard(calendarEntry, 1)));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code calendarEntryCard} displays the details of {@code expectedEntry} correctly and"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * matches {@code expectedId}."},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCardDisplay(CalendarEntryCard calendarEntryCard, CalendarEntry expectedEntry, int expectedId) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCardHandle entryCardHandle \u003d new CalendarEntryCardHandle(calendarEntryCard.getRoot());"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // verify that id is displayed correctly"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", entryCardHandle.getId());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // verify calendar entry details are displayed correctly"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertCardDisplaysEntry(expectedEntry, entryCardHandle);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":64,"-":1}},{"path":"src/test/java/seedu/address/ui/CalendarPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_DATE_EVENT;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_DAY_EVENT;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_MONTH_EVENT;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_NEXT_PAGE_EVENT;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_PREVIOUS_PAGE_EVENT;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_TODAY_EVENT;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalBaseEvents.CHANGE_TO_WEEK_EVENT;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.LEAP_YEAR_DATE;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.DAY_VIEW;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.MONTH_VIEW;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.WEEK_VIEW;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CenterPanelHandle;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the CenterPanel) for {@code CalendarPanel}."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarPanelTest extends GuiUnitTest {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private CenterPanelHandle centerPanelHandle;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        Calendar calendar \u003d new Calendar();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setReadOnly(true);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setStyle(Calendar.Style.STYLE1);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        CenterPanel centerPanel \u003d new CenterPanel(calendar);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        centerPanel.displayCalendarPanel();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        uiPartRule.setUiPart(centerPanel);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        centerPanelHandle \u003d new CenterPanelHandle(getChildNode(centerPanel.getRoot(),"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                CenterPanelHandle.CENTER_PANEL_ID));"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarViewRequestEvent() {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        centerPanelHandle.setUpCalendarPanelHandle();"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_MONTH_EVENT);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(MONTH_VIEW, centerPanelHandle.getCalendarCurrentView());"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_WEEK_EVENT);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(WEEK_VIEW, centerPanelHandle.getCalendarCurrentView());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_DAY_EVENT);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(DAY_VIEW, centerPanelHandle.getCalendarCurrentView());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarPageRequestEvent() {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        centerPanelHandle.setUpCalendarPanelHandle();"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDate originalDate \u003d centerPanelHandle.getCalendarCurrentDate();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_NEXT_PAGE_EVENT);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDate expectedDate \u003d originalDate.plusDays(1);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedDate, centerPanelHandle.getCalendarCurrentDate());"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_TODAY_EVENT);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        expectedDate \u003d centerPanelHandle.getCalendarTodayDate();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedDate, centerPanelHandle.getCalendarCurrentDate());"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        originalDate \u003d centerPanelHandle.getCalendarCurrentDate();"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_TO_PREVIOUS_PAGE_EVENT);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        expectedDate \u003d originalDate.minusDays(1);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedDate, centerPanelHandle.getCalendarCurrentDate());"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarDateRequestEvent() {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        centerPanelHandle.setUpCalendarPanelHandle();"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDate previousDate \u003d centerPanelHandle.getCalendarCurrentDate();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        postNow(CHANGE_DATE_EVENT);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        assertNotEquals(previousDate, LEAP_YEAR_DATE);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(LEAP_YEAR_DATE, centerPanelHandle.getCalendarCurrentDate());"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":100,"-":1}},{"path":"src/test/java/systemtests/FindGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_TWITTER;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public void findGroup() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book by their groups, command with leading spaces and trailing spaces"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        String command \u003d \"   \" + FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER + \"   \";"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: repeat previous find group command where person list is displaying the persons we are finding"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find persons via their group tags where person list is not displaying the person we are finding"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 4 persons found */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" friends\";"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ALICE, BENSON, FIONA, GEORGE);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords -\u003e 2 persons found */"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter\";"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords in reversed order"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        -\u003e 2 persons found */"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitter neighbours\";"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter neighbours\";"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find multiple persons in address book via group tags, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"         * -\u003e 2 persons found"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" neighbours twitter NonMatchingKeyWord\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find same persons via group tags in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag,"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        keyword is same as group name but of different case -\u003e 1 person found */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" TWItter\";"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag, keyword is substring of group name -\u003e 0 persons found */"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twit\";"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in address book via group tag, group name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitters\";"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person via group tags not in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" Facebook\";"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find name of person in address book with FindGroupCommand -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getName().toString();"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getPhone().value;"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getAddress().value;"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + ALICE.getEmail().value;"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find preferences of person in address book -\u003e 0 persons found */"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cPreference\u003e preferences \u003d new ArrayList\u003c\u003e(ALICE.getPreferenceTags());"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + preferences.get(0).tagName;"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find via group tags while a person is selected -\u003e selected card deselected */"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        showAllPersons();"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(ELLE.getName().fullName));"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" twitter\";"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: find person in empty address book via group tags -\u003e 0 persons found */"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"        deleteAllPersons();"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d FindGroupCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TWITTER;"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        ModelHelper.setFilteredList(expectedModel, ELLE);"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        command \u003d \"GrOuPFiNd neighbours\";"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"     * These verifications are done by"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"     * error style."},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"        executeCommand(command);"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":205,"-":1}},{"path":"src/test/java/seedu/address/ui/OrderCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class OrderCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCard \u003d new OrderCard(order, 1);"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        uiPartRule.setUiPart(orderCard);"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        assertCardDisplay(orderCard, order, 1);"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCard \u003d new OrderCard(order, 0);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        // same order, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        OrderCard orderCardCopy \u003d new OrderCard(order, 0);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertTrue(orderCard.equals(orderCardCopy));"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertTrue(orderCard.equals(orderCard));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(1));"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        // different order, same index -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        Order differentOrder \u003d new OrderBuilder().withOrderInformation(\"differentOrderInfo\").build();"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(new OrderCard(differentOrder, 0)));"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        // same order, different index -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertFalse(orderCard.equals(new OrderCard(order, 1)));"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     * matches {@code expectedId}."},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    private void assertCardDisplay(OrderCard orderCard, Order expectedOrder, int expectedId) {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        OrderCardHandle orderCardHandle \u003d new OrderCardHandle(orderCard.getRoot());"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        // verify that id is displayed correctly"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", orderCardHandle.getId());"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        // verify order details are displayed correctly"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        assertCardDisplaysOrder(expectedOrder, orderCardHandle);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":67}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String COMMAND_ADD_INCOMPLETE \u003d \"ad\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_ADD_COMPLETE \u003d AddCommand.COMMAND_SYNTAX;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_EDIT_INCOMPLETE \u003d \"e\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_EDIT_COMPLETE \u003d EditCommand.COMMAND_SYNTAX;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"    public void handleKeyPress_tab() {"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        // add command"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_ADD_INCOMPLETE);"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_ADD_COMPLETE);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        // edit command"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_EDIT_INCOMPLETE);"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_EDIT_COMPLETE);"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        // invalid command"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_THAT_FAILS);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":164,"amad-person":16}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.text.DecimalFormat;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CalendarEntryListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.OrderListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getGroups(), actualCard.getGroups());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPreferences(), actualCard.getPreferences());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedCard.getGroups().forEach(tag -\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"             assertEquals(expectedCard.getGroupTagStyleClasses(tag), actualCard.getGroupTagStyleClasses(tag)));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        expectedCard.getPreferences().forEach(tag -\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":"             assertEquals(expectedCard.getPreferenceTagStyleClasses(tag),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                     actualCard.getPreferenceTagStyleClasses(tag)));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertGroupsEqual(expectedPerson, actualCard);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertPreferencesEqual(expectedPerson, actualCard);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"    //@@author AJZ1995"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"     * Adopted from CS2103T AB4 Appendix A"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"     * @see PersonCard#getGroupTagColorStyleFor(String)"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"    private static String getGroupTagColorStyleFor(String tagName) {"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"        switch (tagName) {"},{"lineNumber":67,"author":{"gitID":"AJZ1995"},"content":"        case \"classmates\":"},{"lineNumber":68,"author":{"gitID":"AJZ1995"},"content":"        case \"owesMoney\":"},{"lineNumber":69,"author":{"gitID":"AJZ1995"},"content":"            return \"teal\";"},{"lineNumber":70,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":71,"author":{"gitID":"AJZ1995"},"content":"        case \"twitter\":"},{"lineNumber":72,"author":{"gitID":"AJZ1995"},"content":"            return \"blue\";"},{"lineNumber":73,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":74,"author":{"gitID":"AJZ1995"},"content":"        case \"family\":"},{"lineNumber":75,"author":{"gitID":"AJZ1995"},"content":"        case \"friend\":"},{"lineNumber":76,"author":{"gitID":"AJZ1995"},"content":"            return \"orange\";"},{"lineNumber":77,"author":{"gitID":"AJZ1995"},"content":"        case \"friends\":"},{"lineNumber":78,"author":{"gitID":"AJZ1995"},"content":"            return \"brown\";"},{"lineNumber":79,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":80,"author":{"gitID":"AJZ1995"},"content":"        case \"colleagues\":"},{"lineNumber":81,"author":{"gitID":"AJZ1995"},"content":"        case \"neighbours\":"},{"lineNumber":82,"author":{"gitID":"AJZ1995"},"content":"            return \"yellow\";"},{"lineNumber":83,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":84,"author":{"gitID":"AJZ1995"},"content":"        default:"},{"lineNumber":85,"author":{"gitID":"AJZ1995"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":86,"author":{"gitID":"AJZ1995"},"content":"            return \"\";"},{"lineNumber":87,"author":{"gitID":"AJZ1995"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":90,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"AJZ1995"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":92,"author":{"gitID":"AJZ1995"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":93,"author":{"gitID":"AJZ1995"},"content":"     *"},{"lineNumber":94,"author":{"gitID":"AJZ1995"},"content":"     * @see PersonCard#getPrefTagColorStyleFor(String)"},{"lineNumber":95,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"AJZ1995"},"content":"    private static String getPrefTagColorStyleFor(String tagName) {"},{"lineNumber":97,"author":{"gitID":"AJZ1995"},"content":"        switch (tagName) {"},{"lineNumber":98,"author":{"gitID":"AJZ1995"},"content":"        case \"cosmetics\":"},{"lineNumber":99,"author":{"gitID":"AJZ1995"},"content":"        case \"computers\":"},{"lineNumber":100,"author":{"gitID":"AJZ1995"},"content":"            return \"teal\";"},{"lineNumber":101,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":102,"author":{"gitID":"AJZ1995"},"content":"        case \"necklaces\":"},{"lineNumber":103,"author":{"gitID":"AJZ1995"},"content":"            return \"brown\";"},{"lineNumber":104,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":105,"author":{"gitID":"AJZ1995"},"content":"        case \"notebooks\":"},{"lineNumber":106,"author":{"gitID":"AJZ1995"},"content":"            return \"green\";"},{"lineNumber":107,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":108,"author":{"gitID":"AJZ1995"},"content":"        case \"photobooks\":"},{"lineNumber":109,"author":{"gitID":"AJZ1995"},"content":"        case \"skirts\":"},{"lineNumber":110,"author":{"gitID":"AJZ1995"},"content":"            return \"orange\";"},{"lineNumber":111,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":112,"author":{"gitID":"AJZ1995"},"content":"        case \"shoes\":"},{"lineNumber":113,"author":{"gitID":"AJZ1995"},"content":"            return \"green\";"},{"lineNumber":114,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":115,"author":{"gitID":"AJZ1995"},"content":"        case \"videoGames\":"},{"lineNumber":116,"author":{"gitID":"AJZ1995"},"content":"            return \"black\";"},{"lineNumber":117,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":118,"author":{"gitID":"AJZ1995"},"content":"        default:"},{"lineNumber":119,"author":{"gitID":"AJZ1995"},"content":"            fail(tagName + \" does not have a color assigned.\");"},{"lineNumber":120,"author":{"gitID":"AJZ1995"},"content":"            return \"\";"},{"lineNumber":121,"author":{"gitID":"AJZ1995"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":124,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":126,"author":{"gitID":"AJZ1995"},"content":"     * color."},{"lineNumber":127,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"AJZ1995"},"content":"    private static void assertGroupsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":129,"author":{"gitID":"AJZ1995"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getGroupTags().stream()"},{"lineNumber":130,"author":{"gitID":"AJZ1995"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":131,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedTags, actualCard.getGroups());"},{"lineNumber":132,"author":{"gitID":"AJZ1995"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":133,"author":{"gitID":"AJZ1995"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getGroupTagColorStyleFor(tag)),"},{"lineNumber":134,"author":{"gitID":"AJZ1995"},"content":"                        actualCard.getGroupTagStyleClasses(tag)));"},{"lineNumber":135,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":137,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"AJZ1995"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":139,"author":{"gitID":"AJZ1995"},"content":"     * color."},{"lineNumber":140,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"AJZ1995"},"content":"    private static void assertPreferencesEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":142,"author":{"gitID":"AJZ1995"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getPreferenceTags().stream()"},{"lineNumber":143,"author":{"gitID":"AJZ1995"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":144,"author":{"gitID":"AJZ1995"},"content":"        assertEquals(expectedTags, actualCard.getPreferences());"},{"lineNumber":145,"author":{"gitID":"AJZ1995"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":146,"author":{"gitID":"AJZ1995"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getPrefTagColorStyleFor(tag)),"},{"lineNumber":147,"author":{"gitID":"AJZ1995"},"content":"                        actualCard.getPreferenceTagStyleClasses(tag)));"},{"lineNumber":148,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"AJZ1995"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedOrder}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysOrder(Order expectedOrder, OrderCardHandle actualCard) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedOrder.getOrderInformation().toString(), actualCard.getOrderInformation());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        double priceValue \u003d Double.valueOf(expectedOrder.getPrice().toString());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        String expectedPriceAndQuantity \u003d \"S$\" + String.valueOf(decimalFormat.format(priceValue))"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                + \" X \" + expectedOrder.getQuantity().toString();"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(expectedPriceAndQuantity, actualCard.getPriceAndQuantity());"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        int quantityValue \u003d Integer.valueOf(expectedOrder.getQuantity().toString());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        double totalPrice \u003d priceValue * quantityValue;"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String expectedTotalPrice \u003d \"Total: S$\" + String.valueOf(decimalFormat.format(totalPrice));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedTotalPrice, actualCard.getTotalPrice());"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(\"Deliver By: \" + expectedOrder.getDeliveryDate().toString(), actualCard.getDeliveryDate());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedEntry}."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysEntry(CalendarEntry expectedEntry, CalendarEntryCardHandle actualCard) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedEntry.getEntryTitle().toString(), actualCard.getEntryTitle());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        String expectedStartDate \u003d \"From: \" + expectedEntry.getStartDate().toString();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedStartDate, actualCard.getStartDate());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String expectedEndDate \u003d \"To: \" + expectedEntry.getEndDate().toString();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedEndDate, actualCard.getEndDate());"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        String expectedTimeDuration \u003d \"Between \" + expectedEntry.getStartTime().toString()"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                + \" and \" + expectedEntry.getEndTime().toString();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertEquals(expectedTimeDuration, actualCard.getTimeDuration());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public static void assertPersonListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public static void assertPersonListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertPersonListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"content":"    //@@author SuxianAlicia-reused"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code orderListPanelHandle} displays the details of {@code orders} correctly and"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public static void assertOrderListMatching(OrderListPanelHandle orderListPanelHandle, Order... orders) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c orders.length; i++) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            assertCardDisplaysOrder(orders[i], orderListPanelHandle.getOrderCardHandle(i));"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code orderListPanelHandle} displays the details of {@code orders} correctly and"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public static void assertOrderListMatching(OrderListPanelHandle orderListPanelHandle, List\u003cOrder\u003e orders) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertOrderListMatching(orderListPanelHandle, orders.toArray(new Order[0]));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code calendarEntryListPanelHandle} displays the details of {@code entries} correctly"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * and in the correct order."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public static void assertCalendarEntryListMatching("},{"lineNumber":235,"author":{"gitID":"-"},"content":"            CalendarEntryListPanelHandle calendarEntryListPanelHandle, CalendarEntry... entries) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c entries.length; i++) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            assertCardDisplaysEntry(entries[i], calendarEntryListPanelHandle.getCalendarEntryCardHandle(i));"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code calendarEntryListPanelHandle} displays the details of {@code entries} correctly"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * and in the correct order."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    public static void assertCalendarEntryListMatching("},{"lineNumber":246,"author":{"gitID":"-"},"content":"            CalendarEntryListPanelHandle calendarEntryListPanelHandle, List\u003cCalendarEntry\u003e entries) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCalendarEntryListMatching(calendarEntryListPanelHandle, entries.toArray(new CalendarEntry[0]));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public static void assertPersonListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"AJZ1995":93,"-":170}},{"path":"src/test/java/seedu/address/ui/OrderListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalOrders;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderCardHandle;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import guitests.guihandles.OrderListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"public class OrderListPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private static final ObservableList\u003cOrder\u003e TYPICAL_ORDERS \u003d"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"            FXCollections.observableList(getTypicalOrders());"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private OrderListPanelHandle orderListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        OrderListPanel orderListPanel \u003d new OrderListPanel(TYPICAL_ORDERS);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        uiPartRule.setUiPart(orderListPanel);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        orderListPanelHandle \u003d new OrderListPanelHandle(getChildNode(orderListPanel.getRoot(),"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"                OrderListPanelHandle.ORDER_LIST_VIEW_ID));"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public void display() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_ORDERS.size(); i++) {"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"            orderListPanelHandle.navigateToCard(TYPICAL_ORDERS.get(i));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            Order expectedOrder \u003d TYPICAL_ORDERS.get(i);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            OrderCardHandle actualCard \u003d orderListPanelHandle.getOrderCardHandle(i);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            assertCardDisplaysOrder(expectedOrder, actualCard);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":43}},{"path":"src/test/java/seedu/address/ui/CalendarEntryListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarEntries;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysEntry;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryCardHandle;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import guitests.guihandles.CalendarEntryListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private static final ObservableList\u003cCalendarEntry\u003e TYPICAL_CAL_ENTRIES \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            FXCollections.observableList(getTypicalCalendarEntries());"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryListPanelHandle calendarEntryListPanelHandle;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryListPanel calendarEntryListPanel \u003d new CalendarEntryListPanel(TYPICAL_CAL_ENTRIES);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        uiPartRule.setUiPart(calendarEntryListPanel);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryListPanelHandle \u003d new CalendarEntryListPanelHandle(getChildNode(calendarEntryListPanel.getRoot(),"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                CalendarEntryListPanelHandle.CALENDAR_ENTRY_LIST_VIEW_ID));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void display() {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_CAL_ENTRIES.size(); i++) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            calendarEntryListPanelHandle.navigateToCard(TYPICAL_CAL_ENTRIES.get(i));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntry expectedCalEntry \u003d TYPICAL_CAL_ENTRIES.get(i);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntryCardHandle actualCard \u003d calendarEntryListPanelHandle.getCalendarEntryCardHandle(i);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            assertCardDisplaysEntry(expectedCalEntry, actualCard);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":41,"-":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedGroup;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPreference;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableCalendarManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CalendarManagerBuilder;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final File TEMP_ADDRESSBOOK_FILE \u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final File TEMP_CALENDARMANAGER_FILE \u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new File(TestUtil.getFilePathInSandboxFolder(\"tempCalendarManager.xml\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedGroup\u003e VALID_GROUPS \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Collections.singletonList(new XmlAdaptedGroup(\"friends\"));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedPreference\u003e VALID_PREFERENCES \u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Collections.singletonList(new XmlAdaptedPreference(\"shoes\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getGroupList().size());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getPreferenceList().size());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":104,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":111,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GROUPS, VALID_PREFERENCES);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validAddressBookFile_dataSaved() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        TEMP_ADDRESSBOOK_FILE.createNewFile();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_ADDRESSBOOK_FILE, dataToWrite);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_ADDRESSBOOK_FILE,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":146,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withGroup(\"Friends\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                        .withPreference(\"shoes\").build());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_ADDRESSBOOK_FILE, dataToWrite);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_ADDRESSBOOK_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveDateToFile_validCalendarManagerFile_dataSaved() throws Exception {"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        TEMP_CALENDARMANAGER_FILE.createNewFile();"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataToWrite \u003d new XmlSerializableCalendarManager(new CalendarManager());"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        XmlUtil.saveDataToFile(TEMP_CALENDARMANAGER_FILE, dataToWrite);"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataFromFile \u003d XmlUtil.getDataFromFile("},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"                TEMP_CALENDARMANAGER_FILE, XmlSerializableCalendarManager.class);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerBuilder builder \u003d new CalendarManagerBuilder(new CalendarManager());"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        dataToWrite \u003d new XmlSerializableCalendarManager(builder.withEntry(new CalendarEntryBuilder().build()).build());"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        XmlUtil.saveDataToFile(TEMP_CALENDARMANAGER_FILE, dataToWrite);"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_CALENDARMANAGER_FILE, XmlSerializableCalendarManager.class);"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":179,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":18,"-":161}},{"path":"src/test/java/seedu/address/commons/util/DateUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class DateUtilTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidDate_nullSentence_throwsNullPointerException() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.isValidDate(null);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    // Test for isValidDate is rigorously tested in StartDateTest, EndDateTest and DeliveryDateTest."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidDate_invalidString_returnFalse() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // empty string"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"  \"));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // does not follow validation format"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\" * * *\"));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"6 April 2020\"));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"06-Apr-2020\"));"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        // has incorrect number of digits"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"10-5-2020\"));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"1-05-2020\"));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"03-04-20\"));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"30-02-2020\"));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void convertStringToDate_nullSentence_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(null);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void convertStringToDate_invalidString_throwsDateTimeParseException() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DateTimeParseException.class);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // empty string"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\" \");"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        // does not follow validation format"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\" * * *\");"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"6 April 2020\");"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"06-Apr-2020\");"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // has incorrect number of digits"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"10-5-2020\");"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"1-05-2020\");"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"03-04-20\");"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        DateUtil.convertStringToDate(\"30-02-2020\");"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":64,"-":1}},{"path":"src/test/java/seedu/address/commons/util/TimeUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class TimeUtilTest {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidTime_nullSentence_throwsNullPointerException() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.isValidTime(null);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    // Test for isValidTime is rigorously tested in StartTimeTest and EndTimeTest."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidTime_invalidString_returnFalse() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // empty string"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"  \"));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // does not follow validation format"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\" * * *\"));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"0212\"));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"02-12\"));"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        // has incorrect number of digits"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"12:500\"));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"240:50\"));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"2:50\"));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"21:5\"));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void convertStringToTime_nullSentence_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(null);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void convertStringToTime_invalidString_throwsDateTimeParseException() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DateTimeParseException.class);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // empty string"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\" \");"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        // does not follow validation format"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\" * * *\");"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"0212\");"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"02-12\");"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // has incorrect number of digits"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"12:500\");"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"240:50\");"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"2:50\");"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        TimeUtil.convertStringToTime(\"21:5\");"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":65,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.DARK_THEME_KEYWORD;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.LIGHT_THEME_KEYWORD;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    private final ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public void parse_validArgs_returnsChangeThemeCommand() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, \"light\", new ChangeThemeCommand(LIGHT_THEME_KEYWORD));"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, \"dark\", new ChangeThemeCommand(DARK_THEME_KEYWORD));"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"                ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":30}},{"path":"src/test/java/seedu/address/logic/parser/DeleteOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    private final DeleteOrderCommandParser parser \u003d new DeleteOrderCommandParser();"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, \"1\", new DeleteOrderCommand(INDEX_FIRST_PERSON));"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":27}},{"path":"src/test/java/seedu/address/logic/parser/ExportListedPersonsCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import static seedu.address.logic.parser.ExportListedPersonsCommandParser.MESSAGE_FILENAME_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"public class ExportListedPersonsCommandParserTest {"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":"    private ExportListedPersonsCommandParser parser \u003d new ExportListedPersonsCommandParser();"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":"    public void parse_invalidArgsWrongFormat_throwsParseException() {"},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":"        assertParseFailure(parser, \"aaa!\", MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":"    public void parse_invalidArgsTooLong_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"        assertParseFailure(parser, \"123451234512345123451234512345X\", MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":23,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":23}},{"path":"src/test/java/seedu/address/commons/util/EntryTimeConstraintsUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_SUPPLIER;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_SUPPLIER;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_SUPPLIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_SUPPLIER;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTimeConstraintsUtilTest {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void checkCalendarEntryTimeConstraints_validInputs_success() throws IllegalValueException {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        StartDate startDate \u003d new StartDate(VALID_START_DATE_MEET_SUPPLIER);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        EndDate endDate \u003d new EndDate(VALID_END_DATE_MEET_SUPPLIER);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        StartTime startTime \u003d new StartTime(VALID_START_TIME_MEET_SUPPLIER);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        EndTime endTime \u003d new EndTime(VALID_END_TIME_MEET_SUPPLIER);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(startDate, endDate, startTime, endTime);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This exception should not be thrown as the inputs are valid.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public void checkCalendarEntryTimeConstraints_startDateLaterThanEndDate_throwsIllegalValueException()"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        StartDate invalidStartDate \u003d new StartDate(\"06-06-2100\"); //Start Date is after End Date"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        EndDate endDate \u003d new EndDate(VALID_END_DATE_MEET_SUPPLIER);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        StartTime startTime \u003d new StartTime(VALID_START_TIME_MEET_SUPPLIER);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        EndTime endTime \u003d new EndTime(VALID_END_TIME_MEET_SUPPLIER);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EntryTimeConstraintsUtil.START_AND_END_DATE_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expectMessage(expectedMessage);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(invalidStartDate, endDate, startTime, endTime);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void checkCalendarEntryTimeConstraints_startTimeLaterThanEndTime_throwsIllegalValueException()"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        StartDate startDate \u003d new StartDate(VALID_START_DATE_MEET_SUPPLIER);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        EndDate endDate \u003d new EndDate(VALID_END_DATE_MEET_SUPPLIER);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        StartTime invalidStartTime \u003d new StartTime(\"23:59\");"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        EndTime endTime \u003d new EndTime(VALID_END_TIME_MEET_SUPPLIER);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EntryTimeConstraintsUtil.START_AND_END_TIME_CONSTRAINTS;"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expectMessage(expectedMessage);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(startDate, endDate, invalidStartTime, endTime);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void checkCalendarEntryTimeConstraints_durationShorterThanFifteenMinutes_throwsIllegalValueException()"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"            throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        StartDate startDate \u003d new StartDate(\"05-06-2018\");"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        EndDate endDate \u003d new EndDate(\"06-06-2018\");"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        StartTime startTime \u003d new StartTime(\"23:50\");"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        EndTime endTime \u003d new EndTime(\"00:00\");"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EntryTimeConstraintsUtil.ENTRY_DURATION_CONSTRAINTS;"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expectMessage(expectedMessage);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(startDate, endDate, startTime, endTime);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":81,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/FindGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private FindGroupCommandParser parser \u003d new FindGroupCommandParser();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsFindGroupCommand() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand expectedFindGroupCommand \u003d"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(\"Friends\", \"Colleagues\")));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"Friends Colleagues\", expectedFindGroupCommand);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \" \\n Friends \\n \\t Colleagues  \\t\", expectedFindGroupCommand);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":33,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/ChangeOrderStatusCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_STATUS;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.ORDER_STATUS_DONE;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.ORDER_STATUS_ONGOING;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeOrderStatusCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private final ChangeOrderStatusCommandParser parser \u003d new ChangeOrderStatusCommandParser();"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public void parse_validArgs_returnsChangeOrderStatusThemeCommand() {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        String userInput \u003d \"1 \" + PREFIX_ORDER_STATUS.toString() + \" \" + ORDER_STATUS_DONE;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, new ChangeOrderStatusCommand(INDEX_FIRST_ORDER, ORDER_STATUS_DONE));"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        userInput \u003d \"2 \" + PREFIX_ORDER_STATUS.toString() + \" \" + ORDER_STATUS_ONGOING;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, new ChangeOrderStatusCommand(INDEX_SECOND_ORDER, ORDER_STATUS_ONGOING));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"                ChangeOrderStatusCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":35}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_DATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.theme.Theme.LIGHT_THEME_KEYWORD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.OrderBuilder.DEFAULT_DELIVERY_DATE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.OrderBuilder.DEFAULT_ORDER_INFORMATION;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.OrderBuilder.DEFAULT_PRICE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.OrderBuilder.DEFAULT_QUANTITY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE_STRING;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CalendarJumpCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditEntryCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EntryListClearCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCalendarEntryCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListOrderCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewBackCommand;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewCalendarCommand;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewNextCommand;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewTodayCommand;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CalendarEntryUtil;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditEntryDescriptorBuilder;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditOrderDescriptorBuilder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.testutil.OrderUtil;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_addOrder() throws Exception {"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand command \u003d (AddOrderCommand) parser.parseCommand(OrderUtil"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                .getAddOrderCommand(INDEX_FIRST_PERSON.getOneBased(), order));"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        assertEquals(new AddOrderCommand(INDEX_FIRST_PERSON, order), command);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_addOrderAlias() throws Exception {"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand command \u003d (AddOrderCommand) parser.parseCommand(AddOrderCommand.COMMAND_ALIAS"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + OrderUtil.getOrderDetails(order));"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        assertEquals(new AddOrderCommand(INDEX_FIRST_PERSON, order), command);"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_addEntry() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        AddEntryCommand command \u003d (AddEntryCommand) parser.parseCommand(CalendarEntryUtil"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                .getAddEntryCommand(calendarEntry));"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(new AddEntryCommand(calendarEntry), command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_addEntryAlias() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        CalendarEntry calendarEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        AddEntryCommand command \u003d (AddEntryCommand) parser.parseCommand(AddEntryCommand.COMMAND_ALIAS"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                + \" \" + CalendarEntryUtil.getCalendarEntryDetails(calendarEntry));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(new AddEntryCommand(calendarEntry), command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_calendarJump() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        CalendarJumpCommand command \u003d (CalendarJumpCommand) parser.parseCommand("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                CalendarJumpCommand.COMMAND_WORD + \" \" + PREFIX_TARGET_DATE + \"06-06-1990\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(new CalendarJumpCommand(NORMAL_DATE, NORMAL_DATE_STRING), command);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseCommand_calendarJumpAlias() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        CalendarJumpCommand command \u003d (CalendarJumpCommand) parser.parseCommand("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                CalendarJumpCommand.COMMAND_ALIAS + \" \" + PREFIX_TARGET_DATE + \"06-06-1990\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(new CalendarJumpCommand(NORMAL_DATE, NORMAL_DATE_STRING), command);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"                ChangeThemeCommand.COMMAND_WORD + \" \" + LIGHT_THEME_KEYWORD);"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        assertEquals(new ChangeThemeCommand(LIGHT_THEME_KEYWORD), command);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_changeThemeAlias() throws Exception {"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand command \u003d (ChangeThemeCommand) parser.parseCommand("},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"                ChangeThemeCommand.COMMAND_ALIAS + \" \" + LIGHT_THEME_KEYWORD);"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        assertEquals(new ChangeThemeCommand(LIGHT_THEME_KEYWORD), command);"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":186,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteGroup() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":202,"author":{"gitID":"-"},"content":"                DeleteGroupCommand.COMMAND_WORD + \" \" + \"friends\");"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteGroupCommand(FRIENDS), command);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteGroupAlias() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        DeleteGroupCommand command \u003d (DeleteGroupCommand) parser.parseCommand("},{"lineNumber":209,"author":{"gitID":"-"},"content":"                DeleteGroupCommand.COMMAND_ALIAS + \" \" + \"friends\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteGroupCommand(FRIENDS), command);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_deletePreference() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        DeletePreferenceCommand command \u003d (DeletePreferenceCommand) parser.parseCommand("},{"lineNumber":216,"author":{"gitID":"-"},"content":"                DeletePreferenceCommand.COMMAND_WORD + \" \" + \"computers\");"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertEquals(new DeletePreferenceCommand(COMPUTERS), command);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseCommand_deletePreferenceAlias() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        DeletePreferenceCommand command \u003d (DeletePreferenceCommand) parser.parseCommand("},{"lineNumber":223,"author":{"gitID":"-"},"content":"                DeletePreferenceCommand.COMMAND_ALIAS + \" \" + \"computers\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(new DeletePreferenceCommand(COMPUTERS), command);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_deleteOrder() throws Exception {"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand command \u003d (DeleteOrderCommand) parser.parseCommand("},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"                DeleteOrderCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ORDER.getOneBased());"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"        assertEquals(new DeleteOrderCommand(INDEX_FIRST_ORDER), command);"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_deleteOrderAlias() throws Exception {"},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand command \u003d (DeleteOrderCommand) parser.parseCommand("},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":"                DeleteOrderCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_ORDER.getOneBased());"},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"        assertEquals(new DeleteOrderCommand(INDEX_FIRST_ORDER), command);"},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteEntry() throws Exception {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        DeleteEntryCommand command \u003d (DeleteEntryCommand) parser.parseCommand(DeleteEntryCommand.COMMAND_WORD"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                + \" \" + INDEX_FIRST_ENTRY.getOneBased());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteEntryCommand(INDEX_FIRST_ENTRY), command);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteEntryAlias() throws Exception {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        DeleteEntryCommand command \u003d (DeleteEntryCommand) parser.parseCommand(DeleteEntryCommand.COMMAND_ALIAS"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                + \" \" + INDEX_FIRST_ENTRY.getOneBased());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteEntryCommand(INDEX_FIRST_ENTRY), command);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":262,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_editOrder() throws Exception {"},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(DEFAULT_ORDER_INFORMATION).withPrice(DEFAULT_PRICE)"},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"                .withQuantity(DEFAULT_QUANTITY).withDeliveryDate(DEFAULT_DELIVERY_DATE).build();"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand command \u003d (EditOrderCommand) parser.parseCommand(EditOrderCommand.COMMAND_WORD + \" \""},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"                + INDEX_FIRST_ORDER.getOneBased() + \" \" + OrderUtil.getOrderDetails(order));"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"        assertEquals(new EditOrderCommand(INDEX_FIRST_ORDER, descriptor), command);"},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_editOrderAlias() throws Exception {"},{"lineNumber":291,"author":{"gitID":"amad-person"},"content":"        Order order \u003d new OrderBuilder().build();"},{"lineNumber":292,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand.EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":293,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(DEFAULT_ORDER_INFORMATION).withPrice(DEFAULT_PRICE)"},{"lineNumber":294,"author":{"gitID":"amad-person"},"content":"                .withQuantity(DEFAULT_QUANTITY).withDeliveryDate(DEFAULT_DELIVERY_DATE).build();"},{"lineNumber":295,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":296,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand command \u003d (EditOrderCommand) parser.parseCommand(EditOrderCommand.COMMAND_ALIAS + \" \""},{"lineNumber":297,"author":{"gitID":"amad-person"},"content":"                + INDEX_FIRST_ORDER.getOneBased() + \" \" + OrderUtil.getOrderDetails(order));"},{"lineNumber":298,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":299,"author":{"gitID":"amad-person"},"content":"        assertEquals(new EditOrderCommand(INDEX_FIRST_ORDER, descriptor), command);"},{"lineNumber":300,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public void parseCommand_editEntry() throws Exception {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        CalendarEntry entry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        EditEntryCommand command \u003d (EditEntryCommand) parser.parseCommand(EditEntryCommand.COMMAND_WORD + \" \""},{"lineNumber":308,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_ENTRY.getOneBased() + \" \" + CalendarEntryUtil.getCalendarEntryDetails(entry));"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        assertEquals(new EditEntryCommand(INDEX_FIRST_ENTRY, descriptor), command);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    public void parseCommand_editEntryAlias() throws Exception {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        CalendarEntry entry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(entry).build();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        EditEntryCommand command \u003d (EditEntryCommand) parser.parseCommand(EditEntryCommand.COMMAND_ALIAS + \" \""},{"lineNumber":317,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_ENTRY.getOneBased() + \" \" + CalendarEntryUtil.getCalendarEntryDetails(entry));"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertEquals(new EditEntryCommand(INDEX_FIRST_ENTRY, descriptor), command);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    public void parseCommand_entryListClear() throws Exception {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(EntryListClearCommand.COMMAND_WORD) instanceof EntryListClearCommand);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(EntryListClearCommand.COMMAND_WORD + \" abc\")"},{"lineNumber":325,"author":{"gitID":"-"},"content":"                instanceof EntryListClearCommand);"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    public void parseCommand_entryListClearAlias() throws Exception {"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(EntryListClearCommand.COMMAND_ALIAS) instanceof EntryListClearCommand);"},{"lineNumber":331,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(EntryListClearCommand.COMMAND_ALIAS + \" abc\")"},{"lineNumber":332,"author":{"gitID":"-"},"content":"                instanceof EntryListClearCommand);"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":336,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":342,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":343,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_exitAlias() throws Exception {"},{"lineNumber":344,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"},{"lineNumber":345,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"},{"lineNumber":346,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":353,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":358,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_findAlias() throws Exception {"},{"lineNumber":360,"author":{"gitID":"amad-person"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":361,"author":{"gitID":"amad-person"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":362,"author":{"gitID":"amad-person"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":363,"author":{"gitID":"amad-person"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":364,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":365,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    public void parseCommand_findGroups() throws Exception {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"family\", \"neighbours\");"},{"lineNumber":370,"author":{"gitID":"-"},"content":"        FindGroupCommand command \u003d (FindGroupCommand) parser.parseCommand("},{"lineNumber":371,"author":{"gitID":"-"},"content":"                FindGroupCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":372,"author":{"gitID":"-"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        assertEquals(new FindGroupCommand(new GroupsContainKeywordsPredicate(keywords)), command);"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":377,"author":{"gitID":"-"},"content":"    public void parseCommand_findGroupAlias() throws Exception {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"family\", \"neighbours\");"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        FindGroupCommand command \u003d (FindGroupCommand) parser.parseCommand("},{"lineNumber":380,"author":{"gitID":"-"},"content":"                FindGroupCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":381,"author":{"gitID":"-"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":382,"author":{"gitID":"-"},"content":"        assertEquals(new FindGroupCommand(new GroupsContainKeywordsPredicate(keywords)), command);"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":386,"author":{"gitID":"-"},"content":"    public void parseCommand_findPreference() throws Exception {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"shoes\", \"computers\", \"necklaces\");"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        FindPreferenceCommand command \u003d (FindPreferenceCommand) parser.parseCommand("},{"lineNumber":389,"author":{"gitID":"-"},"content":"                FindPreferenceCommand.COMMAND_WORD + \" \" + keywords.stream()"},{"lineNumber":390,"author":{"gitID":"-"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":391,"author":{"gitID":"-"},"content":"        assertEquals(new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(keywords)), command);"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":395,"author":{"gitID":"-"},"content":"    public void parseCommand_findPreferenceAlias() throws Exception {"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"shoes\", \"computers\", \"necklaces\");"},{"lineNumber":397,"author":{"gitID":"-"},"content":"        FindPreferenceCommand command \u003d (FindPreferenceCommand) parser.parseCommand("},{"lineNumber":398,"author":{"gitID":"-"},"content":"                FindPreferenceCommand.COMMAND_ALIAS + \" \" + keywords.stream()"},{"lineNumber":399,"author":{"gitID":"-"},"content":"                        .collect(Collectors.joining(\" \")));"},{"lineNumber":400,"author":{"gitID":"-"},"content":"        assertEquals(new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(keywords)), command);"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":404,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":405,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":406,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":407,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":410,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":411,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_helpAlias() throws Exception {"},{"lineNumber":412,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":413,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":414,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":415,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":418,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":419,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":420,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":423,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":424,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":426,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":427,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":431,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":432,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":433,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":434,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":435,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":436,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":437,"author":{"gitID":"amad-person"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":438,"author":{"gitID":"amad-person"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":439,"author":{"gitID":"amad-person"},"content":"        } catch (ParseException pe) {"},{"lineNumber":440,"author":{"gitID":"amad-person"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":441,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":442,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":446,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":447,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":448,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":449,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":452,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":453,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":454,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":455,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":456,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":457,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":460,"author":{"gitID":"-"},"content":"    public void parseCommand_calendarEntryList() throws Exception {"},{"lineNumber":461,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCalendarEntryCommand.COMMAND_WORD) instanceof ListCalendarEntryCommand);"},{"lineNumber":462,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":463,"author":{"gitID":"-"},"content":"                ListCalendarEntryCommand.COMMAND_WORD + \" 3\") instanceof ListCalendarEntryCommand);"},{"lineNumber":464,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":467,"author":{"gitID":"-"},"content":"    public void parseCommand_calendarEntryListAlias() throws Exception {"},{"lineNumber":468,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCalendarEntryCommand.COMMAND_ALIAS) instanceof ListCalendarEntryCommand);"},{"lineNumber":469,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":470,"author":{"gitID":"-"},"content":"                ListCalendarEntryCommand.COMMAND_ALIAS + \" 3\") instanceof ListCalendarEntryCommand);"},{"lineNumber":471,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":474,"author":{"gitID":"-"},"content":"    public void parseCommand_orderList() throws Exception {"},{"lineNumber":475,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListOrderCommand.COMMAND_WORD) instanceof ListOrderCommand);"},{"lineNumber":476,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":477,"author":{"gitID":"-"},"content":"                ListOrderCommand.COMMAND_WORD + \" 3\") instanceof ListOrderCommand);"},{"lineNumber":478,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":481,"author":{"gitID":"-"},"content":"    public void parseCommand_orderListAlias() throws Exception {"},{"lineNumber":482,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListOrderCommand.COMMAND_ALIAS) instanceof ListOrderCommand);"},{"lineNumber":483,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand("},{"lineNumber":484,"author":{"gitID":"-"},"content":"                ListOrderCommand.COMMAND_ALIAS + \" 3\") instanceof ListOrderCommand);"},{"lineNumber":485,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":488,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":489,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":490,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":491,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":492,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":495,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":496,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":497,"author":{"gitID":"amad-person"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":498,"author":{"gitID":"amad-person"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":499,"author":{"gitID":"amad-person"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":500,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":501,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":504,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":505,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":506,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":507,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":510,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":511,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_redoCommandWordAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":512,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":513,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":514,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":515,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":518,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":519,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":520,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":521,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":524,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":525,"author":{"gitID":"amad-person"},"content":"    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":526,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":527,"author":{"gitID":"amad-person"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":528,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":529,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":532,"author":{"gitID":"-"},"content":"    public void parseCommand_viewCalendarCommand_returnsViewCalendarCommand() throws Exception {"},{"lineNumber":533,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewCalendarCommand.COMMAND_WORD) instanceof ViewCalendarCommand);"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calendar DAY\") instanceof ViewCalendarCommand);"},{"lineNumber":535,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":536,"author":{"gitID":"-"},"content":""},{"lineNumber":537,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":538,"author":{"gitID":"-"},"content":"    public void parseCommand_viewCalendarCommandAlias_returnsViewCalendarCommand() throws Exception {"},{"lineNumber":539,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewCalendarCommand.COMMAND_ALIAS) instanceof ViewCalendarCommand);"},{"lineNumber":540,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"cal DAY\") instanceof ViewCalendarCommand);"},{"lineNumber":541,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":544,"author":{"gitID":"-"},"content":"    public void parseCommand_viewBackCommand_returnsViewBackCommand() throws Exception {"},{"lineNumber":545,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewBackCommand.COMMAND_WORD) instanceof ViewBackCommand);"},{"lineNumber":546,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calendarback 2\") instanceof ViewBackCommand);"},{"lineNumber":547,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":550,"author":{"gitID":"-"},"content":"    public void parseCommand_viewBackCommandAlias_returnsViewBackCommand() throws Exception {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewBackCommand.COMMAND_ALIAS) instanceof ViewBackCommand);"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calback 2\") instanceof ViewBackCommand);"},{"lineNumber":553,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":556,"author":{"gitID":"-"},"content":"    public void parseCommand_viewNextCommand_returnsViewNextCommand() throws Exception {"},{"lineNumber":557,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewNextCommand.COMMAND_WORD) instanceof ViewNextCommand);"},{"lineNumber":558,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calendarnext 1\") instanceof ViewNextCommand);"},{"lineNumber":559,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":562,"author":{"gitID":"-"},"content":"    public void parseCommand_viewNextCommandAlias_returnsViewNextCommand() throws Exception {"},{"lineNumber":563,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewNextCommand.COMMAND_ALIAS) instanceof ViewNextCommand);"},{"lineNumber":564,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calnext 1\") instanceof ViewNextCommand);"},{"lineNumber":565,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":568,"author":{"gitID":"-"},"content":"    public void parseCommand_viewTodayCommand_returnsViewTodayCommand() throws Exception {"},{"lineNumber":569,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewTodayCommand.COMMAND_WORD) instanceof ViewTodayCommand);"},{"lineNumber":570,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"calendartoday 5\") instanceof ViewTodayCommand);"},{"lineNumber":571,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":574,"author":{"gitID":"-"},"content":"    public void parseCommand_viewTodayCommandAlias_returnsViewTodayCommand() throws Exception {"},{"lineNumber":575,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ViewTodayCommand.COMMAND_ALIAS) instanceof ViewTodayCommand);"},{"lineNumber":576,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"caltoday 5\") instanceof ViewTodayCommand);"},{"lineNumber":577,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":578,"author":{"gitID":"-"},"content":""},{"lineNumber":579,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":580,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":581,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":582,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":583,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":584,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":587,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":588,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":589,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":590,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":591,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":592,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":420,"amad-person":172}},{"path":"src/test/java/seedu/address/logic/parser/AddOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_BOOKS;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_BOOKS;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_CHOC;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOOKS;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHOC;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOOKS;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHOC;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_STATUS_CHOC;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandParserTest {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    private final AddOrderCommandParser parser \u003d new AddOrderCommandParser();"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        Order expectedOrder \u003d new OrderBuilder()"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_CHOC)"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"                .withOrderStatus(VALID_ORDER_STATUS_CHOC)"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_CHOC)"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_CHOC)"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_CHOC)"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"                        + INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"                new AddOrderCommand(INDEX_FIRST_PERSON, expectedOrder));"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        // multiple order information strings - last order information string accepted"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_BOOKS + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"                new AddOrderCommand(INDEX_FIRST_PERSON, expectedOrder));"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        // multiple prices - last price accepted"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_BOOKS + PRICE_DESC_CHOC"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"                        + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"                new AddOrderCommand(INDEX_FIRST_PERSON, expectedOrder));"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        // multiple quantities - last quantity accepted"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"                        + QUANTITY_DESC_BOOKS + QUANTITY_DESC_CHOC"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                new AddOrderCommand(INDEX_FIRST_PERSON, expectedOrder));"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        // multiple delivery dates - last delivery date accepted"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                        + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_BOOKS + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                new AddOrderCommand(INDEX_FIRST_PERSON, expectedOrder));"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        // missing order information prefix"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + VALID_ORDER_INFORMATION_CHOC"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        // missing price prefix"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"                        + VALID_PRICE_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        // missing quantity prefix"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + VALID_QUANTITY_CHOC"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        // missing delivery date prefix"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"                        + VALID_DELIVERY_DATE_CHOC,"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        // all prefixes missing"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + VALID_ORDER_INFORMATION_CHOC"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"                        + VALID_PRICE_CHOC + VALID_QUANTITY_CHOC"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"                        + VALID_DELIVERY_DATE_CHOC,"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        // invalid order information"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + INVALID_ORDER_INFORMATION_DESC"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        // invalid price"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"                        + INVALID_PRICE_DESC + QUANTITY_DESC_CHOC"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"                Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        // invalid quantity"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + INVALID_QUANTITY_DESC"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"                        + DELIVERY_DATE_DESC_CHOC,"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"                Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        // invalid delivery date"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + ORDER_INFORMATION_DESC_CHOC"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"                        + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"                DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, INDEX_FIRST_PERSON.getOneBased() + INVALID_ORDER_INFORMATION_DESC"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"                        + PRICE_DESC_CHOC + QUANTITY_DESC_CHOC"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"                        + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        // non-empty preamble"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_CHOC + PRICE_DESC_CHOC"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_CHOC, MESSAGE_INVALID_FORMAT);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":160}},{"path":"src/test/java/seedu/address/logic/parser/CalendarJumpCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_DATE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE_STRING;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.CalendarJumpCommand;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarJumpCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarJumpCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarJumpCommandParser parser \u003d new CalendarJumpCommandParser();"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing Target Date prefix"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, NORMAL_DATE_STRING,"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_invalidTargetDate_failure() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \" \" + PREFIX_TARGET_DATE + \"06.06.1990\", MESSAGE_INVALID_DATE_FORMAT);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validTargetDate_success() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \" \" + PREFIX_TARGET_DATE + NORMAL_DATE_STRING,"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarJumpCommand(NORMAL_DATE, NORMAL_DATE_STRING));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/AddEntryCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_GET_BOOKS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_MEET_SUPPLIER;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_GET_BOOKS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MEET_SUPPLIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_GET_BOOKS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_MEET_SUPPLIER;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENTRY_TITLE_DESC;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_LATER_THAN_END_DATE_DESC;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_LATER_THAN_END_TIME_DESC;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_LESS_THAN_FIFTEEN_MINUTES_FROM_END_TIME_DESC;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_GET_BOOKS;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_MEET_SUPPLIER;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_GET_BOOKS;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MEET_SUPPLIER;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_SUPPLIER;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_SUPPLIER;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_MEET_SUPPLIER;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_SUPPLIER;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_SUPPLIER;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.AddEntryCommandParser.STANDARD_START_TIME;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.EntryTimeConstraintsUtil;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEntryCommand.MESSAGE_USAGE);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    private AddEntryCommandParser parser \u003d new AddEntryCommandParser();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        // whitespace only preamble"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple entry title strings - last entry title string accepted"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple start date strings - last start date string accepted"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, START_DATE_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple end date strings - last end date string accepted"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, END_DATE_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple start time strings - last start time string accepted"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, START_TIME_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple end time strings - last end time string accepted"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, END_TIME_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                        + ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        // No start Date - Start Date should match End Date"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        // No Start Time - Start Time equals to 00:00"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(STANDARD_START_TIME)"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        // No Start Date and No Start Time"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCalEvent \u003d new CalendarEntryBuilder()"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(STANDARD_START_TIME)"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"                new AddEntryCommand(expectedCalEvent));"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing Event Title prefix"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  VALID_ENTRY_TITLE_MEET_SUPPLIER"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing End Date prefix"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + VALID_END_DATE_MEET_SUPPLIER"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        // Missing End Time prefix"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_END_TIME_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        // All prefixes missing"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  VALID_ENTRY_TITLE_MEET_SUPPLIER"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_START_DATE_MEET_SUPPLIER + VALID_END_DATE_MEET_SUPPLIER"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"                        + VALID_END_TIME_MEET_SUPPLIER + VALID_START_TIME_MEET_SUPPLIER,"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Event Title"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  INVALID_ENTRY_TITLE_DESC"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Start Date"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"                        + INVALID_START_DATE_DESC + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"                StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid End Date"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + INVALID_END_DATE_DESC"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"                EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid Start Time"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER + INVALID_START_TIME_DESC,"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"                StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"        // Invalid End Time"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser,  ENTRY_TITLE_DESC_MEET_SUPPLIER"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"                        + START_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"                        + INVALID_END_TIME_DESC + START_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"                EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Date later than End Date"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + INVALID_START_DATE_LATER_THAN_END_DATE_DESC"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTimeConstraintsUtil.START_AND_END_DATE_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Time later than End Time for same Start Date and End Date"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_SUPPLIER + INVALID_START_TIME_LATER_THAN_END_TIME_DESC"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTimeConstraintsUtil.START_AND_END_TIME_CONSTRAINTS);"},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"        // Start Time less than 15 minutes from End Time for same Start Date and End Date"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, ENTRY_TITLE_DESC_MEET_SUPPLIER + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_DATE_DESC_MEET_SUPPLIER + INVALID_START_TIME_LESS_THAN_FIFTEEN_MINUTES_FROM_END_TIME_DESC"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"                        + END_TIME_DESC_MEET_SUPPLIER,"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTimeConstraintsUtil.ENTRY_DURATION_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":218,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/ExportListedOrdersCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import static seedu.address.logic.parser.ExportListedOrdersCommandParser.MESSAGE_FILENAME_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"public class ExportListedOrdersCommandParserTest {"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":"    private ExportListedOrdersCommandParser parser \u003d new ExportListedOrdersCommandParser();"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":"    public void parse_invalidArgsWrongFormat_throwsParseException() {"},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":"        assertParseFailure(parser, \"aaa!\", MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":"    public void parse_invalidArgsTooLong_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"        assertParseFailure(parser, \"123451234512345123451234512345X\", MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":22}},{"path":"src/test/java/seedu/address/logic/parser/FindPreferenceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private FindPreferenceCommandParser parser \u003d new FindPreferenceCommandParser();"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_validArgs_returnsFindPreferenceCommand() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand expectedFindPreferenceCommand \u003d"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(\"Computers\", \"Shoes\")));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \"Computers Shoes\", expectedFindPreferenceCommand);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, \" \\n Computers \\n \\t Shoes  \\t\", expectedFindPreferenceCommand);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":32,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/EntryListClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryListClearCommandTest {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_emptyCalendarManager_success() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(prepareCommand(model), model, EntryListClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_nonEmptyCalendarManager_success() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendarManagerWithEntries(),"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(prepareCommand(model), model, EntryListClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * Generates a new {@code EntryListClearCommand} which upon execution,"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     * clears the CalendarManager in {@code model}."},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    private EntryListClearCommand prepareCommand(Model model) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        EntryListClearCommand command \u003d new EntryListClearCommand();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":39,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/EditEntryCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_GET_BOOKS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_MEET_SUPPLIER;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_GET_BOOKS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MEET_SUPPLIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_GET_BOOKS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENTRY_TITLE_DESC_MEET_SUPPLIER;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ENTRY_TITLE_DESC;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_GET_BOOKS;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_MEET_SUPPLIER;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_GET_BOOKS;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MEET_SUPPLIER;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_GET_BOOKS;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_SUPPLIER;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_GET_BOOKS;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_SUPPLIER;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_GET_BOOKS;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_MEET_SUPPLIER;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_GET_BOOKS;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_SUPPLIER;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_GET_BOOKS;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_SUPPLIER;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTRY;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.EditEntryDescriptorBuilder;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"public class EditEntryCommandParserTest {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEntryCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    private EditEntryCommandParser parser \u003d new EditEntryCommandParser();"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        // no index specified"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, VALID_ENTRY_TITLE_MEET_SUPPLIER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // no field specified"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\", EditEntryCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // no index and no field specified"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // negative index"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"-5\" + ENTRY_TITLE_DESC_MEET_SUPPLIER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        // zero index"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"0\" + ENTRY_TITLE_DESC_MEET_SUPPLIER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ENTRY_TITLE_DESC,"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS); // invalid entry title"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                + INVALID_START_DATE_DESC, StartDate.MESSAGE_START_DATE_CONSTRAINTS); // invalid start date"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_END_DATE_DESC,"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"                EndDate.MESSAGE_END_DATE_CONSTRAINTS); // invalid end date"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_START_TIME_DESC,"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                StartTime.MESSAGE_START_TIME_CONSTRAINTS); // invalid start time"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_END_TIME_DESC,"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"                EndTime.MESSAGE_END_TIME_CONSTRAINTS); // invalid end time"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid entry title followed by valid start date"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ENTRY_TITLE_DESC + START_DATE_DESC_MEET_SUPPLIER,"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"                EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        // valid start date followed by invalid start date"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + START_DATE_DESC_MEET_SUPPLIER + INVALID_START_DATE_DESC,"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseFailure(parser, \"1\" + INVALID_END_DATE_DESC + INVALID_END_TIME_DESC"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"                + VALID_ENTRY_TITLE_MEET_SUPPLIER, EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        Index targetIndex \u003d INDEX_SECOND_ENTRY;"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + ENTRY_TITLE_DESC_MEET_SUPPLIER + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"                + END_DATE_DESC_MEET_SUPPLIER + START_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_MEET_SUPPLIER;"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENTRY;"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + ENTRY_TITLE_DESC_GET_BOOKS + END_DATE_DESC_GET_BOOKS;"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS)"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_GET_BOOKS).build();"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        Index targetIndex \u003d INDEX_THIRD_ENTRY;"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        // entry title"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + ENTRY_TITLE_DESC_GET_BOOKS;"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS).build();"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        // start date"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_GET_BOOKS;"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartDate(VALID_START_DATE_GET_BOOKS).build();"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        // end date"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + END_DATE_DESC_GET_BOOKS;"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_GET_BOOKS).build();"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"        // start time"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + START_TIME_DESC_GET_BOOKS;"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_GET_BOOKS).build();"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"        // end time"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + END_TIME_DESC_GET_BOOKS;"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_GET_BOOKS).build();"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        Index targetIndex \u003d INDEX_SECOND_ENTRY;"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased()"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"                + ENTRY_TITLE_DESC_MEET_SUPPLIER + ENTRY_TITLE_DESC_GET_BOOKS"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"                + START_DATE_DESC_GET_BOOKS + START_DATE_DESC_MEET_SUPPLIER"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"                + END_DATE_DESC_MEET_SUPPLIER + END_DATE_DESC_GET_BOOKS"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"                + START_TIME_DESC_GET_BOOKS + START_TIME_DESC_MEET_SUPPLIER"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"                + END_TIME_DESC_MEET_SUPPLIER + END_TIME_DESC_GET_BOOKS;"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS).withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndDate(VALID_END_DATE_GET_BOOKS).withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_GET_BOOKS).build();"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"    public void invalidValueFollowedByValidValue_success() {"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        // no other valid values specified"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"        Index targetIndex \u003d INDEX_FIRST_ENTRY;"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ENTRY_TITLE_DESC + ENTRY_TITLE_DESC_GET_BOOKS;"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS).build();"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":"        // other valid values specified"},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"        userInput \u003d targetIndex.getOneBased() + END_TIME_DESC_MEET_SUPPLIER + INVALID_START_DATE_DESC"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"                + ENTRY_TITLE_DESC_MEET_SUPPLIER + START_DATE_DESC_MEET_SUPPLIER;"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"                .withEndTime(VALID_END_TIME_MEET_SUPPLIER).withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER).build();"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"        expectedCommand \u003d new EditEntryCommand(targetIndex, descriptor);"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":222,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/CalendarJumpCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.LEAP_YEAR_DATE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.LEAP_YEAR_DATE_STRING;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.NORMAL_DATE_STRING;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarJumpCommandTest {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullDate_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        new CalendarJumpCommand(null, LEAP_YEAR_DATE_STRING);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullDateString_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        new CalendarJumpCommand(LEAP_YEAR_DATE, null);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validDateAndDateStringGiven_success() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertSwitchDateSuccess(LEAP_YEAR_DATE, LEAP_YEAR_DATE_STRING);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarJumpCommand calendarJumpFirstCommand \u003d new CalendarJumpCommand(LEAP_YEAR_DATE, LEAP_YEAR_DATE_STRING);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarJumpCommand calendarJumpSecondCommand \u003d new CalendarJumpCommand(NORMAL_DATE, LEAP_YEAR_DATE_STRING);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarJumpCommand calendarJumpThirdCommand \u003d new CalendarJumpCommand(LEAP_YEAR_DATE, NORMAL_DATE_STRING);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarJumpFirstCommand.equals(calendarJumpFirstCommand));"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarJumpCommand calendarJumpFirstCommandCopy \u003d"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarJumpCommand(LEAP_YEAR_DATE, LEAP_YEAR_DATE_STRING);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(calendarJumpFirstCommand.equals(calendarJumpFirstCommandCopy));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        // different date -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarJumpFirstCommand.equals(calendarJumpSecondCommand));"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        // different dateString -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarJumpFirstCommand.equals(calendarJumpThirdCommand));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarJumpFirstCommand.equals(1));"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(calendarJumpFirstCommand.equals(null));"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code CalendarJumpCommand},"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarDateRequestEvent} is raised with the given {@code LocalDate}."},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertSwitchDateSuccess(LocalDate date, String dateString) {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarJumpCommand calendarJumpCommand \u003d new CalendarJumpCommand(date, dateString);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d calendarJumpCommand.execute();"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(String.format(CalendarJumpCommand.MESSAGE_CALENDAR_JUMP_SUCCESS, dateString),"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarDateRequestEvent);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarDateRequestEvent lastEvent \u003d (ChangeCalendarDateRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(date, lastEvent.getDate());"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":92,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ViewTodayCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_TODAY;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewTodayCommandTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_viewTodayCommand_success() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowTodaySuccess();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        ViewTodayCommand viewTodayCommand \u003d new ViewTodayCommand();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewTodayCommand.equals(viewTodayCommand));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        ViewTodayCommand viewTodayCommandCopy \u003d new ViewTodayCommand();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewTodayCommand.equals(viewTodayCommandCopy));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewTodayCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewTodayCommand.equals(null));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewTodayCommand},"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarPageRequestEvent} is raised with the Request Type \"Today\"."},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowTodaySuccess() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        ViewTodayCommand viewNextCommand \u003d new ViewTodayCommand();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewNextCommand.execute();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(ViewTodayCommand.MESSAGE_VIEW_CALENDAR_TODAY_SUCCESS,"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarPageRequestEvent);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarPageRequestEvent lastEvent \u003d (ChangeCalendarPageRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(REQUEST_TODAY, lastEvent.getRequestType());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":62,"-":1}},{"path":"src/test/java/seedu/address/logic/parser/EditOrderCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_INFORMATION_DESC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_BOOKS;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_CHOC;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_INFORMATION_DESC_COMPUTER;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_BOOKS;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_CHOC;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PRICE_DESC_COMPUTER;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_BOOKS;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_CHOC;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_COMPUTER;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOOKS;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOOKS;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.EditOrderDescriptorBuilder;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandParserTest {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    private final EditOrderCommandParser parser \u003d new EditOrderCommandParser();"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        // no index specified"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, VALID_ORDER_INFORMATION_COMPUTER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        // no field specified"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\", EditOrderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        // no index and no field specified"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        // negative index"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"-5\" + ORDER_INFORMATION_DESC_COMPUTER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        // zero index"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"0\" + ORDER_INFORMATION_DESC_COMPUTER, MESSAGE_INVALID_FORMAT);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ORDER_INFORMATION_DESC,"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS); // invalid order information"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_PRICE_CONSTRAINTS); // invalid price"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_QUANTITY_DESC,"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                Quantity.MESSAGE_QUANTITY_CONSTRAINTS); // invalid quantity"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"                DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS); // invalid address"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        // invalid order information followed by valid price"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ORDER_INFORMATION_DESC + PRICE_DESC_COMPUTER,"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        // valid quantity followed by invalid quantity. The test case for invalid quantity followed by valid quantity"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + QUANTITY_DESC_COMPUTER + INVALID_QUANTITY_DESC,"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC + INVALID_QUANTITY_DESC"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"                + VALID_ORDER_INFORMATION_COMPUTER, Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_ORDER;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_COMPUTER"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + QUANTITY_DESC_COMPUTER + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditOrderCommand expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        Index targetIndex \u003d INDEX_FIRST_ORDER;"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BOOKS + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_BOOKS)"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        Index targetIndex \u003d INDEX_THIRD_ORDER;"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        // order information"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        String userInput \u003d targetIndex.getOneBased() + ORDER_INFORMATION_DESC_CHOC;"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_CHOC).build();"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        // price"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHOC;"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_CHOC).build();"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        // quantity"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_CHOC;"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_CHOC).build();"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        // delivery date"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        userInput \u003d targetIndex.getOneBased() + DELIVERY_DATE_DESC_CHOC;"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_CHOC).build();"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        Index targetIndex \u003d INDEX_SECOND_ORDER;"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        String userInput \u003d targetIndex.getOneBased() + ORDER_INFORMATION_DESC_CHOC + ORDER_INFORMATION_DESC_BOOKS"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"                + ORDER_INFORMATION_DESC_COMPUTER + PRICE_DESC_CHOC + PRICE_DESC_BOOKS + QUANTITY_DESC_COMPUTER"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_CHOC + DELIVERY_DATE_DESC_COMPUTER;"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).withPrice(VALID_PRICE_BOOKS)"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_CHOC).withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"    public void invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        // no other valid values specified"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"        Index targetIndex \u003d INDEX_FIRST_ORDER;"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_QUANTITY_DESC + QUANTITY_DESC_CHOC;"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withQuantity(VALID_QUANTITY_CHOC).build();"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_BOOKS + INVALID_QUANTITY_DESC + DELIVERY_DATE_DESC_COMPUTER"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"                + QUANTITY_DESC_BOOKS;"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_BOOKS).withQuantity(VALID_QUANTITY_BOOKS)"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER).build();"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"        expectedCommand \u003d new EditOrderCommand(targetIndex, descriptor);"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"-":17,"amad-person":187}},{"path":"src/test/java/seedu/address/logic/commands/EditOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_COMICBOOK;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_COMPUTER;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOOKS;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOOKS;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.EditOrderDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":" * for EditOrderCommand."},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandTest {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithOrders(), new CalendarManager(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        Index indexLastOrder \u003d Index.fromOneBased(model.getFilteredOrderList().size());"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Order lastOrder \u003d model.getFilteredOrderList().get(indexLastOrder.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        OrderBuilder orderInList \u003d new OrderBuilder(lastOrder);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d orderInList.withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"                .withPrice(VALID_PRICE_CHOC).withQuantity(VALID_QUANTITY_BOOKS)"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_BOOKS).build();"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).withPrice(VALID_PRICE_CHOC)"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_BOOKS).withDeliveryDate(VALID_DELIVERY_DATE_BOOKS)"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"                .build();"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(indexLastOrder, descriptor);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(lastOrder, editedOrder);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        Index indexLastOrder \u003d Index.fromOneBased(model.getFilteredOrderList().size());"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        Order lastOrder \u003d model.getFilteredOrderList().get(indexLastOrder.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        OrderBuilder orderInList \u003d new OrderBuilder(lastOrder);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d orderInList.withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER).build();"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                .withQuantity(VALID_QUANTITY_COMPUTER).build();"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(indexLastOrder, descriptor);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(lastOrder, editedOrder);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER, new EditOrderDescriptor());"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(EditOrderCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(model.getFilteredOrderList().get(0), editedOrder);"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(editOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * This test is failing on Gradle, but passing on IntelliJ JUnit Test."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void execute_duplicateOrderUnfilteredList_failure() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Order firstOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(firstOrder).build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_SECOND_ORDER, descriptor);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editOrderCommand, model, EditOrderCommand.MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidOrderIndexUnfilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).build();"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(editOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        Order editedOrder \u003d new OrderBuilder().build();"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        Order orderToEdit \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER, descriptor);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        // edit -\u003e first order edited"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        editOrderCommand.execute();"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"        undoRedoStack.push(editOrderCommand);"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        // undo -\u003e reverts address book back to previous state and filtered order list to show all orders"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        // redo -\u003e same first order edited again"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrder(orderToEdit, editedOrder);"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder()"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"                .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER).build();"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e editOrderCommand not pushed into undoRedoStack"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(editOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"    public void equals() throws Exception {"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        final EditOrderCommand firstCommand \u003d prepareCommand(INDEX_FIRST_ORDER, DESC_COMPUTER);"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor copyDescriptor \u003d new EditOrderDescriptor(DESC_COMPUTER);"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand firstCommandCopy \u003d prepareCommand(INDEX_FIRST_ORDER, copyDescriptor);"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"        firstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(firstCommandCopy));"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"        // different index -\u003e returns false"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(new EditOrderCommand(INDEX_SECOND_ORDER, DESC_COMPUTER)));"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstCommand.equals(new EditOrderCommand(INDEX_FIRST_ORDER, DESC_COMICBOOK)));"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"     * Returns an {@code EditOrderCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"    private EditOrderCommand prepareCommand(Index index, EditOrderDescriptor descriptor) {"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand editOrderCommand \u003d new EditOrderCommand(index, descriptor);"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"        editOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"        return editOrderCommand;"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"-":14,"amad-person":205}},{"path":"src/test/java/seedu/address/logic/commands/DeleteOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":" * {@code DeleteOrderCommand}."},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandTest {"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithOrders(), new CalendarManager(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(DeleteOrderCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(),"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        expectedModel.deleteOrder(orderToDelete);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(deleteOrderCommand, model, expectedMessage, expectedModel);"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        // delete -\u003e first order deleted"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        deleteOrderCommand.execute();"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        undoRedoStack.push(deleteOrderCommand);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        // undo -\u003e reverts address book back to previous state and order list to show all orders"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        // redo -\u003e same first order deleted again"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        expectedModel.deleteOrder(orderToDelete);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e deleteOrderCommand not pushed into undoRedoStack"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(deleteOrderCommand, model, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    public void equals() throws Exception {"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteFirstOrderCommand \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteSecondOrderCommand \u003d prepareCommand(INDEX_SECOND_ORDER);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        assertTrue(deleteFirstOrderCommand.equals(deleteFirstOrderCommand));"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteFirstOrderCommandCopy \u003d prepareCommand(INDEX_FIRST_ORDER);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        assertTrue(deleteFirstOrderCommand.equals(deleteFirstOrderCommandCopy));"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        deleteFirstOrderCommandCopy.preprocessUndoableCommand();"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(deleteFirstOrderCommandCopy));"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(1));"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(null));"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        // different order -\u003e returns false"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        assertFalse(deleteFirstOrderCommand.equals(deleteSecondOrderCommand));"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"     * Returns a {@code DeleteOrderCommand} with the parameter {@code index}."},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    private DeleteOrderCommand prepareCommand(Index index) {"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"        DeleteOrderCommand deleteOrderCommand \u003d new DeleteOrderCommand(index);"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        deleteOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        return deleteOrderCommand;"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":133}},{"path":"src/test/java/seedu/address/logic/commands/DeleteGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" * {@code DeleteGroupCommand}."},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandTest {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validGroup_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d FRIENDS;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(FRIENDS);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeleteGroupCommand.MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(),"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deleteGroupCommand, model, expectedMessage, expectedModel);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_nonexistentGroup_throwsCommandException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d new Group(\"friend\");"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteGroupCommand, model, DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validGroup_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d FRIENDS;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e friends group deleted"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        deleteGroupCommand.execute();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deleteGroupCommand);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same group deleted again"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteGroup(groupToDelete);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidGroup_failure() {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        Group groupToDelete \u003d new Group(\"friend\");"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d prepareCommand(groupToDelete);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deleteGroupCommand not pushed into undoRedoStack"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteGroupCommand, model, DeleteGroupCommand.MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupFirstCommand \u003d prepareCommand(FRIENDS);"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupSecondCommand \u003d prepareCommand(COLLEAGUES);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommand));"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupFirstCommandCopy \u003d prepareCommand(FRIENDS);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteGroupFirstCommand.equals(deleteGroupFirstCommandCopy));"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteGroupFirstCommand.equals(1));"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteGroupFirstCommand.equals(null));"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        // different preference -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteGroupFirstCommand.equals(deleteGroupSecondCommand));"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeleteGroupCommand} with the parameter {@code group}."},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteGroupCommand prepareCommand(Group group) {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteGroupCommand deleteGroupCommand \u003d new DeleteGroupCommand(group);"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        deleteGroupCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        return deleteGroupCommand;"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":118,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ListOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListOrderCommand."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"public class ListOrderCommandTest {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private ListOrderCommand listOrderCommand;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithOrders(),  new CalendarManager(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        listOrderCommand \u003d new ListOrderCommand();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        listOrderCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(listOrderCommand, model, ListOrderCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DisplayOrderListEvent);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/DeletePreferenceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":" * {@code DeletePreferenceCommand}."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandTest {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validPreference_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d SHOES;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(SHOES);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeletePreferenceCommand.MESSAGE_DELETE_PREFERENCE_SUCCESS, prefToDelete);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(),"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deletePreference(prefToDelete);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deletePrefCommand, model, expectedMessage, expectedModel);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_nonexistentPreference_throwsCommandException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d new Preference(\"shoe\");"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deletePrefCommand, model, DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validPreference_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d SHOES;"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e shoes preference deleted"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        deletePrefCommand.execute();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deletePrefCommand);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same preference deleted again"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deletePreference(prefToDelete);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidPreference_failure() {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        Preference prefToDelete \u003d new Preference(\"shoe\");"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d prepareCommand(prefToDelete);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deletePrefCommand not pushed into undoRedoStack"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deletePrefCommand, model, DeletePreferenceCommand.MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefFirstCommand \u003d prepareCommand(SHOES);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefSecondCommand \u003d prepareCommand(COMPUTERS);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deletePrefFirstCommand.equals(deletePrefFirstCommand));"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefFirstCommandCopy \u003d prepareCommand(SHOES);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deletePrefFirstCommand.equals(deletePrefFirstCommandCopy));"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deletePrefFirstCommand.equals(1));"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deletePrefFirstCommand.equals(null));"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        // different preference -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deletePrefFirstCommand.equals(deletePrefSecondCommand));"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeletePreferenceCommand} with the parameter {@code preference}."},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    private DeletePreferenceCommand prepareCommand(Preference preference) {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        DeletePreferenceCommand deletePrefCommand \u003d new DeletePreferenceCommand(preference);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        deletePrefCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        return deletePrefCommand;"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":119,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ViewNextCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_NEXT;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewNextCommandTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_viewNextCommand_success() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowNextPageSuccess();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        ViewNextCommand viewNextFirstCommand \u003d new ViewNextCommand();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewNextFirstCommand.equals(viewNextFirstCommand));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        ViewNextCommand viewNextFirstCommandCopy \u003d new ViewNextCommand();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewNextFirstCommand.equals(viewNextFirstCommandCopy));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewNextFirstCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewNextFirstCommand.equals(null));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewNextCommand},"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarPageRequestEvent} is raised with the Request Type \"Next\"."},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowNextPageSuccess() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        ViewNextCommand viewNextCommand \u003d new ViewNextCommand();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewNextCommand.execute();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(ViewNextCommand.MESSAGE_VIEW_CALENDAR_NEXT_SUCCESS,"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarPageRequestEvent);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarPageRequestEvent lastEvent \u003d (ChangeCalendarPageRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(REQUEST_NEXT, lastEvent.getRequestType());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":62,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/EditEntryDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GET_BOOKS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MEET_SUPPLIER;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_SUPPLIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_SUPPLIER;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_MEET_SUPPLIER;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_SUPPLIER;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_SUPPLIER;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.EditEntryDescriptorBuilder;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class EditEntryDescriptorTest {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptorWithSameValues \u003d new EditEntryDescriptor(DESC_GET_BOOKS);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DESC_GET_BOOKS.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DESC_GET_BOOKS.equals(DESC_GET_BOOKS));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(null));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(5));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(DESC_MEET_SUPPLIER));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        // different entry title -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor editedBoss \u003d new EditEntryDescriptorBuilder(DESC_GET_BOOKS)"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER).build();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(editedBoss));"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        // different start date -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        editedBoss \u003d new EditEntryDescriptorBuilder(DESC_GET_BOOKS).withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                .build();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(editedBoss));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        // different end date -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        editedBoss \u003d new EditEntryDescriptorBuilder(DESC_GET_BOOKS).withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                .build();"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(editedBoss));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        // different start time -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        editedBoss \u003d new EditEntryDescriptorBuilder(DESC_GET_BOOKS).withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .build();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(editedBoss));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        // different end time -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        editedBoss \u003d new EditEntryDescriptorBuilder(DESC_GET_BOOKS).withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DESC_GET_BOOKS.equals(editedBoss));"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":61,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ViewBackCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_BACK;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewBackCommandTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_viewBackCommand_success() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowPreviousPageSuccess();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        ViewBackCommand viewBackCommand \u003d new ViewBackCommand();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewBackCommand.equals(viewBackCommand));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        ViewBackCommand viewBackCommandCopy \u003d new ViewBackCommand();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewBackCommand.equals(viewBackCommandCopy));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewBackCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewBackCommand.equals(null));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewBackCommand},"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarPageRequestEvent} is raised with the Request Type \"Back\"."},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowPreviousPageSuccess() {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        ViewBackCommand viewBackCommand \u003d new ViewBackCommand();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewBackCommand.execute();"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(ViewBackCommand.MESSAGE_VIEW_CALENDAR_BACK_SUCCESS,"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarPageRequestEvent);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarPageRequestEvent lastEvent \u003d (ChangeCalendarPageRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(REQUEST_BACK, lastEvent.getRequestType());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":62,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ViewCalendarCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.DAY_VIEW;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.MONTH_VIEW;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.WEEK_VIEW;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewRequestEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewCalendarCommandTest {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_showDayView_success() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowDayViewSuccess(\"Day\"); // Matches exact keyword in ViewCalendarCommand.DAY_VIEW"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowDayViewSuccess(\"DAY\"); // Case insensitive -\u003e Success"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowDayViewSuccess(\"\"); // Empty string -\u003e Success as Calendar shows Day page by default."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowDayViewSuccess(\"invalidDay\"); // Parameter not matching the accepted keyword -\u003e Success"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_showWeekView_success() {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowWeekViewSuccess(\"Week\"); // Matches exact keyword in ViewCalendarCommand.WEEK_VIEW"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowWeekViewSuccess(\"WEEK\"); // Case insensitive -\u003e Success"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowWeekViewSuccess(\"  Week  \"); //Trailing whitespaces -\u003e Success"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_showMonthView_success() {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowMonthViewSuccess(\"Month\"); // Matches exact keyword in ViewCalendarCommand.MONTH_VIEW"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowMonthViewSuccess(\"MONTH\"); // Case insensitive -\u003e Success"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertShowMonthViewSuccess(\"  month  \"); //Trailing whitespaces -\u003e Success"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand viewCalendarFirstCommand \u003d new ViewCalendarCommand(DAY_VIEW);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand viewCalendarSecondCommand \u003d new ViewCalendarCommand(WEEK_VIEW);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewCalendarFirstCommand.equals(viewCalendarFirstCommand));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand selectFirstCommandCopy \u003d new ViewCalendarCommand(DAY_VIEW);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(viewCalendarFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewCalendarFirstCommand.equals(1));"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewCalendarFirstCommand.equals(null));"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        // different view -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(viewCalendarFirstCommand.equals(viewCalendarSecondCommand));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewCalendarCommand} with the given {@code view},"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarViewRequestEvent} is raised with the day view."},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowDayViewSuccess(String view) {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d new ViewCalendarCommand(view);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewCalendarCommand.execute();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(String.format(ViewCalendarCommand.MESSAGE_SHOW_CALENDAR_SUCCESS, DAY_VIEW),"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarViewRequestEvent);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarViewRequestEvent lastEvent \u003d (ChangeCalendarViewRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(DAY_VIEW, lastEvent.getView());"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewCalendarCommand} with the given {@code view},"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarViewRequestEvent} is raised with the week view."},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowWeekViewSuccess(String view) {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d new ViewCalendarCommand(view);"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewCalendarCommand.execute();"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(String.format(ViewCalendarCommand.MESSAGE_SHOW_CALENDAR_SUCCESS,"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"                    WEEK_VIEW), commandResult.feedbackToUser);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarViewRequestEvent);"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarViewRequestEvent lastEvent \u003d (ChangeCalendarViewRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(WEEK_VIEW, lastEvent.getView());"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"     * Executes a {@code ViewCalendarCommand} with the given {@code view},"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     * and checks that {@code ChangeCalendarViewRequestEvent} is raised with the month view."},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertShowMonthViewSuccess(String view) {"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        ViewCalendarCommand viewCalendarCommand \u003d new ViewCalendarCommand(view);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"            CommandResult commandResult \u003d viewCalendarCommand.execute();"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"            assertEquals(String.format(ViewCalendarCommand.MESSAGE_SHOW_CALENDAR_SUCCESS,"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"                    MONTH_VIEW), commandResult.feedbackToUser);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeCalendarViewRequestEvent);"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        ChangeCalendarViewRequestEvent lastEvent \u003d (ChangeCalendarViewRequestEvent) eventsCollectorRule.eventsCollector"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"                .getMostRecent();"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(MONTH_VIEW, lastEvent.getView());"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":127,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_INVALID_THEME;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_THEME_CHANGED_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEME;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.DARK_THEME_KEYWORD;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.LIGHT_THEME_KEYWORD;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        userPrefs \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        guiSettings \u003d userPrefs.getGuiSettings();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullTheme_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        new ChangeThemeCommand(null);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public void execute_themeAccepted_guiSettingsChanged() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeToLightCommand \u003d prepareCommand(LIGHT_THEME_KEYWORD);"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_THEME_CHANGED_SUCCESS, LIGHT_THEME_KEYWORD);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        UserPrefs expectedUserPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs.setGuiSettings("},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowHeight(),"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowWidth(),"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().x,"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().y,"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"                LIGHT_THEME_KEYWORD"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        );"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), model.getCalendarManager(), expectedUserPrefs);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(changeThemeToLightCommand, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeToDarkCommand \u003d prepareCommand(DARK_THEME_KEYWORD);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        expectedMessage \u003d String.format(MESSAGE_THEME_CHANGED_SUCCESS, DARK_THEME_KEYWORD);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs \u003d new UserPrefs();"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        expectedUserPrefs.setGuiSettings("},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowHeight(),"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowWidth(),"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().x,"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"                guiSettings.getWindowCoordinates().y,"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"                DARK_THEME_KEYWORD"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        );"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), model.getCalendarManager(), expectedUserPrefs);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(changeThemeToDarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidTheme_throwsCommandException() {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand invalidChangeThemeCommand \u003d prepareCommand(INVALID_THEME);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_THEME, INVALID_THEME);"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(invalidChangeThemeCommand, model, expectedMessage);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand darkThemeCommand \u003d new ChangeThemeCommand(DARK_THEME_KEYWORD);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand lightThemeCommand \u003d new ChangeThemeCommand(LIGHT_THEME_KEYWORD);"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        assertTrue(darkThemeCommand.equals(darkThemeCommand));"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        // same value -\u003e true"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand darkThemeCommandCopy \u003d new ChangeThemeCommand(DARK_THEME_KEYWORD);"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        assertTrue(darkThemeCommand.equals(darkThemeCommandCopy));"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        // different value -\u003e false"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(lightThemeCommand));"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(1));"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        // null -\u003e false"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        assertFalse(darkThemeCommand.equals(null));"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"    private ChangeThemeCommand prepareCommand(String theme) {"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        ChangeThemeCommand changeThemeCommand \u003d new ChangeThemeCommand(theme);"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        changeThemeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        return changeThemeCommand;"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":122}},{"path":"src/test/java/seedu/address/logic/commands/FindPreferenceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPreferenceCommand}."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandTest {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceFirstCommand \u003d new FindPreferenceCommand(firstPredicate);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceSecondCommand \u003d new FindPreferenceCommand(secondPredicate);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findPreferenceFirstCommand.equals(findPreferenceFirstCommand));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand findPreferenceFirstCommandCopy \u003d new FindPreferenceCommand(firstPredicate);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findPreferenceFirstCommand.equals(findPreferenceFirstCommandCopy));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(1));"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(null));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        // different predicates -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findPreferenceFirstCommand.equals(findPreferenceSecondCommand));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d prepareCommand(\" \");"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d prepareCommand(\"videoGames shoes\");"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, GEORGE));"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code userInput} into a {@code FindPreferenceCommand}."},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    private FindPreferenceCommand prepareCommand(String userInput) {"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        FindPreferenceCommand command \u003d"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"                new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(userInput"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                        .split(\"\\\\s+\"))));"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(FindPreferenceCommand command, String expectedMessage,"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"                                      List\u003cPerson\u003e expectedList) {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":101,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/ListCalendarEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCalendarEntryCommand."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"public class ListCalendarEntryCommandTest {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private ListCalendarEntryCommand listCalendarEntryCommand;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendarManagerWithEntries(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        listCalendarEntryCommand \u003d new ListCalendarEntryCommand();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        listCalendarEntryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(listCalendarEntryCommand, model, ListCalendarEntryCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DisplayCalendarEntryListEvent);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/AddOrderCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.FACEWASH;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.SHOES;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import java.util.function.Predicate;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":" * and unit tests for AddOrderCommand."},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandTest {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullOrder_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        new AddOrderCommand(null, null);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    public void execute_orderAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        ModelStubAcceptingOrderAdded modelStub \u003d new ModelStubAcceptingOrderAdded();"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        Order validOrder \u003d new OrderBuilder().build();"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        Person person \u003d model.getAddressBook().getPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        CommandResult commandResult \u003d getAddOrderCommandForOrder(INDEX_FIRST_PERSON, validOrder, modelStub).execute();"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        assertEquals(String.format(AddOrderCommand.MESSAGE_ADD_ORDER_SUCCESS,"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                person.getName(), validOrder), commandResult.feedbackToUser);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        assertEquals(Arrays.asList(validOrder), modelStub.ordersAdded);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    public void execute_duplicateOrder_throwsCommandException() throws Exception {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateOrderException();"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        Order validOrder \u003d new OrderBuilder().build();"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        thrown.expectMessage(AddOrderCommand.MESSAGE_ORDER_NOT_ADDED);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        getAddOrderCommandForOrder(INDEX_FIRST_PERSON, validOrder, modelStub).execute();"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        Order firstOrder \u003d SHOES;"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        Order secondOrder \u003d FACEWASH;"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand firstAddOrderCommmand \u003d new AddOrderCommand(INDEX_FIRST_PERSON, firstOrder);"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand secondAddOrderCommand \u003d new AddOrderCommand(INDEX_SECOND_PERSON, secondOrder);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e returns true"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstAddOrderCommmand.equals(firstAddOrderCommmand));"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        // same values -\u003e returns true"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand firstAddOrderCommandCopy \u003d new AddOrderCommand(INDEX_FIRST_PERSON, firstOrder);"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstAddOrderCommmand.equals(firstAddOrderCommandCopy));"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommmand.equals(1));"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        // null -\u003e return false"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommandCopy.equals(null));"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        // different person -\u003e return false"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstAddOrderCommmand.equals(secondAddOrderCommand));"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"     * Generates a new AddOrderCommand with the details of the given order."},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    private AddOrderCommand getAddOrderCommandForOrder(Index index, Order order, Model model) {"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        AddOrderCommand command \u003d new AddOrderCommand(index, order);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        return command;"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"     * A default model stub that has all of the irrelevant methods failing."},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"    private class ModelStub implements Model {"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        private final FilteredList\u003cPerson\u003e filteredPersons \u003d new FilteredList\u003c\u003e(model.getFilteredPersonList());"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"                throws DuplicatePersonException {"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        public void updateOrder(Order target, Order editedOrder) throws DuplicateOrderException {"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"        public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"                throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredPersonList();"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredOrderList();"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"            return model.getFilteredCalendarEntryList();"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        public Calendar getCalendar() {"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"            return null;"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"            filteredPersons.setPredicate(predicate);"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredCalendarEntryList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"        public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"        public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order orderToAdd) throws DuplicateOrderException {"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":"        public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":242,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"amad-person"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":244,"author":{"gitID":"amad-person"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":245,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":246,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":248,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":249,"author":{"gitID":"amad-person"},"content":"        public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":250,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":251,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":253,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"amad-person"},"content":"        public void updateCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":255,"author":{"gitID":"amad-person"},"content":"                throws DuplicateCalendarEntryException, CalendarEntryNotFoundException {"},{"lineNumber":256,"author":{"gitID":"amad-person"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":257,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":258,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":261,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"amad-person"},"content":"     * A Model stub that always throws a DuplicatePersonException when trying to add a person."},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":"    private class ModelStubThrowingDuplicateOrderException extends ModelStub {"},{"lineNumber":265,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order order) throws DuplicateOrderException {"},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":"            return new AddressBook();"},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":"            return new CalendarManager();"},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"     * A Model stub that always accepts the order being added."},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"    private class ModelStubAcceptingOrderAdded extends ModelStub {"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"        final ArrayList\u003cOrder\u003e ordersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":"        public void addOrderToOrderList(Order order) throws DuplicateOrderException {"},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"            requireNonNull(order);"},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":"            ordersAdded.add(order);"},{"lineNumber":291,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":293,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":294,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":295,"author":{"gitID":"amad-person"},"content":"            return new AddressBook();"},{"lineNumber":296,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":298,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":299,"author":{"gitID":"amad-person"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":300,"author":{"gitID":"amad-person"},"content":"            return new CalendarManager();"},{"lineNumber":301,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":304,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":304}},{"path":"src/test/java/seedu/address/logic/commands/AddEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommandTest {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        new AddEntryCommand(null);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_calendarEventAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        ModelStubAcceptingCalendarEntryAdded modelStub \u003d new ModelStubAcceptingCalendarEntryAdded();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry validEvent \u003d new CalendarEntryBuilder().build();"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d getAddEntryCommandForCalendarEvent(validEvent, modelStub).execute();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(String.format(AddEntryCommand.MESSAGE_ADD_ENTRY_SUCCESS, validEvent),"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.calendarEventsAdded);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCalendarEventException();"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry validEvent \u003d new CalendarEntryBuilder().build();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expectMessage(AddEntryCommand.MESSAGE_DUPLICATE_ENTRY);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        getAddEntryCommandForCalendarEvent(validEvent, modelStub).execute();"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry meetBoss \u003d new CalendarEntryBuilder().withEntryTitle(\"Meeting with boss\").build();"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry getSupplies \u003d new CalendarEntryBuilder().withEntryTitle(\"Get supplies\").build();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addMeetBossCommand \u003d new AddEntryCommand(meetBoss);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addGetSuppliesCommand \u003d new AddEntryCommand(getSupplies);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(addMeetBossCommand.equals(addMeetBossCommand));"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand addMeetBossCommandCopy \u003d new AddEntryCommand(meetBoss);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(addMeetBossCommand.equals(addMeetBossCommandCopy));"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        // different person -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(addMeetBossCommand.equals(addGetSuppliesCommand));"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"     * Generates a new AddEntryCommand with the details of the given calendar entry."},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    private AddEntryCommand getAddEntryCommandForCalendarEvent(CalendarEntry calEvent, Model model) {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        AddEntryCommand command \u003d new AddEntryCommand(calEvent);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStub implements Model {"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicatePersonException {"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        public Calendar getCalendar() {"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"            return null;"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredCalendarEntryList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":194,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":197,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":199,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":202,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"SuxianAlicia"},"content":"        public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":204,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"        public void addOrderToOrderList(Order orderToAdd) {"},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"        public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"        public void updateCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException, CalendarEntryNotFoundException {"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"     * A Model stub that always throws a DuplicateCalendarEntryException when trying to add a calendar entry."},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStubThrowingDuplicateCalendarEventException extends ModelStub {"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry toAdd)"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateCalendarEntryException();"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddressBook();"},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":254,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":255,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":258,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":259,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"SuxianAlicia"},"content":"     * A Model stub that always accepts the calendarEvent being added."},{"lineNumber":261,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"SuxianAlicia"},"content":"    private class ModelStubAcceptingCalendarEntryAdded extends ModelStub {"},{"lineNumber":263,"author":{"gitID":"SuxianAlicia"},"content":"        final ArrayList\u003cCalendarEntry\u003e calendarEventsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":264,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":265,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":266,"author":{"gitID":"SuxianAlicia"},"content":"        public void addCalendarEntry(CalendarEntry calendarEntry)"},{"lineNumber":267,"author":{"gitID":"SuxianAlicia"},"content":"                throws DuplicateCalendarEntryException {"},{"lineNumber":268,"author":{"gitID":"SuxianAlicia"},"content":"            requireNonNull(calendarEntry);"},{"lineNumber":269,"author":{"gitID":"SuxianAlicia"},"content":"            calendarEventsAdded.add(calendarEntry);"},{"lineNumber":270,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":272,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":274,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddressBook();"},{"lineNumber":275,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":277,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"SuxianAlicia"},"content":"        public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":279,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarManager();"},{"lineNumber":280,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":281,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/FindGroupCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model) for {@code FindGroupCommand}."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandTest {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupFirstCommand \u003d new FindGroupCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupSecondCommand \u003d new FindGroupCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findGroupFirstCommand.equals(findGroupFirstCommand));"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand findGroupFirstCommandCopy \u003d new FindGroupCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(findGroupFirstCommand.equals(findGroupFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        // different predicates -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(findGroupFirstCommand.equals(findGroupSecondCommand));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d prepareCommand(\"Neighbours twitter\");"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON, ELLE));"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses {@code userInput} into a {@code FindGroupCommand}."},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    private FindGroupCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        FindGroupCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    private void assertCommandSuccess(FindGroupCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":98,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":" * {@code DeleteEntryCommand}."},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommandTest {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBookWithOrders(),"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            getTypicalCalendarManagerWithEntries(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry entryToDelete \u003d model.getFilteredCalendarEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(DeleteEntryCommand.MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"                model.getCalendarManager(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteCalendarEntry(entryToDelete);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(deleteEntryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry entryToDelete \u003d model.getFilteredCalendarEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendarManager(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        // delete -\u003e first order deleted"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        deleteEntryCommand.execute();"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(deleteEntryCommand);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts address book back to previous state and order list to show all calendar entries"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same first order deleted again"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.deleteCalendarEntry(entryToDelete);"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCalendarEntryList().size() + 1);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e deleteEntryCommand not pushed into undoRedoStack"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(deleteEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteFirstEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteSecondEntryCommand \u003d prepareCommand(INDEX_SECOND_ENTRY);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstEntryCommand.equals(deleteFirstEntryCommand));"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteFirstEntryCommandCopy \u003d prepareCommand(INDEX_FIRST_ENTRY);"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(deleteFirstEntryCommand.equals(deleteFirstEntryCommandCopy));"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        deleteFirstEntryCommandCopy.preprocessUndoableCommand();"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(deleteFirstEntryCommandCopy));"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(1));"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(null));"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        // different order -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(deleteFirstEntryCommand.equals(deleteSecondEntryCommand));"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code DeleteEntryCommand} with the parameter {@code index}."},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"    private DeleteEntryCommand prepareCommand(Index index) {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        DeleteEntryCommand deleteEntryCommand \u003d new DeleteEntryCommand(index);"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        deleteEntryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        return deleteEntryCommand;"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":125,"-":1}},{"path":"src/test/java/seedu/address/logic/commands/EditEntryCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_GET_BOOKS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_MEET_SUPPLIER;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_GET_BOOKS;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_GET_BOOKS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTRY;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTRY;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.CalendarEntryBuilder;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.EditEntryDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":" * and unit tests for EditEntryCommand."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"public class EditEntryCommandTest {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendarManagerWithEntries() ,"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry editedEntry \u003d new CalendarEntryBuilder().withEntryTitle(\"Meet Client\").build();"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedEntry).build();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY, descriptor);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(EditEntryCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.updateCalendarEntry(model.getFilteredCalendarEntryList().get(0), editedEntry);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(editEntryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        Index indexLastEntry \u003d Index.fromOneBased(model.getFilteredCalendarEntryList().size());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry lastEntry \u003d model.getFilteredCalendarEntryList().get(indexLastEntry.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryBuilder entryInList \u003d new CalendarEntryBuilder(lastEntry);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry editedEntry \u003d entryInList.withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS)"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_GET_BOOKS).build();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS)"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                .withStartTime(VALID_START_TIME_GET_BOOKS).build();"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(indexLastEntry, descriptor);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(EditEntryCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.updateCalendarEntry(lastEntry, editedEntry);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(editEntryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY, new EditEntryDescriptor());"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry editedEntry \u003d model.getFilteredCalendarEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(EditEntryCommand.MESSAGE_EDIT_ENTRY_SUCCESS, editedEntry);"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.updateCalendarEntry(model.getFilteredCalendarEntryList().get(0), editedEntry);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(editEntryCommand, model, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_duplicateCalendarEntryUnfilteredList_failure() {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry firstEntry \u003d model.getFilteredCalendarEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(firstEntry).build();"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(INDEX_SECOND_ENTRY, descriptor);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(editEntryCommand, model, EditEntryCommand.MESSAGE_DUPLICATE_ENTRY);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    public void execute_invalidCalendarEntryIndexUnfilteredList_failure() {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCalendarEntryList().size() + 1);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS).build();"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(editEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry editedEntry \u003d new CalendarEntryBuilder().build();"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry entryToEdit \u003d model.getFilteredCalendarEntryList().get(INDEX_FIRST_ENTRY.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder(editedEntry).build();"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(INDEX_FIRST_ENTRY, descriptor);"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), model.getCalendarManager(),"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"                new UserPrefs());"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        // edit -\u003e first calendar entry edited"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        editEntryCommand.execute();"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        undoRedoStack.push(editEntryCommand);"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        // undo -\u003e reverts address book back to previous state and filtered calendar entry list to show all entries"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        // redo -\u003e same first calendar entry edited again"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        expectedModel.updateCalendarEntry(entryToEdit, editedEntry);"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCalendarEntryList().size() + 1);"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor descriptor \u003d new EditEntryDescriptorBuilder()"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"                .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS).build();"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"        // execution failed -\u003e editEntryCommand not pushed into undoRedoStack"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(editEntryCommand, model, Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws Exception {"},{"lineNumber":157,"author":{"gitID":"SuxianAlicia"},"content":"        final EditEntryCommand firstCommand \u003d prepareCommand(INDEX_FIRST_ENTRY, DESC_MEET_SUPPLIER);"},{"lineNumber":158,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":159,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor copyDescriptor \u003d new EditEntryDescriptor(DESC_MEET_SUPPLIER);"},{"lineNumber":161,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand firstCommandCopy \u003d prepareCommand(INDEX_FIRST_ENTRY, copyDescriptor);"},{"lineNumber":162,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstCommand.equals(firstCommandCopy));"},{"lineNumber":163,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":164,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":165,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":166,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":167,"author":{"gitID":"SuxianAlicia"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"SuxianAlicia"},"content":"        firstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":169,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstCommand.equals(firstCommandCopy));"},{"lineNumber":170,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":171,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":174,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":176,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":177,"author":{"gitID":"SuxianAlicia"},"content":"        // different index -\u003e returns false"},{"lineNumber":178,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstCommand.equals(new EditEntryCommand(INDEX_SECOND_ENTRY, DESC_MEET_SUPPLIER)));"},{"lineNumber":179,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":180,"author":{"gitID":"SuxianAlicia"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":181,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstCommand.equals(new EditEntryCommand(INDEX_FIRST_ENTRY, DESC_GET_BOOKS)));"},{"lineNumber":182,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":184,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an {@code EditEntryCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":186,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"SuxianAlicia"},"content":"    private EditEntryCommand prepareCommand(Index index, EditEntryDescriptor descriptor) {"},{"lineNumber":188,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryCommand editEntryCommand \u003d new EditEntryCommand(index, descriptor);"},{"lineNumber":189,"author":{"gitID":"SuxianAlicia"},"content":"        editEntryCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":190,"author":{"gitID":"SuxianAlicia"},"content":"        return editEntryCommand;"},{"lineNumber":191,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":191,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlSerializableCalendarManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlSerializableCalendarManagerTest {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableCalendarManagerTest/\");"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File TYPICAL_EVENTS_FILE \u003d"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            new File(TEST_DATA_FOLDER + \"typicalEntriesCalendarManager.xml\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private static final File INVALID_EVENT_FILE \u003d"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            new File(TEST_DATA_FOLDER + \"invalidEntriesCalendarManager.xml\");"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_typicalEntriesFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EVENTS_FILE,"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                XmlSerializableCalendarManager.class);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager calendarManagerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager typicalCalendarEntriesCalendarManager \u003d"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"                TypicalCalendarEntries.getTypicalCalendarManagerWithEntries();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(calendarManagerFromFile, typicalCalendarEntriesCalendarManager);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEntriesFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                XmlSerializableCalendarManager.class);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        dataFromFile.toModelType();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlCalendarManagerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.WORKSHOP;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlCalendarManagerStorageTest {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            FileUtil.getPath(\"./src/test/data/XmlCalendarManagerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(null);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    private Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return new XmlCalendarManagerStorage(filePath).readCalendarManager(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(readCalendarManager(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"NotXmlFormatCalendarManager.xml\");"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_invalidCalendarManager_throwDataConversionException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"invalidCalendarManager.xml\");"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    public void readCalendarManager_invalidAndValidCalendarManager_throwDataConversionException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        readCalendarManager(\"invalidAndValidCalendarManager.xml\");"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    public void readAndSaveCalendarManager_allInOrder_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager original \u003d getTypicalCalendarManagerWithEntries();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        XmlCalendarManagerStorage xmlCalendarManagerStorage \u003d new XmlCalendarManagerStorage(filePath);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        //Save in new file and read back"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original, filePath);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        ReadOnlyCalendarManager readBack \u003d xmlCalendarManagerStorage.readCalendarManager(filePath).get();"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        original.deleteCalendarEntry(WORKSHOP);"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original, filePath);"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"        readBack \u003d xmlCalendarManagerStorage.readCalendarManager(filePath).get();"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        //Save and read without specifying file path"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        original.addCalendarEntry(WORKSHOP);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        xmlCalendarManagerStorage.saveCalendarManager(original); //file path not specified"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        readBack \u003d xmlCalendarManagerStorage.readCalendarManager().get(); //file path not specified"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(original, new CalendarManager(readBack));"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(null, \"SomeFile.xml\");"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves {@code calendarManager} at the specified {@code filePath}."},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"    private void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) {"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            new XmlCalendarManagerStorage(filePath)"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"                    .saveCalendarManager(calendarManager, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(new CalendarManager(), null);"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":118,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedCalendarEntryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.storage.XmlAdaptedCalendarEntry.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedCalendarEntryTest {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_ENTRY_TITLE \u003d \"M\u0026\u0026ting wi$h b@ss\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_START_DATE \u003d \"30-02-2019\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_END_DATE \u003d \"31-02-2019\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_START_TIME \u003d \"24:60\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String INVALID_END_TIME \u003d \"25:100\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_ENTRY_TITLE \u003d MEETING_BOSS.getEntryTitle().toString();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_START_DATE \u003d MEETING_BOSS.getStartDate().toString();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_END_DATE \u003d MEETING_BOSS.getEndDate().toString();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_START_TIME \u003d MEETING_BOSS.getStartTime().toString();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String VALID_END_TIME \u003d MEETING_BOSS.getEndTime().toString();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_validCalendarEntryDetails_returnsCalendarEvent() throws Exception {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(MEETING_BOSS);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(MEETING_BOSS, calEvent.toModelType());"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEntryTitle_throwsIllegalValueException() {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(INVALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEntryTitle_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(null, VALID_START_DATE,"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EntryTitle.class.getSimpleName());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidStartDate_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, INVALID_START_DATE,"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d StartDate.MESSAGE_START_DATE_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullStartDate_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, null,"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDate.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEndDate_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                INVALID_END_DATE, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EndDate.MESSAGE_END_DATE_CONSTRAINTS;"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEndDate_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"                null, VALID_START_TIME, VALID_END_TIME);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndDate.class.getSimpleName());"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, INVALID_START_TIME, VALID_END_TIME);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d StartTime.MESSAGE_START_TIME_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, null, VALID_END_TIME);"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartTime.class.getSimpleName());"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, INVALID_END_TIME);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d EndTime.MESSAGE_END_TIME_CONSTRAINTS;"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry calEvent \u003d new XmlAdaptedCalendarEntry(VALID_ENTRY_TITLE, VALID_START_DATE,"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"                VALID_END_DATE, VALID_START_TIME, null);"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EndTime.class.getSimpleName());"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, calEvent::toModelType);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":114,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalOrders;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_ORDERS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalOrdersAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final File INVALID_GROUP_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidGroupAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final File INVALID_PREFERENCE_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPreferenceAddressBook.xml\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final File INVALID_ORDER_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidOrderAddressBook.xml\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void toModelType_typicalOrdersFile_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ORDERS_FILE,"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        AddressBook typicalOrdersAddressBook \u003d TypicalOrders.getTypicalAddressBookWithOrders();"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        assertEquals(addressBookFromFile, typicalOrdersAddressBook);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toModelType_invalidGroupFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_GROUP_FILE,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPreferenceFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PREFERENCE_FILE,"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidOrderFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ORDER_FILE,"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        dataFromFile.toModelType();"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":68,"amad-person":19}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedOrderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.storage.XmlAdaptedOrder.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.BOOKS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"public class XmlAdaptedOrderTest {"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_ORDER_INFORMATION \u003d \"Choc0l@t3s\";"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_ORDER_STATUS \u003d \"fulfilled\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_PRICE \u003d \"25.00.99\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_QUANTITY \u003d \"-2\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private static final String INVALID_DELIVERY_DATE \u003d \"50-12-2010\";"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_ORDER_INFORMATION \u003d BOOKS.getOrderInformation().toString();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_ORDER_STATUS \u003d BOOKS.getOrderStatus().getOrderStatusValue();"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_PRICE \u003d BOOKS.getPrice().toString();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_QUANTITY \u003d BOOKS.getQuantity().toString();"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private static final String VALID_DELIVERY_DATE \u003d BOOKS.getDeliveryDate().toString();"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void toModelType_validOrderDetails_returnsOrder() throws Exception {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(BOOKS);"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertEquals(BOOKS, order.toModelType());"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidOrderInformation_throwsIllegalValueException() {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(INVALID_ORDER_INFORMATION, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullOrderInformation_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(null, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OrderInformation.class.getSimpleName());"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidOrderStatus_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, INVALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullOrderStatus_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, null, VALID_PRICE,"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OrderStatus.class.getSimpleName());"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidPrice_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, INVALID_PRICE,"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Price.MESSAGE_PRICE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullPrice_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, null,"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidQuantity_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"                INVALID_QUANTITY, VALID_DELIVERY_DATE);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Quantity.MESSAGE_QUANTITY_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullQuantity_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                null, VALID_DELIVERY_DATE);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    public void toModelType_invalidDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, INVALID_DELIVERY_DATE);"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"    public void toModelType_nullDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(VALID_ORDER_INFORMATION, VALID_ORDER_STATUS, VALID_PRICE,"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"                VALID_QUANTITY, null);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeliveryDate.class.getSimpleName());"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":116}},{"path":"src/test/java/seedu/address/model/order/OrderInformationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class OrderInformationTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new OrderInformation(null));"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidOrderInformation_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        String invalidOrderInformation \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OrderInformation(invalidOrderInformation));"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderStatus_nullOrderInformation_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e OrderInformation.isValidOrderInformation(null));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderStatus_invalidOrderInformation_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderInformation.isValidOrderInformation(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderInformation.isValidOrderInformation(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderInformation_validOrderInformation_returnsTrue() {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"Books\")); // single word"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"Confectionery Boxes\")); // multiple words"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderInformation.isValidOrderInformation(\"NBA 2k18\")); // alphanumeric"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        OrderInformation orderInformation \u003d new OrderInformation(\"Books\");"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        OrderInformation orderInformationCopy \u003d new OrderInformation(\"Books\");"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertEquals(orderInformation, orderInformationCopy);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        OrderInformation orderInformation \u003d new OrderInformation(\"Books\");"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertEquals(orderInformation, orderInformation);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public void equals_nullObject_returnsFalse() {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        OrderInformation orderInformation \u003d new OrderInformation(\"Books\");"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, orderInformation);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        OrderInformation firstOrderInformation \u003d new OrderInformation(\"Books\");"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        OrderInformation secondOrderInformation \u003d new OrderInformation(\"Chocolates\");"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(firstOrderInformation, secondOrderInformation);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":69}},{"path":"src/test/java/seedu/address/model/order/OrderStatusTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class OrderStatusTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullOrderStatus_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new OrderStatus(null));"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidOrderStatus_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        String invalidOrderStatus \u003d \"fulfill3d\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OrderStatus(invalidOrderStatus));"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderStatus_nullOrderStatus_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e OrderStatus.isValidOrderStatus(null));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderStatus_invalidOrderStatus_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderStatus.isValidOrderStatus(\"0ngo!ng_order\"));"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(OrderStatus.isValidOrderStatus(\"orderd0ne\"));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public void isValidOrderStatus_validOrderStatus_returnsTrue() {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderStatus.isValidOrderStatus(\"ongoing\"));"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertTrue(OrderStatus.isValidOrderStatus(\"done\"));"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        OrderStatus orderStatus \u003d new OrderStatus(\"ongoing\");"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        OrderStatus orderStatusCopy \u003d new OrderStatus(\"ongoing\");"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        assertEquals(orderStatus, orderStatusCopy);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        OrderStatus orderStatus \u003d new OrderStatus(\"ongoing\");"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        assertEquals(orderStatus, orderStatus);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    public void equals_nullObject_returnsFalse() {"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        OrderStatus orderStatus \u003d new OrderStatus(\"ongoing\");"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, orderStatus);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        OrderStatus firstOrderStatus \u003d new OrderStatus(\"ongoing\");"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        OrderStatus secondOrderStatus \u003d new OrderStatus(\"done\");"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(firstOrderStatus, secondOrderStatus);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":68}},{"path":"src/test/java/seedu/address/model/order/OrderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"public class OrderTest {"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Order(null, null, null, null, null));"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":14}},{"path":"src/test/java/seedu/address/model/order/DeliveryDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class DeliveryDateTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullDeliveryDate_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new DeliveryDate(null));"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidDeliveryDate_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        String invalidDeliveryDate \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new DeliveryDate(invalidDeliveryDate));"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public void isValidDeliveryDate_nullOrderStatus_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DeliveryDate.isValidDeliveryDate(null));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void isValidDeliveryDate_invalidDeliveryDate_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"wejo*21\")); // invalid string"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"12/12/2012\")); // invalid format"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"0-1-98\")); // invalid date"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"50-12-1998\")); // invalid day"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"10-15-2013\")); // invalid month"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"09-08-10000\")); // invalid year"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"29-02-2001\")); // leap day doesn\u0027t exist"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public void isValidDeliveryDate_validDeliveryDate_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"01-01-2001\")); // valid date"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"29-02-2000\")); // leap year"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        DeliveryDate deliveryDate \u003d new DeliveryDate(\"10-10-2020\");"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        DeliveryDate deliveryDateCopy \u003d new DeliveryDate(\"10-10-2020\");"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertEquals(deliveryDate, deliveryDateCopy);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        DeliveryDate deliveryDate \u003d new DeliveryDate(\"10-10-2020\");"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        assertEquals(deliveryDate, deliveryDate);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    public void equals_nullObject_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        DeliveryDate deliveryDate \u003d new DeliveryDate(\"10-10-2020\");"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, deliveryDate);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        DeliveryDate firstDeliveryDate \u003d new DeliveryDate(\"10-10-2020\");"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        DeliveryDate secondDeliveryDate \u003d new DeliveryDate(\"11-10-2020\");"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(firstDeliveryDate, secondDeliveryDate);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":75}},{"path":"src/test/java/seedu/address/model/order/QuantityTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class QuantityTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        String invalidQuantity \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public void isValidQuantity_nullQuantity_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void isValidQuantity_invalidQuantity_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"sj)\")); // non numeric characters"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"2.3\")); // decimal"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"-1\")); // negative integer"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"0\")); // zero"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"+9\")); // plus sign"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertFalse(Quantity.isValidQuantity(\"100000000\")); // out of allowed range"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void isValidQuantity_validQuantity_returnsTrue() {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        assertTrue(Quantity.isValidQuantity(\"10\")); // positive integer"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        assertTrue(Quantity.isValidQuantity(\"0500\")); // leading zero allowed"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        Quantity quantity \u003d new Quantity(\"10\");"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        Quantity quantityCopy \u003d new Quantity(\"10\");"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        assertEquals(quantity, quantityCopy);"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        Quantity quantity \u003d new Quantity(\"10\");"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        assertEquals(quantity, quantity);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public void equals_nullObject_returnsFalse() {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        Quantity quantity \u003d new Quantity(\"10\");"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, quantity);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        Quantity firstQuantity \u003d new Quantity(\"10\");"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        Quantity secondQuantity \u003d new Quantity(\"20\");"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(firstQuantity, secondQuantity);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":74}},{"path":"src/test/java/seedu/address/model/order/PriceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"public class PriceTest {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Price(null));"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidPrice_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        String invalidPrice \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public void isValidPrice_nullPrice_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    public void isValidPrice_invalidPrice_returnsFalse() {"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"\")); // empty string"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"sj)\")); // non numeric characters"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"2.3.20\")); // more than one decimal place"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"10.1234\")); // more than two digits after decimal point"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"10,00,000\")); // commas"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"-1.0\")); // negative"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"+10.0\")); // plus sign"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assertFalse(Price.isValidPrice(\"1000000.01\")); // out of allowed range"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public void isValidPrice_validPrice_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"10.0\")); // one digit after decimal point"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"500.75\")); // two digits after decimal point"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        assertTrue(Price.isValidPrice(\"015.50\")); // leading zero"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValue_returnsTrue() {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        Price price \u003d new Price(\"12.00\");"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        Price priceCopy \u003d new Price(\"12.00\");"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        assertEquals(price, priceCopy);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        Price price \u003d new Price(\"12.00\");"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        assertEquals(price, price);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    public void equals_nullObject_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        Price price \u003d new Price(\"12.00\");"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, price);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValue_returnsFalse() {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        Price firstPrice \u003d new Price(\"12.00\");"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        Price secondPrice \u003d new Price(\"500.00\");"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(firstPrice, secondPrice);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":76}},{"path":"src/test/java/seedu/address/logic/commands/ChangeOrderStatusCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeOrderStatusCommand.MESSAGE_INVALID_ORDER_STATUS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.ChangeOrderStatusCommand.MESSAGE_ORDER_STATUS_CHANGED_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.ORDER_STATUS_DONE;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.ORDER_STATUS_ONGOING;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ORDER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.getTypicalAddressBookWithOrders;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusCommandTest {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private Model model;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    @Before"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    public void setUp() {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        model \u003d new ModelManager(getTypicalAddressBookWithOrders(), new CalendarManager(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullIndex_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        new ChangeOrderStatusCommand(null, ORDER_STATUS_ONGOING);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public void constructor_nullOrderStatus_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        new ChangeOrderStatusCommand(INDEX_FIRST_ORDER, null);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public void execute_orderStatusAccepted_statusChanged() throws Exception {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        Order orderToChangeStatus \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusToDoneCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ORDER_STATUS_CHANGED_SUCCESS,"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                INDEX_FIRST_ORDER.getOneBased(), ORDER_STATUS_DONE);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new CalendarManager(),"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"                new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrderStatus(orderToChangeStatus, ORDER_STATUS_DONE);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(changeOrderStatusToDoneCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidOrderIndex_throwsCommandException() {"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusCommand \u003d getChangeOrderStatusCommand(outOfBoundsIndex,"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(changeOrderStatusCommand, model, expectedMessage);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    public void execute_invalidOrderStatus_throwsCommandException() {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        String invalidOrderStatus \u003d \"fulfill3ed\";"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"                invalidOrderStatus, model);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_ORDER_STATUS, invalidOrderStatus);"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(changeOrderStatusCommand, model, expectedMessage);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_validOrderIndexAndOrderStatus_success() throws Exception {"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        Order orderToChangeStatus \u003d model.getFilteredOrderList().get(INDEX_FIRST_ORDER.getZeroBased());"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"                new CalendarManager(), new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        // execute changeOrderStatusCommand -\u003e order status of order updated"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        changeOrderStatusCommand.execute();"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        undoRedoStack.push(changeOrderStatusCommand);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        // undo -\u003e order status of order reverted back to original"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        // redo -\u003e same order has its order status updated again"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        expectedModel.updateOrderStatus(orderToChangeStatus, ORDER_STATUS_DONE);"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidOrderIndex_failure() {"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusCommand \u003d getChangeOrderStatusCommand(outOfBoundsIndex,"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e changeOrderStatusCommand not pushed into undoRedoStack"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(changeOrderStatusCommand, model, expectedMessage);"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undo and redo both fail"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"    public void executeUndoRedo_invalidOrderStatus_failure() {"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        String invalidOrderStatus \u003d \"fulfill3d\";"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand changeOrderStatusCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"                invalidOrderStatus, model);"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_ORDER_STATUS, invalidOrderStatus);"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        // execution failed -\u003e changeOrderStatusCommand not pushed into undoRedoStack"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(changeOrderStatusCommand, model, expectedMessage);"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        // no commands in undoRedoStack -\u003e undo and redo both fail"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"    public void equals_sameValues_returnsTrue() {"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand firstCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand firstCommandCopy \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        assertEquals(firstCommand, firstCommandCopy);"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"    public void equals_sameObject_returnsTrue() {"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand firstCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"    public void equals_differentValues_returnsFalse() {"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand firstCommand \u003d getChangeOrderStatusCommand(INDEX_FIRST_ORDER,"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"                ORDER_STATUS_DONE, model);"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"        // null -\u003e returns false"},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(null, firstCommand);"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        // different types -\u003e returns false"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(1, firstCommand);"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"        // different index -\u003e returns false"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(new ChangeOrderStatusCommand(INDEX_SECOND_ORDER, ORDER_STATUS_DONE), firstCommand);"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        // different order status -\u003e returns false"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"        assertNotEquals(new ChangeOrderStatusCommand(INDEX_FIRST_ORDER, ORDER_STATUS_ONGOING), firstCommand);"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"     * Generates a new ChangeOrderStatusCommand with the given index and new order status."},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":"    private ChangeOrderStatusCommand getChangeOrderStatusCommand(Index index, String orderStatus, Model model) {"},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"        ChangeOrderStatusCommand command \u003d new ChangeOrderStatusCommand(index, orderStatus);"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"        return command;"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":208}},{"path":"src/test/java/seedu/address/model/UniquePreferenceListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPreferences.COMPUTERS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniquePreferenceList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UniquePreferenceListTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public void equals() throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList firstPrefList \u003d new UniquePreferenceList();"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        firstPrefList.add(VIDEO_GAMES);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList secondPrefList \u003d new UniquePreferenceList();"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        secondPrefList.add(COMPUTERS);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstPrefList.equals(firstPrefList));"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstPrefList.equals(1));"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstPrefList.equals(secondPrefList));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UniquePreferenceList firstPrefList \u003d new UniquePreferenceList();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        firstPrefList.add(VIDEO_GAMES);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        firstPrefList.add(COMPUTERS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        UniquePreferenceList secondPrefList \u003d new UniquePreferenceList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        secondPrefList.add(COMPUTERS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        secondPrefList.add(VIDEO_GAMES);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(firstPrefList.equalsOrderInsensitive(secondPrefList));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList uniquePreferenceList \u003d new UniquePreferenceList();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        uniquePreferenceList.asObservableList().remove(0);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicatePref_throwsDuplicatePreferenceException()"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        UniquePreferenceList uniquePrefList \u003d new UniquePreferenceList();"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UniquePreferenceList.DuplicatePreferenceException.class);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        uniquePrefList.add(SHOES);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        uniquePrefList.add(SHOES);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":33,"amad-person":35}},{"path":"src/test/java/seedu/address/model/CalendarManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTypicalCalendarManagerWithEntries;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collection;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerTest {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarManager calendarManager \u003d new CalendarManager();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor() {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(Collections.emptyList(), calendarManager.getCalendarEntryList());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(null);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData_withValidReadOnlyCalendarManager_replacesData() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager newData \u003d getTypicalCalendarManagerWithEntries();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(newData);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertEquals(newData, calendarManager);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData_withDuplicateCalendarEntries_throwsAssertionError() {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        // Repeat MEETING_BOSS twice"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e newEntries \u003d Arrays.asList(MEETING_BOSS, MEETING_BOSS);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerStub newData \u003d new CalendarManagerStub(newEntries);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.resetData(newData);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public void getCalendarEntryList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.getCalendarEntryList().remove(0);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    private static class CalendarManagerStub implements ReadOnlyCalendarManager {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        private final ObservableList\u003cCalendarEntry\u003e calendarEntries \u003d FXCollections.observableArrayList();"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManagerStub(Collection\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"            this.calendarEntries.setAll(calendarEntries);"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        public ObservableList\u003cCalendarEntry\u003e getCalendarEntryList() {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"            return calendarEntries;"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":74,"-":1}},{"path":"src/test/java/seedu/address/model/entry/StartTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class StartTimeTest {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartTime(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidStartTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidStartTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartTime(invalidStartTime));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidStartTime() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null start time"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeUtil.isValidTime(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid start time"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"12-01\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"24:01\")); // invalid Hour"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:79\")); // invalid Minute"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"101:04\")); // invalid Hour"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:100\")); // invalid Minute"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid start time"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"10:00\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"18:55\")); // valid date (24Hr Format)"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/test/java/seedu/address/model/person/PreferencesContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.NECKLACES;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.SHOES;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalPreferences.VIDEO_GAMES;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferencesContainKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(VIDEO_GAMES.tagName, SHOES.tagName);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Collections.singletonList(NECKLACES.tagName);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate secondPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_preferencesContainsKeywords_returnsTrue() {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate predicate;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        // One keyword"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Collections.singletonList(VIDEO_GAMES.tagName));"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName).build()));"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // Multiple keywords"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(NECKLACES.tagName, SHOES.tagName));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(NECKLACES.tagName, SHOES.tagName).build()));"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        // Only one matching keyword"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(NECKLACES.tagName, SHOES.tagName));"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName, SHOES.tagName).build()));"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        // Mixed-case keywords"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Arrays.asList(\"NeCkLaCes\", \"ShoES\"));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPreferences(NECKLACES.tagName, SHOES.tagName).build()));"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_personPreferencesDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        // Zero keywords"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        PreferencesContainKeywordsPredicate predicate \u003d"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                new PreferencesContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPreferences(VIDEO_GAMES.tagName).build()));"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        // Non-matching keyword"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new PreferencesContainKeywordsPredicate(Collections.singletonList(VIDEO_GAMES.tagName));"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPreferences(SHOES.tagName, NECKLACES.tagName).build()));"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":78,"-":1}},{"path":"src/test/java/seedu/address/model/entry/EntryTitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTitleTest {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EntryTitle(null));"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEntryTitle_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEntryTitle \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EntryTitle(invalidEntryTitle));"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEntryTitle() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        // null entry title"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e EntryTitle.isValidEntryTitle(null));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid entry title"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(EntryTitle.isValidEntryTitle(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(EntryTitle.isValidEntryTitle(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // valid entry title"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Meet with bosses\"));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Meet Client for stocks\"));"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(EntryTitle.isValidEntryTitle(\"Confectionery Boxes Order\"));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":36,"-":1}},{"path":"src/test/java/seedu/address/model/entry/StartDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class StartDateTest {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new StartDate(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidStartDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidStartDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StartDate(invalidStartDate));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidStartDate() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null start date"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateUtil.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid start date"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"12/12/2012\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"0-1-98\")); // invalid date"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"50-12-1998\")); // invalid day"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"10-15-2013\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"09-08-10000\")); // invalid year"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid start date"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"01-01-2001\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"29-02-2000\")); // leap year"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/test/java/seedu/address/model/person/GroupsContainKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.BUDDIES;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupsContainKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Arrays.asList(COLLEAGUES.tagName, BUDDIES.tagName);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Collections.singletonList(FRIENDS.tagName);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicate \u003d new GroupsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate secondPredicate \u003d new GroupsContainKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_groupsContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate predicate;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Collections.singletonList(COLLEAGUES.tagName));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName).build()));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(COLLEAGUES.tagName, BUDDIES.tagName));"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(FRIENDS.tagName, BUDDIES.tagName));"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Arrays.asList(\"COlleAGUES\", \"BUDDIes\"));"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(predicate.test(new PersonBuilder().withGroups(COLLEAGUES.tagName, BUDDIES.tagName).build()));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void test_personGroupsDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        GroupsContainKeywordsPredicate predicate \u003d"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                new GroupsContainKeywordsPredicate(Collections.emptyList());"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withGroups(BUDDIES.tagName).build()));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        // Non-matching keyword"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        predicate \u003d new GroupsContainKeywordsPredicate(Collections.singletonList(COLLEAGUES.tagName));"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(predicate.test(new PersonBuilder().withGroups(BUDDIES.tagName, FRIENDS.tagName).build()));"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":76,"-":1}},{"path":"src/test/java/seedu/address/model/entry/CalendarEntryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryTest {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"                new CalendarEntry(null, null, null, null, null));"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":14,"-":1}},{"path":"src/test/java/seedu/address/model/UniqueGroupListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalGroups.COLLEAGUES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalGroups.FRIENDS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueGroupList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UniqueGroupListTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public void equals() throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList firstGroupList \u003d new UniqueGroupList();"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        firstGroupList.add(FRIENDS);"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList secondGroupList \u003d new UniqueGroupList();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        secondGroupList.add(COLLEAGUES);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstGroupList.equals(firstGroupList));"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstGroupList.equals(1));"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstGroupList.equals(secondGroupList));"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void asOrderInsensitiveList_compareListsWithSameItemsInDiffOrder_assertEqual()"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UniqueGroupList firstGroupList \u003d new UniqueGroupList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        firstGroupList.add(FRIENDS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        firstGroupList.add(COLLEAGUES);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UniqueGroupList secondGroupList \u003d new UniqueGroupList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        secondGroupList.add(COLLEAGUES);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        secondGroupList.add(FRIENDS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(firstGroupList.equalsOrderInsensitive(secondGroupList));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.asObservableList().remove(0);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicateGroup_throwsDuplicateGroupException()"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        UniqueGroupList uniqueGroupList \u003d new UniqueGroupList();"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UniqueGroupList.DuplicateGroupException.class);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.add(FRIENDS);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        uniqueGroupList.add(FRIENDS);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":32,"amad-person":35}},{"path":"src/test/java/seedu/address/model/entry/EndTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class EndTimeTest {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EndTime(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEndTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEndTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EndTime(invalidEndTime));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEndTime() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null end time"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimeUtil.isValidTime(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid end time"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"12-01\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"24:01\")); // invalid Hour"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:79\")); // invalid Minute"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"101:04\")); // invalid Hour"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(TimeUtil.isValidTime(\"00:100\")); // invalid Minute"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid end time"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"10:00\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(TimeUtil.isValidTime(\"18:55\")); // valid date (24Hr Format)"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/test/java/seedu/address/model/entry/EndDateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class EndDateTest {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EndDate(null));"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidEndDate_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidEndDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EndDate(invalidEndDate));"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidEndDate() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // null end date"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e DateUtil.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // invalid end date"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"wejo*21\")); // invalid string"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"12/12/2012\")); // invalid format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"0-1-98\")); // invalid date"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"50-12-1998\")); // invalid day"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"10-15-2013\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(DateUtil.isValidDate(\"09-08-10000\")); // invalid year"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        // valid end date"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"01-01-2001\")); // valid date"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(DateUtil.isValidDate(\"29-02-2000\")); // leap year"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/test/java/seedu/address/model/tag/PreferenceTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferenceTest {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullPreferenceTagName_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Preference(null));"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidPreferenceTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidPreferenceTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Preference(invalidPreferenceTagName));"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidPreferenceTagName() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        // null preference name"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Preference.isValidTagName(null));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":1}},{"path":"src/test/java/seedu/address/model/theme/ThemeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.theme;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"public class ThemeTest {"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Theme(null));"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public void constructor_invalidTheme_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        String invalidTheme \u003d \"39dhks\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Theme(invalidTheme));"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        Theme firstTheme \u003d new Theme(\"dark\");"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        // same theme object -\u003e true"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstTheme.equals(firstTheme));"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        // same theme value -\u003e true"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Theme firstThemeCopy \u003d new Theme(\"dark\");"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstTheme.equals(firstThemeCopy));"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstTheme.equals(1));"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        // null -\u003e false"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstTheme.equals(null));"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public void isValidTheme() {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        // null theme"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Theme.isValidTheme(null));"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        // invalid theme"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\"\")); // empty string"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\" \")); // spaces only"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.isValidTheme(\"djwe398\")); // invalid keywords for theme"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        // valid theme"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        assertTrue(Theme.isValidTheme(\"dark\")); // dark theme"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        assertTrue(Theme.isValidTheme(\"light\")); // light theme"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void setTheme_switchBetweenThemes() {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        // change to \u0027dark\u0027 -\u003e changed successfully"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        String theme \u003d \"dark\";"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), theme);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        // change to \u0027light\u0027 -\u003e changed successfully"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        theme \u003d \"light\";"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), theme);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        // change to \u0027day\u0027 (doesn\u0027t exist) -\u003e not changed from previous theme"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        theme \u003d \"day\";"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(theme);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        assertFalse(Theme.getCurrentTheme().equals(theme));"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        assertEquals(Theme.getCurrentTheme(), \"light\");"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":76}},{"path":"src/test/java/seedu/address/model/tag/GroupTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupTest {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_nullGroupTagName_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Group(null));"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public void constructor_invalidGroupTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        String invalidGroupTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Group(invalidGroupTagName));"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public void isValidGroupTagName() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        // null group name"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Group.isValidTagName(null));"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":1}},{"path":"src/test/java/seedu/address/testutil/OrderBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * A utility class to help with building Order objects."},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class OrderBuilder {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_ORDER_INFORMATION \u003d \"Books\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_ORDER_STATUS \u003d \"ongoing\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_PRICE \u003d \"15.00\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_QUANTITY \u003d \"5\";"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String DEFAULT_DELIVERY_DATE \u003d \"10-05-2018\";"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private OrderInformation orderInformation;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private OrderStatus orderStatus;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private Price price;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private Quantity quantity;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private DeliveryDate deliveryDate;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder() {"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d new OrderInformation(DEFAULT_ORDER_INFORMATION);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        orderStatus \u003d new OrderStatus(DEFAULT_ORDER_STATUS);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        price \u003d new Price(DEFAULT_PRICE);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        quantity \u003d new Quantity(DEFAULT_QUANTITY);"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d new DeliveryDate(DEFAULT_DELIVERY_DATE);"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"     * Initializes the OrderBuilder with the data of {@code orderToCopy}."},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder(Order orderToCopy) {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d orderToCopy.getOrderInformation();"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        orderStatus \u003d orderToCopy.getOrderStatus();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        price \u003d orderToCopy.getPrice();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        quantity \u003d orderToCopy.getQuantity();"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d orderToCopy.getDeliveryDate();"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderInformation} of the {@code Order} that we are building."},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withOrderInformation(String orderInformation) {"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d new OrderInformation(orderInformation);"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderStatus} of the {@code Order} that we are building."},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withOrderStatus(String orderStatus) {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d new OrderStatus(orderStatus);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Price} of the {@code Order} that we are building."},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withPrice(String price) {"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        this.price \u003d new Price(price);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Quantity} of the {@code Order} that we are building."},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withQuantity(String quantity) {"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d new Quantity(quantity);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code DeliveryDate} of the {@code Order} that we are building."},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    public OrderBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    public Order build() {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        return new Order(orderInformation, orderStatus, price, quantity, deliveryDate);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":90}},{"path":"src/test/java/seedu/address/testutil/TypicalGroups.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code Group} Objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalGroups {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group FRIENDS \u003d new Group(\"friends\");"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group COLLEAGUES \u003d new Group(\"colleagues\");"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group BUDDIES \u003d new Group(\"buddies\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group FAMILY \u003d new Group(\"family\");"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group TWITTER \u003d new Group(\"twitter\");"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Group NEIGHBOURS \u003d new Group(\"neighbours\");"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalGroups() {}"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":17,"-":1}},{"path":"src/test/java/seedu/address/model/UniqueOrderListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.BOOKS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalOrders.CHOCOLATES;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"public class UniqueOrderListTest {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public void equals() throws DuplicateOrderException {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList firstOrderList \u003d new UniqueOrderList();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        firstOrderList.add(BOOKS);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList secondOrderList \u003d new UniqueOrderList();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        secondOrderList.add(CHOCOLATES);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        // same object -\u003e true"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        assertTrue(firstOrderList.equals(firstOrderList));"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        // different type -\u003e false"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstOrderList.equals(1));"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        // different objects, same type -\u003e false"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        assertFalse(firstOrderList.equals(secondOrderList));"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.asObservableList().remove(0);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public void asUniqueList_addDuplicateOrder_throwsDuplicateOrderException()"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            throws DuplicateOrderException {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        thrown.expect(DuplicateOrderException.class);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.add(BOOKS);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        uniqueOrderList.add(BOOKS);"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":53}},{"path":"src/test/java/seedu/address/testutil/TypicalPreferences.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code Preference} Objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalPreferences {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference SHOES \u003d new Preference(\"shoes\");"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference COMPUTERS \u003d new Preference(\"computers\");"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference VIDEO_GAMES \u003d new Preference(\"videoGames\");"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final Preference NECKLACES \u003d new Preference(\"necklaces\");"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalPreferences() {}"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":1}},{"path":"src/test/java/seedu/address/testutil/EditOrderDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" * A utility class to help with building EditOrderDescriptor objects."},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class EditOrderDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private EditOrderDescriptor descriptor;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptor();"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder(EditOrderDescriptor descriptor) {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        this.descriptor \u003d new EditOrderDescriptor(descriptor);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder(Order order) {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        descriptor \u003d new EditOrderDescriptor();"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderInformation(order.getOrderInformation());"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderStatus(order.getOrderStatus());"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        descriptor.setPrice(order.getPrice());"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        descriptor.setQuantity(order.getQuantity());"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        descriptor.setDeliveryDate(order.getDeliveryDate());"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderInformation} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withOrderInformation(String orderInformation) {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderInformation(new OrderInformation(orderInformation));"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code OrderStatus} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withOrderStatus(String orderStatus) {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        descriptor.setOrderStatus(new OrderStatus(orderStatus));"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Price} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withPrice(String price) {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        descriptor.setPrice(new Price(price));"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code Quantity} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withQuantity(String quantity) {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        descriptor.setQuantity(new Quantity(quantity));"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"     * Sets the {@code DeliveryDate} of the {@code EditOrderDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptorBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        descriptor.setDeliveryDate(new DeliveryDate(deliveryDate));"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    public EditOrderDescriptor build() {"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        return descriptor;"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":79}},{"path":"src/test/java/seedu/address/model/UniqueCalendarEntryListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.GET_STOCKS;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.MEETING_BOSS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.UniqueCalendarEntryList;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueCalendarEntryListTest {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public void equals() throws DuplicateCalendarEntryException {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList firstEntriesList \u003d  new UniqueCalendarEntryList();"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        firstEntriesList.add(MEETING_BOSS);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList secondEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        secondEntriesList.add(GET_STOCKS);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        // Same object -\u003e True"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        assertTrue(firstEntriesList.equals(firstEntriesList));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        // different type -\u003e false"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstEntriesList.equals(1));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        // different calendar entries, same type -\u003e false"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        assertFalse(firstEntriesList.equals(secondEntriesList));"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList calendarEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.asObservableList().remove(0);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public void asUniqueList_addDuplicateCalendarEntries_throwsDuplicateCalendarEntryException()"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueCalendarEntryList calendarEntriesList \u003d new UniqueCalendarEntryList();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        thrown.expect(DuplicateCalendarEntryException.class);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.add(MEETING_BOSS);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntriesList.add(MEETING_BOSS);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":51,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalLocalDates.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code Preference} Objects to be used in tests."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalLocalDates {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String LEAP_YEAR_DATE_STRING \u003d \"29-02-2016\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String NORMAL_DATE_STRING \u003d \"06-06-1990\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    // Conversion to LocalDate from strings should not fail."},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final LocalDate LEAP_YEAR_DATE \u003d DateUtil.convertStringToDate(LEAP_YEAR_DATE_STRING);"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final LocalDate NORMAL_DATE \u003d DateUtil.convertStringToDate(NORMAL_DATE_STRING);"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalLocalDates() {}"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":20,"-":1}},{"path":"src/test/java/seedu/address/testutil/CalendarManagerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class to help with building CalendarManager objects."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" *     {@code CalendarManager cm \u003d new CalendarManagerBuilder().withEntries(\"Meet Boss\", \"Get Stocks\").build();}"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerBuilder {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarManager calendarManager;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder() {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager \u003d new CalendarManager();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder(CalendarManager calendarManager) {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarManager \u003d calendarManager;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerBuilder withEntry(CalendarEntry calendarEntry) {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            calendarManager.addCalendarEntry(calendarEntry);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalArgumentException(\"Entry is expected to be unique.\");"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager build() {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"}"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""}],"authorContributionMap":{"SuxianAlicia":38,"-":1}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     * Returns the middle index of the order in the {@code model}\u0027s order list."},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public static Index getMidOrderIndex(Model model) {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getAddressBook().getOrderList().size() / 2);"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     * Returns the last index of the order in the {@code model}\u0027s order list."},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    public static Index getLastOrderIndex(Model model) {"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getAddressBook().getOrderList().size());"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * Returns the middle index of the calendar entry in the {@code model}\u0027s calendar entry list."},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public static Index getMidEntryIndex(Model model) {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getCalendarManager().getCalendarEntryList().size() / 2);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"     * Returns the last index of the calendar entry in the {@code model}\u0027s calendar entry list."},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    public static Index getLastEntryIndex(Model model) {"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        return Index.fromOneBased(model.getCalendarManager().getCalendarEntryList().size());"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"     * Returns the order in the {@code model}\u0027s order list at {@code index}."},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    public static Order getOrder(Model model, Index index) {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"        return model.getAddressBook().getOrderList().get(index.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns the calendar entry in the {@code model}\u0027s calendar entry list at {@code index}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static CalendarEntry getCalendarEntry(Model model, Index index) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return model.getCalendarManager().getCalendarEntryList().get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"amad-person":45}},{"path":"src/test/java/seedu/address/testutil/OrderUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" * A utility class for Order."},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"public class OrderUtil {"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     * Returns an add order command string for adding the {@code order}."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static String getAddOrderCommand(int index, Order order) {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        return AddOrderCommand.COMMAND_WORD + \" \" + index + \" \" + getOrderDetails(order);"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * Returns the part of command string for the given {@code orders}\u0027s details."},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static String getOrderDetails(Order order) {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_ORDER_INFORMATION).append(order.getOrderInformation().toString()).append(\" \");"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_PRICE).append(order.getPrice().toString()).append(\" \");"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_QUANTITY).append(order.getQuantity().toString()).append(\" \");"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        sb.append(PREFIX_DELIVERY_DATE).append(order.getDeliveryDate().toString());"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":35}},{"path":"src/test/java/seedu/address/testutil/EditEntryDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class to help with building EditEntryDescriptor objects."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class EditEntryDescriptorBuilder {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private EditEntryCommand.EditEntryDescriptor descriptor;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptor();"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder(EditEntryDescriptor descriptor) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        this.descriptor \u003d new EditEntryDescriptor(descriptor);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder(CalendarEntry entry) {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor \u003d new EditEntryDescriptor();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEntryTitle(entry.getEntryTitle());"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setStartDate(entry.getStartDate());"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEndDate(entry.getEndDate());"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setStartTime(entry.getStartTime());"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEndTime(entry.getEndTime());"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EntryTitle} of the {@code EditEntryDescriptor} that we are building."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder withEntryTitle(String entryTitle) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEntryTitle(new EntryTitle(entryTitle));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartDate} of the {@code EditEntryDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder withStartDate(String startDate) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setStartDate(new StartDate(startDate));"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndDate} of the {@code EditEntryDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder withEndDate(String endDate) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEndDate(new EndDate(endDate));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartTime} of the {@code EditEntryDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder withStartTime(String startTime) {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setStartTime(new StartTime(startTime));"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndTime} of the {@code EditEntryDescriptor} that we are building."},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptorBuilder withEndTime(String endTime) {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        descriptor.setEndTime(new EndTime(endTime));"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryDescriptor build() {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        return descriptor;"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":77,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalOrders.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOOKS;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_CHOC;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_COMPUTER;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_BOOKS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_CHOC;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_INFORMATION_COMPUTER;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_STATUS_BOOKS;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_STATUS_CHOC;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_STATUS_COMPUTER;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_BOOKS;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_CHOC;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_COMPUTER;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOOKS;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_CHOC;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_COMPUTER;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":" * A utility class containing a list of {@code Order} objects to be used in tests."},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"public class TypicalOrders {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final Order SHOES \u003d new OrderBuilder()"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Shoes\")"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(\"ongoing\")"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"129.99\")"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"3\")"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"10-09-2018\")"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    public static final Order FACEWASH \u003d new OrderBuilder()"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Face Wash\")"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(\"ongoing\")"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"24.75\")"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"1\")"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"05-11-2018\")"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public static final Order BOOKS \u003d new OrderBuilder()"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_BOOKS)"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(VALID_ORDER_STATUS_BOOKS)"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_BOOKS)"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_BOOKS)"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_BOOKS)"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public static final Order CHOCOLATES \u003d new OrderBuilder()"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_CHOC)"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(VALID_ORDER_STATUS_CHOC)"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_CHOC)"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_CHOC)"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_CHOC)"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    public static final Order COMPUTER \u003d new OrderBuilder()"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(VALID_ORDER_INFORMATION_COMPUTER)"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(VALID_ORDER_STATUS_COMPUTER)"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"            .withPrice(VALID_PRICE_COMPUTER)"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"            .withQuantity(VALID_QUANTITY_COMPUTER)"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_COMPUTER)"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    public static final Order COMICBOOK \u003d new OrderBuilder()"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"            .withOrderInformation(\"Comic Book\")"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"            .withOrderStatus(\"ongoing\")"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"            .withPrice(\"17.99\")"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"            .withQuantity(\"1\")"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"            .withDeliveryDate(\"01-01-2018\")"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"            .build();"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    private TypicalOrders() {} // prevents instantiation"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"     * Returns an {@code AddressBook} with one person and all typical orders."},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    public static AddressBook getTypicalAddressBookWithOrders() {"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"            ab.addPerson(ALICE);"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"not possible\");"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        for (Order order : getTypicalOrders()) {"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            try {"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"                ab.addOrderToOrderList(order);"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"            } catch (DuplicateOrderException doe) {"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        return ab;"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"    public static List\u003cOrder\u003e getTypicalOrders() {"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(SHOES, FACEWASH, BOOKS, CHOCOLATES));"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":110}},{"path":"src/test/java/seedu/address/testutil/CalendarEntryUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class for {@code CalendarEntry}."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryUtil {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an add entry command string for adding the {@code calendarEntry}."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static String getAddEntryCommand(CalendarEntry calendarEntry) {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        return AddEntryCommand.COMMAND_WORD + \" \" + getCalendarEntryDetails(calendarEntry);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     * returns part of command string for the given {@code calEvent}\u0027s details."},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public static String getCalendarEntryDetails(CalendarEntry calEntry) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_ENTRY_TITLE + calEntry.getEntryTitle().toString() + \" \");"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_START_DATE + calEntry.getStartDate().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_END_DATE + calEntry.getEndDate().toString() + \" \");"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_START_TIME + calEntry.getStartTime().toString() + \" \");"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        sb.append(PREFIX_END_TIME + calEntry.getEndTime().toString());"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":35,"-":1}},{"path":"src/test/java/seedu/address/testutil/TypicalBaseEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.testutil.TypicalLocalDates.LEAP_YEAR_DATE;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.DAY_VIEW;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.MONTH_VIEW;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_BACK;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_NEXT;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_TODAY;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.WEEK_VIEW;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewRequestEvent;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code BaseEvent} objects to be used in tests."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalBaseEvents {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarViewRequestEvent CHANGE_TO_DAY_EVENT \u003d"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarViewRequestEvent(DAY_VIEW);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarViewRequestEvent CHANGE_TO_MONTH_EVENT \u003d"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarViewRequestEvent(MONTH_VIEW);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarViewRequestEvent CHANGE_TO_WEEK_EVENT \u003d"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarViewRequestEvent(WEEK_VIEW);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarPageRequestEvent CHANGE_TO_NEXT_PAGE_EVENT \u003d"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarPageRequestEvent(REQUEST_NEXT);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarPageRequestEvent CHANGE_TO_PREVIOUS_PAGE_EVENT \u003d"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarPageRequestEvent(REQUEST_BACK);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarPageRequestEvent CHANGE_TO_TODAY_EVENT \u003d"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarPageRequestEvent(REQUEST_TODAY);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public static final ChangeCalendarDateRequestEvent CHANGE_DATE_EVENT \u003d"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            new ChangeCalendarDateRequestEvent(LEAP_YEAR_DATE);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":36,"-":1}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.page.DayPage;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.page.MonthPage;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.page.WeekPage;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * A handler for {@code CalendarPanel} of the Ui."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cStackPane\u003e {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String CALENDAR_PANEL_ID \u003d \"#calendarPanelHolder\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String DAY_VIEW \u003d \"Day\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String MONTH_VIEW \u003d \"Month\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String WEEK_VIEW \u003d \"Week\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarView calendarView;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarPanelHandle(StackPane rootNode) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        super(rootNode);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        if (getRootNode().getChildren().get(0) instanceof CalendarView) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView \u003d (CalendarView) getRootNode().getChildren().get(0);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"#calendarPanelholder should have child node of CalendarView object.\");"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the current view of {@code calendarView}."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCurrentView() {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        if (calendarView.getSelectedPage() instanceof MonthPage) {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            return MONTH_VIEW;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (calendarView.getSelectedPage() instanceof WeekPage) {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            return WEEK_VIEW;"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (calendarView.getSelectedPage() instanceof DayPage) {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            return DAY_VIEW;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return null;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the current date displayed by {@code calendarView}."},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getCurrentDate() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView.getDate();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns today\u0027s date as stored in {@code calendarView}."},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getTodayDate() {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView.getToday();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":61,"-":1}},{"path":"src/test/java/seedu/address/testutil/CalendarEntryBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class to help with building CalendarEntry objects."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryBuilder {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_ENTRY_TITLE \u003d \"Meeting with boss\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_START_DATE \u003d \"10-10-2018\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_END_DATE \u003d \"10-10-2018\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_START_TIME \u003d \"10:00\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DEFAULT_END_TIME \u003d \"12:00\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private EntryTitle entryTitle;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private StartDate startDate;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private EndDate endDate;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private StartTime startTime;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private EndTime endTime;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder() {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d new EntryTitle(DEFAULT_ENTRY_TITLE);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d new StartDate(DEFAULT_START_DATE);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d new EndDate(DEFAULT_END_DATE);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d new StartTime(DEFAULT_START_TIME);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d new EndTime(DEFAULT_END_TIME);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * Initializes the CalendarEntryBuilder with the data of {@code entryToCopy}."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder(CalendarEntry entryToCopy) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d entryToCopy.getEntryTitle();"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d entryToCopy.getStartDate();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d entryToCopy.getEndDate();"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d entryToCopy.getStartTime();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d entryToCopy.getEndTime();"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EntryTitle} of the {@code CalendarEntry} that we are building."},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEntryTitle(String eventTitle) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d new EntryTitle(eventTitle);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartDate} of the {@code CalendarEntry} that we are building."},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withStartDate(String startDate) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d new StartDate(startDate);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndDate} of the {@code CalendarEntry} that we are building."},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEndDate(String endDate) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d new EndDate(endDate);"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code StartTime} of the {@code CalendarEntry} that we are building."},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withStartTime(String startTime) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d new StartTime(startTime);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets the {@code EndTime} of the {@code CalendarEntry} that we are building."},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryBuilder withEndTime(String endTime) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d new EndTime(endTime);"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry build() {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        return new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":88,"-":1}},{"path":"src/test/java/guitests/guihandles/OrderCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Provides a handle to an order card in the order list panel."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"public class OrderCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private static final String ORDER_INFORMATION_ID \u003d \"#orderInformation\";"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    private static final String PRICE_AND_QUANTITY_ID \u003d \"#priceAndQuantity\";"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    private static final String TOTAL_PRICE_ID \u003d \"#totalPrice\";"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    private static final String DELIVERY_DATE_ID \u003d \"#deliveryDate\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final Label idLabel;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private final Label orderInformationLabel;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    private final Label priceAndQuantityLabel;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private final Label totalPriceLabel;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private final Label deliveryDateLabel;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public OrderCardHandle(Node cardNode) {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        super(cardNode);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderInformationLabel \u003d getChildNode(ORDER_INFORMATION_ID);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        this.priceAndQuantityLabel \u003d getChildNode(PRICE_AND_QUANTITY_ID);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        this.totalPriceLabel \u003d getChildNode(TOTAL_PRICE_ID);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        this.deliveryDateLabel \u003d getChildNode(DELIVERY_DATE_ID);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public String getId() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        return idLabel.getText();"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public String getOrderInformation() {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        return orderInformationLabel.getText();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public String getPriceAndQuantity() {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return priceAndQuantityLabel.getText();"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public String getTotalPrice() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        return totalPriceLabel.getText();"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public String getDeliveryDate() {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        return deliveryDateLabel.getText();"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":52}},{"path":"src/test/java/seedu/address/testutil/TypicalCalendarEntries.java","lines":[{"lineNumber":1,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_GET_BOOKS;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_MEET_SUPPLIER;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_GET_BOOKS;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MEET_SUPPLIER;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_GET_BOOKS;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ENTRY_TITLE_MEET_SUPPLIER;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_GET_BOOKS;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_MEET_SUPPLIER;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_GET_BOOKS;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MEET_SUPPLIER;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":" * A utility class containing a list of {@code CalendarEntry} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"public class TypicalCalendarEntries {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry MEETING_BOSS \u003d new CalendarEntryBuilder()"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Meeting with boss\")"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"06-06-2018\")"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"06-06-2018\")"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"10:00\")"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"12:00\").build();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry GET_STOCKS \u003d new CalendarEntryBuilder()"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Get stocks from supplier\")"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"01-07-2018\")"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"01-07-2018\")"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"08:00\")"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"12:30\").build();"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry ROAD_SHOW \u003d new CalendarEntryBuilder()"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Road Show at Orchard\")"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"02-05-2018\")"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"06-05-2018\")"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"09:00\")"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"19:00\").build();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry WORKSHOP \u003d new CalendarEntryBuilder()"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(\"Workshop\")"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(\"28-05-2018\")"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(\"29-05-2018\")"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(\"10:00\")"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(\"15:00\").build();"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    // Manually added - Calendar Entry\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry MEET_SUPPLIER \u003d new CalendarEntryBuilder()"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(VALID_ENTRY_TITLE_MEET_SUPPLIER)"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(VALID_START_DATE_MEET_SUPPLIER)"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(VALID_END_DATE_MEET_SUPPLIER)"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(VALID_START_TIME_MEET_SUPPLIER)"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(VALID_END_TIME_MEET_SUPPLIER).build();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    public static final CalendarEntry GET_BOOKS \u003d new CalendarEntryBuilder()"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            .withEntryTitle(VALID_ENTRY_TITLE_GET_BOOKS)"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartDate(VALID_START_DATE_GET_BOOKS)"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndDate(VALID_END_DATE_GET_BOOKS)"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"            .withStartTime(VALID_START_TIME_GET_BOOKS)"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"            .withEndTime(VALID_END_TIME_GET_BOOKS).build();"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    private TypicalCalendarEntries() {} // prevents instantiation"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public static CalendarManager getTypicalCalendarManagerWithEntries() {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager cm \u003d new CalendarManager();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry calEvent : getTypicalCalendarEntries()) {"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"            try {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                cm.addCalendarEntry(calEvent);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"            } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        return cm;"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    public static List\u003cCalendarEntry\u003e getTypicalCalendarEntries() {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING_BOSS, GET_STOCKS, ROAD_SHOW, WORKSHOP));"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":89}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String GROUPS_FIELD_ID \u003d \"#groups\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PREFERENCES_FIELD_ID \u003d \"#preferences\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e groupLabels;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e preferenceLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Region groupsContainer \u003d getChildNode(GROUPS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.groupLabels \u003d groupsContainer"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Region preferencesContainer \u003d getChildNode(PREFERENCES_FIELD_ID);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.preferenceLabels \u003d preferencesContainer"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getGroups() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return groupLabels"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getPreferences() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return preferenceLabels"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"AJZ1995"},"content":"    //@@author AJZ1995"},{"lineNumber":88,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getGroupTagStyleClasses(String tag) {"},{"lineNumber":89,"author":{"gitID":"AJZ1995"},"content":"        return groupLabels"},{"lineNumber":90,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":91,"author":{"gitID":"AJZ1995"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":92,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":93,"author":{"gitID":"AJZ1995"},"content":"                .findFirst()"},{"lineNumber":94,"author":{"gitID":"AJZ1995"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":95,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":97,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getPreferenceTagStyleClasses(String tag) {"},{"lineNumber":98,"author":{"gitID":"AJZ1995"},"content":"        return preferenceLabels"},{"lineNumber":99,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":100,"author":{"gitID":"AJZ1995"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":101,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":102,"author":{"gitID":"AJZ1995"},"content":"                .findFirst()"},{"lineNumber":103,"author":{"gitID":"AJZ1995"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":104,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":19,"-":86}},{"path":"src/test/java/guitests/guihandles/CalendarEntryListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.CalendarEntryCard;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Provides a handle for {@code CalendarEntryListPanel} containing the list of {@code CalendarEntryCard}."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanelHandle extends NodeHandle\u003cListView\u003cCalendarEntryCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String CALENDAR_ENTRY_LIST_VIEW_ID \u003d \"#calendarEntryCardListView\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryListPanelHandle(ListView\u003cCalendarEntryCard\u003e rootNode) {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        super(rootNode);"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * Navigates the listview to display and select the calendar entry."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public void navigateToCard(CalendarEntry calendarEntry) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntryCard\u003e entryCards \u003d getRootNode().getItems();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        Optional\u003cCalendarEntryCard\u003e matchingCard \u003d entryCards.stream()"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(entryCard -\u003e entryCard.calendarEntry.equals(calendarEntry)).findFirst();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"            throw  new IllegalArgumentException(\"Calendar Entry does not exist.\");"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        });"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the calendar entry card handle of an calendar entry associated with the {@code index} in the list."},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCardHandle getCalendarEntryCardHandle (int index) {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return getCalendarEntryCardHandle(getRootNode().getItems().get(index).calendarEntry);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the calendar entry card handle of an calendar entry"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"     * associated with the {@code calendarEntry} in the list."},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryCardHandle getCalendarEntryCardHandle(CalendarEntry calendarEntry) {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        Optional\u003cCalendarEntryCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                .filter(entryCard -\u003e entryCard.calendarEntry.equals(calendarEntry))"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                .map(orderCard -\u003e new CalendarEntryCardHandle(orderCard.getRoot()))"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"                .findFirst();"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Calendar Entry does not exist.\"));"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":1}},{"path":"src/test/java/guitests/guihandles/OrderListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.ui.OrderCard;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Provides a handle for {@code OrderListPanel} containing the list of {@code OrderCard}."},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class OrderListPanelHandle extends NodeHandle\u003cListView\u003cOrderCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_LIST_VIEW_ID \u003d \"#orderListView\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public OrderListPanelHandle(ListView\u003cOrderCard\u003e orderListPanelNode) {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        super(orderListPanelNode);"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * Navigates the listview to display and select the order."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public void navigateToCard(Order order) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        List\u003cOrderCard\u003e orderCards \u003d getRootNode().getItems();"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        Optional\u003cOrderCard\u003e matchingCard \u003d orderCards.stream()"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"                .filter(orderCard -\u003e orderCard.order.equals(order)).findFirst();"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            throw  new IllegalArgumentException(\"Order does not exist.\");"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        });"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"     * Returns the order card handle of an order associated with the {@code index} in the list."},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public OrderCardHandle getOrderCardHandle(int index) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        return getOrderCardHandle(getRootNode().getItems().get(index).order);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"     * Returns the order card handle of an order associated with the {@code order} in the list."},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    private OrderCardHandle getOrderCardHandle(Order order) {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        Optional\u003cOrderCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                .filter(orderCard -\u003e orderCard.order.equals(order))"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"                .map(orderCard -\u003e new OrderCardHandle(orderCard.getRoot()))"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                .findFirst();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Order does not exist.\"));"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":58}},{"path":"src/test/java/guitests/guihandles/PersonPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":" * Provides a handle to the Person Panel."},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":" */"},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":"    public static final String PERSON_PANEL_ID \u003d \"#personPanel\";"},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":"    private static final String GROUPS_FIELD_ID \u003d \"#groups\";"},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":"    private static final String PREFERENCES_FIELD_ID \u003d \"#preferences\";"},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":"    private Label name;"},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":"    private Label phone;"},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":"    private Label address;"},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    private Label email;"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":"    private List\u003cLabel\u003e groupLabels;"},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"    private List\u003cLabel\u003e preferenceLabels;"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"    public PersonPanelHandle(Node personPanelNode) {"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":"        super(personPanelNode);"},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":"        this.name \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"        this.phone \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":"        this.address \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"        this.email \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":"    public String getName() {"},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"        return name.getText();"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"    public String getPhone() {"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":"        return phone.getText();"},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":"    public String getEmail() {"},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"        return email.getText();"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"        return address.getText();"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":"    * Update groups of each person"},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"    */"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"    public void updateGroups() {"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":"        Region groupsContainer \u003d getChildNode(GROUPS_FIELD_ID);"},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"        this.groupLabels \u003d groupsContainer"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"                .map(Label.class::cast)"},{"lineNumber":67,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":68,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":70,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getGroups() {"},{"lineNumber":71,"author":{"gitID":"AJZ1995"},"content":"        return groupLabels"},{"lineNumber":72,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":73,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getText)"},{"lineNumber":74,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":75,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":77,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"AJZ1995"},"content":"     * Update preferences of each person"},{"lineNumber":79,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"AJZ1995"},"content":"    public void updatePreferences() {"},{"lineNumber":81,"author":{"gitID":"AJZ1995"},"content":"        Region preferenceContainer \u003d getChildNode(PREFERENCES_FIELD_ID);"},{"lineNumber":82,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":83,"author":{"gitID":"AJZ1995"},"content":"        this.preferenceLabels \u003d preferenceContainer"},{"lineNumber":84,"author":{"gitID":"AJZ1995"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":85,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":86,"author":{"gitID":"AJZ1995"},"content":"                .map(Label.class::cast)"},{"lineNumber":87,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":88,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":90,"author":{"gitID":"AJZ1995"},"content":"    public List\u003cString\u003e getPreferences() {"},{"lineNumber":91,"author":{"gitID":"AJZ1995"},"content":"        return preferenceLabels"},{"lineNumber":92,"author":{"gitID":"AJZ1995"},"content":"                .stream()"},{"lineNumber":93,"author":{"gitID":"AJZ1995"},"content":"                .map(Label::getText)"},{"lineNumber":94,"author":{"gitID":"AJZ1995"},"content":"                .collect(Collectors.toList());"},{"lineNumber":95,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":97,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"AJZ1995"},"content":"     * Sets the labels to display given {@code Person}\u0027s information."},{"lineNumber":99,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"AJZ1995"},"content":"    public void loadPersonPage(Person person) {"},{"lineNumber":101,"author":{"gitID":"AJZ1995"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":102,"author":{"gitID":"AJZ1995"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":103,"author":{"gitID":"AJZ1995"},"content":"        address.setText(person.getAddress().toString());"},{"lineNumber":104,"author":{"gitID":"AJZ1995"},"content":"        email.setText(person.getEmail().toString());"},{"lineNumber":105,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"AJZ1995"},"content":"}"}],"authorContributionMap":{"AJZ1995":106}},{"path":"src/test/java/guitests/guihandles/CalendarEntryCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Provides a handle to a calendar entry card in the calendar entry list panel."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String ENTRY_TITLE_ID \u003d \"#entryTitle\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String START_DATE_ID \u003d \"#startDate\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String END_DATE_ID \u003d \"#endDate\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String TIME_DURATION_ID \u003d \"#timeDuration\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label idLabel;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label entryTitleLabel;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label startDateLabel;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label endDateLabel;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final Label timeDurationLabel;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCardHandle(Node cardNode) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        super(cardNode);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitleLabel \u003d getChildNode(ENTRY_TITLE_ID);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDateLabel \u003d getChildNode(START_DATE_ID);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDateLabel \u003d getChildNode(END_DATE_ID);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.timeDurationLabel \u003d getChildNode(TIME_DURATION_ID);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public String getId() {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        return idLabel.getText();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public String getEntryTitle() {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitleLabel.getText();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    public String getStartDate() {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        return startDateLabel.getText();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public String getEndDate() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return endDateLabel.getText();"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public String getTimeDuration() {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return timeDurationLabel.getText();"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":51,"-":1}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandSyntaxListUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case TAB:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            autocompleteCommand(commandTextField.getText());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"     * Handles the Tab button pressed event by updating {@code CommandBox}\u0027s text"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"     * field with the full command syntax based on {@code text} entered so far."},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"    private void autocompleteCommand(String text) {"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        ArrayList\u003cString\u003e commandSyntaxList \u003d CommandSyntaxListUtil.getCommandSyntaxList();"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        // get list of matches of the input entered so far"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        List\u003cString\u003e autocompleteCommandList \u003d commandSyntaxList.stream()"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"                .filter(s -\u003e s.startsWith(text))"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"                .collect(Collectors.toList());"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        // replace input in text field with first match"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        if (!(autocompleteCommandList.isEmpty())) {"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"            replaceText(autocompleteCommandList.get(0));"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":155,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":159,"amad-person":19}},{"path":"src/main/java/seedu/address/ui/util/CalendarFxUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.page.DayPage;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Contains helper methods and list of constants related to handling CalendarFx display."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Contains methods to initialise Calendar such that unused functions are not displayed, and mouse events are not"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * listened to."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarFxUtil {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MONTH_VIEW \u003d \"Month\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DAY_VIEW \u003d \"Day\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String WEEK_VIEW \u003d \"Week\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String REQUEST_TODAY \u003d \"Today\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String REQUEST_BACK \u003d \"Back\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String REQUEST_NEXT \u003d \"Next\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns modified CalendarView such that unnecessary buttons and features are not shown."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static CalendarView returnModifiedCalendarView() {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarView calendarView \u003d new CalendarView();"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.getDayPage().setDayPageLayout(DayPage.DayPageLayout.DAY_ONLY);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        //calendarView.getDayPage().setDisable(true);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":41,"-":1}},{"path":"src/test/java/guitests/guihandles/CenterPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * A handler for {@code CenterPanel} of the Ui."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class CenterPanelHandle extends NodeHandle\u003cStackPane\u003e {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String CENTER_PANEL_ID \u003d \"#centerPlaceholder\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private PersonPanelHandle personPanelHandle;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarPanelHandle calendarPanelHandle;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public CenterPanelHandle(StackPane rootNode) {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        super(rootNode);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets Up {@code CalendarPanelHandle}."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * This method is only invoked only after {@code CenterPanel} adds {@code CalendarPanel} to its root node."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUpCalendarPanelHandle() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanelHandle \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_PANEL_ID));"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarPanelHandle getCalendarPanelHandle() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        setUpCalendarPanelHandle();"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarPanelHandle;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets Up {@code PersonPanelHandle}."},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     * This method is only invoked only after {@code CenterPanel} adds {@code PersonPanel} to its root node."},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public void setUpPersonPanelHandle() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        personPanelHandle \u003d new PersonPanelHandle(getChildNode(PersonPanelHandle.PERSON_PANEL_ID));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public PersonPanelHandle getPersonPanelHandle() {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        setUpPersonPanelHandle();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return personPanelHandle;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    // CalendarPanelHandle-related operations"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the current view of the calendar."},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarCurrentView() {"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarPanelHandle.getCurrentView();"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the current date displayed in the calendar."},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getCalendarCurrentDate() {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarPanelHandle.getCurrentDate();"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the date set as today in the calendar."},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getCalendarTodayDate() {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarPanelHandle.getTodayDate();"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    // PersonPanelHandle-related operations"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":72,"-":1}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.DAY_VIEW;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.MONTH_VIEW;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_BACK;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_NEXT;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_TODAY;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.WEEK_VIEW;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.application.Platform;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewRequestEvent;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.util.CalendarFxUtil;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":" * Calendar Panel displaying calendar."},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":" * ContactSails implements CalendarFX to display Calendar."},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarView calendarView;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarSource calendarSource;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane calendarPanelHolder;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarPanel(Calendar calendar) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView \u003d CalendarFxUtil.returnModifiedCalendarView();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource \u003d new CalendarSource();"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        initialiseCalendar(calendar);"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        createTimeThread();"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets up CalendarFX."},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    public void initialiseCalendar(Calendar calendar) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        calendarSource.getCalendars().addAll(calendar);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.getCalendarSources().setAll(calendarSource);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanelHolder.getChildren().setAll(calendarView);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"     * Adapted from CalendarFX developer manual QuickStart section."},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"     * http://dlsc.com/wp-content/html/calendarfx/manual.html#_quick_start"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    private void createTimeThread() {"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        Thread updateTimeThread \u003d new Thread(\"Calendar: Update Time Thread\") {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"            @Override"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"            public void run() {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                while (true) {"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                    Platform.runLater(() -\u003e {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"                        calendarView.setToday(LocalDate.now());"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"                        calendarView.setTime(LocalTime.now());"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                    });"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"                    try {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"                        // update every 10 seconds"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"                        sleep(10000);"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"                    } catch (InterruptedException e) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"                        e.printStackTrace();"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"                }"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        };"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.setPriority(Thread.MIN_PRIORITY);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.setDaemon(true);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        updateTimeThread.start();"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"     * Handles Request to display Calendar in specific viewing format."},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarViewRequestEvent(ChangeCalendarViewRequestEvent event) {"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        String view \u003d event.getView();"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(view);"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        if (view.equalsIgnoreCase(MONTH_VIEW)) {"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.showMonthPage();"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (view.equalsIgnoreCase(DAY_VIEW)) {"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.showDayPage();"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (view.equalsIgnoreCase(WEEK_VIEW)) {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.showWeekPage();"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     * Handles request to change the current page of the Calendar to the page in {@code event}."},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarPageRequestEvent(ChangeCalendarPageRequestEvent event) {"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        String request \u003d event.getRequestType();"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(request);"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        if (request.equals(REQUEST_TODAY)) {"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.getSelectedPage().goToday();"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (request.equals(REQUEST_BACK)) {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.getSelectedPage().goBack();"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (request.equals(REQUEST_NEXT)) {"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"            calendarView.getSelectedPage().goForward();"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"     * Handles request to change the current date of the Calendar to the date in {@code event}."},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarDateRequestEvent(ChangeCalendarDateRequestEvent event) {"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(event.getDate());"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        calendarView.setDate(event.getDate());"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":135,"-":1}},{"path":"src/main/java/seedu/address/ui/CalendarEntryCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * An UI component that displays information of a {@code CalendarEntry}."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarEntryCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public final CalendarEntry calendarEntry;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    private HBox cardPane;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private Label entryTitle;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private Label id;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private Label startDate;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private Label endDate;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private Label timeDuration;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCard(CalendarEntry calendarEntry, int displayedIndex) {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarEntry \u003d calendarEntry;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle.setText(calendarEntry.getEntryTitle().toString());"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        startDate.setText(\"From: \" + calendarEntry.getStartDate().toString());"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        endDate.setText(\"To: \" + calendarEntry.getEndDate().toString());"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        timeDuration.setText(\"Between \" + calendarEntry.getStartTime().toString()"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                + \" and \" + calendarEntry.getEndTime().toString());"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof CalendarEntryCard)) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        // state check"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntryCard card \u003d (CalendarEntryCard) other;"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 calendarEntry.equals(card.calendarEntry);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":64,"-":1}},{"path":"src/main/java/seedu/address/ui/OrderCard.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.text.DecimalFormat;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * A UI component that displays information of an {@code Order}."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"public class OrderCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private static final String FXML \u003d \"OrderListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private static final double ICON_WIDTH \u003d 25;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    private static final double ICON_HEIGHT \u003d 25;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private static final String ORDER_STATUS_DONE \u003d \"DONE\";"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public final Order order;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(OrderCard.class);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    private Label orderInformation;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private Label orderStatus;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    private Label priceAndQuantity;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    private Label totalPrice;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    private Label deliveryDate;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    private ImageView orderStatusIcon;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    private ImageView priceAndQuantityIcon;"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    private ImageView totalPriceIcon;"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    private ImageView deliveryDateIcon;"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public OrderCard(Order order, int displayedIndex) {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        super(FXML);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        this.order \u003d order;"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        orderInformation.setText(order.getOrderInformation().toString());"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        orderStatus.setText(order.getOrderStatus().getOrderStatusValue().toUpperCase());"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        setPriceAndQuantity(order);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        setTotalPrice(order);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        deliveryDate.setText(\"Deliver By: \" + order.getDeliveryDate().toString());"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        setImageSizeForAllImages();"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"     * Returns true if order status equals done."},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    public boolean isOrderStatusDone() {"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        if (orderStatus.getText().equals(ORDER_STATUS_DONE)) {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        return false;"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"     * Sets text for price and quantity label."},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    private void setPriceAndQuantity(Order order) {"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        double priceValue \u003d Double.valueOf(order.getPrice().toString());"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        priceAndQuantity.setText(\"S$\" + String.valueOf(decimalFormat.format(priceValue))"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                + \" X \" + order.getQuantity().toString());"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"     * Sets text for total price label."},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    private void setTotalPrice(Order order) {"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        totalPrice.setText(\"Total: S$\" + getTotalPrice(order.getPrice(), order.getQuantity()));"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"     * Calculates total price of order."},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"    private String getTotalPrice(Price price, Quantity quantity) {"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        double priceValue \u003d Double.valueOf(price.toString());"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        int quantityValue \u003d Integer.valueOf(quantity.toString());"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        double totalPrice \u003d priceValue * quantityValue;"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        DecimalFormat decimalFormat \u003d new DecimalFormat(\"#.00\");"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        return String.valueOf(decimalFormat.format(totalPrice));"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"     * Sets image sizes for all icons used in order card."},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    private void setImageSizeForAllImages() {"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        orderStatusIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        orderStatusIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        priceAndQuantityIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        priceAndQuantityIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"        totalPriceIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"        totalPriceIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        deliveryDateIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        deliveryDateIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        // short circuit if same object"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        // instanceof handles nulls"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof OrderCard)) {"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        // state check"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        OrderCard card \u003d (OrderCard) other;"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 order.equals(card.order);"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":151}},{"path":"src/main/java/seedu/address/ui/RightPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * The Right Panel of the App that can switch between Order List Panel and CalendarEntry List Panel."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class RightPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"RightPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private OrderListPanel orderListPanel;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntryListPanel calendarEntryListPanel;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane rightPlaceHolder;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public RightPanel(ObservableList\u003cOrder\u003e orderList, ObservableList\u003cCalendarEntry\u003e calendarEntryList) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        orderListPanel \u003d new OrderListPanel(orderList);"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryListPanel \u003d new CalendarEntryListPanel(calendarEntryList);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        // Displays Order List by default."},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        displayOrderListPanel();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the OrderList Panel."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    private void displayOrderListPanel() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        if (!rightPlaceHolder.getChildren().contains(orderListPanel.getRoot())) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceHolder.getChildren().clear();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceHolder.getChildren().add(orderListPanel.getRoot());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the CalendarEntryList Panel."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    private void displayCalendarEntryListPanel() {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (!rightPlaceHolder.getChildren().contains(calendarEntryListPanel.getRoot())) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceHolder.getChildren().clear();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            rightPlaceHolder.getChildren().add(calendarEntryListPanel.getRoot());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleDisplayOrderListEvent(DisplayOrderListEvent event) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        displayOrderListPanel();"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleDisplayCalendarEntryListEvent(DisplayCalendarEntryListEvent event) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarEntryListPanel();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":72,"-":1}},{"path":"src/main/java/seedu/address/ui/OrderListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.model.ChangeOrderStatusEvent;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":" * Panel containing orders to be managed by the salesperson."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"public class OrderListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    private static final String FXML \u003d \"OrderListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private static final String ORDER_STATUS_ONGOING_CSS \u003d \"view/OrderStatusOngoing.css\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    private static final String ORDER_STATUS_DONE_CSS \u003d \"view/OrderStatusDone.css\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    private ListView\u003cOrderCard\u003e orderListView;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        setConnections(orderList);"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private void setConnections(ObservableList\u003cOrder\u003e orderList) {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        ObservableList\u003cOrderCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"                orderList, (order) -\u003e new OrderCard(order, orderList.indexOf(order) + 1));"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        orderListView.setItems(mappedList);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        orderListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"                        raise(new OrderPanelSelectionChangedEvent(newValue));"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"                    }"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                });"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     * Scrolls to the {@code OrderCard} at {@code index} and selects it."},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"     * @param index index of order card to be scrolled to."},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    private void scrollTo(int index) {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"            orderListView.scrollTo(index);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"            orderListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        });"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    @Subscribe"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    private void handleChangeOrderStatusEvent(ChangeOrderStatusEvent event) {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code OrderCard}."},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    class OrderListViewCell extends ListCell\u003cOrderCard\u003e {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        protected void updateItem(OrderCard order, boolean empty) {"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"            super.updateItem(order, empty);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"            if (empty || order \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                setGraphic(null);"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                setText(null);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"            } else {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                setGraphic(order.getRoot());"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"            if (order !\u003d null) {"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"                this.getStylesheets().clear();"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"                if (order.isOrderStatusDone()) {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"                    this.getStylesheets().add(ORDER_STATUS_DONE_CSS);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"                } else {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                    this.getStylesheets().add(ORDER_STATUS_ONGOING_CSS);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                }"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private CenterPanel centerPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private RightPanel rightPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane centerPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane rightPanelPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTheme();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":103,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":109,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        centerPanel \u003d new CenterPanel(logic.getCalendar());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        centerPlaceholder.getChildren().add(centerPanel.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        rightPanel \u003d new RightPanel(logic.getFilteredOrderList(), logic.getFilteredCalendarEntryList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        rightPanelPlaceholder.getChildren().add(rightPanel.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"    private void setTheme() {"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"        Theme.changeTheme(primaryStage, Theme.DARK_THEME_KEYWORD);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"     * Changes the theme of the application."},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"    @FXML"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":"    public void handleChangeTheme(ChangeThemeEvent event) {"},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        Theme.changeTheme(primaryStage, event.getTheme());"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public RightPanel getRightPanel() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return this.rightPanel;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    @Subscribe"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"    private void handleChangeThemeEvent(ChangeThemeEvent event) {"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"        handleChangeTheme(event);"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":213,"amad-person":21}},{"path":"src/main/java/seedu/address/ui/PersonPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"AJZ1995"},"content":"//@@author AJZ1995"},{"lineNumber":2,"author":{"gitID":"AJZ1995"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":4,"author":{"gitID":"AJZ1995"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":6,"author":{"gitID":"AJZ1995"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":8,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":12,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"AJZ1995"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":15,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.MainApp;"},{"lineNumber":16,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.commons.events.ui.ResetPersonPanelRequestEvent;"},{"lineNumber":19,"author":{"gitID":"AJZ1995"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":21,"author":{"gitID":"AJZ1995"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"AJZ1995"},"content":" *  Displays the contact details of a selected person"},{"lineNumber":23,"author":{"gitID":"AJZ1995"},"content":" */"},{"lineNumber":24,"author":{"gitID":"AJZ1995"},"content":"public class PersonPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":26,"author":{"gitID":"AJZ1995"},"content":"    private static final String FXML \u003d \"PersonPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"AJZ1995"},"content":"    private static final double ICON_WIDTH \u003d 25;"},{"lineNumber":28,"author":{"gitID":"AJZ1995"},"content":"    private static final double ICON_HEIGHT \u003d 25;"},{"lineNumber":29,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":30,"author":{"gitID":"AJZ1995"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":31,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":32,"author":{"gitID":"AJZ1995"},"content":"    private PersonCard selectedPersonCard;"},{"lineNumber":33,"author":{"gitID":"AJZ1995"},"content":"    private Person person;"},{"lineNumber":34,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":35,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"AJZ1995"},"content":"    private VBox panel;"},{"lineNumber":37,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":38,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"AJZ1995"},"content":"    private Label name;"},{"lineNumber":40,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":41,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"AJZ1995"},"content":"    private Label phone;"},{"lineNumber":43,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":44,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"AJZ1995"},"content":"    private Label address;"},{"lineNumber":46,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":47,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"AJZ1995"},"content":"    private Label email;"},{"lineNumber":49,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":50,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"AJZ1995"},"content":"    private FlowPane groups;"},{"lineNumber":52,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":53,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"AJZ1995"},"content":"    private FlowPane preferences;"},{"lineNumber":55,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":56,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"AJZ1995"},"content":"    private ImageView phoneIcon;"},{"lineNumber":58,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":59,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"AJZ1995"},"content":"    private ImageView addressIcon;"},{"lineNumber":61,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":62,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"AJZ1995"},"content":"    private ImageView emailIcon;"},{"lineNumber":64,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":65,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"AJZ1995"},"content":"    private ImageView groupIcon;"},{"lineNumber":67,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":68,"author":{"gitID":"AJZ1995"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"AJZ1995"},"content":"    private ImageView prefIcon;"},{"lineNumber":70,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":71,"author":{"gitID":"AJZ1995"},"content":"    public PersonPanel() {"},{"lineNumber":72,"author":{"gitID":"AJZ1995"},"content":"        super(FXML);"},{"lineNumber":73,"author":{"gitID":"AJZ1995"},"content":"        loadBlankPersonPage();"},{"lineNumber":74,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":76,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"AJZ1995"},"content":"     * Loads up a blank page when no contact is selected."},{"lineNumber":78,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"AJZ1995"},"content":"    private void loadBlankPersonPage() {"},{"lineNumber":80,"author":{"gitID":"AJZ1995"},"content":"        name.setText(\"\");"},{"lineNumber":81,"author":{"gitID":"AJZ1995"},"content":"        phone.setText(\"\");"},{"lineNumber":82,"author":{"gitID":"AJZ1995"},"content":"        address.setText(\"\");"},{"lineNumber":83,"author":{"gitID":"AJZ1995"},"content":"        email.setText(\"\");"},{"lineNumber":84,"author":{"gitID":"AJZ1995"},"content":"        groups.getChildren().clear();"},{"lineNumber":85,"author":{"gitID":"AJZ1995"},"content":"        preferences.getChildren().clear();"},{"lineNumber":86,"author":{"gitID":"AJZ1995"},"content":"        initBlankIcons();"},{"lineNumber":87,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"     * Sets all image icons to blank."},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    private void initBlankIcons() {"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setImage(null);"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        addressIcon.setImage(null);"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        emailIcon.setImage(null);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        prefIcon.setImage(null);"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        groupIcon.setImage(null);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"AJZ1995"},"content":"    //@@author AJZ1995"},{"lineNumber":103,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"AJZ1995"},"content":"     * Loads the given {@code Person}\u0027s Information."},{"lineNumber":105,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"AJZ1995"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":107,"author":{"gitID":"AJZ1995"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":108,"author":{"gitID":"AJZ1995"},"content":"        phone.setText(person.getPhone().toString());"},{"lineNumber":109,"author":{"gitID":"AJZ1995"},"content":"        address.setText(person.getAddress().toString());"},{"lineNumber":110,"author":{"gitID":"AJZ1995"},"content":"        email.setText(person.getEmail().toString());"},{"lineNumber":111,"author":{"gitID":"AJZ1995"},"content":"        person.getGroupTags().forEach(tag -\u003e {"},{"lineNumber":112,"author":{"gitID":"AJZ1995"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":113,"author":{"gitID":"AJZ1995"},"content":"            tagLabel.getStyleClass().add(PersonCard.getGroupTagColorStyleFor(tag.tagName));"},{"lineNumber":114,"author":{"gitID":"AJZ1995"},"content":"            groups.getChildren().add(tagLabel);"},{"lineNumber":115,"author":{"gitID":"AJZ1995"},"content":"        });"},{"lineNumber":116,"author":{"gitID":"AJZ1995"},"content":"        person.getPreferenceTags().forEach(tag -\u003e {"},{"lineNumber":117,"author":{"gitID":"AJZ1995"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":118,"author":{"gitID":"AJZ1995"},"content":"            tagLabel.getStyleClass().add(PersonCard.getPrefTagColorStyleFor(tag.tagName));"},{"lineNumber":119,"author":{"gitID":"AJZ1995"},"content":"            preferences.getChildren().add(tagLabel);"},{"lineNumber":120,"author":{"gitID":"AJZ1995"},"content":"        });"},{"lineNumber":121,"author":{"gitID":"AJZ1995"},"content":"        setIcons();"},{"lineNumber":122,"author":{"gitID":"AJZ1995"},"content":"        setImageSizeForAllImages();"},{"lineNumber":123,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"AJZ1995"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"     * Sets all image icons."},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"    private void setIcons() {"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        Image phoneIconImage \u003d new Image(MainApp.class.getResourceAsStream(\"/images/phone_icon.png\"));"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setImage(phoneIconImage);"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        Image addressIconImage \u003d new Image(MainApp.class.getResourceAsStream(\"/images/address_icon.png\"));"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        addressIcon.setImage(addressIconImage);"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        Image emailIconImage \u003d new Image(MainApp.class.getResourceAsStream(\"/images/email_icon.png\"));"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        emailIcon.setImage(emailIconImage);"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"        Image prefIconImage \u003d new Image(MainApp.class.getResourceAsStream(\"/images/pref_icon.png\"));"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"        prefIcon.setImage(prefIconImage);"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"        Image groupIconImage \u003d new Image(MainApp.class.getResourceAsStream(\"/images/group_icon.png\"));"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"        groupIcon.setImage(groupIconImage);"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"     * Sets image sizes for all icons used in person panel."},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"    private void setImageSizeForAllImages() {"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"        addressIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"        addressIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"        emailIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"        emailIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        groupIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"        groupIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        prefIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        prefIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"AJZ1995"},"content":"    //@@author AJZ1995"},{"lineNumber":170,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":171,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"AJZ1995"},"content":"     * Handles the event whereby selected person in Person List Panel has changed."},{"lineNumber":173,"author":{"gitID":"AJZ1995"},"content":"     * @param event"},{"lineNumber":174,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"AJZ1995"},"content":"    public void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":176,"author":{"gitID":"AJZ1995"},"content":"        loadBlankPersonPage();"},{"lineNumber":177,"author":{"gitID":"AJZ1995"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":178,"author":{"gitID":"AJZ1995"},"content":"        selectedPersonCard \u003d event.getNewSelection();"},{"lineNumber":179,"author":{"gitID":"AJZ1995"},"content":"        person \u003d selectedPersonCard.person;"},{"lineNumber":180,"author":{"gitID":"AJZ1995"},"content":"        loadPersonPage(person);"},{"lineNumber":181,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":183,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"AJZ1995"},"content":"     * Handles the request to reset the Person Panel, causing panel to display nothing."},{"lineNumber":185,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"AJZ1995"},"content":"    public void handleResetPersonPanelRequestEvent(ResetPersonPanelRequestEvent event) {"},{"lineNumber":187,"author":{"gitID":"AJZ1995"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":188,"author":{"gitID":"AJZ1995"},"content":"        loadBlankPersonPage();"},{"lineNumber":189,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"AJZ1995"},"content":"    //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AJZ1995":133,"-":4,"amad-person":54}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final double ICON_WIDTH \u003d 25;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final double ICON_HEIGHT \u003d 25;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"indigo\" };"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane groups;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private FlowPane preferences;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private ImageView phoneIcon;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private ImageView addressIcon;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private ImageView emailIcon;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private ImageView groupIcon;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private ImageView prefIcon;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        initGroupTags(person);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        initPreferenceTags(person);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setImageSizeForAllImages();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    private void setImageSizeForAllImages() {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        phoneIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        addressIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        addressIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        emailIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        emailIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        groupIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        groupIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        prefIcon.setFitWidth(ICON_WIDTH);"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        prefIcon.setFitHeight(ICON_HEIGHT);"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":94,"author":{"gitID":"AJZ1995"},"content":"    //@@author AJZ1995"},{"lineNumber":95,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"AJZ1995"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":97,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"AJZ1995"},"content":"    public static String getPrefTagColorStyleFor(String tagName) {"},{"lineNumber":99,"author":{"gitID":"AJZ1995"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":100,"author":{"gitID":"AJZ1995"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":101,"author":{"gitID":"AJZ1995"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":102,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":104,"author":{"gitID":"AJZ1995"},"content":"    public static String getGroupTagColorStyleFor(String tagName) {"},{"lineNumber":105,"author":{"gitID":"AJZ1995"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":106,"author":{"gitID":"AJZ1995"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":107,"author":{"gitID":"AJZ1995"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":108,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":110,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"AJZ1995"},"content":"     * Creates the group tag labels for {@code person}."},{"lineNumber":112,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"AJZ1995"},"content":"    private void initGroupTags(Person person) {"},{"lineNumber":114,"author":{"gitID":"AJZ1995"},"content":"        person.getGroupTags().forEach(tag -\u003e {"},{"lineNumber":115,"author":{"gitID":"AJZ1995"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":116,"author":{"gitID":"AJZ1995"},"content":"            tagLabel.getStyleClass().add(getGroupTagColorStyleFor(tag.tagName));"},{"lineNumber":117,"author":{"gitID":"AJZ1995"},"content":"            groups.getChildren().add(tagLabel);"},{"lineNumber":118,"author":{"gitID":"AJZ1995"},"content":"        });"},{"lineNumber":119,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"AJZ1995"},"content":""},{"lineNumber":121,"author":{"gitID":"AJZ1995"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"AJZ1995"},"content":"     * Creates the preference tag labels for {@code person}."},{"lineNumber":123,"author":{"gitID":"AJZ1995"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"AJZ1995"},"content":"    private void initPreferenceTags(Person person) {"},{"lineNumber":125,"author":{"gitID":"AJZ1995"},"content":"        person.getPreferenceTags().forEach(tag -\u003e {"},{"lineNumber":126,"author":{"gitID":"AJZ1995"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":127,"author":{"gitID":"AJZ1995"},"content":"            tagLabel.getStyleClass().add(getPrefTagColorStyleFor(tag.tagName));"},{"lineNumber":128,"author":{"gitID":"AJZ1995"},"content":"            preferences.getChildren().add(tagLabel);"},{"lineNumber":129,"author":{"gitID":"AJZ1995"},"content":"        });"},{"lineNumber":130,"author":{"gitID":"AJZ1995"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"AJZ1995"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"AJZ1995":38,"-":94,"amad-person":18}},{"path":"src/main/java/seedu/address/ui/CalendarEntryListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.CalendarEntryPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * Panel containing calendar entries present in calendar."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CalendarEntryListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CalendarEntryListPanel.class);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private ListView\u003cCalendarEntryCard\u003e calendarEntryCardListView;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryListPanel(ObservableList\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        setConnections(calendarEntries);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private void setConnections(ObservableList\u003cCalendarEntry\u003e calendarEntryList) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cCalendarEntryCard\u003e mappedList \u003d EasyBind.map(calendarEntryList, (calendarEntry) -\u003e"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"                        new CalendarEntryCard(calendarEntry, calendarEntryList.indexOf(calendarEntry) + 1));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.setCellFactory(listView -\u003e new CalendarEntryListPanel.CalendarEntryListViewCell());"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryCardListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                        logger.fine(\"Selection in calendar entry list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                        raise(new CalendarEntryPanelSelectionChangedEvent(newValue));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                });"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CalendarEntryCard}."},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    class CalendarEntryListViewCell extends ListCell\u003cCalendarEntryCard\u003e {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        @Override"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        protected void updateItem(CalendarEntryCard calendarEntry, boolean empty) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            super.updateItem(calendarEntry, empty);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            if (empty || calendarEntry \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"                setGraphic(null);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"                setText(null);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"                setGraphic(calendarEntry.getRoot());"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":68,"-":1}},{"path":"src/main/java/seedu/address/ui/CenterPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewRequestEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayPersonPanelRequestEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ResetPersonPanelRequestEvent;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * The Center Panel of the App that can switch between {@code Person Panel} and {@code Calendar Panel}."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * Center Panel subscribes to Events meant for Person Panel and Calendar Panel"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" * in order to handle the switching between the displays."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"public class CenterPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private static final String FXML \u003d \"CenterPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private PersonPanel personPanel;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private StackPane centerPlaceholder;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public CenterPanel(Calendar calendar) {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel \u003d new PersonPanel();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel \u003d new CalendarPanel(calendar);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the Person Panel if it is not shown on CenterPanel."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public void displayPersonPanel() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        if (!centerPlaceholder.getChildren().contains(personPanel.getRoot())) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            centerPlaceholder.getChildren().clear();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            centerPlaceholder.getChildren().add(personPanel.getRoot());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Displays the Calendar Panel if it is not shown on CenterPanel."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public void displayCalendarPanel() {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        if (!centerPlaceholder.getChildren().contains(calendarPanel.getRoot())) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"            centerPlaceholder.getChildren().clear();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            centerPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    private void handleChangeCalendarViewRequestEvent(ChangeCalendarViewRequestEvent event) {"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel.handleChangeCalendarViewRequestEvent(event);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarPanel();"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleChangeCalendarPageRequestEvent(ChangeCalendarPageRequestEvent event) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel.handleChangeCalendarPageRequestEvent(event);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarPanel();"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    private void handleChangeCalendarDateRequestEvent(ChangeCalendarDateRequestEvent event) {"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        calendarPanel.handleChangeCalendarDateRequestEvent(event);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        displayCalendarPanel();"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    private void handleDisplayPersonPanelRequestEvent(DisplayPersonPanelRequestEvent event) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel.handlePersonPanelSelectionChangedEvent(event);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    private void handleResetPersonPanelRequestEvent(ResetPersonPanelRequestEvent event) {"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        personPanel.handleResetPersonPanelRequestEvent(event);"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        displayPersonPanel();"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":95,"-":1}},{"path":"src/main/java/seedu/address/commons/util/CalendarEntryConversionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * Provides utilities to convert between {@code Entry} used in CalendarFX and its Model Version, {@code CalendarEntry}."},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryConversionUtil {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts {@code CalendarEntry} to {@code Entry} used in CalendarFX."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static Entry\u003cString\u003e convertToEntry(CalendarEntry calEntry) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calEntry);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        Interval entryInterval \u003d new Interval(calEntry.getStartDate().getLocalDate(),"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getStartTime().getLocalTime(),"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getEndDate().getLocalDate(),"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                calEntry.getEndTime().getLocalTime());"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new Entry\u003c\u003e(calEntry.getEntryTitle().toString(), entryInterval);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given list of calendarEntries to {@code Entry} used in CalendarFX and return list of {@code Entry}."},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public static List\u003cEntry\u003c?\u003e\u003e convertEntireListToEntries(ObservableList\u003cCalendarEntry\u003e calendarEntries) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cEntry\u003c?\u003e\u003e convertedEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry ce: calendarEntries) {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            convertedEntries.add(CalendarEntryConversionUtil.convertToEntry(ce));"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedEntries;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":1}},{"path":"src/main/java/seedu/address/commons/util/DateUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Helper functions for handling Date related operations."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Ensures that strings conform to a given Date Format."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class DateUtil {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"; // format"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_VALIDATION_FORMAT \u003d \"dd-MM-yyyy\"; // legal dates"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String DATE_PATTERN \u003d \"dd-MM-yyyy\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given string is a valid date."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DATE_VALIDATION_FORMAT);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (ParseException e) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given string to a {@code LocalDate}."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public static LocalDate convertStringToDate(String date) throws DateTimeParseException {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(DATE_PATTERN);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDate convertedDate \u003d LocalDate.parse(date, format);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedDate;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/OrderPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.ui.OrderCard;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents a selection change in the Order List Panel"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"public class OrderPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private final OrderCard newSelection;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    public OrderPanelSelectionChangedEvent(OrderCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public OrderCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":26}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayCalendarEntryListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to display calendar entry list."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class DisplayCalendarEntryListEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":12,"-":1}},{"path":"src/main/java/seedu/address/commons/util/TimeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.text.ParseException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Helper functions for handling strings representing Time."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Ensures that strings conform to a given Time Format."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class TimeUtil {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"\\\\d{2}:\\\\d{2}\"; // format"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_VALIDATION_FORMAT \u003d \"HH:mm\"; // legal dates"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String TIME_PATTERN \u003d \"HH:mm\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given string is a valid time."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(test);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(TIME_VALIDATION_FORMAT);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (ParseException e) {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts given string to a {@code LocalTime}."},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public static LocalTime convertStringToTime(String time) throws DateTimeParseException {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(time);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(TIME_PATTERN);"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        LocalTime convertedTime \u003d LocalTime.parse(time, format);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        return convertedTime;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":45,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/DisplayOrderListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates request to display order list."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class DisplayOrderListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":8,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/CalendarEntryPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.ui.CalendarEntryCard;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a selection change in the Calendar Entry List Panel"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarEntryCard newSelection;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryPanelSelectionChangedEvent(CalendarEntryCard newSelection) {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntryCard getNewSelection() {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        return newSelection;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeCalendarPageRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to change page that calendar is displaying."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * A page represents a day, week or month, depending on the current view of the calendar."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class ChangeCalendarPageRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    private final String requestType;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public ChangeCalendarPageRequestEvent(String requestType) {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"        this.requestType \u003d requestType;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public String getRequestType() {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        return requestType;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":24,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeCalendarDateRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a request to display given {@code date} in calendar."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class ChangeCalendarDateRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate date;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public ChangeCalendarDateRequestEvent(LocalDate date) {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getDate() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        return date;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":25,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":" * Represents a request to change the theme of the application."},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"    private final String theme;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public String getTheme() {"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        return this.theme;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":25}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeCalendarViewRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates request to display calendar."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class ChangeCalendarViewRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    private final String calendarView;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public ChangeCalendarViewRequestEvent(String calendarView) {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"        this.calendarView \u003d calendarView;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public String getView() {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarView;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":1}},{"path":"src/main/java/seedu/address/commons/util/EntryTimeConstraintsUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.Duration;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * Helper functions for checking StartDate, EndDate, StartTime, EndTime of {@code CalendarEntry}."},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTimeConstraintsUtil {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String ENTRY_DURATION_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            \"Entry must last at least 15 minutes.\"; //Constraint of CalendarFX entries"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_DATE_CONSTRAINTS \u003d \"Start Date cannot be later than End Date.\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String START_AND_END_TIME_CONSTRAINTS \u003d"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Time cannot be later than End Time if Entry ends on same date.\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    private static final long MINIMAL_DURATION \u003d 15; //Constraint of CalendarFX entries"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if duration between start time and end time is less than 15 minutes."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     * This is a constraint that CalendarFX has. Event duration must last at least 15 minutes."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean eventIsShorterThanFifteenMinutes(StartDate startDate, EndDate endDate,"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"                                                            StartTime startTime, EndTime endTime) {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(startDate, endDate, startTime, endTime);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDateTime startDateAndTime \u003d LocalDateTime.of(startDate.getLocalDate(), startTime.getLocalTime());"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        LocalDateTime endDateAndTime \u003d LocalDateTime.of(endDate.getLocalDate(), endTime.getLocalTime());"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        if (Duration.between(startDateAndTime, endDateAndTime).toMinutes() \u003c MINIMAL_DURATION) {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given start time is later than end time."},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"     * Start time cannot be later than End time if entry ends on the same date."},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean startTimeIsLaterThanEndTime(StartTime startTime, EndTime endTime) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(startTime, endTime);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime.getLocalTime().isAfter(endTime.getLocalTime());"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if given start date is later than end date."},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     * Start Date cannot be later than End Date as it violates the meaning of the terms."},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean startDateIsLaterThanEndDate(StartDate startDate, EndDate endDate) {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(startDate, endDate);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate.getLocalDate().isAfter(endDate.getLocalDate());"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"     * Checks 3 constraints:"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"     * 1. {@code StartDate} must not be after {@code EndDate}."},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"     * 2. {@code Start Time} must not be after {@code EndTime} if Calendar Entry ends on same Date."},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"     * 3. Duration of entry cannot be less than 15 minutes."},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public static void checkCalendarEntryTimeConstraints("},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"           StartDate startDate, EndDate endDate, StartTime startTime, EndTime endTime) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        if (startDateIsLaterThanEndDate(startDate, endDate)) {"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(START_AND_END_DATE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        if (startDate.toString().equals(endDate.toString()) \u0026\u0026 startTimeIsLaterThanEndTime(startTime, endTime)) {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(START_AND_END_TIME_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        if (eventIsShorterThanFifteenMinutes(startDate, endDate, startTime, endTime)) {"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(ENTRY_DURATION_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":81,"-":1}},{"path":"src/main/java/seedu/address/commons/events/model/CalendarManagerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Indicates the CalendarManager in the model has changed"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManagerChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public final ReadOnlyCalendarManager data;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManagerChangedEvent(ReadOnlyCalendarManager data) {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"        this.data \u003d data;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        return \"number of calendar entries \" + data.getCalendarEntryList().size();"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":20,"-":1}},{"path":"src/main/java/seedu/address/commons/events/model/ChangeOrderStatusEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Represents a request to change the order status of an existing order in the application."},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    private final Index index;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"    private final Order targetOrder;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    private final String orderStatus;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public ChangeOrderStatusEvent(Index index, Order targetOrder, String orderStatus) {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"        this.targetOrder \u003d targetOrder;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public Index getIndexOrderForStatusChange() {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"        return this.index;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public Order getOrderForStatusChange() {"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        return this.targetOrder;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public String getOrderStatus() {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        return this.orderStatus;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":38}},{"path":"src/main/java/seedu/address/logic/parser/DeleteGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new DeleteGroupCommand object."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommandParser implements Parser\u003cDeleteGroupCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteGroupCommand"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an DeleteGroupCommand object for execution."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteGroupCommand parse(String userInput) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            Group group \u003d ParserUtil.parseGroup(userInput);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteGroupCommand(group);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteGroupCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":28,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ExportListedPersonsCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import seedu.address.commons.exceptions.FileExistsException;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import seedu.address.commons.exceptions.IllegalFilenameException;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.commands.ExportListedPersonsCommand;"},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":" * Parses input arguments and creates a new ExportListedPersonsCommand object"},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":" */"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":"public class ExportListedPersonsCommandParser implements Parser\u003cExportListedPersonsCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_FILENAME_CONSTRAINTS \u003d \"FILENAME should be of the format nameOfFile\\n\""},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":"            + \"1. The FILENAME should only contain characters from digits 0-9 and alphabets a-z or A-Z\\n\""},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"            + \"2. The FILENAME should be 30 characters or less.\\n\";"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_FILE_ALREADY_EXISTS \u003d \"File already exists, choose another filename.\\n\";"},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportListedPersonsCommand"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"     * and returns an ExportListedPersonsCommand object for execution."},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"A0143487X"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":25,"author":{"gitID":"A0143487X"},"content":"    public ExportListedPersonsCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"A0143487X"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"A0143487X"},"content":"            String filename \u003d ParserUtil.parseFilename(args);"},{"lineNumber":28,"author":{"gitID":"A0143487X"},"content":"            filename \u003d filename + \".csv\";"},{"lineNumber":29,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":30,"author":{"gitID":"A0143487X"},"content":"            return new ExportListedPersonsCommand(filename);"},{"lineNumber":31,"author":{"gitID":"A0143487X"},"content":"        } catch (IllegalFilenameException e) {"},{"lineNumber":32,"author":{"gitID":"A0143487X"},"content":"            throw new ParseException(MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"A0143487X"},"content":"        } catch (FileExistsException e) {"},{"lineNumber":34,"author":{"gitID":"A0143487X"},"content":"            throw new ParseException(MESSAGE_FILE_ALREADY_EXISTS);"},{"lineNumber":35,"author":{"gitID":"A0143487X"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":38,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":38}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.FileExistsException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalFilenameException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":41,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FILENAME_CONSTRAINTS \u003d \"\\\"Filename should be of the format nameOfFile \\\"\\n\""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\\\n\\\"\\n\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"1. The nameOfFile should only contain characters from digits 0-9 and alphabets a-z or A-Z\\\"\\n\""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"2. The nameOfFile should be 30 characters or less.\\\"\\n\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FILE_ALREADY_EXISTS \u003d \"\\\"File already exists, choose another filename.\\\"\\n\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String group} into a {@code Group}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code group} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Group parseGroup(String group) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(group);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedGroup \u003d group.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedGroup)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Group(trimmedGroup);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cGroup\u003e parseGroups(Collection\u003cString\u003e groups) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(groups);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String groupName : groups) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            groupSet.add(parseGroup(groupName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return groupSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Parses a {@code String pref} into a {@code Preference}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code preference} is invalid."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static Preference parsePreference(String pref) throws IllegalValueException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        requireNonNull(pref);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        String trimmedPreference \u003d pref.trim();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedPreference)) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return new Preference(trimmedPreference);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e preferences} into a {@code Set\u003cPerference\u003e}."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public static Set\u003cPreference\u003e parsePreferences(Collection\u003cString\u003e preferences) throws IllegalValueException {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        requireNonNull(preferences);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        final Set\u003cPreference\u003e preferenceSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        for (String prefName : preferences) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            preferenceSet.add(parsePreference(prefName));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return preferenceSet;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String orderInformation} into a {@code OrderInformation}."},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code orderInformation} is invalid."},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"    public static OrderInformation parseOrderInformation(String orderInformation) throws IllegalValueException {"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInformation);"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"        String trimmedOrderInformation \u003d orderInformation.trim();"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"        if (!OrderInformation.isValidOrderInformation(trimmedOrderInformation)) {"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":"        return new OrderInformation(trimmedOrderInformation);"},{"lineNumber":235,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":237,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e orderInformation} into an {@code Optional\u003cOrderInformation\u003e}"},{"lineNumber":239,"author":{"gitID":"amad-person"},"content":"     * if {@code orderInformation} is present."},{"lineNumber":240,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":241,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cOrderInformation\u003e parseOrderInformation(Optional\u003cString\u003e orderInformation)"},{"lineNumber":243,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInformation);"},{"lineNumber":245,"author":{"gitID":"amad-person"},"content":"        return orderInformation.isPresent()"},{"lineNumber":246,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseOrderInformation(orderInformation.get()))"},{"lineNumber":247,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":248,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":250,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String orderStatus} into a {@code OrderStatus}."},{"lineNumber":252,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":253,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":254,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code orderStatus} is invalid."},{"lineNumber":255,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"amad-person"},"content":"    public static OrderStatus parseOrderStatus(String orderStatus) throws IllegalValueException {"},{"lineNumber":257,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":258,"author":{"gitID":"amad-person"},"content":"        String trimmedOrderStatus \u003d orderStatus.trim();"},{"lineNumber":259,"author":{"gitID":"amad-person"},"content":"        if (!OrderStatus.isValidOrderStatus(trimmedOrderStatus)) {"},{"lineNumber":260,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS);"},{"lineNumber":261,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"amad-person"},"content":"        return new OrderStatus(trimmedOrderStatus);"},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":265,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e orderStatus} into an {@code Optional\u003cOrderStatus\u003e}"},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"     * if {@code orderStatus} is present."},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cOrderStatus\u003e parseOrderStatus(Optional\u003cString\u003e orderStatus)"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"        return orderStatus.isPresent()"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseOrderStatus(orderStatus.get()))"},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String price} into a {@code Price}."},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code price} is invalid."},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"    public static Price parsePrice(String price) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"        String trimmedPrice \u003d price.trim();"},{"lineNumber":287,"author":{"gitID":"amad-person"},"content":"        if (!Price.isValidPrice(trimmedPrice)) {"},{"lineNumber":288,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":289,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"amad-person"},"content":"        return new Price(trimmedPrice);"},{"lineNumber":291,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":293,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cPrice\u003e}"},{"lineNumber":295,"author":{"gitID":"amad-person"},"content":"     * if {@code price} is present."},{"lineNumber":296,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":297,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cPrice\u003e parsePrice(Optional\u003cString\u003e price)"},{"lineNumber":299,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":300,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":301,"author":{"gitID":"amad-person"},"content":"        return price.isPresent()"},{"lineNumber":302,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parsePrice(price.get()))"},{"lineNumber":303,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":304,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":306,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String quantity} into a {@code Quantity}."},{"lineNumber":308,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":309,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":310,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code quantity} is invalid."},{"lineNumber":311,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"amad-person"},"content":"    public static Quantity parseQuantity(String quantity) throws IllegalValueException {"},{"lineNumber":313,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":314,"author":{"gitID":"amad-person"},"content":"        String trimmedQuantity \u003d quantity.trim();"},{"lineNumber":315,"author":{"gitID":"amad-person"},"content":"        if (!Quantity.isValidQuantity(trimmedQuantity)) {"},{"lineNumber":316,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":317,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"amad-person"},"content":"        return new Quantity(trimmedQuantity);"},{"lineNumber":319,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":321,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e quantity} into an {@code Optional\u003cQuantity\u003e}"},{"lineNumber":323,"author":{"gitID":"amad-person"},"content":"     * if {@code quantity} is present."},{"lineNumber":324,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":325,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":326,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cQuantity\u003e parseQuantity(Optional\u003cString\u003e quantity)"},{"lineNumber":327,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":328,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":329,"author":{"gitID":"amad-person"},"content":"        return quantity.isPresent()"},{"lineNumber":330,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseQuantity(quantity.get()))"},{"lineNumber":331,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":332,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":334,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String deliveryDate} into a {@code DeliveryDate}."},{"lineNumber":336,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":337,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":338,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code deliveryDate} is invalid."},{"lineNumber":339,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"amad-person"},"content":"    public static DeliveryDate parseDeliveryDate(String deliveryDate) throws IllegalValueException {"},{"lineNumber":341,"author":{"gitID":"amad-person"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":342,"author":{"gitID":"amad-person"},"content":"        String trimmedDeliveryDate \u003d deliveryDate.trim();"},{"lineNumber":343,"author":{"gitID":"amad-person"},"content":"        if (!DeliveryDate.isValidDeliveryDate(trimmedDeliveryDate)) {"},{"lineNumber":344,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":345,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"amad-person"},"content":"        return new DeliveryDate(trimmedDeliveryDate);"},{"lineNumber":347,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":349,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e deliveryDate} into an {@code Optional\u003cDeliveryDate\u003e}"},{"lineNumber":351,"author":{"gitID":"amad-person"},"content":"     * if {@code deliveryDate} is present."},{"lineNumber":352,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":353,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cDeliveryDate\u003e parseDeliveryDate(Optional\u003cString\u003e deliveryDate)"},{"lineNumber":355,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":356,"author":{"gitID":"amad-person"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":357,"author":{"gitID":"amad-person"},"content":"        return deliveryDate.isPresent()"},{"lineNumber":358,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseDeliveryDate(deliveryDate.get()))"},{"lineNumber":359,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":360,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"amad-person"},"content":"    //@@ author"},{"lineNumber":362,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":363,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String eventTitle} into a {@code EntryTitle}."},{"lineNumber":365,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":366,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":367,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code eventTitle} is invalid."},{"lineNumber":368,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"amad-person"},"content":"    public static EntryTitle parseEventTitle(String eventTitle) throws IllegalValueException {"},{"lineNumber":370,"author":{"gitID":"amad-person"},"content":"        requireNonNull(eventTitle);"},{"lineNumber":371,"author":{"gitID":"amad-person"},"content":"        String trimmedEventTitle \u003d eventTitle.trim();"},{"lineNumber":372,"author":{"gitID":"amad-person"},"content":"        if (!EntryTitle.isValidEntryTitle(trimmedEventTitle)) {"},{"lineNumber":373,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":374,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"amad-person"},"content":"        return new EntryTitle(trimmedEventTitle);"},{"lineNumber":376,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":378,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":379,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e eventTitle} into an {@code Optional\u003cEntryTitle\u003e}"},{"lineNumber":380,"author":{"gitID":"amad-person"},"content":"     * if {@code eventTitle} is present."},{"lineNumber":381,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":382,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":383,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEntryTitle\u003e parseEventTitle(Optional\u003cString\u003e eventTitle)"},{"lineNumber":384,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":385,"author":{"gitID":"amad-person"},"content":"        requireNonNull(eventTitle);"},{"lineNumber":386,"author":{"gitID":"amad-person"},"content":"        return eventTitle.isPresent()"},{"lineNumber":387,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEventTitle(eventTitle.get()))"},{"lineNumber":388,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":389,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":391,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":392,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String startDate} into a {@code StartDate}."},{"lineNumber":393,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":394,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":395,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code startDate} is invalid."},{"lineNumber":396,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":397,"author":{"gitID":"amad-person"},"content":"    public static StartDate parseStartDate(String startDate) throws IllegalValueException {"},{"lineNumber":398,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startDate);"},{"lineNumber":399,"author":{"gitID":"amad-person"},"content":"        String trimmedStartDate \u003d startDate.trim();"},{"lineNumber":400,"author":{"gitID":"amad-person"},"content":"        if (!DateUtil.isValidDate(trimmedStartDate)) {"},{"lineNumber":401,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":402,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":403,"author":{"gitID":"amad-person"},"content":"        return new StartDate(trimmedStartDate);"},{"lineNumber":404,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":406,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e startDate} into an {@code Optional\u003cStartDate\u003e}"},{"lineNumber":408,"author":{"gitID":"amad-person"},"content":"     * if {@code startDate} is present."},{"lineNumber":409,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":410,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":411,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cStartDate\u003e parseStartDate(Optional\u003cString\u003e startDate)"},{"lineNumber":412,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":413,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startDate);"},{"lineNumber":414,"author":{"gitID":"amad-person"},"content":"        return startDate.isPresent()"},{"lineNumber":415,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseStartDate(startDate.get()))"},{"lineNumber":416,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":417,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":419,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":420,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String endDate} into a {@code EndDate}."},{"lineNumber":421,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":422,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":423,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code endDate} is invalid."},{"lineNumber":424,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":425,"author":{"gitID":"amad-person"},"content":"    public static EndDate parseEndDate(String endDate) throws IllegalValueException {"},{"lineNumber":426,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endDate);"},{"lineNumber":427,"author":{"gitID":"amad-person"},"content":"        String trimmedEndDate \u003d endDate.trim();"},{"lineNumber":428,"author":{"gitID":"amad-person"},"content":"        if (!DateUtil.isValidDate(trimmedEndDate)) {"},{"lineNumber":429,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":430,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":431,"author":{"gitID":"amad-person"},"content":"        return new EndDate(trimmedEndDate);"},{"lineNumber":432,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":434,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":435,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e endDate} into an {@code Optional\u003cEndDate\u003e}"},{"lineNumber":436,"author":{"gitID":"amad-person"},"content":"     * if {@code endDate} is present."},{"lineNumber":437,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":438,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":439,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEndDate\u003e parseEndDate(Optional\u003cString\u003e endDate)"},{"lineNumber":440,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":441,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endDate);"},{"lineNumber":442,"author":{"gitID":"amad-person"},"content":"        return endDate.isPresent()"},{"lineNumber":443,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEndDate(endDate.get()))"},{"lineNumber":444,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":445,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":447,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":448,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String startTime} into a {@code StartTime}."},{"lineNumber":449,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":450,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":451,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code startTime} is invalid."},{"lineNumber":452,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":453,"author":{"gitID":"amad-person"},"content":"    public static StartTime parseStartTime(String startTime) throws IllegalValueException {"},{"lineNumber":454,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startTime);"},{"lineNumber":455,"author":{"gitID":"amad-person"},"content":"        String trimmedStartTime \u003d startTime.trim();"},{"lineNumber":456,"author":{"gitID":"amad-person"},"content":"        if (!TimeUtil.isValidTime(trimmedStartTime)) {"},{"lineNumber":457,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":458,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":459,"author":{"gitID":"amad-person"},"content":"        return new StartTime(trimmedStartTime);"},{"lineNumber":460,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":461,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":462,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":463,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e startTime} into an {@code Optional\u003cStartTime\u003e}"},{"lineNumber":464,"author":{"gitID":"amad-person"},"content":"     * if {@code startTime} is present."},{"lineNumber":465,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":466,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":467,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cStartTime\u003e parseStartTime(Optional\u003cString\u003e startTime)"},{"lineNumber":468,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":469,"author":{"gitID":"amad-person"},"content":"        requireNonNull(startTime);"},{"lineNumber":470,"author":{"gitID":"amad-person"},"content":"        return startTime.isPresent()"},{"lineNumber":471,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseStartTime(startTime.get()))"},{"lineNumber":472,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":473,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":474,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":475,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":476,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String endTime} into a {@code EndTime}."},{"lineNumber":477,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":478,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":479,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the given {@code endTime} is invalid."},{"lineNumber":480,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":481,"author":{"gitID":"amad-person"},"content":"    public static EndTime parseEndTime(String endTime) throws IllegalValueException {"},{"lineNumber":482,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endTime);"},{"lineNumber":483,"author":{"gitID":"amad-person"},"content":"        String trimmedEndTime \u003d endTime.trim();"},{"lineNumber":484,"author":{"gitID":"amad-person"},"content":"        if (!TimeUtil.isValidTime(trimmedEndTime)) {"},{"lineNumber":485,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":486,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":487,"author":{"gitID":"amad-person"},"content":"        return new EndTime(trimmedEndTime);"},{"lineNumber":488,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":489,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":490,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":491,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code Optional\u003cString\u003e endTime} into an {@code Optional\u003cEndTime\u003e}"},{"lineNumber":492,"author":{"gitID":"amad-person"},"content":"     * if {@code endTime} is present."},{"lineNumber":493,"author":{"gitID":"amad-person"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":494,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":495,"author":{"gitID":"amad-person"},"content":"    public static Optional\u003cEndTime\u003e parseEndTime(Optional\u003cString\u003e endTime)"},{"lineNumber":496,"author":{"gitID":"amad-person"},"content":"            throws IllegalValueException {"},{"lineNumber":497,"author":{"gitID":"amad-person"},"content":"        requireNonNull(endTime);"},{"lineNumber":498,"author":{"gitID":"amad-person"},"content":"        return endTime.isPresent()"},{"lineNumber":499,"author":{"gitID":"amad-person"},"content":"                ? Optional.of(parseEndTime(endTime.get()))"},{"lineNumber":500,"author":{"gitID":"amad-person"},"content":"                : Optional.empty();"},{"lineNumber":501,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":502,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":503,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":504,"author":{"gitID":"amad-person"},"content":"     * Parses a {@code String filename} into an {@code filename}."},{"lineNumber":505,"author":{"gitID":"amad-person"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":506,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":507,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalFilenameException if the given {@code filename} is invalid."},{"lineNumber":508,"author":{"gitID":"amad-person"},"content":"     * @throws FileExistsException if the given {@code filename} already exists."},{"lineNumber":509,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":510,"author":{"gitID":"amad-person"},"content":"    public static String parseFilename(String filename) throws IllegalFilenameException, FileExistsException  {"},{"lineNumber":511,"author":{"gitID":"amad-person"},"content":"        //requireNonNull(filename);"},{"lineNumber":512,"author":{"gitID":"amad-person"},"content":"        filename \u003d filename.trim();"},{"lineNumber":513,"author":{"gitID":"amad-person"},"content":"        String filenameVerified \u003d \"\";"},{"lineNumber":514,"author":{"gitID":"amad-person"},"content":"        int filenameLength \u003d filename.length();"},{"lineNumber":515,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":516,"author":{"gitID":"amad-person"},"content":"        for (int i \u003d 0; i \u003c filenameLength; i++) {"},{"lineNumber":517,"author":{"gitID":"amad-person"},"content":"            char charI \u003d filename.charAt(i);"},{"lineNumber":518,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":519,"author":{"gitID":"amad-person"},"content":"            //if ((charI \u003e\u003d 48 \u0026\u0026 charI \u003c\u003d 57) || (charI \u003e\u003d 65 \u0026\u0026 charI \u003c\u003d 90) || (charI \u003e\u003d 97 \u0026\u0026 charI \u003c\u003d 122)) {"},{"lineNumber":520,"author":{"gitID":"amad-person"},"content":"            if (Character.isDigit(charI) || Character.isLetter(charI)) {"},{"lineNumber":521,"author":{"gitID":"amad-person"},"content":"                filenameVerified \u003d filenameVerified + charI;"},{"lineNumber":522,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":523,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":524,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":525,"author":{"gitID":"amad-person"},"content":"        File outputFile \u003d new File(filenameVerified + \".csv\");"},{"lineNumber":526,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":527,"author":{"gitID":"amad-person"},"content":"        if (filenameLength \u003c 1 || filenameLength \u003e 30 || !(filename.equals(filenameVerified))) {"},{"lineNumber":528,"author":{"gitID":"amad-person"},"content":"            throw new IllegalFilenameException(MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":529,"author":{"gitID":"amad-person"},"content":"        } else if (outputFile.exists()) {"},{"lineNumber":530,"author":{"gitID":"amad-person"},"content":"            throw new FileExistsException(MESSAGE_FILE_ALREADY_EXISTS);"},{"lineNumber":531,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":532,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":533,"author":{"gitID":"amad-person"},"content":"        return filename;"},{"lineNumber":534,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":535,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":536,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":537,"author":{"gitID":"amad-person"},"content":"     * Parses {@code date} into an {@code LocalDate} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":538,"author":{"gitID":"amad-person"},"content":"     * trimmed."},{"lineNumber":539,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":540,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":541,"author":{"gitID":"amad-person"},"content":"    public static LocalDate parseTargetDate(String date) throws IllegalValueException {"},{"lineNumber":542,"author":{"gitID":"amad-person"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":543,"author":{"gitID":"amad-person"},"content":"        if (!DateUtil.isValidDate(trimmedDate)) {"},{"lineNumber":544,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DATE_FORMAT);"},{"lineNumber":545,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":546,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":547,"author":{"gitID":"amad-person"},"content":"        LocalDate localDate;"},{"lineNumber":548,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":549,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":550,"author":{"gitID":"amad-person"},"content":"            localDate \u003d DateUtil.convertStringToDate(trimmedDate);"},{"lineNumber":551,"author":{"gitID":"amad-person"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":552,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"Given date should be valid for conversion.\");"},{"lineNumber":553,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":554,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":555,"author":{"gitID":"amad-person"},"content":"        return localDate;"},{"lineNumber":556,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":557,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"-":220,"amad-person":337}},{"path":"src/main/java/seedu/address/logic/parser/EditOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand.EditOrderDescriptor;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new EditOrderCommand object."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the EditOrderCommand"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     * and returns an EditOrderCommand object for execution."},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public EditOrderCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ORDER_INFORMATION, PREFIX_PRICE, PREFIX_QUANTITY,"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"                        PREFIX_DELIVERY_DATE);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        EditOrderDescriptor editOrderDescriptor \u003d new EditOrderDescriptor();"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseOrderInformation(argMultimap.getValue(PREFIX_ORDER_INFORMATION))"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"                    .ifPresent(editOrderDescriptor::setOrderInformation);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).ifPresent(editOrderDescriptor::setPrice);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY)).ifPresent(editOrderDescriptor::setQuantity);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DELIVERY_DATE))"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"                    .ifPresent(editOrderDescriptor::setDeliveryDate);"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        if (!editOrderDescriptor.isAnyFieldEdited()) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(EditOrderCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        return new EditOrderCommand(index, editOrderDescriptor);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":59}},{"path":"src/main/java/seedu/address/logic/parser/FindPreferenceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new FindPreferenceCommand object"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommandParser implements Parser\u003cFindPreferenceCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPreferenceCommand"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an FindPreferenceCommand object for execution."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public FindPreferenceCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        String[] preferenceKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new FindPreferenceCommand(new PreferencesContainKeywordsPredicate(Arrays.asList(preferenceKeywords)));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":31,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/EditEntryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.EditEntryCommand.EditEntryDescriptor;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new EditEntryCommand object."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class EditEntryCommandParser implements Parser\u003cEditEntryCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the EditEntryCommand"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an EditEntryCommand object for execution."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public EditEntryCommand parse(String userInput) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(userInput);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_ENTRY_TITLE, PREFIX_START_DATE, PREFIX_END_DATE,"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"                        PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEntryCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        EditEntryDescriptor editEntryDescriptor \u003d new EditEntryDescriptor();"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            ParserUtil.parseEventTitle(argMultimap.getValue(PREFIX_ENTRY_TITLE))"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editEntryDescriptor::setEntryTitle);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_START_DATE))"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editEntryDescriptor::setStartDate);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"            ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_END_DATE))"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editEntryDescriptor::setEndDate);"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_TIME))"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editEntryDescriptor::setStartTime);"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"            ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_TIME))"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                    .ifPresent(editEntryDescriptor::setEndTime);"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        if (!editEntryDescriptor.isAnyFieldEdited()) {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(EditEntryCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        return new EditEntryCommand(index, editEntryDescriptor);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":64,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/DeleteOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new DeleteOrderCommand object"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     * and returns an DeleteOrderCommand object for execution."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public DeleteOrderCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"            return new DeleteOrderCommand(index);"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE)"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"            );"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":31}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object."},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        return new ChangeThemeCommand(trimmedArgs);"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":29}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEntryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new DeleteEntryCommand object"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommandParser implements Parser\u003cDeleteEntryCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEntryCommand"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an DeleteEntryCommand object for execution."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteEntryCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeleteEntryCommand(index);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEntryCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":28,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/AddOrderCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":" * Parses input arguments and creates a new AddOrderCommand object"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"     * Parses the given {@code String} of arguments in the context of the AddOrderCommand"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"     * and returns an AddOrderCommand object for execution."},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    public AddOrderCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_ORDER_INFORMATION, PREFIX_PRICE,"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"                        PREFIX_QUANTITY, PREFIX_DELIVERY_DATE);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ORDER_INFORMATION, PREFIX_PRICE,"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"                PREFIX_QUANTITY, PREFIX_DELIVERY_DATE)) {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            OrderInformation orderInformation \u003d ParserUtil.parseOrderInformation(argMultimap"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                    .getValue(PREFIX_ORDER_INFORMATION)).get();"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            OrderStatus orderStatus \u003d new OrderStatus(OrderStatus.ORDER_STATUS_ONGOING); // default value is ongoing"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"            Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY)).get();"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"            DeliveryDate deliveryDate \u003d ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DELIVERY_DATE)).get();"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            Order order \u003d new Order(orderInformation, orderStatus, price, quantity, deliveryDate);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"            return new AddOrderCommand(index, order);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":76}},{"path":"src/main/java/seedu/address/logic/parser/FindGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new FindGroupCommand object"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommandParser implements Parser\u003cFindGroupCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the FindGroupCommand"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an FindGroupCommand object for execution."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public FindGroupCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindGroupCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        String[] groupKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        return new FindGroupCommand(new GroupsContainKeywordsPredicate(Arrays.asList(groupKeywords)));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":31,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/AddEntryCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.EntryTimeConstraintsUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new AddEntryCommand object"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommandParser implements Parser\u003cAddEntryCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String STANDARD_START_TIME \u003d \"00:00\"; //Start Time of entry if StartTime not given"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEntryCommand"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an AddEntryCommand object for execution."},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    public AddEntryCommand parse(String userInput) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_ENTRY_TITLE, PREFIX_START_DATE, PREFIX_END_DATE,"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                        PREFIX_START_TIME, PREFIX_END_TIME);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_TITLE, PREFIX_END_DATE, PREFIX_END_TIME)"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEntryCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            EntryTitle entryTitle \u003d ParserUtil.parseEventTitle(argMultimap.getValue(PREFIX_ENTRY_TITLE)).get();"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            EndDate endDate \u003d ParserUtil.parseEndDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"            StartDate startDate;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            // If no Start Date is given, Start Date will be the same date as End Date"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            if (!argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_END_DATE)).get();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_START_DATE)).get();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            EndTime endTime \u003d ParserUtil.parseEndTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            StartTime startTime;"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            // If no Start Time is given, Start Time will be 00:00"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            if (!argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"                startTime \u003d ParserUtil.parseStartTime(STANDARD_START_TIME);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"                startTime \u003d ParserUtil.parseStartTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"            EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(startDate, endDate, startTime, endTime);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"            CalendarEntry calendarEntry \u003d new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"            return new AddEntryCommand(calendarEntry);"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":84,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ExportListedOrdersCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import seedu.address.commons.exceptions.FileExistsException;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import seedu.address.commons.exceptions.IllegalFilenameException;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.commands.ExportListedOrdersCommand;"},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":" * Parses input arguments and creates a new ExportListedOrdersCommand object"},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":" */"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":"public class ExportListedOrdersCommandParser implements Parser\u003cExportListedOrdersCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_FILENAME_CONSTRAINTS \u003d \"FILENAME should be of the format nameOfFile\\n\""},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":"            + \"1. The FILENAME should only contain characters from digits 0-9 and alphabets a-z or A-Z\\n\""},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"            + \"2. The FILENAME should be 30 characters or less.\\n\";"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_FILE_ALREADY_EXISTS \u003d \"File already exists, choose another filename.\\n\";"},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportListedOrdersCommand"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"     * and returns an ExportListedOrdersCommand object for execution."},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"A0143487X"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":25,"author":{"gitID":"A0143487X"},"content":"    public ExportListedOrdersCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"A0143487X"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"A0143487X"},"content":"            String filename \u003d ParserUtil.parseFilename(args);"},{"lineNumber":28,"author":{"gitID":"A0143487X"},"content":"            filename \u003d filename + \".csv\";"},{"lineNumber":29,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":30,"author":{"gitID":"A0143487X"},"content":"            return new ExportListedOrdersCommand(filename);"},{"lineNumber":31,"author":{"gitID":"A0143487X"},"content":"        } catch (IllegalFilenameException e) {"},{"lineNumber":32,"author":{"gitID":"A0143487X"},"content":"            throw new ParseException(MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"A0143487X"},"content":"        } catch (FileExistsException e) {"},{"lineNumber":34,"author":{"gitID":"A0143487X"},"content":"            throw new ParseException(MESSAGE_FILE_ALREADY_EXISTS);"},{"lineNumber":35,"author":{"gitID":"A0143487X"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":38,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":38}},{"path":"src/main/java/seedu/address/logic/parser/DeletePreferenceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Parses given arguments and creates a new DeletePreferenceCommand object."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommandParser implements Parser\u003cDeletePreferenceCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePreferenceCommand"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an DeletePreferenceCommand object for execution."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public DeletePreferenceCommand parse(String userInput) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            Preference preference \u003d ParserUtil.parsePreference(userInput);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            return new DeletePreferenceCommand(preference);"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePreferenceCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":28,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ListOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * List and display all orders in the address book to the user."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"public class ListOrderCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"orderlist\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ol\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/CalendarJumpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_DATE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.CalendarJumpCommand;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * Parses input arguments and creates a new CalendarJumpCommand object"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarJumpCommandParser implements Parser\u003cCalendarJumpCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     * Parses the given {@code String} of arguments in the context of the CalendarJumpCommand"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * and returns an CalendarJumpCommand object for execution."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarJumpCommand parse(String userInput) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(userInput);"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_TARGET_DATE);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        if (!isPrefixPresent(argMultimap, PREFIX_TARGET_DATE)) {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarJumpCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            String dateString \u003d argMultimap.getValue(PREFIX_TARGET_DATE).get();"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            LocalDate date \u003d ParserUtil.parseTargetDate(dateString);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            return new CalendarJumpCommand(date, dateString);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean isPrefixPresent(ArgumentMultimap argMultimap, Prefix prefixTargetDate) {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        return argMultimap.getValue(prefixTargetDate).isPresent();"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":45,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" * Adds an order to a person in the address book."},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"public class AddOrderCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderadd\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"oa\";"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" INDEX \""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"ORDER_INFO \""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"PRICE \""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"QUANTITY \""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"DELIVERY_DATE\";"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to the selected person in the \""},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"            + \"address book.\\n\""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"ORDER_INFO \""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"PRICE \""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"QUANTITY \""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"DELIVERY_DATE\\n\""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_INFORMATION + \"Books \""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"10.00 \""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            + PREFIX_QUANTITY + \"2 \""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"12-12-2018\\n\";"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ADD_ORDER_SUCCESS \u003d \"Added order to %1$s:\\n[%2$s]\";"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_NOT_ADDED \u003d \"Could not add order to Person.\";"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    private final Index index;"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    private final Order orderToAdd;"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    private Person person;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * @param orderToAdd order to be added to person"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public AddOrderCommand(Index index, Order orderToAdd) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        requireNonNull(index);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderToAdd);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        this.orderToAdd \u003d orderToAdd;"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        requireNonNull(model);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"            model.addOrderToOrderList(orderToAdd);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicateOrderException doe) {"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_ORDER_NOT_ADDED);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_ORDER_SUCCESS, person.getName(), orderToAdd));"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"                || (other instanceof AddOrderCommand // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 orderToAdd.equals(((AddOrderCommand) other).orderToAdd));"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":99}},{"path":"src/main/java/seedu/address/logic/commands/ExportListedPersonsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":" * Exports listed person from the address book into file with specified filename."},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":" */"},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"public class ExportListedPersonsCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_WORD \u003d \"exportListedPersons\";"},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_ALIAS \u003d \"exLP\";"},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"    //EDIT START"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":"            + \"FILENAME\";"},{"lineNumber":23,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":24,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all listed persons as a CSV file\""},{"lineNumber":25,"author":{"gitID":"A0143487X"},"content":"            + \" with file name FILENAME as specified\\n\""},{"lineNumber":26,"author":{"gitID":"A0143487X"},"content":"            + \"Parameters: FILENAME\\n\""},{"lineNumber":27,"author":{"gitID":"A0143487X"},"content":"            + \"Example: \" + COMMAND_WORD + \" FILENAME\";"},{"lineNumber":28,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":29,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Export success! Listed persons exported to\";"},{"lineNumber":30,"author":{"gitID":"A0143487X"},"content":"    //public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":31,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":32,"author":{"gitID":"A0143487X"},"content":"    //EDIT END"},{"lineNumber":33,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":34,"author":{"gitID":"A0143487X"},"content":"    private final String pathName;"},{"lineNumber":35,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":36,"author":{"gitID":"A0143487X"},"content":"    public ExportListedPersonsCommand(String inputPath) {"},{"lineNumber":37,"author":{"gitID":"A0143487X"},"content":"        this.pathName \u003d inputPath;"},{"lineNumber":38,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":40,"author":{"gitID":"A0143487X"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"A0143487X"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":43,"author":{"gitID":"A0143487X"},"content":"        //"},{"lineNumber":44,"author":{"gitID":"A0143487X"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"A0143487X"},"content":"            File outputFile \u003d new File(pathName);"},{"lineNumber":46,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":47,"author":{"gitID":"A0143487X"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(outputFile.getPath()));"},{"lineNumber":48,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":49,"author":{"gitID":"A0143487X"},"content":"            writer.write(\"Name,Phone,Email,Address\" + System.getProperty(\"line.separator\")); // headings"},{"lineNumber":50,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":51,"author":{"gitID":"A0143487X"},"content":"            //get data"},{"lineNumber":52,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0143487X"},"content":"            ObservableList\u003cPerson\u003e peopleList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"A0143487X"},"content":"            int numOfEntries \u003d peopleList.size();"},{"lineNumber":55,"author":{"gitID":"A0143487X"},"content":"            String entryDetails;"},{"lineNumber":56,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":57,"author":{"gitID":"A0143487X"},"content":"            for (int currIdx \u003d 0; currIdx \u003c numOfEntries; currIdx++) {"},{"lineNumber":58,"author":{"gitID":"A0143487X"},"content":"                Person currPerson \u003d peopleList.get(currIdx);"},{"lineNumber":59,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":60,"author":{"gitID":"A0143487X"},"content":"                entryDetails \u003d \"\\\"\" + currPerson.getName() + \"\\\",\\\"\" + currPerson.getPhone() + \"\\\",\\\"\""},{"lineNumber":61,"author":{"gitID":"A0143487X"},"content":"                        + currPerson.getEmail() + \"\\\",\\\"\" + currPerson.getAddress() + \"\\\"\";"},{"lineNumber":62,"author":{"gitID":"A0143487X"},"content":"                writer.append(entryDetails + System.getProperty(\"line.separator\"));"},{"lineNumber":63,"author":{"gitID":"A0143487X"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":65,"author":{"gitID":"A0143487X"},"content":"            writer.close();"},{"lineNumber":66,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":67,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":68,"author":{"gitID":"A0143487X"},"content":"        } catch (IOException e) {"},{"lineNumber":69,"author":{"gitID":"A0143487X"},"content":"            e.printStackTrace();"},{"lineNumber":70,"author":{"gitID":"A0143487X"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":72,"author":{"gitID":"A0143487X"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \" \" + pathName);"},{"lineNumber":73,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":74}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.MESSAGE_THEME_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.theme.Theme.isValidTheme;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" * Changes the theme of the application."},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"            + \": Changes the theme of the application.\\n\""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: THEME\\n\""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" light\";"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_THEME_CHANGED_SUCCESS \u003d \"Theme changed to %1$s.\";"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Theme %1$s not supported.\\n\" + MESSAGE_THEME_CONSTRAINTS;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    private final String themeVersion;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    public ChangeThemeCommand(String themeVersion) {"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        requireNonNull(themeVersion);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        this.themeVersion \u003d themeVersion;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        if (!isValidTheme(themeVersion)) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_THEME, themeVersion));"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        Theme.setCurrentTheme(themeVersion);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(themeVersion));"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_THEME_CHANGED_SUCCESS, themeVersion));"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.themeVersion.equals(((ChangeThemeCommand) other).themeVersion)); // state check"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":53}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a calendar entry identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteEntryCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entrydelete\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ed\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the calendar entry identified by the index number used in the entry listing.\\n\""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_ENTRY_SUCCESS \u003d \"Deleted Calendar Entry: %1$s\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    private CalendarEntry entryToDelete;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteEntryCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(entryToDelete);"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteCalendarEntry(entryToDelete);"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (CalendarEntryNotFoundException cenfe) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"The target calendar entry cannot be missing\");"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ENTRY_SUCCESS, entryToDelete));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e lastShownList \u003d model.getFilteredCalendarEntryList();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ENTRY_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        entryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeleteEntryCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEntryCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.entryToDelete, ((DeleteEntryCommand) other).entryToDelete));"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":70,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a group specified by user from address book."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class DeleteGroupCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"groupdelete\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"gd\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the specified group from all persons in address book.\\n\""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: GROUP_NAME (must be alphanumeric)\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_GROUP_SUCCESS \u003d \"Deleted GROUP: %1$s\";"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"Group does not exist in address book.\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private Group groupToDelete;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public DeleteGroupCommand(Group targetGroup) {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupToDelete \u003d targetGroup;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(groupToDelete);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            model.deleteGroup(groupToDelete);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_GROUP_SUCCESS, groupToDelete));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (GroupNotFoundException e) {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_GROUP_NOT_FOUND);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeleteGroupCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.groupToDelete, ((DeleteGroupCommand) other).groupToDelete)); // state check"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":49,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ChangeOrderStatusCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.commands.EditOrderCommand.MESSAGE_DUPLICATE_ORDER;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_STATUS;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.order.OrderStatus.isValidOrderStatus;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.model.ChangeOrderStatusEvent;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":" * Changes the order status of an existing order in the address book."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"public class ChangeOrderStatusCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderstatus\";"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"os\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" INDEX \" + PREFIX_ORDER_STATUS + \"ORDER_STATUS\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"            + \": Changes the order status of the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"            + PREFIX_ORDER_STATUS + \"ORDER STATUS\\n\""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_ORDER_STATUS + \"done\";"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_STATUS_CHANGED_SUCCESS \u003d \"Order status of order %1$s changed to %2$s.\";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_INVALID_ORDER_STATUS \u003d \"Order status %1$s is invalid.\\n\""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"            + MESSAGE_ORDER_STATUS_CONSTRAINTS;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    private final Index targetIndex;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    private final String orderStatus;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    private Order orderForChangeStatus;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public ChangeOrderStatusCommand(Index targetIndex, String orderStatus) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        if (!isValidOrderStatus(orderStatus)) {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_ORDER_STATUS, orderStatus));"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"            model.updateOrderStatus(orderForChangeStatus, orderStatus);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicateOrderException doe) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing.\");"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new ChangeOrderStatusEvent(targetIndex, orderForChangeStatus, orderStatus));"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_ORDER_STATUS_CHANGED_SUCCESS,"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                targetIndex.getOneBased(), orderStatus));"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        orderForChangeStatus \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                || (other instanceof ChangeOrderStatusCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.targetIndex.equals(((ChangeOrderStatusCommand) other).targetIndex)"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.orderStatus.equals(((ChangeOrderStatusCommand) other).orderStatus));"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":89}},{"path":"src/main/java/seedu/address/logic/commands/CalendarJumpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TARGET_DATE;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" * Displays specified date in Calendar."},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarJumpCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendarjump\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"caljump\";"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_TARGET_DATE + \"TARGET_DATE\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays given date in Calendar.\\n\""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: \" + PREFIX_TARGET_DATE + \"TARGET_DATE (must be in format DD-MM-YYY)\\n\""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" 06-06-2018\";"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_CALENDAR_JUMP_SUCCESS \u003d \"Displayed Date: %1$s in Calendar.\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate date;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private final String dateString;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates CalendarJumpCommand with specified {@code LocalDate} to display in Calendar."},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarJumpCommand(LocalDate date, String dateString) {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(date, dateString);"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        this.date \u003d date;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        this.dateString \u003d dateString;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(date);"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarDateRequestEvent(date));"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(String.format(MESSAGE_CALENDAR_JUMP_SUCCESS, dateString));"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof CalendarJumpCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 date.equals(((CalendarJumpCommand) other).date)"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 dateString.equals(((CalendarJumpCommand) other).dateString));"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":56,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ViewBackCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_BACK;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Switches current page of Calendar to previous page."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Depending on the current viewing format of Calendar, the previous page can be the previous day, previous week,"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * or previous month of the current displayed date."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * This command will display the calendar if it is not displayed when command is executed."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewBackCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendarback\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"calback\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays previous page of current displayed date in calendar.\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Depending on the current viewing format of Calendar, the previous page can be the previous day,\""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            + \" previous week, or previous month of the current displayed date.\\n\""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_VIEW_CALENDAR_BACK_SUCCESS \u003d \"Displayed previous page in Calendar.\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarPageRequestEvent(REQUEST_BACK));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_VIEW_CALENDAR_BACK_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof ViewBackCommand); // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/FindPreferenceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.PreferencesContainKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Finds and lists all persons in address book whose preferences contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class FindPreferenceCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"preffind\";"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"pf\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"            + \"KEYWORD \""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[MORE KEYWORDS]\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose preferences contain any of \""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" shoes computers videoGames\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private final PreferencesContainKeywordsPredicate preferencesContainKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public FindPreferenceCommand(PreferencesContainKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        this.preferencesContainKeywordsPredicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredPersonList(preferencesContainKeywordsPredicate);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof FindPreferenceCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.preferencesContainKeywordsPredicate.equals"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                (((FindPreferenceCommand) other).preferencesContainKeywordsPredicate)); // state check"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":40,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ListCalendarEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * List and display all calendar entries in the address book to the user."},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class ListCalendarEntryCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entrylist\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"el\";"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all calendar entries\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredCalendarEntryList(Model.PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":22,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" * Deletes an order identified using its last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"public class DeleteOrderCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderdelete\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"od\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"            + \": Deletes the order identified by the index number used in the last order listing.\\n\""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    private Order orderToDelete;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public DeleteOrderCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderToDelete);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            model.deleteOrder(orderToDelete);"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                || (other instanceof DeleteOrderCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteOrderCommand) other).targetIndex) // state check"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(this.orderToDelete, ((DeleteOrderCommand) other).orderToDelete));"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":70}},{"path":"src/main/java/seedu/address/logic/commands/AddEntryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_TITLE;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarDateRequestEvent;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.DisplayCalendarEntryListEvent;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * Adds a calendar entry to calendar manager."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"public class AddEntryCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"entryadd\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"ea\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"ENTRY_TITLE \""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_DATE + \"[START_DATE] \""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"END_DATE \""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_TIME + \"[START_TIME] \""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"END_TIME\";"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a calendar entry to the calendar\""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            + \" and displays the calendar with the entry\u0027s start date.\\n\""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: \""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"ENTRY_TITLE \""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"END_DATE \""},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"END_TIME\\n\""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_ENTRY_TITLE + \"Meeting with Boss \""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_DATE + \"05-05-2018 \""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_DATE + \"05-05-2018 \""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_START_TIME + \"10:00 \""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            + PREFIX_END_TIME + \"12:30\";"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_ADD_ENTRY_SUCCESS \u003d \"Added Entry [%1$s]\";"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"This entry already exists in the calendar.\";"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    private final CalendarEntry calEntryToAdd;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates an AddEntryCommand to add specified {@code CalendarEntry}."},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public AddEntryCommand(CalendarEntry calEntry) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calEntry);"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        this.calEntryToAdd \u003d calEntry;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"            model.addCalendarEntry(calEntryToAdd);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"            EventsCenter.getInstance().post(new ChangeCalendarDateRequestEvent(calEntryToAdd.getDateToDisplay()));"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            EventsCenter.getInstance().post(new DisplayCalendarEntryListEvent());"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_ADD_ENTRY_SUCCESS, calEntryToAdd));"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ENTRY);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof AddEntryCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 calEntryToAdd.equals(((AddEntryCommand) other).calEntryToAdd));"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":77,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ViewCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.DAY_VIEW;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.MONTH_VIEW;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.WEEK_VIEW;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarViewRequestEvent;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Displays Calendar in ContactSails in 3 possible viewing formats, Day, Week or Month."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewCalendarCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"cal\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[VIEW_FORMAT]\";"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays Calendar in a specified viewing format.\\n\""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: [VIEW_FORMAT] (must be either \\\"day\\\", \\\"week\\\" or \\\"month\\\" without captions)\\n\""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"            + \"If no parameters are given or given parameter does not follow the accepted keywords,\""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"            + \" calendar will display in Day-View.\\n\""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" day\";"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_SHOW_CALENDAR_SUCCESS \u003d \"Display Calendar in %1$s-View.\";"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private final String view;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public ViewCalendarCommand(String view) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(view);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        String trimmedView \u003d view.trim();"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        if (trimmedView.equalsIgnoreCase(MONTH_VIEW)) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d MONTH_VIEW;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        } else if (trimmedView.equalsIgnoreCase(WEEK_VIEW)) {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d WEEK_VIEW;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"        } else { //If view is equal to DAY_VIEW, is empty or does not match any of the accepted keywords"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"            this.view \u003d DAY_VIEW;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(view);"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarViewRequestEvent(view));"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(String.format(MESSAGE_SHOW_CALENDAR_SUCCESS, view));"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof ViewCalendarCommand"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.view.equals(((ViewCalendarCommand) other).view)); // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":60,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/EditOrderCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIVERY_DATE;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_INFORMATION;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.events.ui.DisplayOrderListEvent;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":" * Edits the details of an existing order in the address book."},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"public class EditOrderCommand extends UndoableCommand {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_WORD \u003d \"orderedit\";"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_ALIAS \u003d \"oe\";"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"            + \"INDEX \""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_ORDER_INFORMATION + \"ORDER INFORMATION] \""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_PRICE + \"PRICE] \""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_DELIVERY_DATE + \"DELIVERY DATE]\";"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"            + \"by the index number used in the last order listing. \""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_ORDER_INFORMATION + \"ORDER INFORMATION] \""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_PRICE + \"PRICE] \""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"            + \"[\" + PREFIX_DELIVERY_DATE + \"DELIVERY DATE]\\n\""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"            + PREFIX_PRICE + \"15.00 \""},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"            + PREFIX_DELIVERY_DATE + \"18-09-2018\";"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the address book.\";"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    private final EditOrderDescriptor editOrderDescriptor;"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    private Order orderToEdit;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    private Order editedOrder;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * @param index of the order in the filtered order list to edit"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     * @param editOrderDescriptor details to edit the order with"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    public EditOrderCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editOrderDescriptor);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"            model.updateOrder(orderToEdit, editedOrder);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        } catch (DuplicateOrderException doe) {"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        } catch (OrderNotFoundException onfe) {"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"            throw new AssertionError(\"The target order cannot be missing.\");"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        EventsCenter.getInstance().post(new DisplayOrderListEvent());"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        List\u003cOrder\u003e lastShownOrderList \u003d model.getFilteredOrderList();"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownOrderList.size()) {"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        orderToEdit \u003d lastShownOrderList.get(index.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"        editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"     * Creates and returns a {@code Order} with the details of {@code orderToEdit}"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"     * edited with {@code editOrderDescriptor}."},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderToEdit);"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        OrderInformation updatedOrderInformation \u003d editOrderDescriptor.getOrderInformation()"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"                .orElse(orderToEdit.getOrderInformation());"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"        OrderStatus orderStatus \u003d orderToEdit.getOrderStatus();"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        Price updatedPrice \u003d editOrderDescriptor.getPrice().orElse(orderToEdit.getPrice());"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"        Quantity updatedQuantity \u003d editOrderDescriptor.getQuantity().orElse(orderToEdit.getQuantity());"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        DeliveryDate updatedDeliveryDate \u003d editOrderDescriptor.getDeliveryDate().orElse(orderToEdit.getDeliveryDate());"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        return new Order(updatedOrderInformation, orderStatus, updatedPrice, updatedQuantity, updatedDeliveryDate);"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"        // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"        // instanceof handles nulls"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof EditOrderCommand)) {"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"        // state check"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        EditOrderCommand eo \u003d (EditOrderCommand) other;"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        return index.equals(eo.index)"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 editOrderDescriptor.equals(eo.editOrderDescriptor)"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(orderToEdit, eo.orderToEdit);"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"     * Stores the details to edit the order with. Each non-empty field value will replace the"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"     * corresponding field value of the order."},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"    public static class EditOrderDescriptor {"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        private OrderInformation orderInformation;"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        private OrderStatus orderStatus;"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"        private Price price;"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":"        private Quantity quantity;"},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"        private DeliveryDate deliveryDate;"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        public EditOrderDescriptor() {}"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"        /**"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"         * Copy constructor."},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"            setOrderInformation(toCopy.orderInformation);"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"            setOrderStatus(toCopy.orderStatus);"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"            setPrice(toCopy.price);"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"            setQuantity(toCopy.quantity);"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"            setDeliveryDate(toCopy.deliveryDate);"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"            return CollectionUtil.isAnyNonNull(this.orderInformation, this.price, this.quantity, this.deliveryDate);"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"        public void setOrderInformation(OrderInformation orderInformation) {"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":"            this.orderInformation \u003d orderInformation;"},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cOrderInformation\u003e getOrderInformation() {"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(orderInformation);"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":"        public void setOrderStatus(OrderStatus orderStatus) {"},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"            this.orderStatus \u003d orderStatus;"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cOrderStatus\u003e getOrderStatus() {"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(orderStatus);"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":188,"author":{"gitID":"amad-person"},"content":"        public void setPrice(Price price) {"},{"lineNumber":189,"author":{"gitID":"amad-person"},"content":"            this.price \u003d price;"},{"lineNumber":190,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":192,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cPrice\u003e getPrice() {"},{"lineNumber":193,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(price);"},{"lineNumber":194,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":196,"author":{"gitID":"amad-person"},"content":"        public void setQuantity(Quantity quantity) {"},{"lineNumber":197,"author":{"gitID":"amad-person"},"content":"            this.quantity \u003d quantity;"},{"lineNumber":198,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":200,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cQuantity\u003e getQuantity() {"},{"lineNumber":201,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(quantity);"},{"lineNumber":202,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":204,"author":{"gitID":"amad-person"},"content":"        public void setDeliveryDate(DeliveryDate deliveryDate) {"},{"lineNumber":205,"author":{"gitID":"amad-person"},"content":"            this.deliveryDate \u003d deliveryDate;"},{"lineNumber":206,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"        public Optional\u003cDeliveryDate\u003e getDeliveryDate() {"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"            return Optional.ofNullable(deliveryDate);"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"        public boolean equals(Object other) {"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"            // short circuit if same object"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":"                return true;"},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":"            // instanceof handles nulls"},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"            if (!(other instanceof EditOrderDescriptor)) {"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"                return false;"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":224,"author":{"gitID":"amad-person"},"content":"            // state check"},{"lineNumber":225,"author":{"gitID":"amad-person"},"content":"            EditOrderDescriptor eo \u003d (EditOrderDescriptor) other;"},{"lineNumber":226,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":227,"author":{"gitID":"amad-person"},"content":"            return getOrderInformation().equals(eo.getOrderInformation())"},{"lineNumber":228,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getOrderStatus().equals(eo.getOrderStatus())"},{"lineNumber":229,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getPrice().equals(eo.getPrice())"},{"lineNumber":230,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getQuantity().equals(eo.getQuantity())"},{"lineNumber":231,"author":{"gitID":"amad-person"},"content":"                    \u0026\u0026 getDeliveryDate().equals(eo.getDeliveryDate());"},{"lineNumber":232,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":234}},{"path":"src/main/java/seedu/address/logic/commands/FindGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.person.GroupsContainKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Finds and lists all persons in address book whose groups contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Keyword matching is case insensitive."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public class FindGroupCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"groupfind\";"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"gf\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"            + \"KEYWORD \""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"            + \"[MORE KEYWORDS]\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose groups contain any of \""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends colleagues neighbours\";"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    private final GroupsContainKeywordsPredicate groupsContainKeywordsPredicate;"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public FindGroupCommand(GroupsContainKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        this.groupsContainKeywordsPredicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        model.updateFilteredPersonList(groupsContainKeywordsPredicate);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof FindGroupCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.groupsContainKeywordsPredicate.equals"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"                (((FindGroupCommand) other).groupsContainKeywordsPredicate)); // state check"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":40,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ExportListedOrdersCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"A0143487X"},"content":"//@@author A0143487X"},{"lineNumber":2,"author":{"gitID":"A0143487X"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":4,"author":{"gitID":"A0143487X"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitID":"A0143487X"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"A0143487X"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitID":"A0143487X"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":9,"author":{"gitID":"A0143487X"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"A0143487X"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"A0143487X"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":12,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":13,"author":{"gitID":"A0143487X"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"A0143487X"},"content":" * Exports listed orders from the address book into file with specified filename."},{"lineNumber":15,"author":{"gitID":"A0143487X"},"content":" */"},{"lineNumber":16,"author":{"gitID":"A0143487X"},"content":"public class ExportListedOrdersCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_WORD \u003d \"exportListedOrders\";"},{"lineNumber":18,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_ALIAS \u003d \"exLO\";"},{"lineNumber":19,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":20,"author":{"gitID":"A0143487X"},"content":"    //EDIT START"},{"lineNumber":21,"author":{"gitID":"A0143487X"},"content":"    public static final String COMMAND_SYNTAX \u003d COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"A0143487X"},"content":"            + \"FILENAME\";"},{"lineNumber":23,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":24,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all listed orders as a CSV file\""},{"lineNumber":25,"author":{"gitID":"A0143487X"},"content":"            + \" with file name FILENAME as specified\\n\""},{"lineNumber":26,"author":{"gitID":"A0143487X"},"content":"            + \"Parameters: FILENAME\\n\""},{"lineNumber":27,"author":{"gitID":"A0143487X"},"content":"            + \"Example: \" + COMMAND_WORD + \" FILENAME\";"},{"lineNumber":28,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":29,"author":{"gitID":"A0143487X"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Export success! Listed orders exported to\";"},{"lineNumber":30,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":31,"author":{"gitID":"A0143487X"},"content":"    //EDIT END"},{"lineNumber":32,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":33,"author":{"gitID":"A0143487X"},"content":"    private final String pathName;"},{"lineNumber":34,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":35,"author":{"gitID":"A0143487X"},"content":"    public ExportListedOrdersCommand(String inputPath) {"},{"lineNumber":36,"author":{"gitID":"A0143487X"},"content":"        this.pathName \u003d inputPath;"},{"lineNumber":37,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":39,"author":{"gitID":"A0143487X"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"A0143487X"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":42,"author":{"gitID":"A0143487X"},"content":"        //"},{"lineNumber":43,"author":{"gitID":"A0143487X"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"A0143487X"},"content":"            File outputFile \u003d new File(pathName);"},{"lineNumber":45,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":46,"author":{"gitID":"A0143487X"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(outputFile.getPath()));"},{"lineNumber":47,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":48,"author":{"gitID":"A0143487X"},"content":"            writer.write(\"Order Information,Order Status,\""},{"lineNumber":49,"author":{"gitID":"A0143487X"},"content":"                    + \"Price,Quantity,Delivery Date\" + System.getProperty(\"line.separator\")); // headings"},{"lineNumber":50,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":51,"author":{"gitID":"A0143487X"},"content":"            //get data"},{"lineNumber":52,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":53,"author":{"gitID":"A0143487X"},"content":"            ObservableList\u003cOrder\u003e orderList \u003d model.getFilteredOrderList();"},{"lineNumber":54,"author":{"gitID":"A0143487X"},"content":"            int numOfEntries \u003d orderList.size();"},{"lineNumber":55,"author":{"gitID":"A0143487X"},"content":"            String entryDetails;"},{"lineNumber":56,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":57,"author":{"gitID":"A0143487X"},"content":"            for (int currIdx \u003d 0; currIdx \u003c numOfEntries; currIdx++) {"},{"lineNumber":58,"author":{"gitID":"A0143487X"},"content":"                Order currOrder \u003d orderList.get(currIdx);"},{"lineNumber":59,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":60,"author":{"gitID":"A0143487X"},"content":"                entryDetails \u003d \"\\\"\" + currOrder.getOrderInformation() + \"\\\",\\\"\""},{"lineNumber":61,"author":{"gitID":"A0143487X"},"content":"                        + currOrder.getOrderStatus() + \"\\\",\\\"\""},{"lineNumber":62,"author":{"gitID":"A0143487X"},"content":"                        + currOrder.getPrice() + \"\\\",\\\"\""},{"lineNumber":63,"author":{"gitID":"A0143487X"},"content":"                        + currOrder.getQuantity() + \"\\\",\\\"\""},{"lineNumber":64,"author":{"gitID":"A0143487X"},"content":"                        + currOrder.getDeliveryDate() + \"\\\"\";"},{"lineNumber":65,"author":{"gitID":"A0143487X"},"content":"                writer.append(entryDetails + System.getProperty(\"line.separator\"));"},{"lineNumber":66,"author":{"gitID":"A0143487X"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":68,"author":{"gitID":"A0143487X"},"content":"            writer.close();"},{"lineNumber":69,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":70,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":71,"author":{"gitID":"A0143487X"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitID":"A0143487X"},"content":"            e.printStackTrace();"},{"lineNumber":73,"author":{"gitID":"A0143487X"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"A0143487X"},"content":""},{"lineNumber":75,"author":{"gitID":"A0143487X"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \" \" + pathName);"},{"lineNumber":76,"author":{"gitID":"A0143487X"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"A0143487X"},"content":"}"}],"authorContributionMap":{"A0143487X":77}},{"path":"src/main/java/seedu/address/logic/commands/DeletePreferenceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Deletes a preference specified by user from address book."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"public class DeletePreferenceCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"prefdelete\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"pd\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Deletes the specified preference from all persons in address book.\\n\""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Parameters: PREFERENCE_NAME (must be alphanumeric)\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD + \" computers\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_DELETE_PREFERENCE_SUCCESS \u003d \"Deleted PREFERENCE: %1$s\";"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_PREFERENCE_NOT_FOUND \u003d \"Preference does not exist in address book.\";"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    private Preference prefToDelete;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public DeletePreferenceCommand(Preference targetPref) {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.prefToDelete \u003d targetPref;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(prefToDelete);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"            model.deletePreference(prefToDelete);"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PREFERENCE_SUCCESS, prefToDelete));"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (PreferenceNotFoundException e) {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CommandException(MESSAGE_PREFERENCE_NOT_FOUND);"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof DeletePreferenceCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(this.prefToDelete, ((DeletePreferenceCommand) other).prefToDelete)); // state check"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":49,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ViewTodayCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_TODAY;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Switches currently displayed date in Calendar to today\u0027s date."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * This command will display the calendar if it is not displayed when command is executed."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewTodayCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendartoday\";"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"caltoday\";"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays today\u0027s date in calendar.\\n\""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_VIEW_CALENDAR_TODAY_SUCCESS \u003d \"Displayed Today in Calendar.\";"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarPageRequestEvent(REQUEST_TODAY));"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_VIEW_CALENDAR_TODAY_SUCCESS);"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof ViewTodayCommand); // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":34,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlSerializableCalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":" * An Immutable CalendarManager that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"@XmlRootElement(name \u003d \"calendarmanager\")"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlSerializableCalendarManager {"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private List\u003cXmlAdaptedCalendarEntry\u003e calendarEntries;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     * Creates an empty XmlSerializableCalendarManager."},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlSerializableCalendarManager() {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     * Conversion"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlSerializableCalendarManager(ReadOnlyCalendarManager src) {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        this();"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntries.addAll(src.getCalendarEntryList().stream().map(XmlAdaptedCalendarEntry::new)"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts this calendarManager into the model\u0027s {@code CalendarManager} object."},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * {@code XmlAdaptedCalendarEntry}."},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager calendarManager \u003d new CalendarManager();"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        for (XmlAdaptedCalendarEntry entry: calendarEntries) {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"            calendarManager.addCalendarEntry(entry.toModelType());"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlSerializableCalendarManager)) {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager otherCm \u003d (XmlSerializableCalendarManager) other;"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarEntries.equals(otherCm.calendarEntries);"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":65,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/ViewNextCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.ui.util.CalendarFxUtil.REQUEST_NEXT;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.events.ui.ChangeCalendarPageRequestEvent;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Switches current page of Calendar to next page."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Depending on the current viewing format of Calendar, the next page can be the next day, next week"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * or next month of the current displayed date."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * This command will display the calendar if it is not displayed when command is executed."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class ViewNextCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_WORD \u003d \"calendarnext\";"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String COMMAND_ALIAS \u003d \"calnext\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"            + \": Displays next page of current displayed date in calendar.\\n\""},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Depending on the current viewing format of Calendar, the next page can be the next day,\""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"            + \" next week or next month of the current displayed date.\\n\""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_VIEW_CALENDAR_NEXT_SUCCESS \u003d \"Displayed next page in Calendar.\";"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        EventsCenter.getInstance().post(new ChangeCalendarPageRequestEvent(REQUEST_NEXT));"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return new CommandResult(MESSAGE_VIEW_CALENDAR_NEXT_SUCCESS);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof ViewNextCommand); // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":38,"-":1}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private CalendarManagerStorage calendarManagerStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, CalendarManagerStorage calendarManagerStorage,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.calendarManagerStorage \u003d calendarManagerStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerFilePath() {"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerStorage.getCalendarManagerFilePath();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException {"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        return readCalendarManager(calendarManagerStorage.getCalendarManagerFilePath());"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath)"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"        logger.fine(\"Attempting to read calendar data from file: \" + filePath);"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManagerStorage.readCalendarManager(filePath);"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException {"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(calendarManager, calendarManagerStorage.getCalendarManagerFilePath());"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException {"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        logger.fine(\"Attempting to write to calendar data file: \" + filePath);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManagerStorage.saveCalendarManager(calendarManager, filePath);"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":"    @Subscribe"},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    public void handleCalendarManagerChangedEvent(CalendarManagerChangedEvent event) {"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"        logger.info(LogsCenter"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"                .getEventHandlingLogMessage(event, \"Local calendar data changed, saving to file\"));"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"            saveCalendarManager(event.data);"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IOException e) {"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":44,"-":100}},{"path":"src/main/java/seedu/address/logic/CommandSyntaxListUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.logic;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddEntryCommand;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.AddOrderCommand;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.CalendarJumpCommand;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeOrderStatusCommand;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteEntryCommand;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteGroupCommand;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeleteOrderCommand;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.DeletePreferenceCommand;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditEntryCommand;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EditOrderCommand;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.EntryListClearCommand;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindGroupCommand;"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.FindPreferenceCommand;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListCalendarEntryCommand;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ListOrderCommand;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ViewBackCommand;"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ViewCalendarCommand;"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ViewNextCommand;"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"import seedu.address.logic.commands.ViewTodayCommand;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":" * Returns the syntax list of existing commands."},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"public final class CommandSyntaxListUtil {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    private static ArrayList\u003cString\u003e commandSyntaxList;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    public static ArrayList\u003cString\u003e getCommandSyntaxList() {"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        setCommandSyntaxList();"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return commandSyntaxList;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Constructs commandSyntaxList for existing commands."},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    private static void setCommandSyntaxList() {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddCommand.COMMAND_SYNTAX);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddEntryCommand.COMMAND_SYNTAX);"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(AddOrderCommand.COMMAND_SYNTAX);"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(CalendarJumpCommand.COMMAND_SYNTAX);"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ChangeThemeCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ChangeOrderStatusCommand.COMMAND_SYNTAX);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteEntryCommand.COMMAND_WORD);"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteGroupCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeleteOrderCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(DeletePreferenceCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EditCommand.COMMAND_SYNTAX);"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EditEntryCommand.COMMAND_SYNTAX);"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EditOrderCommand.COMMAND_SYNTAX);"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(EntryListClearCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindCommand.COMMAND_SYNTAX);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindGroupCommand.COMMAND_SYNTAX);"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(FindPreferenceCommand.COMMAND_SYNTAX);"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListCommand.COMMAND_WORD);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListCalendarEntryCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ListOrderCommand.COMMAND_WORD);"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(SelectCommand.COMMAND_SYNTAX);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ViewBackCommand.COMMAND_WORD);"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ViewCalendarCommand.COMMAND_WORD);"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ViewNextCommand.COMMAND_WORD);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        commandSyntaxList.add(ViewTodayCommand.COMMAND_WORD);"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"        sortCommandList();"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"     * Sorts commandSyntaxList in lexicographical order."},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"    private static void sortCommandList() {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        Collections.sort(commandSyntaxList);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":98}},{"path":"src/main/java/seedu/address/storage/CalendarManagerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a storage for {@link seedu.address.model.CalendarManager}."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public interface CalendarManagerStorage {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the file path of the data file."},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    String getCalendarManagerFilePath();"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns CalendarManager data as a {@link ReadOnlyCalendarManager}."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     * @see #getCalendarManagerFilePath()"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath) throws DataConversionException, IOException;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"     * Saves the given {@link ReadOnlyCalendarManager} to the storage."},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"     * @param calendarManager cannot be null."},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException;"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * @see #saveCalendarManager(ReadOnlyCalendarManager)"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":42,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlCalendarManagerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" * A class to access CalendarManager data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlCalendarManagerStorage implements CalendarManagerStorage {"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlCalendarManagerStorage(String filePath) {"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    public String getCalendarManagerFilePath() {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        return readCalendarManager(filePath);"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Similar to {@link #readCalendarManager()}"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public Optional\u003cReadOnlyCalendarManager\u003e readCalendarManager(String filePath)"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        File calendarManagerFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        if (!calendarManagerFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"            logger.info(\"CalendarManager file \"  + calendarManagerFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        XmlSerializableCalendarManager xmlCalManager \u003d"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"                XmlFileStorage.loadCalendarManagerDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            return Optional.of(xmlCalManager.toModelType());"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            logger.info(\"Illegal values found in \" + calendarManagerFile + \": \" + ive.getMessage());"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager) throws IOException {"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        saveCalendarManager(calendarManager, filePath);"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    public void saveCalendarManager(ReadOnlyCalendarManager calendarManager, String filePath) throws IOException {"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(calendarManager);"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        XmlFileStorage.saveCalendarManagerDataToFile(file, new XmlSerializableCalendarManager(calendarManager));"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":79,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data and calendar data in separate XML file."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveAddressBookDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadAddressBookDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Saves the given calendarManager data to the specified file."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public static void saveCalendarManagerDataToFile(File file, XmlSerializableCalendarManager calendarManager)"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"            throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"            XmlUtil.saveDataToFile(file, calendarManager);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (JAXBException e) {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns calendar manager data in the file or an empty address book"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    public static XmlSerializableCalendarManager loadCalendarManagerDataFromSaveFile(File file)"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"            throws DataConversionException, FileNotFoundException {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableCalendarManager.class);"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (JAXBException e) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DataConversionException(e);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":23,"-":42}},{"path":"src/main/java/seedu/address/model/order/Price.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"        import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s price in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class Price {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_PRICE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Price should only contain numeric characters, one decimal \""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"                    + \"and at most two numeric characters after the decimal, \""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"                    + \"and it should not be blank.\\n\""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"                    + \"Maximum value allowed for price is 1000000.00\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String PRICE_VALIDATION_REGEX \u003d \"[0-9]+([.][0-9]{1,2})?\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public static final double MAX_PERMISSIBLE_PRICE \u003d 1000000.00;"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    private final String price;"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code Price}."},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     * @param price A valid price."},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    public Price(String price) {"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        requireNonNull(price);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidPrice(price), MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid price."},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidPrice(String test) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        if (!test.matches(PRICE_VALIDATION_REGEX) || Double.valueOf(test) \u003e MAX_PERMISSIBLE_PRICE) {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        } else {"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return price;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Price // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.price.equals(((Price) other).price)); // state check"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        return price.hashCode();"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":63}},{"path":"src/main/java/seedu/address/model/order/Order.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Represents an Order in the address book."},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"public class Order {"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"    private final OrderInformation orderInformation;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    private final OrderStatus orderStatus;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    private final Price price;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final Quantity quantity;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    private final DeliveryDate deliveryDate;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public Order(OrderInformation orderInformation, OrderStatus orderStatus, Price price,"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"                 Quantity quantity, DeliveryDate deliveryDate) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orderInformation, price, quantity, deliveryDate);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInformation;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public OrderInformation getOrderInformation() {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        return orderInformation;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public OrderStatus getOrderStatus() {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        return orderStatus;"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    public Price getPrice() {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return price;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public Quantity getQuantity() {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        return quantity;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    public DeliveryDate getDeliveryDate() {"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        return deliveryDate;"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof Order)) {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        Order otherOrder \u003d (Order) other;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        return otherOrder.getOrderInformation().equals(this.getOrderInformation())"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getOrderStatus().equals(this.getOrderStatus())"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getPrice().equals(this.getPrice())"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getQuantity().equals(this.getQuantity())"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 otherOrder.getDeliveryDate().equals(this.getDeliveryDate());"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"        return Objects.hash(orderInformation, orderStatus, price, quantity, deliveryDate);"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        builder.append(getOrderInformation())"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"                .append(\" Status: \")"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"                .append(getOrderStatus())"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"                .append(\" Price: \")"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"                .append(getPrice())"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"                .append(\" Quantity: \")"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"                .append(getQuantity())"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"                .append(\" Delivery Date: \")"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"                .append(getDeliveryDate());"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        return builder.toString();"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":90}},{"path":"src/main/java/seedu/address/model/order/OrderStatus.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s status in the address book."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrderStatus(String)}"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class OrderStatus {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_STATUS_ONGOING \u003d \"ongoing\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_STATUS_DONE \u003d \"done\";"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final ArrayList\u003cString\u003e VALID_ORDER_STATUS \u003d new ArrayList\u003c\u003e("},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"            Arrays.asList(ORDER_STATUS_ONGOING, ORDER_STATUS_DONE));"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_STATUS_CONSTRAINTS \u003d \"Order status can only be \""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"            + ORDER_STATUS_ONGOING + \" or \" + ORDER_STATUS_DONE + \".\";"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private String orderStatus;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code OrderStatus}"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"     * @param orderStatus a valid order status."},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    public OrderStatus(String orderStatus) {"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidOrderStatus(orderStatus), MESSAGE_ORDER_STATUS_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid order status."},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidOrderStatus(String test) {"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"        return VALID_ORDER_STATUS.contains(test);"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"     * Returns the current order status."},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public String getOrderStatusValue() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return this.orderStatus;"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     * Sets the current order status."},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    public void setOrderStatusValue(String newOrderStatus) {"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"        requireNonNull(newOrderStatus);"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        if (isValidOrderStatus(newOrderStatus)) {"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"            this.orderStatus \u003d newOrderStatus;"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        return orderStatus;"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"                || (other instanceof OrderStatus // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.getOrderStatusValue().equals(((OrderStatus) other).getOrderStatusValue())); // state check"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"        return orderStatus.hashCode();"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":78}},{"path":"src/main/java/seedu/address/model/order/Quantity.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s quantity in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class Quantity {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_QUANTITY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Quantity should only contain numeric characters, and it should not be blank.\\n\""},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"                    + \"Maximum value allowed for quantity is 1000000.\";"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    // Only positive integers are allowed"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String QUANTITY_VALIDATION_REGEX \u003d \"^[0-9]*[1-9][0-9]*$\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final int MAX_PERMISSIBLE_QUANTITY \u003d 1000000;"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    private final String quantity;"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code Quantity}."},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * @param quantity A valid quantity."},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public Quantity(String quantity) {"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"        requireNonNull(quantity);"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidQuantity(quantity), MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid price."},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidQuantity(String test) {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        if (!test.matches(QUANTITY_VALIDATION_REGEX) || Integer.valueOf(test) \u003e MAX_PERMISSIBLE_QUANTITY) {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        } else {"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        return quantity;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Quantity // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.quantity.equals(((Quantity) other).quantity)); // state check"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        return quantity.hashCode();"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":63}},{"path":"src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order.exceptions;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":" * Signals that the operation is unable to find the specified Order."},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"public class OrderNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":9}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedOrder.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":" * JAXB-friendly version of an Order."},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"public class XmlAdaptedOrder {"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    private String orderInformation;"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private String orderStatus;"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    private String price;"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    private String quantity;"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"    private String deliveryDate;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     * Constructs an XmlAdaptedOrder."},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder() {}"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"     * Constructs an {@code XmlAdaptedOrder} with the given order details."},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder(String orderInformation, String orderStatus, String price,"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"                           String quantity, String deliveryDate) {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInformation;"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        this.orderStatus \u003d orderStatus;"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        this.price \u003d price;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     * Converts a given Order into this class for JAXB use."},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedOrder"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"    public XmlAdaptedOrder(Order source) {"},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"        orderInformation \u003d source.getOrderInformation().toString();"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"        orderStatus \u003d source.getOrderStatus().getOrderStatusValue();"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        price \u003d source.getPrice().toString();"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"        quantity \u003d source.getQuantity().toString();"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        deliveryDate \u003d source.getDeliveryDate().toString();"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"     * Converts the jaxb-friendly adapted order object into the model\u0027s Order object."},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"     * @throws IllegalValueException if any data constraints are violated in the adapted order\u0027s fields."},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"    public Order toModelType() throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        // convert order information"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":"        if (this.orderInformation \u003d\u003d null) {"},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"                    OrderInformation.class.getSimpleName()));"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"        if (!OrderInformation.isValidOrderInformation(this.orderInformation)) {"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderInformation.MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"        final OrderInformation orderInformation \u003d new OrderInformation(this.orderInformation);"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        // convert order status"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        if (this.orderStatus \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"                    OrderStatus.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"        if (!OrderStatus.isValidOrderStatus(this.orderStatus)) {"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(OrderStatus.MESSAGE_ORDER_STATUS_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        final OrderStatus orderStatus \u003d new OrderStatus(this.orderStatus);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"        // convert price"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"        if (this.price \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        if (!Price.isValidPrice(this.price)) {"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Price.MESSAGE_PRICE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"        final Price price \u003d new Price(this.price);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        // convert quantity"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"        if (this.quantity \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                    Quantity.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"        if (!Quantity.isValidQuantity(this.quantity)) {"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(Quantity.MESSAGE_QUANTITY_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"        final Quantity quantity \u003d new Quantity(this.quantity);"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"        // convert delivery date"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"        if (this.deliveryDate \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"                    DeliveryDate.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        if (!DeliveryDate.isValidDeliveryDate(this.deliveryDate)) {"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        final DeliveryDate deliveryDate \u003d new DeliveryDate(this.deliveryDate);"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":"        return new Order(orderInformation, orderStatus, price, quantity, deliveryDate);"},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        if (!(other instanceof XmlAdaptedOrder)) {"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":"        XmlAdaptedOrder otherOrder \u003d (XmlAdaptedOrder) other;"},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"        return Objects.equals(orderInformation, otherOrder.orderInformation)"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(orderStatus, otherOrder.orderStatus)"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(price, otherOrder.price)"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(quantity, otherOrder.quantity)"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 Objects.equals(deliveryDate, otherOrder.deliveryDate);"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":142}},{"path":"src/main/java/seedu/address/model/order/DeliveryDate.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s delivery date in the address book."},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeliveryDate(String)}"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"public class DeliveryDate {"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_DELIVERY_DATE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"            \"Date should be DD-MM-YYYY, and it should not be invalid or blank.\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    public static final String DELIVERY_DATE_VALIDATION_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"; // format"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final String DELIVERY_DATE_VALIDATION_DATE_FORMAT \u003d \"dd-MM-yyyy\"; // legal dates"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"    private final String deliveryDate;"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code DeliveryDate}."},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"     * @param date A valid Date."},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    public DeliveryDate(String date) {"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"        requireNonNull(date);"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidDeliveryDate(date), MESSAGE_DELIVERY_DATE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"        this.deliveryDate \u003d date;"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidDeliveryDate(String test) {"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(DELIVERY_DATE_VALIDATION_DATE_FORMAT);"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        simpleDateFormat.setLenient(false);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"            simpleDateFormat.parse(test);"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        } catch (ParseException e) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        return test.matches(DELIVERY_DATE_VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return deliveryDate;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"                || (other instanceof DeliveryDate // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.deliveryDate.equals(((DeliveryDate) other).deliveryDate)); // state check"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        return deliveryDate.hashCode();"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"}"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":""}],"authorContributionMap":{"amad-person":69}},{"path":"src/main/java/seedu/address/model/order/OrderInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":" * Represents Order\u0027s information in the address book."},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidOrderInformation(String)}"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"public class OrderInformation {"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_ORDER_INFORMATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"            \"Order information should only contain alphanumeric characters and spaces, and it should not be blank.\";"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"    public static final String ORDER_INFORMATION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    private final String orderInformation;"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"     * Constructs {@code OrderInformation}."},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":"     * @param orderInfo Valid order information."},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"    public OrderInformation(String orderInfo) {"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"        requireNonNull(orderInfo);"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidOrderInformation(orderInfo), MESSAGE_ORDER_INFORMATION_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"        this.orderInformation \u003d orderInfo;"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"     * Returns true if a given string is valid order information."},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidOrderInformation(String test) {"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"        return test.matches(ORDER_INFORMATION_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"        return orderInformation;"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"                || (other instanceof OrderInformation // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.orderInformation.equals(((OrderInformation) other).orderInformation)); // state check"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"        return orderInformation.hashCode();"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":54}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.CalendarManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyCalendarManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.order.DeliveryDate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderInformation;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.order.OrderStatus;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Price;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                getGroupSet(\"friends\"), getPreferenceSet(\"videoGames\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getGroupSet(\"colleagues\", \"friends\"), getPreferenceSet(\"cosmetics\", \"shoes\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                getGroupSet(\"neighbours\"), getPreferenceSet(\"skirts\")),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                getGroupSet(\"family\"), getPreferenceSet(\"shoes\")),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                getGroupSet(\"classmates\"), getPreferenceSet(\"videoGames\", \"computers\")),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                getGroupSet(\"colleagues\"), getPreferenceSet(\"photobooks\", \"notebooks\"))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static Order[] getSampleOrders() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Order[] {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":63,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Books\"), new OrderStatus(\"ongoing\"), new Price(\"12.50\"),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                new Quantity(\"3\"), new DeliveryDate(\"12-08-2018\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":67,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Facewash\"), new OrderStatus(\"done\"), new Price(\"15.00\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                new Quantity(\"2\"), new DeliveryDate(\"05-11-2018\")"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":71,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Chocolates\"), new OrderStatus(\"ongoing\"), new Price(\"5.00\"),"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                new Quantity(\"10\"), new DeliveryDate(\"22-04-2018\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":75,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Shoes\"), new OrderStatus(\"ongoing\"), new Price(\"129.99\"),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                new Quantity(\"1\"), new DeliveryDate(\"10-05-2018\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":79,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Blue Shirt\"), new OrderStatus(\"done\"), new Price(\"20.99\"),"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new Quantity(\"1\"), new DeliveryDate(\"05-03-2018\")"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Makeup Remover\"), new OrderStatus(\"ongoing\"), new Price(\"15.50\"),"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                new Quantity(\"5\"), new DeliveryDate(\"29-04-2018\")"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Monopoly\"), new OrderStatus(\"ongoing\"), new Price(\"45.00\"),"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                new Quantity(\"2\"), new DeliveryDate(\"28-04-2018\")"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Computer\"), new OrderStatus(\"done\"), new Price(\"1500.00\"),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                new Quantity(\"1\"), new DeliveryDate(\"15-06-2018\")"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                new OrderInformation(\"LED TV\"), new OrderStatus(\"ongoing\"), new Price(\"2999.99\"),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new Quantity(\"2\"), new DeliveryDate(\"21-08-2018\")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Injustice 2\"), new OrderStatus(\"ongoing\"), new Price(\"200.00\"),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                new Quantity(\"2\"), new DeliveryDate(\"11-09-2018\")"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Batman Plushie\"), new OrderStatus(\"done\"), new Price(\"17.99\"),"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                new Quantity(\"5\"), new DeliveryDate(\"19-03-2018\")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":107,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Skirts\"), new OrderStatus(\"ongoing\"), new Price(\"15.50\"),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                new Quantity(\"10\"), new DeliveryDate(\"16-08-2018\")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":111,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Mints\"), new OrderStatus(\"ongoing\"), new Price(\"2.50\"),"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                new Quantity(\"20\"), new DeliveryDate(\"17-06-2018\")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Formal Shirts\"), new OrderStatus(\"ongoing\"), new Price(\"39.99\"),"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                new Quantity(\"5\"), new DeliveryDate(\"10-10-2018\")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Running Shoes\"), new OrderStatus(\"done\"), new Price(\"359.99\"),"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                new Quantity(\"1\"), new DeliveryDate(\"12-03-2018\")"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":123,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Sweatshirts\"), new OrderStatus(\"done\"), new Price(\"25.00\"),"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new Quantity(\"3\"), new DeliveryDate(\"25-11-2018\")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":127,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Smartphone\"), new OrderStatus(\"done\"), new Price(\"750.00\"),"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                new Quantity(\"1\"), new DeliveryDate(\"13-10-2018\")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Notebooks\"), new OrderStatus(\"ongoing\"), new Price(\"3.50\"),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                new Quantity(\"20\"), new DeliveryDate(\"22-12-2018\")"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Towels\"), new OrderStatus(\"ongoing\"), new Price(\"10.00\"),"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                new Quantity(\"6\"), new DeliveryDate(\"22-11-2018\")"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            new Order("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                new OrderInformation(\"Coffee Mugs\"), new OrderStatus(\"done\"), new Price(\"12.00\"),"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                new Quantity(\"6\"), new DeliveryDate(\"19-05-2018\")"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            )"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static CalendarEntry[] getSampleCalendarEntries() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return new CalendarEntry[] {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":148,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meeting with Boss\"), new StartDate(\"20-04-2018\"), new EndDate(\"20-04-2018\"),"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                    new StartTime(\"08:00\"), new EndTime(\"12:00\")"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":152,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meeting with Books Supplier\"), new StartDate(\"22-04-2018\"),"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-04-2018\"), new StartTime(\"10:00\"), new EndTime(\"12:30\")"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":156,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meeting with Cars Supplier\"), new StartDate(\"23-04-2018\"),"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                    new EndDate(\"23-04-2018\"), new StartTime(\"15:00\"), new EndTime(\"18:30\")"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":160,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Deliver Books\"), new StartDate(\"28-04-2018\"),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                    new EndDate(\"28-04-2018\"), new StartTime(\"13:00\"), new EndTime(\"14:00\")"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":164,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"RoadShow at VivoCity\"), new StartDate(\"20-05-2018\"),"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-05-2018\"), new StartTime(\"12:00\"), new EndTime(\"18:30\")"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":168,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Get comicbooks from Supplier\"), new StartDate(\"02-05-2018\"),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                    new EndDate(\"02-05-2018\"), new StartTime(\"18:00\"), new EndTime(\"20:30\")"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":172,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Design promo poster for Cars\"), new StartDate(\"20-04-2018\"),"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-05-2018\"), new StartTime(\"00:00\"), new EndTime(\"12:30\")"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":176,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Import cosmetics\"), new StartDate(\"23-04-2018\"),"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                    new EndDate(\"15-05-2018\"), new StartTime(\"00:00\"), new EndTime(\"18:30\")"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":180,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meet Stakeholders\"), new StartDate(\"06-06-2018\"),"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                    new EndDate(\"06-06-2018\"), new StartTime(\"10:00\"), new EndTime(\"14:30\")"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":184,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meeting with Chocolate Supplier\"), new StartDate(\"22-07-2018\"),"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-07-2018\"), new StartTime(\"14:00\"), new EndTime(\"16:30\")"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":188,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Find Supplier for Cars\"), new StartDate(\"22-04-2018\"),"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-05-2018\"), new StartTime(\"00:00\"), new EndTime(\"23:59\")"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Create Website for products\"), new StartDate(\"20-03-2018\"),"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                    new EndDate(\"22-04-2018\"), new StartTime(\"08:00\"), new EndTime(\"17:30\")"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":196,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meet Supplier for History Books\"), new StartDate(\"01-05-2018\"),"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                    new EndDate(\"01-05-2018\"), new StartTime(\"18:00\"), new EndTime(\"19:00\")"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":200,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meet bosses for monthly review\"), new StartDate(\"30-04-2018\"),"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                    new EndDate(\"30-04-2018\"), new StartTime(\"10:00\"), new EndTime(\"17:30\")"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":204,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Prepare for monthly review\"), new StartDate(\"22-04-2018\"),"},{"lineNumber":205,"author":{"gitID":"-"},"content":"                    new EndDate(\"29-04-2018\"), new StartTime(\"00:00\"), new EndTime(\"23:59\")"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":208,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meeting new Client Roy\"), new StartDate(\"24-04-2018\"),"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                    new EndDate(\"24-04-2018\"), new StartTime(\"20:00\"), new EndTime(\"22:30\")"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":212,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Prepare for July Roadshow\"), new StartDate(\"26-05-2018\"),"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                    new EndDate(\"02-07-2018\"), new StartTime(\"10:00\"), new EndTime(\"23:59\")"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":216,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"July Roadshow at Orchard\"), new StartDate(\"03-07-2018\"),"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                    new EndDate(\"13-07-2018\"), new StartTime(\"10:00\"), new EndTime(\"20:30\")"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":220,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Meet Charlotte\"), new StartDate(\"15-05-2018\"),"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                    new EndDate(\"15-05-2018\"), new StartTime(\"12:00\"), new EndTime(\"12:30\")"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            new CalendarEntry("},{"lineNumber":224,"author":{"gitID":"-"},"content":"                    new EntryTitle(\"Trip to Europe\"), new StartDate(\"29-07-2018\"),"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                    new EndDate(\"28-08-2018\"), new StartTime(\"10:00\"), new EndTime(\"22:30\")"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            ),"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"            for (Order sampleOrder : getSampleOrders()) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                sampleAb.addOrderToOrderList(sampleOrder);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", dpe);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        } catch (DuplicateOrderException doe) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate orders\", doe);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * Returns a group set containing the list of strings given."},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public static Set\u003cGroup\u003e getGroupSet(String... strings) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        HashSet\u003cGroup\u003e groupTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            groupTags.add(new Group(s));"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return groupTags;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static Set\u003cPreference\u003e getPreferenceSet(String... strings) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        HashSet\u003cPreference\u003e prefTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            prefTags.add(new Preference(s));"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        return prefTags;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":273,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns a {@code CalendarManager} with no {@code CalendarEntry} in it."},{"lineNumber":275,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"SuxianAlicia"},"content":"    public static ReadOnlyCalendarManager getSampleCalendarManager() {"},{"lineNumber":277,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarManager sampleCm \u003d new CalendarManager();"},{"lineNumber":278,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":279,"author":{"gitID":"SuxianAlicia"},"content":"            for (CalendarEntry sampleEntry: getSampleCalendarEntries()) {"},{"lineNumber":280,"author":{"gitID":"SuxianAlicia"},"content":"                sampleCm.addCalendarEntry(sampleEntry);"},{"lineNumber":281,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":282,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":283,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"sample data should not contain duplicate calendar entries.\");"},{"lineNumber":284,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"SuxianAlicia"},"content":"        return sampleCm;"},{"lineNumber":286,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":16,"-":272}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCalendarEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.DateUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.EntryTimeConstraintsUtil;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.TimeUtil;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndDate;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EndTime;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.EntryTitle;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartDate;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.StartTime;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" * JAXB-friendly version of a CalendarEntry."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"public class XmlAdaptedCalendarEntry {"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CalendarEntry\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    private String entryTitle;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    private String startDate;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"    private String endDate;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    private String startTime;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    private String endTime;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an XmlAdaptedCalendarEntry."},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry() {}"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs an {@code XmlAdaptedCalendarEntry} with the given calendar entry details."},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry(String entryTitle, String startDate, String endDate,"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                                   String startTime, String endTime) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts a given Order into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCalendarEntry"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    public XmlAdaptedCalendarEntry(CalendarEntry source) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        entryTitle \u003d source.getEntryTitle().toString();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"     * Converts the jaxb-friendly adapted calendar entry object into the model\u0027s CalendarEntry object."},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws IllegalValueException if any data constraints are violated in the adapted calendar entry\u0027s fields."},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry toModelType() throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.entryTitle \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"                    EntryTitle.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        if (!EntryTitle.isValidEntryTitle(this.entryTitle)) {"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EntryTitle.MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"        final EntryTitle entryTitle \u003d new EntryTitle(this.entryTitle);"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"                    StartDate.class.getSimpleName()));"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"        if (!DateUtil.isValidDate(this.startDate)) {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        final StartDate startDate \u003d new StartDate(this.startDate);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.endDate \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"                    EndDate.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"        if (!DateUtil.isValidDate(this.endDate)) {"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EndDate.MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        final EndDate endDate \u003d new EndDate(this.endDate);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"                    StartTime.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"        if (!TimeUtil.isValidTime(this.startTime)) {"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(StartTime.MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"        final StartTime startTime \u003d new StartTime(this.startTime);"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"                    EndTime.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"        if (!TimeUtil.isValidTime(this.endTime)) {"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"            throw new IllegalValueException(EndTime.MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"        final EndTime endTime \u003d new EndTime(this.endTime);"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        EntryTimeConstraintsUtil.checkCalendarEntryTimeConstraints(startDate, endDate, startTime, endTime);"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"        return new CalendarEntry(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof XmlAdaptedCalendarEntry)) {"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        XmlAdaptedCalendarEntry otherCalEvent \u003d (XmlAdaptedCalendarEntry) other;"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.equals(entryTitle, otherCalEvent.entryTitle)"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(startDate, otherCalEvent.startDate)"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(endDate, otherCalEvent.endDate)"},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(startTime, otherCalEvent.startTime)"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 Objects.equals(endTime, otherCalEvent.endTime);"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":143,"-":1}},{"path":"src/main/java/seedu/address/model/person/GroupsContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Tests that a {@code Person} \u0027s {@code Group}s\u0027 names matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class GroupsContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public GroupsContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                .anyMatch(keyword -\u003e personGroupsMatchesKeyword(person, keyword));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Checks if person contains group with group tag names matching given keyword."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     * Matching is case-insensitive."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean personGroupsMatchesKeyword(Person person, String keyword) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cString\u003e groupNames \u003d person.getGroupTags().stream().map(group -\u003e group.tagName).collect(Collectors.toSet());"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        for (String groupName: groupNames) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            if (StringUtil.containsWordIgnoreCase(groupName, keyword)) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"                return true;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof GroupsContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.keywords.equals(((GroupsContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":46,"-":1}},{"path":"src/main/java/seedu/address/model/person/PreferencesContainKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" * Tests that a {@code Person} \u0027s {@code Preference}s\u0027 names matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"public class PreferencesContainKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public PreferencesContainKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean test(Person person) {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                .anyMatch(keyword -\u003e personGroupsMatchesKeyword(person, keyword));"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     * Checks if person contains preferences with  preference tag names matching given keyword."},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"     * Matching is case-insensitive."},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    private boolean personGroupsMatchesKeyword(Person person, String keyword) {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        Set\u003cString\u003e prefNames \u003d person.getPreferenceTags().stream().map(pref -\u003e pref.tagName)"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        for (String prefName: prefNames) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            if (StringUtil.containsWordIgnoreCase(prefName, keyword)) {"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"                return true;"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return false;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof PreferencesContainKeywordsPredicate // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.keywords.equals(((PreferencesContainKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":48,"-":1}},{"path":"src/main/java/seedu/address/model/order/UniqueOrderList.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.order;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":" * A list of orders that enforces no nulls and uniqueness between its elements."},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":" *"},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":" *"},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":" * @see Order#equals(Object)"},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":"public class UniqueOrderList implements Iterable\u003cOrder\u003e {"},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"     * Constructs empty OrderList."},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    public UniqueOrderList() {}"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     * Creates a UniqueOrderList using given orders."},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     * Enforces no nulls."},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"    public UniqueOrderList(List\u003cOrder\u003e orders) {"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orders);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        internalList.addAll(orders);"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"     * Returns all orders in this list as a Set."},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    public Set\u003cOrder\u003e toSet() {"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"     * Replaces the order {@code target} in the list with {@code editedOrder}."},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":"     * @throws DuplicateOrderException if the replacement is equivalent to another existing order in the list."},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"    public void setOrder(Order target, Order editedOrder)"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"            throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editedOrder);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"            throw new OrderNotFoundException();"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"        if (!target.equals(editedOrder) \u0026\u0026 internalList.contains(editedOrder)) {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"        internalList.set(index, editedOrder);"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"     * Replaces the Orders in this list with those in the argument order list."},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(orders);"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        final UniqueOrderList replacement \u003d new UniqueOrderList();"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"        for (final Order order : orders) {"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":"            replacement.add(order);"},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"        setOrders(replacement);"},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"    public void setOrders(UniqueOrderList replacement) {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":"     * Ensures every order in the argument list exists in this object."},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"    public void mergeFrom(UniqueOrderList from) {"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":"        final Set\u003cOrder\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"        from.internalList.stream()"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"                .filter(order -\u003e !alreadyInside.contains(order))"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"                .forEach(internalList::add);"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"     * Returns true if the list contains an equivalent Order as the given argument."},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"    public boolean contains(Order toCheck) {"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toCheck);"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"     * Adds an Order to the list."},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"     * @throws DuplicateOrderException if the Order to add is a duplicate of an existing Order in the list."},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"amad-person"},"content":"    public void add(Order toAdd) throws DuplicateOrderException {"},{"lineNumber":117,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toAdd);"},{"lineNumber":118,"author":{"gitID":"amad-person"},"content":"        if (contains(toAdd)) {"},{"lineNumber":119,"author":{"gitID":"amad-person"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":120,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"amad-person"},"content":"        internalList.add(toAdd);"},{"lineNumber":122,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":123,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":126,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"amad-person"},"content":"     * Removes Order from list if it exists."},{"lineNumber":128,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"amad-person"},"content":"    public void remove(Order toRemove) {"},{"lineNumber":130,"author":{"gitID":"amad-person"},"content":"        requireNonNull(toRemove);"},{"lineNumber":131,"author":{"gitID":"amad-person"},"content":"        if (contains(toRemove)) {"},{"lineNumber":132,"author":{"gitID":"amad-person"},"content":"            internalList.remove(toRemove);"},{"lineNumber":133,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":136,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"amad-person"},"content":"    public Iterator\u003cOrder\u003e iterator() {"},{"lineNumber":138,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":139,"author":{"gitID":"amad-person"},"content":"        return internalList.iterator();"},{"lineNumber":140,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":142,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"amad-person"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":144,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e asObservableList() {"},{"lineNumber":146,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":147,"author":{"gitID":"amad-person"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":148,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":150,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":152,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":153,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":154,"author":{"gitID":"amad-person"},"content":"                || (other instanceof UniqueOrderList // instanceof handles nulls"},{"lineNumber":155,"author":{"gitID":"amad-person"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueOrderList) other).internalList));"},{"lineNumber":156,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        return internalList.hashCode();"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":163}},{"path":"src/main/java/seedu/address/model/entry/exceptions/CalendarEntryNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Signals that the operation is unable to find the specified CalendarEntry."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntryNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":6,"-":1}},{"path":"src/main/java/seedu/address/model/entry/EndDate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.convertStringToDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.isValidDate;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Ending Date of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.DateUtil#isValidDate(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class EndDate {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_END_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"End Date should be DD-MM-YYYY, and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String endDateString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate endDate;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EndDate}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param endDate Valid end date."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public EndDate(String endDate) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(endDate);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidDate(endDate), MESSAGE_END_DATE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.endDate \u003d convertStringToDate(endDate);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.endDateString \u003d endDate;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given End date should be valid for conversion.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return endDateString;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EndDate // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.endDate.equals(((EndDate) other).endDate)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":1}},{"path":"src/main/java/seedu/address/model/entry/StartDate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.convertStringToDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.DateUtil.isValidDate;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Starting Date of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.DateUtil#isValidDate(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class StartDate {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_START_DATE_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Date should be DD-MM-YYYY, and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String startDateString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalDate startDate;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code StartDate}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param startDate Valid start date."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public StartDate(String startDate) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(startDate);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidDate(startDate), MESSAGE_START_DATE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.startDate \u003d convertStringToDate(startDate);"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.startDateString \u003d startDate;"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given Start date should be valid for conversion.\");"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getLocalDate() {"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate;"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        return startDateString;"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof StartDate // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.startDate.equals(((StartDate) other).startDate)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":1}},{"path":"src/main/java/seedu/address/model/entry/CalendarEntry.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Calendar Event in address book."},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarEntry {"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    private final EntryTitle entryTitle;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartDate startDate;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndDate endDate;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    private final StartTime startTime;"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    private final EndTime endTime;"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * Every field must be present, and not null."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarEntry(EntryTitle entryTitle, StartDate startDate, EndDate endDate,"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"                         StartTime startTime, EndTime endTime) {"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    public EntryTitle getEntryTitle() {"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle;"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public StartDate getStartDate() {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public EndDate getEndDate() {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        return endDate;"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"    public StartTime getStartTime() {"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime;"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    public EndTime getEndTime() {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime;"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalDate getDateToDisplay() {"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"        return startDate.getLocalDate();"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"        if (!(other instanceof CalendarEntry)) {"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"        CalendarEntry otherCalEvent \u003d (CalendarEntry) other;"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        return otherCalEvent.getEntryTitle().equals(this.getEntryTitle())"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getStartDate().equals(this.getStartDate())"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getEndDate().equals(this.getEndDate())"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getStartTime().equals(this.getStartTime())"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 otherCalEvent.getEndTime().equals(this.getEndTime());"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(entryTitle, startDate, endDate, startTime, endTime);"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"        builder.append(getEntryTitle())"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" Start Date: \")"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getStartDate())"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" End Date: \")"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getEndDate())"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" Start Time: \")"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getStartTime())"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"                .append(\" End Time: \")"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"                .append(getEndTime());"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        return builder.toString();"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":94,"-":1}},{"path":"src/main/java/seedu/address/model/entry/exceptions/DuplicateCalendarEntryException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry.exceptions;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the {@code UniqueCalendarEntryList}."},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"public class DuplicateCalendarEntryException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"    public DuplicateCalendarEntryException() {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":12,"-":1}},{"path":"src/main/java/seedu/address/model/entry/EndTime.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.convertStringToTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.isValidTime;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents ending Time of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.TimeUtil#isValidTime(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class EndTime {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_END_TIME_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"End Time should be HH:mm (24Hour Format), and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String endTimeString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalTime endTime;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EndTime}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     * @param endTime Valid end time."},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    public EndTime (String endTime) {"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(endTime);"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidTime(endTime), MESSAGE_END_TIME_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"            this.endTime \u003d convertStringToTime(endTime);"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"            this.endTimeString \u003d endTime;"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given End time should be valid for conversion.\");"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime;"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"        return endTimeString;"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EndTime // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.endTime.equals(((EndTime) other).endTime)"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.endTimeString.equals(((EndTime) other).endTimeString)); // state check"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        return endTime.hashCode();"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":58,"-":1}},{"path":"src/main/java/seedu/address/model/entry/StartTime.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.convertStringToTime;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.TimeUtil.isValidTime;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":" * Represents starting Time of a {@code CalendarEntry}."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link seedu.address.commons.util.TimeUtil#isValidTime(String)}"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"public class StartTime {"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_START_TIME_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"            \"Start Time should be HH:mm (24Hour Format), and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"    private final String startTimeString;"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"    private final LocalTime startTime;"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code StartTime}."},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"     * @param startTime Valid start time."},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"    public StartTime (String startTime) {"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(startTime);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidTime(startTime), MESSAGE_START_TIME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            this.startTime \u003d convertStringToTime(startTime);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"            this.startTimeString \u003d startTime;"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Given Start time should be valid for conversion.\");"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    public LocalTime getLocalTime() {"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime;"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return startTimeString;"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof StartTime // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.startTime.equals(((StartTime) other).startTime)"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.startTimeString.equals(((StartTime) other).startTimeString)); // state check"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        return startTime.hashCode();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":60,"-":1}},{"path":"src/main/java/seedu/address/model/ReadOnlyCalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Unmodifiable view of an calendar manager."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"public interface ReadOnlyCalendarManager {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns an unmodifiable view of the calendar entry list."},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"     * This list will not contain any duplicate calendar entries."},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cCalendarEntry\u003e getCalendarEntryList();"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":15,"-":1}},{"path":"src/main/java/seedu/address/model/entry/UniqueCalendarEntryList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":" * A list of {@code CalendarEntry} that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":" *"},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" *"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * @see CalendarEntry#equals(Object)"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class UniqueCalendarEntryList implements Iterable\u003cCalendarEntry\u003e {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private final ObservableList\u003cCalendarEntry\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the CalendarEntries in internal list with those in the argument calendar entry list."},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalEntryList(List\u003cCalendarEntry\u003e calendarEntries) throws DuplicateCalendarEntryException {"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(calendarEntries);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"        final UniqueCalendarEntryList replacement \u003d new UniqueCalendarEntryList();"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"        for (CalendarEntry ce: calendarEntries) {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"            replacement.add(ce);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        setCalendarEntries(replacement);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalendarEntries(UniqueCalendarEntryList replacement) {"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if the list contains an equivalent {@code CalendarEntry} as the given argument."},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean contains(CalendarEntry toCheck) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toCheck);"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds an CalendarEntry to the list."},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException if the CalendarEntry to add"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"     * is a duplicate of an existing CalendarEntry in the list."},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"    public void add(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toAdd);"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toAdd)) {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateCalendarEntryException();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.add(toAdd);"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes CalendarEntry from list if it exists."},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean remove(CalendarEntry toRemove) {"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(toRemove);"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":"        if (contains(toRemove)) {"},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"            internalList.remove(toRemove);"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the calendar entry {@code target} in the list with {@code editedEntry}."},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException if the replacement is equivalent to another existing entry in the list."},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws CalendarEntryNotFoundException if {@code target} could not be found in the list."},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"    public void setCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException, CalendarEntryNotFoundException {"},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(editedEntry);"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        int index \u003d internalList.indexOf(entryToEdit);"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CalendarEntryNotFoundException();"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"        if (!entryToEdit.equals(editedEntry) \u0026\u0026 internalList.contains(editedEntry)) {"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"            throw new DuplicateCalendarEntryException();"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        internalList.set(index, editedEntry);"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"    public Iterator\u003cCalendarEntry\u003e iterator() {"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.iterator();"},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e asObservableList() {"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof UniqueCalendarEntryList // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueCalendarEntryList) other).internalList));"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        return internalList.hashCode();"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":128,"-":1}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueGroupList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniquePreferenceList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniquePreferenceList prefTags;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final UniqueGroupList groupTags;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniqueOrderList orders;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        prefTags \u003d new UniquePreferenceList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        groupTags \u003d new UniqueGroupList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        orders \u003d new UniqueOrderList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void setGroupTags(Set\u003cGroup\u003e groupTags) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.groupTags.setTags(groupTags);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setPreferenceTags(Set\u003cPreference\u003e prefTags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.prefTags.setTags(prefTags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        this.orders.setOrders(orders);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setGroupTags(new HashSet\u003c\u003e(newData.getGroupList()));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setPreferenceTags(new HashSet\u003c\u003e(newData.getPreferenceList()));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        List\u003cOrder\u003e orderList \u003d new ArrayList\u003c\u003e(newData.getOrderList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            setOrders(orderList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (DuplicateOrderException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate orders\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s groups and preferences and updates {@link #groupTags} and {@link #prefTags}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * with any new groups and preferences found,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * and updates the Group and Preference objects in the person to point to those in"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * {@link #groupTags} and {@link #prefTags} respectively."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s group list and preference list will be updated"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * with the groups and preferences of {@code editedPerson}."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        removeUnusedGroups();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        removeUnusedPreferences();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *  Updates the master group list and master preference list to include groups and preferences"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *  in {@code person} that are not in the lists."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every group and every preference in this person"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     *  points to a Group object and Preference object in the respective master list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final UniqueGroupList personGroups \u003d new UniqueGroupList(person.getGroupTags());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        final UniquePreferenceList personPreferences \u003d new UniquePreferenceList(person.getPreferenceTags());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        groupTags.mergeFrom(personGroups);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        prefTags.mergeFrom(personPreferences);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // Create map with values \u003d group object references in the master list"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // used for checking person group references"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final Map\u003cGroup, Group\u003e masterGroupObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        groupTags.forEach(group -\u003e masterGroupObjects.put(group, group));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // Create map with values \u003d preference object references in the master list"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // used for checking person preference references"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final Map\u003cPreference, Preference\u003e masterPreferenceObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        prefTags.forEach(pref -\u003e masterPreferenceObjects.put(pref, pref));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // Rebuild the list of person groups and preferences to point to the relevant groups in the master group list"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // and relevant preferences in the master preference list."},{"lineNumber":172,"author":{"gitID":"-"},"content":"        final Set\u003cGroup\u003e correctGroupReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        final Set\u003cPreference\u003e correctPreferenceReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        personGroups.forEach(group -\u003e correctGroupReferences.add(masterGroupObjects.get(group)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        personPreferences.forEach(pref -\u003e correctPreferenceReferences.add(masterPreferenceObjects.get(pref)));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":177,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                correctGroupReferences, correctPreferenceReferences);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            removeUnusedGroups();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            removeUnusedPreferences();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void addGroup(Group g) throws UniqueGroupList.DuplicateGroupException {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        groupTags.add(g);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void addPreference(Preference p) throws UniquePreferenceList.DuplicatePreferenceException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        prefTags.add(p);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":206,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes group from all persons who has the group"},{"lineNumber":208,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws GroupNotFoundException if the {@code toRemove} is not in this {@code AddressBook}."},{"lineNumber":209,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"SuxianAlicia"},"content":"    public void removeGroup(Group toRemove) throws GroupNotFoundException {"},{"lineNumber":211,"author":{"gitID":"SuxianAlicia"},"content":"        if (groupTags.contains(toRemove)) {"},{"lineNumber":212,"author":{"gitID":"SuxianAlicia"},"content":"            persons.removeGroupFromAllPersons(toRemove);"},{"lineNumber":213,"author":{"gitID":"SuxianAlicia"},"content":"            groupTags.remove(toRemove);"},{"lineNumber":214,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":215,"author":{"gitID":"SuxianAlicia"},"content":"            throw new GroupNotFoundException();"},{"lineNumber":216,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":219,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes preference from all persons who has the preference"},{"lineNumber":221,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws PreferenceNotFoundException if the {@code toRemove} is not in this {@code AddressBook}."},{"lineNumber":222,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"SuxianAlicia"},"content":"    public void removePreference(Preference toRemove) throws PreferenceNotFoundException {"},{"lineNumber":224,"author":{"gitID":"SuxianAlicia"},"content":"        if (prefTags.contains(toRemove)) {"},{"lineNumber":225,"author":{"gitID":"SuxianAlicia"},"content":"            persons.removePrefFromAllPersons(toRemove);"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"            prefTags.remove(toRemove);"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"            throw new PreferenceNotFoundException();"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"     * Solution below adapted from"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes unused groups in groupTags."},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeUnusedGroups() {"},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cPerson\u003e list \u003d persons.getInternalList();"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"        UniqueGroupList newList \u003d new UniqueGroupList();"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: list) {"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"            newList.mergeFrom(new UniqueGroupList(p.getGroupTags()));"},{"lineNumber":243,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"SuxianAlicia"},"content":"        setGroupTags(newList.toSet());"},{"lineNumber":245,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":247,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"SuxianAlicia"},"content":"     * Solution below adapted from"},{"lineNumber":249,"author":{"gitID":"SuxianAlicia"},"content":"     * https://github.com/se-edu/addressbook-level4/pull/790/commits/48ba8e95de5d7eae883504d40e6795c857dae3c2"},{"lineNumber":250,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes unused preferences in prefTags."},{"lineNumber":251,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"SuxianAlicia"},"content":"    private void removeUnusedPreferences() {"},{"lineNumber":253,"author":{"gitID":"SuxianAlicia"},"content":"        ObservableList\u003cPerson\u003e list \u003d persons.getInternalList();"},{"lineNumber":254,"author":{"gitID":"SuxianAlicia"},"content":"        UniquePreferenceList newList \u003d new UniquePreferenceList();"},{"lineNumber":255,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":256,"author":{"gitID":"SuxianAlicia"},"content":"        for (Person p: list) {"},{"lineNumber":257,"author":{"gitID":"SuxianAlicia"},"content":"            newList.mergeFrom(new UniquePreferenceList(p.getPreferenceTags()));"},{"lineNumber":258,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"SuxianAlicia"},"content":"        setPreferenceTags(newList.toSet());"},{"lineNumber":260,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":264,"author":{"gitID":"amad-person"},"content":"    //// order-level operations"},{"lineNumber":265,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":266,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"amad-person"},"content":"     * Adds order to list of orders."},{"lineNumber":268,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"amad-person"},"content":"    public void addOrderToOrderList(Order orderToAdd) throws DuplicateOrderException {"},{"lineNumber":270,"author":{"gitID":"amad-person"},"content":"        orders.add(orderToAdd);"},{"lineNumber":271,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":273,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"amad-person"},"content":"     * Replaces the given order {@code target} in the list with {@code editedOrder}."},{"lineNumber":275,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":276,"author":{"gitID":"amad-person"},"content":"     * @throws DuplicateOrderException if updating the order\u0027s details causes the order"},{"lineNumber":277,"author":{"gitID":"amad-person"},"content":"     * to be equivalent to another existing order in the list."},{"lineNumber":278,"author":{"gitID":"amad-person"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":279,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"amad-person"},"content":"    public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":281,"author":{"gitID":"amad-person"},"content":"            throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":282,"author":{"gitID":"amad-person"},"content":"        requireNonNull(editedOrder);"},{"lineNumber":283,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":284,"author":{"gitID":"amad-person"},"content":"        orders.setOrder(target, editedOrder);"},{"lineNumber":285,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Updates the order status of the given order {@code target}."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * @throws DuplicateOrderException if updating the order\u0027s details causes the order"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * to be equivalent to another existing order in the list."},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        requireNonNull(orderStatus);"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        Order editedOrder \u003d new Order(target.getOrderInformation(), target.getOrderStatus(),"},{"lineNumber":300,"author":{"gitID":"-"},"content":"                target.getPrice(), target.getQuantity(), target.getDeliveryDate());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        editedOrder.getOrderStatus().setOrderStatusValue(orderStatus);"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"        orders.setOrder(target, editedOrder);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Removes order from list of orders."},{"lineNumber":308,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        orders.remove(targetOrder);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":312,"content":"    //@@author"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + groupTags.asObservableList().size() +  \" groups, \""},{"lineNumber":319,"author":{"gitID":"-"},"content":"                + prefTags.asObservableList().size() + \" preferences, \" + orders.asObservableList().size() + \" orders\";"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public ObservableList\u003cGroup\u003e getGroupList() {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        return groupTags.asObservableList();"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPreference\u003e getPreferenceList() {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        return prefTags.asObservableList();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":338,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":339,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e getOrderList() {"},{"lineNumber":340,"author":{"gitID":"amad-person"},"content":"        return orders.asObservableList();"},{"lineNumber":341,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":347,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":348,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.groupTags.equalsOrderInsensitive(((AddressBook) other).groupTags)"},{"lineNumber":350,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.prefTags.equalsOrderInsensitive(((AddressBook) other).prefTags));"},{"lineNumber":351,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, groupTags, prefTags, orders);"},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"SuxianAlicia":57,"-":270,"amad-person":30}},{"path":"src/main/java/seedu/address/model/tag/Preference.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Preference in the address book."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)} in parent class."},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class Preference extends Tag {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    public Preference(String preferenceTagName) {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"        super(preferenceTagName);"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":11,"-":1}},{"path":"src/main/java/seedu/address/model/entry/EntryTitle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.entry;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":" * Represents Title of a {@code CalendarEntry} in Event list of Address Book."},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEntryTitle(String)}"},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"public class EntryTitle {"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String MESSAGE_ENTRY_TITLE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"            \"Event title should only contain alphanumeric characters and spaces and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"    public static final String ENTRY_TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"    private final String entryTitle;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":"     * Constructs {@code EntryTitle}."},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":"     * @param entryTitle Valid entry title."},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    public EntryTitle(String entryTitle) {"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(entryTitle);"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":"        checkArgument(isValidEntryTitle(entryTitle), MESSAGE_ENTRY_TITLE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"        this.entryTitle \u003d entryTitle;"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"     * Returns true if a given string is a valid entry title."},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":"    public static boolean isValidEntryTitle(String test) {"},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"        return test.matches(ENTRY_TITLE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle;"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"     * entryTitle matching is non case-sensitive"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof EntryTitle // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.entryTitle.equalsIgnoreCase(((EntryTitle) other).entryTitle)); // state check"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"        return entryTitle.hashCode();"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":54,"-":1}},{"path":"src/main/java/seedu/address/model/tag/Group.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":" * Represents a Group in the address book."},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)} in parent class."},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"public class Group extends Tag {"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"    public Group(String groupTagName) {"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":"        super(groupTagName);"},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":11,"-":1}},{"path":"src/main/java/seedu/address/model/CalendarManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"SuxianAlicia"},"content":"//@@author SuxianAlicia"},{"lineNumber":3,"author":{"gitID":"SuxianAlicia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":5,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"SuxianAlicia"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":9,"author":{"gitID":"SuxianAlicia"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":11,"author":{"gitID":"SuxianAlicia"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.commons.util.CalendarEntryConversionUtil;"},{"lineNumber":13,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":14,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.UniqueCalendarEntryList;"},{"lineNumber":15,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":16,"author":{"gitID":"SuxianAlicia"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":17,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":18,"author":{"gitID":"SuxianAlicia"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"SuxianAlicia"},"content":" * Manages {@code Calendar} as defined in CalendarFX and {@code UniqueCalendarEntryList},"},{"lineNumber":20,"author":{"gitID":"SuxianAlicia"},"content":" * which contains {@code CalendarEntry} to be added to {@code Calendar}."},{"lineNumber":21,"author":{"gitID":"SuxianAlicia"},"content":" */"},{"lineNumber":22,"author":{"gitID":"SuxianAlicia"},"content":"public class CalendarManager implements ReadOnlyCalendarManager {"},{"lineNumber":23,"author":{"gitID":"SuxianAlicia"},"content":"    private final Calendar calendar;"},{"lineNumber":24,"author":{"gitID":"SuxianAlicia"},"content":"    private final UniqueCalendarEntryList calendarEntryList;"},{"lineNumber":25,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":26,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager() {"},{"lineNumber":27,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList \u003d new UniqueCalendarEntryList();"},{"lineNumber":28,"author":{"gitID":"SuxianAlicia"},"content":"        calendar \u003d new Calendar();"},{"lineNumber":29,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setReadOnly(true);"},{"lineNumber":30,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.setStyle(Calendar.Style.STYLE1);"},{"lineNumber":31,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":33,"author":{"gitID":"SuxianAlicia"},"content":"    public CalendarManager(ReadOnlyCalendarManager toBeCopied) {"},{"lineNumber":34,"author":{"gitID":"SuxianAlicia"},"content":"        this();"},{"lineNumber":35,"author":{"gitID":"SuxianAlicia"},"content":"        resetData(toBeCopied);"},{"lineNumber":36,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":38,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"SuxianAlicia"},"content":"     * Resets the existing data of this {@code CalendarManager} with {@code newData}."},{"lineNumber":40,"author":{"gitID":"SuxianAlicia"},"content":"     * Updates the Calendar with calendar entries in {@code calEntries}."},{"lineNumber":41,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"SuxianAlicia"},"content":"    public void resetData(ReadOnlyCalendarManager newData) {"},{"lineNumber":43,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(newData);"},{"lineNumber":44,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":45,"author":{"gitID":"SuxianAlicia"},"content":"        List\u003cCalendarEntry\u003e calEntries \u003d new ArrayList\u003c\u003e(newData.getCalendarEntryList());"},{"lineNumber":46,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":47,"author":{"gitID":"SuxianAlicia"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"SuxianAlicia"},"content":"            setCalendarEntries(calEntries);"},{"lineNumber":49,"author":{"gitID":"SuxianAlicia"},"content":"        } catch (DuplicateCalendarEntryException dcee) {"},{"lineNumber":50,"author":{"gitID":"SuxianAlicia"},"content":"            throw new AssertionError(\"Calendar Manager should not have duplicate calendar entries.\");"},{"lineNumber":51,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"SuxianAlicia"},"content":"        updateCalendar();"},{"lineNumber":53,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":55,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"SuxianAlicia"},"content":"     * Updates Calendar with entries converted from {@code calendarEntryList}."},{"lineNumber":57,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"SuxianAlicia"},"content":"    private void updateCalendar() {"},{"lineNumber":59,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.clear();"},{"lineNumber":60,"author":{"gitID":"SuxianAlicia"},"content":"        calendar.addEntries("},{"lineNumber":61,"author":{"gitID":"SuxianAlicia"},"content":"                CalendarEntryConversionUtil.convertEntireListToEntries(calendarEntryList.asObservableList()));"},{"lineNumber":62,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":64,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"SuxianAlicia"},"content":"     * Sets {@code calendarEntryList} to match the given list of calendar entries."},{"lineNumber":66,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"SuxianAlicia"},"content":"    private void setCalendarEntries(List\u003cCalendarEntry\u003e calEntries)"},{"lineNumber":68,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException {"},{"lineNumber":69,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList.setCalEntryList(calEntries);"},{"lineNumber":70,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":72,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e getCalendarEntryList() {"},{"lineNumber":74,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarEntryList.asObservableList();"},{"lineNumber":75,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":77,"author":{"gitID":"SuxianAlicia"},"content":"    public Calendar getCalendar() {"},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"        return calendar;"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"    // Managing CalendarEntries operations"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds a calendar entries to list of calendar entries in calendar manager."},{"lineNumber":85,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException"},{"lineNumber":86,"author":{"gitID":"SuxianAlicia"},"content":"     * if there exist an equivalent calendar entry in calendar manager."},{"lineNumber":87,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"SuxianAlicia"},"content":"    public void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":89,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList.add(toAdd);"},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"        updateCalendar();"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"     * Removes an existing calendar entry in list of calendar entries and from the calendar itself."},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws CalendarEntryNotFoundException"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"     * if given calendar entry does not exist in list of calendar entry"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"        if (!calendarEntryList.remove(entryToDelete)) {"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":"            throw new CalendarEntryNotFoundException();"},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"            updateCalendar();"},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the given calendar entry {@code target} in the list with {@code editedEntry}."},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"     * Updates the Calendar to show the new result."},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"    public void updateCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException, CalendarEntryNotFoundException {"},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(editedEntry);"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"        calendarEntryList.setCalendarEntry(entryToEdit, editedEntry);"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"        updateCalendar();"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"                || (other instanceof CalendarManager // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"                \u0026\u0026 this.calendarEntryList.equals(((CalendarManager) other).calendarEntryList));"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":"    public int hashCode() {"},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"        return Objects.hash(calendar, calendarEntryList);"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":128,"-":1}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.CalendarManagerChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":34,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cOrder\u003e filteredOrders;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cCalendarEntry\u003e filteredEvents;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final CalendarManager calendarManager;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyCalendarManager calendarManager, UserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, calendarManager, userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.calendarManager \u003d new CalendarManager(calendarManager);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        filteredOrders \u003d new FilteredList\u003c\u003e(this.addressBook.getOrderList());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        filteredEvents \u003d new FilteredList\u003c\u003e(this.calendarManager.getCalendarEntryList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new CalendarManager(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        calendarManager.resetData(newCalendarData);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":79,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"SuxianAlicia"},"content":"    public ReadOnlyCalendarManager getCalendarManager() {"},{"lineNumber":81,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager;"},{"lineNumber":82,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate address book has changed */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":91,"author":{"gitID":"SuxianAlicia"},"content":"    /** Raises an event to indicate calendar manager has changed */"},{"lineNumber":92,"author":{"gitID":"SuxianAlicia"},"content":"    private void indicateCalendarManagerChanged() {"},{"lineNumber":93,"author":{"gitID":"SuxianAlicia"},"content":"        raise(new CalendarManagerChangedEvent(calendarManager));"},{"lineNumber":94,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteGroup(Group targetGroup) throws GroupNotFoundException {"},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.removeGroup(targetGroup);"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"        indicateAddressBookChanged();"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":126,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"SuxianAlicia"},"content":"    public void deletePreference(Preference targetPreference) throws PreferenceNotFoundException {"},{"lineNumber":128,"author":{"gitID":"SuxianAlicia"},"content":"        addressBook.removePreference(targetPreference);"},{"lineNumber":129,"author":{"gitID":"SuxianAlicia"},"content":"        indicateAddressBookChanged();"},{"lineNumber":130,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":134,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"SuxianAlicia"},"content":"    public void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException {"},{"lineNumber":136,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.addCalendarEntry(toAdd);"},{"lineNumber":137,"author":{"gitID":"SuxianAlicia"},"content":"        updateFilteredCalendarEntryList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":138,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":139,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":141,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"SuxianAlicia"},"content":"    public void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException {"},{"lineNumber":143,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.deleteCalendarEntry(entryToDelete);"},{"lineNumber":144,"author":{"gitID":"SuxianAlicia"},"content":"        updateFilteredCalendarEntryList(PREDICATE_SHOW_ALL_CALENDAR_ENTRIES);"},{"lineNumber":145,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":146,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":148,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"SuxianAlicia"},"content":"    public void updateCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":150,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException, CalendarEntryNotFoundException {"},{"lineNumber":151,"author":{"gitID":"SuxianAlicia"},"content":"        requireAllNonNull(entryToEdit, editedEntry);"},{"lineNumber":152,"author":{"gitID":"SuxianAlicia"},"content":"        calendarManager.updateCalendarEntry(entryToEdit, editedEntry);"},{"lineNumber":153,"author":{"gitID":"SuxianAlicia"},"content":"        indicateCalendarManagerChanged();"},{"lineNumber":154,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":158,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"amad-person"},"content":"    public void updateOrder(Order target, Order editedOrder)"},{"lineNumber":160,"author":{"gitID":"amad-person"},"content":"        throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":161,"author":{"gitID":"amad-person"},"content":"        requireAllNonNull(target, editedOrder);"},{"lineNumber":162,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":163,"author":{"gitID":"amad-person"},"content":"        addressBook.updateOrder(target, editedOrder);"},{"lineNumber":164,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":165,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":167,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"amad-person"},"content":"    public void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":169,"author":{"gitID":"amad-person"},"content":"            throws DuplicateOrderException, OrderNotFoundException {"},{"lineNumber":170,"author":{"gitID":"amad-person"},"content":"        addressBook.updateOrderStatus(target, orderStatus);"},{"lineNumber":171,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":172,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":174,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"amad-person"},"content":"    public void addOrderToOrderList(Order orderToAdd) throws DuplicateOrderException {"},{"lineNumber":176,"author":{"gitID":"amad-person"},"content":"        addressBook.addOrderToOrderList(orderToAdd);"},{"lineNumber":177,"author":{"gitID":"amad-person"},"content":"        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":178,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":179,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":181,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"amad-person"},"content":"    public void deleteOrder(Order targetOrder) throws OrderNotFoundException {"},{"lineNumber":183,"author":{"gitID":"amad-person"},"content":"        addressBook.deleteOrder(targetOrder);"},{"lineNumber":184,"author":{"gitID":"amad-person"},"content":"        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"},{"lineNumber":185,"author":{"gitID":"amad-person"},"content":"        indicateAddressBookChanged();"},{"lineNumber":186,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"amad-person"},"content":"    //@@author amad-person"},{"lineNumber":208,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"amad-person"},"content":"     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"},{"lineNumber":210,"author":{"gitID":"amad-person"},"content":"     * {@code addressBook}"},{"lineNumber":211,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"amad-person"},"content":"    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"},{"lineNumber":214,"author":{"gitID":"amad-person"},"content":"        return FXCollections.unmodifiableObservableList(filteredOrders);"},{"lineNumber":215,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":217,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"amad-person"},"content":"    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"},{"lineNumber":219,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":220,"author":{"gitID":"amad-person"},"content":"        requireNonNull(predicate);"},{"lineNumber":221,"author":{"gitID":"amad-person"},"content":"        filteredOrders.setPredicate(predicate);"},{"lineNumber":222,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"amad-person"},"content":"    //@@author"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Calendar Entry List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":226,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":227,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":228,"author":{"gitID":"SuxianAlicia"},"content":"    public ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList() {"},{"lineNumber":229,"author":{"gitID":"SuxianAlicia"},"content":"        return FXCollections.unmodifiableObservableList(filteredEvents);"},{"lineNumber":230,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":232,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":233,"author":{"gitID":"SuxianAlicia"},"content":"    public void updateFilteredCalendarEntryList(Predicate\u003cCalendarEntry\u003e predicate) {"},{"lineNumber":234,"author":{"gitID":"SuxianAlicia"},"content":"        requireNonNull(predicate);"},{"lineNumber":235,"author":{"gitID":"SuxianAlicia"},"content":"        filteredEvents.setPredicate(predicate);"},{"lineNumber":236,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":238,"author":{"gitID":"SuxianAlicia"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"SuxianAlicia"},"content":"    public Calendar getCalendar() {"},{"lineNumber":240,"author":{"gitID":"SuxianAlicia"},"content":"        return calendarManager.getCalendar();"},{"lineNumber":241,"author":{"gitID":"SuxianAlicia"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                \u0026\u0026 calendarManager.equals(other.calendarManager)"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":65,"-":150,"amad-person":48}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.CalendarEntry;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.exceptions.CalendarEntryNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.entry.exceptions.DuplicateCalendarEntryException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Group;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Preference;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.GroupNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.exceptions.PreferenceNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Predicate\u003cCalendarEntry\u003e PREDICATE_SHOW_ALL_CALENDAR_ENTRIES \u003d unused -\u003e true;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData, ReadOnlyCalendarManager newCalendarData);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    void updateFilteredCalendarEntryList(Predicate\u003cCalendarEntry\u003e predicate);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered order list to filter by the given {@code predicate}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered order list */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    ObservableList\u003cOrder\u003e getFilteredOrderList();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Deletes given Order"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    void deleteOrder(Order targetOrder) throws OrderNotFoundException;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Deletes given Group"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws GroupNotFoundException if {@code targetGroup} could not be found in group list."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    void deleteGroup(Group targetGroup) throws GroupNotFoundException;"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Deletes given Preference"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws PreferenceNotFoundException if {@code targetPreference} could not be found in preference list."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    void deletePreference(Preference targetPreference) throws PreferenceNotFoundException;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Adds order to list of orders."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    void addOrderToOrderList(Order orderToAdd) throws DuplicateOrderException;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author SuxianAlicia"},{"lineNumber":96,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"SuxianAlicia"},"content":"     * Adds entry to list of calendar events."},{"lineNumber":98,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"SuxianAlicia"},"content":"    void addCalendarEntry(CalendarEntry toAdd) throws DuplicateCalendarEntryException;"},{"lineNumber":100,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":101,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"SuxianAlicia"},"content":"     * Deletes given calendar entry from calendar."},{"lineNumber":103,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"SuxianAlicia"},"content":"    void deleteCalendarEntry(CalendarEntry entryToDelete) throws CalendarEntryNotFoundException;"},{"lineNumber":105,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":106,"author":{"gitID":"SuxianAlicia"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"SuxianAlicia"},"content":"     * Replaces the given calendar entry {@code target} with {@code editedEntry}."},{"lineNumber":108,"author":{"gitID":"SuxianAlicia"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws DuplicateCalendarEntryException if updating the entry\u0027s details causes the entry to be equivalent to"},{"lineNumber":110,"author":{"gitID":"SuxianAlicia"},"content":"     *      another existing entry in the list."},{"lineNumber":111,"author":{"gitID":"SuxianAlicia"},"content":"     * @throws CalendarEntryNotFoundException if {@code target} could not be found in the list."},{"lineNumber":112,"author":{"gitID":"SuxianAlicia"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"SuxianAlicia"},"content":"    void updateCalendarEntry(CalendarEntry entryToEdit, CalendarEntry editedEntry)"},{"lineNumber":114,"author":{"gitID":"SuxianAlicia"},"content":"            throws DuplicateCalendarEntryException, CalendarEntryNotFoundException;"},{"lineNumber":115,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":116,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns an unmodifiable view of the filtered calendar entry list */"},{"lineNumber":117,"author":{"gitID":"SuxianAlicia"},"content":"    ObservableList\u003cCalendarEntry\u003e getFilteredCalendarEntryList();"},{"lineNumber":118,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":119,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns Calendar stored in Model. */"},{"lineNumber":120,"author":{"gitID":"SuxianAlicia"},"content":"    Calendar getCalendar();"},{"lineNumber":121,"author":{"gitID":"SuxianAlicia"},"content":""},{"lineNumber":122,"author":{"gitID":"SuxianAlicia"},"content":"    /** Returns the CalendarManager */"},{"lineNumber":123,"author":{"gitID":"SuxianAlicia"},"content":"    ReadOnlyCalendarManager getCalendarManager();"},{"lineNumber":124,"author":{"gitID":"SuxianAlicia"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Replaces the given order {@code target} with {@code editedOrder}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws DuplicateOrderException if updating the order\u0027s details causes the order to be"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *  equivalent to another existing order in the list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @throws OrderNotFoundException if {@code target} could not be found in the list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    void updateOrder(Order target, Order editedOrder)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throws DuplicateOrderException, OrderNotFoundException;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Updates the order status of {@code target} with {@code orderStatus}."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    void updateOrderStatus(Order target, String orderStatus)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throws DuplicateOrderException, OrderNotFoundException;"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"SuxianAlicia":30,"-":112}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"amad-person"},"content":"//@@author amad-person"},{"lineNumber":2,"author":{"gitID":"amad-person"},"content":"package seedu.address.model.theme;"},{"lineNumber":3,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":4,"author":{"gitID":"amad-person"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"amad-person"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":7,"author":{"gitID":"amad-person"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"amad-person"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":10,"author":{"gitID":"amad-person"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitID":"amad-person"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":13,"author":{"gitID":"amad-person"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"amad-person"},"content":" * Represents the current theme of the address book."},{"lineNumber":15,"author":{"gitID":"amad-person"},"content":" */"},{"lineNumber":16,"author":{"gitID":"amad-person"},"content":"public class Theme {"},{"lineNumber":17,"author":{"gitID":"amad-person"},"content":"    public static final String DARK_THEME_KEYWORD \u003d \"dark\";"},{"lineNumber":18,"author":{"gitID":"amad-person"},"content":"    public static final String LIGHT_THEME_KEYWORD \u003d \"light\";"},{"lineNumber":19,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":20,"author":{"gitID":"amad-person"},"content":"    public static final ArrayList\u003cString\u003e VALID_THEMES \u003d new ArrayList\u003c\u003e("},{"lineNumber":21,"author":{"gitID":"amad-person"},"content":"            Arrays.asList(DARK_THEME_KEYWORD, LIGHT_THEME_KEYWORD));"},{"lineNumber":22,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":23,"author":{"gitID":"amad-person"},"content":"    public static final String MESSAGE_THEME_CONSTRAINTS \u003d \"Theme can only be \""},{"lineNumber":24,"author":{"gitID":"amad-person"},"content":"            + DARK_THEME_KEYWORD + \" or \" + LIGHT_THEME_KEYWORD + \".\";"},{"lineNumber":25,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":26,"author":{"gitID":"amad-person"},"content":"    public static final String DARK_THEME_CSS_FILE_PATH \u003d \"view/DarkTheme.css\";"},{"lineNumber":27,"author":{"gitID":"amad-person"},"content":"    public static final String LIGHT_THEME_CSS_FILE_PATH \u003d \"view/LightTheme.css\";"},{"lineNumber":28,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":29,"author":{"gitID":"amad-person"},"content":"    private static String currentTheme;"},{"lineNumber":30,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":31,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"amad-person"},"content":"     * Constructs a {@code currentTheme}."},{"lineNumber":33,"author":{"gitID":"amad-person"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"amad-person"},"content":"     * @param currentThemeVersion a valid theme."},{"lineNumber":35,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"amad-person"},"content":"    public Theme(String currentThemeVersion) {"},{"lineNumber":37,"author":{"gitID":"amad-person"},"content":"        requireNonNull(currentThemeVersion);"},{"lineNumber":38,"author":{"gitID":"amad-person"},"content":"        checkArgument(isValidTheme(currentThemeVersion), MESSAGE_THEME_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"amad-person"},"content":"        currentTheme \u003d currentThemeVersion;"},{"lineNumber":40,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":42,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"amad-person"},"content":"     * Returns true if the given string is a valid theme."},{"lineNumber":44,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"amad-person"},"content":"    public static boolean isValidTheme(String test) {"},{"lineNumber":46,"author":{"gitID":"amad-person"},"content":"        requireNonNull(test);"},{"lineNumber":47,"author":{"gitID":"amad-person"},"content":"        return VALID_THEMES.contains(test);"},{"lineNumber":48,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":50,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"amad-person"},"content":"     * Returns the current theme."},{"lineNumber":52,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"amad-person"},"content":"    public static String getCurrentTheme() {"},{"lineNumber":54,"author":{"gitID":"amad-person"},"content":"        return currentTheme;"},{"lineNumber":55,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":57,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"amad-person"},"content":"     * Sets the current theme to the newTheme."},{"lineNumber":59,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"amad-person"},"content":"    public static void setCurrentTheme(String newTheme) {"},{"lineNumber":61,"author":{"gitID":"amad-person"},"content":"        requireNonNull(newTheme);"},{"lineNumber":62,"author":{"gitID":"amad-person"},"content":"        if (isValidTheme(newTheme)) {"},{"lineNumber":63,"author":{"gitID":"amad-person"},"content":"            currentTheme \u003d newTheme;"},{"lineNumber":64,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":67,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"amad-person"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"amad-person"},"content":"        return currentTheme;"},{"lineNumber":70,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":72,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"amad-person"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"amad-person"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"amad-person"},"content":"                || (other instanceof Theme); // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":78,"author":{"gitID":"amad-person"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"amad-person"},"content":"    public int hashCode() {"},{"lineNumber":80,"author":{"gitID":"amad-person"},"content":"        return currentTheme.hashCode();"},{"lineNumber":81,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":83,"author":{"gitID":"amad-person"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"amad-person"},"content":"     * Changes the current theme of the address book."},{"lineNumber":85,"author":{"gitID":"amad-person"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"amad-person"},"content":"    public static void changeTheme(Stage primaryStage, String newTheme) {"},{"lineNumber":87,"author":{"gitID":"amad-person"},"content":"        if (isValidTheme(newTheme)) {"},{"lineNumber":88,"author":{"gitID":"amad-person"},"content":"            Scene scene \u003d primaryStage.getScene();"},{"lineNumber":89,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":90,"author":{"gitID":"amad-person"},"content":"            // clear current styles"},{"lineNumber":91,"author":{"gitID":"amad-person"},"content":"            scene.getStylesheets().clear();"},{"lineNumber":92,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":93,"author":{"gitID":"amad-person"},"content":"            // new theme file path"},{"lineNumber":94,"author":{"gitID":"amad-person"},"content":"            String newThemeCssFilePath;"},{"lineNumber":95,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":96,"author":{"gitID":"amad-person"},"content":"            // find new theme file path based on theme version"},{"lineNumber":97,"author":{"gitID":"amad-person"},"content":"            switch (newTheme) {"},{"lineNumber":98,"author":{"gitID":"amad-person"},"content":"            case DARK_THEME_KEYWORD:"},{"lineNumber":99,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d DARK_THEME_CSS_FILE_PATH;"},{"lineNumber":100,"author":{"gitID":"amad-person"},"content":"                break;"},{"lineNumber":101,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":102,"author":{"gitID":"amad-person"},"content":"            case LIGHT_THEME_KEYWORD:"},{"lineNumber":103,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d LIGHT_THEME_CSS_FILE_PATH;"},{"lineNumber":104,"author":{"gitID":"amad-person"},"content":"                break;"},{"lineNumber":105,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":106,"author":{"gitID":"amad-person"},"content":"            default:"},{"lineNumber":107,"author":{"gitID":"amad-person"},"content":"                newThemeCssFilePath \u003d DARK_THEME_CSS_FILE_PATH;"},{"lineNumber":108,"author":{"gitID":"amad-person"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"amad-person"},"content":""},{"lineNumber":110,"author":{"gitID":"amad-person"},"content":"            // add new stylesheet to scene"},{"lineNumber":111,"author":{"gitID":"amad-person"},"content":"            scene.getStylesheets().add(newThemeCssFilePath);"},{"lineNumber":112,"author":{"gitID":"amad-person"},"content":"            primaryStage.setScene(scene);"},{"lineNumber":113,"author":{"gitID":"amad-person"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"amad-person"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"amad-person"},"content":"}"}],"authorContributionMap":{"amad-person":115}}]
