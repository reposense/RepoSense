var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-W14-B1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"* *Email us* : You can also reach us at `mukesh.gadupudi@u.nus.edu`"}],"authorContributionMap":{"-":4,"shanmu9898":2}},{"path":"docs/team/MukeshGadupudi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"\u003d Mukesh Gadupudi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d Project: TeachConnect"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d 1. Overview"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"*TeachConnect (TC)* is command line application designed to assist teachers and other educational professionals in *managing their contacts, appointments and tasks*. It is an application for a user who loves to type - in other words, it uses a *Command Line Interface (CLI)*. All output is displayed on a *Graphical User Interface (GUI)* - which is just the computer application screen. If you can type fast, TeachConnect will manage your contacts faster than traditional contact books."},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d 2. Purpose of Portfolio Page"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"This portfolio was made to document all contributions I made to the project. +"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"The contents included are:"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":". The external behavior of my contributions."},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":". The justification for their implementation."},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":". Details of the implementation."},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"It also includes some of the other contributions I made â€“ Testing, PR reviews and Project Management."},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d 3. Summary of Contributions"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"*Major enhancement*: Sharing of Contacts +"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"*What it does*: allows users to import or export contacts in various file formats depending on conditions the user gives. +"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"*Justification* : Teachers in general take up new classes and hence it is necessary for them to share the contact details of all the students in the class. They are also very sociable people and exchanging contacts between themselves should be made as simple and seamless as possible."},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"*Minor enhancements*: Creating Personalised Shortcuts for any command +"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"*What it does*: allows users to set multiple shortcuts for any command they wish. They can also choose to delete shortcuts. +"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"*Justification* : TeachConnect comes with a lot of features and each feature has its own command word. The most gruelling part is remembering the exact command word as stated in the user guide. To overcome this the shortcut command helps keep aliases to the commands there by helping teachers better remember the command words they are comfortable with."},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"*Code Contributed* : [https://github.com/CS2103JAN2018-W14-B1/main/blob/master/collated/functional/shanmu9898.md[Functional code]] [https://github.com/CS2103JAN2018-W14-B1/main/blob/master/collated/test/shanmu9898.md[Test code]]"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"*Other contributions* :"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"** Created and set up the team repo including the Travis checks,Coveralls,Auto Publishing and Badges."},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"** Managed all Issues and Milestones by managing the project and assigning work."},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"** Wrote additional tests to increase coverage."},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"** Took the role of Team Leader to make important decisions regarding development of the product."},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"** Managed GitHub effectively to keep track of issues, merging Pull requests by resolving conflicts and keeping track of deadlines so that the weekly releases are made on time with a working product."},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"** Fixed various(5+) bugs in the product including some bugs which existed previously in the product. link:https://github.com/CS2103JAN2018-W14-B1/main/pull/144[`Pull Request Bug Fix Example`]"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"** Added several Use Cases for features in Developer Guide."},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"** Improved User Interface design by changing the orientation and location of various parts of UI."},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"** Helped teammate create his PR along with helping him setup git and checkstyle. link:https://github.com/CS2103JAN2018-W14-B1/main/pull/82[`Pull Request AutoSort`]."},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"** Contributed to User Guide and Developer Guide to enhance its language link:https://github.com/CS2103JAN2018-W14-B1/main/pull/54[`Pull Request Developer Guide Update`]."},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"** Helped people on the forum with their technical difficulties."},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"** Managed all final submissions for CS2103T and CS2101."},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"** Helped in Collating of codes of everyone link:https://github.com/CS2103JAN2018-W14-B1/main/pull/124[`Pull Request Collate`]."},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d 4. Contributions to the User Guide"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"|_Given below are sections I contributed to the User Guide. It shows my ability to contribute and write documentation aimed at end users._"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d 4.1 Major Enhancement: Sharing Contacts"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from User Guide)#"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"include::../UserGuide.adoc[tag\u003dimport]"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"include::../UserGuide.adoc[tag\u003dexport]"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from User Guide)#"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d 4.2 Minor Enhancement: Personalised Shortcut Commands"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from User Guide)#"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"include::../UserGuide.adoc[tag\u003dshortcut]"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"include::../UserGuide.adoc[tag\u003ddeleteshortcut]"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from User Guide)#"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d 4. Contributions to the Developer Guide"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"|\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"|_Given below are sections I contributed to the Developer Guide. It shows my ability to write technical documentation and the technical depth of my contributions._"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"|\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d 5.1 Major Enhancement: Sharing of Contacts"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from Developer Guide)#"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"include::../DeveloperGuide.adoc[tag\u003dexport]"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from Developer Guide)#"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d 5.2 Minor Enhancement: Personalised Shortcut Commands"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from Developer Guide)#"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"include::../DeveloperGuide.adoc[tag\u003dshortcut]"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from Developer Guide)#"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d Appendix A : Proposed Enhancement"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d A.1 Other features Implemented"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d Contributions to the User Guide"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"* Minor Enhancement: Personalised Shortcut Commands"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from User Guide)#"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"include::../UserGuide.adoc[tag\u003dlist]"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from User Guide)#"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"* Major Enhancement: Sharing of Contacts"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from DeveloperGuide)#"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"include::../DeveloperGuide.adoc[tag\u003dimport]"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from DeveloperGuide)#"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"* Minor Enhancement: Personalised Shortcut Commands"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"#Start of Extract (from Developer Guide)#"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"include::../DeveloperGuide.adoc[tag\u003ddeleteshortcut]"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"#End of Extract (from Developer Guide)#"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d A.2 Enhancement Proposed: Using Natural Language Processing for Detecting Events"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d External Behaviour"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"This feature will help in integrating the mails we receive and appointments in those mails with TeachConnect. TeachConnect will be automatically be able to predict the events and suggest appointments/tasks using NLP in the emails."},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"This feature will make it easier for teachers to set appointments with students who mail them regarding extra classes or consultation. This will also increase the scope of the product to help teachers make and set tasks for various other factors not related to students."},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":"A connection will be first established between TeachConnect and the user\u0027s default email service provider."},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"Through the following use case diagram, the teacher will be able to set appointments with students or other people."},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"image::useCase.PNG[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"    Figure 1 : Use case Diagram"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":""}],"authorContributionMap":{"shanmu9898":150}},{"path":"collated/unused/ShortcutCardTest.java","lines":[{"lineNumber":1,"content":"//@@author shanmu9898-unused"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalShortcuts.SHORTCUT_DOUBLES_3;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalShortcuts.SHORTCUT_DOUBLES_5;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCardTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d SHORTCUT_DOUBLES_5;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCard shortcutCard \u003d new ShortcutCard(shortcutDoubles, 0);"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        // same shortcut, same index -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCard copy \u003d new ShortcutCard(shortcutDoubles, 0);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(shortcutCard.equals(copy));"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(shortcutCard.equals(shortcutCard));"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(shortcutCard.equals(null));"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(shortcutCard.equals(0));"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        // different shortcut, same index -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles differentshortcut \u003d SHORTCUT_DOUBLES_3;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(shortcutCard.equals(new ShortcutCard(differentshortcut, 0)));"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        // same shortcut, different index -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(shortcutCard.equals(new ShortcutCard(shortcutDoubles, 1)));"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":1,"-":3,"shanmu9898":36}},{"path":"docs/team/rachelngo.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d Ngo Phuong Thao - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"ifdef::env-github,env-browser[:outfilesuffix: .adoc]"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":":imagesDir: ../images"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":":stylesDir: ../stylesheets"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":":collatedDir: ../../collated"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d PROJECT: TeachConnect"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"---"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Overview"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"TeachConnect is a contact and schedule management application designed for teachers and educational professionals. TeachConnect is designed to best aid users who prefer to enter input using keyboard instead of the Graphical User Interface (GUI)."},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"This portfolio was made to document all contribution I have made to this project."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"* *Major enhancement*: added Appointment \u0026 Task feature."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"** What it does:"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"*** It allows the user to store their appointments and tasks in TeachConnect."},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"*** It allows the user to check the date and time of their appointments easily on the UI\u0027s Calendar."},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"** Justification: This feature can help teachers keeping track of any upcoming appointment or task they have. This can be useful for teachers or teaching associates who frequently need to meet up with students and parents for counselling or administrative purposes."},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"** Highlights: This enhancement modifies the existing model to store `Task` and `Appointment`. It also modified the UI significantly by integrating in a calendar, so that all appointment can be rendered on the calendar."},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"** Credits: The calendar in the UI was taken from third party library `CalendarFX`."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"* *Minor enhancement*: added a change theme command that allows the user to change them of the GUI."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"* *Code contributed*: +"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"https://github.com/CS2103JAN2018-W14-B1/main/blob/master/collated/functional/Sisyphus25.md[Functional code] +"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"https://github.com/CS2103JAN2018-W14-B1/main/blob/master/collated/test/Sisyphus25.md[Test code]"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"* *Other contributions*:"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"** Project management:"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"*** Managed issues assignments and issues tracking."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"*** Managed Github Milestones and ensured all issue for each Milestone could be completed before the deadline."},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"** Enhancements to existing features:"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"*** Added colour to tag labels. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/5[#5])"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"*** Added toggle Calendar View command. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/84[#84])"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"*** Modified `list` command to allow toggling of list displayed on GUI. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/91[#91])"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"*** Improved User Interface design by rearranging position of components in the app, modifying the appearance of cards displayed in the item list and adding app logo and app name. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/155[#155], https://github.com/CS2103JAN2018-W14-B1/main/pull/158[#158])"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"*** Added 2 new themes for the GUI: `light` and `galaxy`. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/89[#89])"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"*** Fixed bugs for various issues raised by other teammates and testers. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/143[#143], https://github.com/CS2103JAN2018-W14-B1/main/pull/162[#162])"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"** Community:"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"*** Reviewed team members\u0027 Pull Requests (PR)."},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"*** Reported bugs and provided suggestions for other teams in the class."},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"** Documentation:"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"*** Added demo images to User Guide. +"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"*** Added annotation for tables and figures in User Guide and Developer Guide. +"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"*** Formatted the contents of User Guide and Developer Guide."},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"** Tools:"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"*** Integrated third party library `CalendarFX` to TeachConnect. (PR https://github.com/CS2103JAN2018-W14-B1/main/pull/83[#83])"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"---"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"include::../UserGuide.adoc[tag\u003dappointment]"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"include::../UserGuide.adoc[tag\u003dtask]"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"include::../UserGuide.adoc[tag\u003dtheme]"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"---"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"---"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"include::../DeveloperGuide.adoc[tag\u003deventmanagement]"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"include::../DeveloperGuide.adoc[tag\u003dtheme]"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"---"}],"authorContributionMap":{"Sisyphus25":82}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B1/main/"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"TeachConnect (TC) is created to assist teachers and other educational professionals in *managing their contacts, appointments and tasks*. TeachConnect is also tailored for teachers who would *prefer to use a Desktop App for managing contacts*. Most importantly, it is *optimized for those who prefer to enter input using keyboard* while still having the benefits of seeing the results on a screen. If you can type fast, TeachConnect will manage your contacts faster than traditional contact books."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d About this guide"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"TC has many features at your disposal. This guide will help you learn and use the"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"various features available to utilise TC to its fullest potential. +"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"Donâ€™t worry if you are not a computer geek, we will walk you through the simple steps to"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"become a TC master user! +"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"Letâ€™s jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"There a few pre-requisites that you might need to install. This shouldn\u0027t take more than a few minutes. If you already have them installed, please move to \u003c\u003cFeatures\u003e\u003e to learn more about our features:"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"You can download the latest Java version link:https://java.com/en/download/[here]."},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":".  Download the latest `Teachconnect.jar` [https://github.com/CS2103JAN2018-W14-B1/main/releases/tag/v1.5[here]]."},{"lineNumber":41,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your TeachConnect."},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":".  Double-click the file to start the app. The application screen should appear in a few seconds. For details of each component of the application, you can refer to \u003c\u003cUserInterface\u003e\u003e. `Figure 1` displays an example of the screen on loading the application."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"image::StartupUI.jpg[width\u003d\"800\"]"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    Figure 1: Application screen with Light Theme selected"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"And that\u0027s it! The setup is done! You can now:"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"* Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"** Some example commands you can try:"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"** *`list`* : lists all contacts."},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"** **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe`."},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"** **`delete`**`3` : deletes the 3rd contact shown in the current list."},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"** *`exit`* : exits the app."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"[[UserInterface]]"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d User Interface"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"TeachConnect application screen consists of 5 major components: menu bar, command box, command result box, active list, and calendar view. `Figure 2` annotates the position of each component in the application screen."},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"image::GUIcomponents.jpg[width\u003d\"800\"]"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"    Figure 2: Position of various components"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"* Menu bar: +"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"Contains two options `File` and `Help`. `File` creates a drop down menu to exit the application. `Help` opens the help window if needed."},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"* Command box: +"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"Commands are entered here."},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"* Command result box: +"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"Shows result message upon execution of any input entered."},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"* Active List: +"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"Displays the full list of `contacts`, `students`, `appointments`, `tasks`, `classes` or `shortcuts` stored by TeachConnect. The active item list is selected by the last `list` command entered. The default list selected upon successful start up of TeachConnect is `contacts`. You can refer to \u003c\u003cList\u003e\u003e for more details. +"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"Item in the list is shown as a card with an index which can be used for `delete` or `edit` commands, together with their details. `Figure 3` shows the components of a typical card in the contacts list. A student marker on the top right corner of the card is used to distinguish students from other people."},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"image::itemCard.JPG[width\u003d\"300\"]"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    Figure 3: Components of a card in the Contact List"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"* Calendar view: +"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":" Shows all appointments you have within the day, week or month depending on which view mode is selected. You can refer to \u003c\u003cSwitchingCalendarViewmode\u003e\u003e for the different calendar view modes."},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":97,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":100,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":101,"author":{"gitID":"-"},"content":"* Items with `â€¦` after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Viewing manual : `help`"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"Accesses the User Guide for TeachConnect. +"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"// tag::sort[]"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting all contacts : `sort`"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"Sorts all contacts in alphabetical order. +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Format: `sort`"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"// end::sort[]"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a contact: `add`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"Adds a contact.  +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Format: `add [TYPE] n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* `[TYPE]` field represents the type of contact you wish to add."},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"* It can be `student`, or `{nbsp}` (empty for a default contact)."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Only student contacts can be added into a class."},{"lineNumber":128,"author":{"gitID":"-"},"content":"****"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":131,"author":{"gitID":"-"},"content":"A contact can have any number of tags (including 0)"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/friend` +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Adds a default contact named `John Doe` to TeachConnect\u0027s contact list."},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"* `add student n/Betsy Crowe e/betsycrowe@example.com a/Centre Street, block 238, #02-02` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Adds a student contact named `Betsy Crowe` to TeachConnect\u0027s contact list."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"// tag::class[]"},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Forming a class: `form`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Forms a class of students for a specified subject and time period. +"},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":"Format: `form SUBJECT n/CLASS_NAME s/START_DATE e/END_DATE i/INDEX...`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"****"},{"lineNumber":147,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":148,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":149,"author":{"gitID":"-"},"content":"* Minimum of one student must be entered. There can be more than one student."},{"lineNumber":150,"author":{"gitID":"-"},"content":"* Only a student contact can be entered, default contacts are not allowed."},{"lineNumber":151,"author":{"gitID":"-"},"content":"* *Students cannot be added in after the class is formed.*"},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"* Dates must be in the format: `DD/MM/YYYY`."},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"* Subjects must be a single word only."},{"lineNumber":154,"author":{"gitID":"-"},"content":"****"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"* `list students` +"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"`form English n/class 01 s/10/01/2018 e/17/07/2019 i/1,5,2` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"Forms an English class containing the first, second and fifth contact in the list that starts in 18 Jan 2018 to 17 July 2019."},{"lineNumber":161,"author":{"gitID":"-"},"content":"//end::class[]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"Sisyphus25"},"content":"// tag::appointment[]"},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up an appointment : `set_appointment`"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"Sisyphus25"},"content":"Sets up an appointment with the specified contact. +"},{"lineNumber":167,"author":{"gitID":"Sisyphus25"},"content":"Format: `set_appointment t/TITLE s/START_DATE START_TIME e/END_DATE END_TIME i/INDEX`"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"****"},{"lineNumber":170,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":172,"author":{"gitID":"Sisyphus25"},"content":"* `START_DATE` and `END_DATE` must be in the format `DD/MM/YYYY`."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* `START_TIME` and `END_TIME` must be in the 24-hr format: HH:MM."},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"* The new appointment will be listed on both the appointment list and the TeachConnect Calendar."},{"lineNumber":175,"author":{"gitID":"-"},"content":"****"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"* `set_appointment t/Tutoring session s/02/04/2018 19:00 e/02/04/2018 20:00` +"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":"Sets up an appointment on April 2nd, 2018, from 7pm to 8pm. `Figure 4` below shows the application screen when a new appointment is added."},{"lineNumber":181,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":182,"author":{"gitID":"Sisyphus25"},"content":"image::appointmentAdded.jpg[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"Sisyphus25"},"content":"    Figure 4: Appointment added successfully example"},{"lineNumber":184,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"Sisyphus25"},"content":"// end::appointment[]"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":188,"author":{"gitID":"Sisyphus25"},"content":"// tag::task[]"},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Setting up a task : `set_task`"},{"lineNumber":191,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"Sets up a task to be done by a deadline. +"},{"lineNumber":193,"author":{"gitID":"Sisyphus25"},"content":"Format: `set_task t/TITLE e/END_DATE END_TIME`"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"****"},{"lineNumber":196,"author":{"gitID":"Sisyphus25"},"content":"* `END_DATE` must be in the format `DD/MM/YYYY`."},{"lineNumber":197,"author":{"gitID":"-"},"content":"* `END_TIME` must be in the 24-hr format: HH:MM."},{"lineNumber":198,"author":{"gitID":"-"},"content":"****"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":"* `set_task t/Mark papers e/05/04/2018 10:00` +"},{"lineNumber":203,"author":{"gitID":"Sisyphus25"},"content":"Sets a task which needs to be completed before April 5th, 2018, 10am."},{"lineNumber":204,"author":{"gitID":"Sisyphus25"},"content":"// end::task[]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"// tag::theme[]"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing GUI theme : `theme`"},{"lineNumber":209,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"Changes the theme of the GUI.  +"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"Format: `theme THEME_NAME`"},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":213,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":214,"author":{"gitID":"Sisyphus25"},"content":"* This changes the theme of the GUI to `THEME_NAME`."},{"lineNumber":215,"author":{"gitID":"Sisyphus25"},"content":"* `THEME_NAME` can be `dark`, `light` or `galaxy`."},{"lineNumber":216,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":"Examples:"},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"* `theme dark` +"},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"Changes the theme of TeachConnect to Dark Theme. The Dark theme is shown below in `Figure 5`."},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"image::darkTheme.jpg[width\u003d\"800\"]"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"    Figure 5: GUI with Dark Theme"},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"* `theme galaxy` +"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"Changes the theme of TeachConnect to Galaxy Theme. The Galaxy theme is shown below in `Figure 6`."},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":229,"author":{"gitID":"Sisyphus25"},"content":"image::galaxyTheme.jpg[width\u003d\"800\"]"},{"lineNumber":230,"author":{"gitID":"Sisyphus25"},"content":"    Figure 6: GUI with Galaxy Theme"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":232,"author":{"gitID":"Sisyphus25"},"content":"// end::theme[]"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":234,"author":{"gitID":"Sisyphus25"},"content":"[[SwitchingCalendarViewmode]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Switching Calendar View mode : `calendar`"},{"lineNumber":236,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":237,"author":{"gitID":"Sisyphus25"},"content":"Switches the Calendar view mode.  +"},{"lineNumber":238,"author":{"gitID":"Sisyphus25"},"content":"Format: `calendar VIEW_MODE`"},{"lineNumber":239,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":240,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":241,"author":{"gitID":"Sisyphus25"},"content":"* This changes the view mode of the TeachConnect Calendar."},{"lineNumber":242,"author":{"gitID":"Sisyphus25"},"content":"* `VIEW_MODE` can be `d`, `w` or `m`, which are respective short forms for day, week and month."},{"lineNumber":243,"author":{"gitID":"Sisyphus25"},"content":"****"},{"lineNumber":244,"author":{"gitID":"Sisyphus25"},"content":"Examples:"},{"lineNumber":245,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":246,"author":{"gitID":"Sisyphus25"},"content":"* `calendar d` +"},{"lineNumber":247,"author":{"gitID":"shanmu9898"},"content":"Changes the view mode of TeachConnect Calendar to Day View. `Figure 7` below shows the Day view mode of the calendar."},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":249,"author":{"gitID":"Sisyphus25"},"content":"image::calendarDay.jpg[width\u003d\"800\"]"},{"lineNumber":250,"author":{"gitID":"Sisyphus25"},"content":"    Figure 7: Calendar Day View"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":252,"author":{"gitID":"Sisyphus25"},"content":"* `calendar w` +"},{"lineNumber":253,"author":{"gitID":"shanmu9898"},"content":"Changes the view mode of TeachConnect Calendar to Week View. `Figure 8` below shows the Week view mode of the calendar."},{"lineNumber":254,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":255,"author":{"gitID":"Sisyphus25"},"content":"image::calendarWeek.jpg[width\u003d\"800\"]"},{"lineNumber":256,"author":{"gitID":"Sisyphus25"},"content":"    Figure 8: Calendar Week View"},{"lineNumber":257,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":258,"author":{"gitID":"Sisyphus25"},"content":"* `calendar m` +"},{"lineNumber":259,"author":{"gitID":"shanmu9898"},"content":"Changes the view mode of TeachConnect Calendar to Month View. `Figure 9` below shows the Day view mode of the calendar."},{"lineNumber":260,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":261,"author":{"gitID":"Sisyphus25"},"content":"image::calendarMonth.jpg[width\u003d\"800\"]"},{"lineNumber":262,"author":{"gitID":"Sisyphus25"},"content":"    Figure 9: Calendar Month View"},{"lineNumber":263,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":264,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":265,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":266,"author":{"gitID":"shanmu9898"},"content":"// tag::list[]"},{"lineNumber":267,"author":{"gitID":"Sisyphus25"},"content":"[[List]]"},{"lineNumber":268,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Listing all contacts/students/classes/tasks/appointments/shortcuts : `list`"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Shows a list of all of the specified `TYPE`. +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"Format: `list TYPE`."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"****"},{"lineNumber":274,"author":{"gitID":"shanmu9898"},"content":"* `TYPE` can be of the following: `contacts`, `students`, `tasks`, `appointments`, `shortcuts`."},{"lineNumber":275,"author":{"gitID":"-"},"content":"* `TYPE` cannot be empty."},{"lineNumber":276,"author":{"gitID":"-"},"content":"****"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"shanmu9898"},"content":"Example:"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"shanmu9898"},"content":"`list students` +"},{"lineNumber":281,"author":{"gitID":"shanmu9898"},"content":"Lists all students. `Figure 10` given below shows the student list."},{"lineNumber":282,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":283,"author":{"gitID":"shanmu9898"},"content":"image::studentList.jpg[width\u003d\"200\"]"},{"lineNumber":284,"author":{"gitID":"shanmu9898"},"content":"    Figure 10: Student List displayed as active list"},{"lineNumber":285,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":286,"author":{"gitID":"shanmu9898"},"content":"Other examples :"},{"lineNumber":287,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":288,"author":{"gitID":"Sisyphus25"},"content":"* `list tasks` +"},{"lineNumber":289,"author":{"gitID":"shanmu9898"},"content":"Lists all tasks."},{"lineNumber":290,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":291,"author":{"gitID":"Sisyphus25"},"content":"* `list appointments` +"},{"lineNumber":292,"author":{"gitID":"shanmu9898"},"content":"Lists all appointments."},{"lineNumber":293,"author":{"gitID":"Sisyphus25"},"content":"+"},{"lineNumber":294,"author":{"gitID":"Sisyphus25"},"content":"* `list shortcuts` +"},{"lineNumber":295,"author":{"gitID":"Sisyphus25"},"content":"Lists all command shortcuts."},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"shanmu9898"},"content":"// end::list[]"},{"lineNumber":298,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":299,"author":{"gitID":"shanmu9898"},"content":"// tag::import[]"},{"lineNumber":300,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Importing the contacts : `import`"},{"lineNumber":301,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":302,"author":{"gitID":"shanmu9898"},"content":"Imports contacts from a different TeachConnect file by specifying the location of the file. This automatically imports all the students, classes and any other contacts present in the import file. +"},{"lineNumber":303,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":304,"author":{"gitID":"shanmu9898"},"content":"Format: `import pathname`"},{"lineNumber":305,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":306,"author":{"gitID":"shanmu9898"},"content":"****"},{"lineNumber":307,"author":{"gitID":"shanmu9898"},"content":"* It can only import XML files."},{"lineNumber":308,"author":{"gitID":"shanmu9898"},"content":"* The input path must be valid."},{"lineNumber":309,"author":{"gitID":"shanmu9898"},"content":"****"},{"lineNumber":310,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":311,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":312,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":313,"author":{"gitID":"shanmu9898"},"content":"* `import ./data/importsample.xml` +"},{"lineNumber":314,"author":{"gitID":"shanmu9898"},"content":"Imports contacts from `importsample.xml` if such a file is present."},{"lineNumber":315,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":316,"author":{"gitID":"shanmu9898"},"content":"// end::import[]"},{"lineNumber":317,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":318,"author":{"gitID":"shanmu9898"},"content":"// tag::export[]"},{"lineNumber":319,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":320,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Exporting the contacts or classes : `export`"},{"lineNumber":321,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":322,"author":{"gitID":"shanmu9898"},"content":"Exports contacts from your TeachConnect by specifying the name of the file and the path where you want to save it. It can export contacts/students based on a given range of indexes, tags or a given tag in a range of indexes. Alternatively you can choose to export all the classes with the students in them. By specifying the type of the export you can choose to export it as a CSV file or a XML file."},{"lineNumber":323,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":324,"author":{"gitID":"shanmu9898"},"content":"Format 1: `export n/NAME r/RANGE [t/TAG] p/PATH te/TYPE`"},{"lineNumber":325,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":326,"author":{"gitID":"shanmu9898"},"content":"Format 2: `export classes n/NAME p/PATH te/TYPE`"},{"lineNumber":327,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":328,"author":{"gitID":"shanmu9898"},"content":"****"},{"lineNumber":329,"author":{"gitID":"shanmu9898"},"content":"* Here `TYPE` refers to the kind of export you want to do."},{"lineNumber":330,"author":{"gitID":"shanmu9898"},"content":"* `TYPE` can be either excel or xml."},{"lineNumber":331,"author":{"gitID":"shanmu9898"},"content":"* `Name` should not be included in the path. There is also no need to give the extension of the file (.xml or .csv) as type of the file is already being given."},{"lineNumber":332,"author":{"gitID":"shanmu9898"},"content":"****"},{"lineNumber":333,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":334,"author":{"gitID":"shanmu9898"},"content":"[TIP]"},{"lineNumber":335,"author":{"gitID":"shanmu9898"},"content":"You can export all contacts, all contacts with a certain tag, all contacts in a range or all the contacts in a range with a certain tag in a single command. +"},{"lineNumber":336,"author":{"gitID":"shanmu9898"},"content":"You can also choose to export it a .csv file which you can later open in Excel. +"},{"lineNumber":337,"author":{"gitID":"shanmu9898"},"content":"You can also choose to export all the classes and the students in it using the export class format."},{"lineNumber":338,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":339,"author":{"gitID":"shanmu9898"},"content":"[WARNING]"},{"lineNumber":340,"author":{"gitID":"shanmu9898"},"content":"You can only export all or people based on one or zero tags. +"},{"lineNumber":341,"author":{"gitID":"shanmu9898"},"content":"Be careful about the parameter value for the format type. It has to exactly be either `xml` or `excel`."},{"lineNumber":342,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":343,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":344,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":345,"author":{"gitID":"shanmu9898"},"content":"* `export n/StudentsFile1 r/all t/students p/{path to the current folder} te/xml` : +"},{"lineNumber":346,"author":{"gitID":"shanmu9898"},"content":"Exports all contacts with tag student to an xml file named `StudentsFile1` to the folder given in the path."},{"lineNumber":347,"author":{"gitID":"shanmu9898"},"content":"* `export n/StudentsFile2 r/1,10 t/students p/{path to the current folder} te/excel` : +"},{"lineNumber":348,"author":{"gitID":"shanmu9898"},"content":"Exports contacts from 1 to 10 with tag students to a .csv file named `StudentsFile2` to the folder given in the path."},{"lineNumber":349,"author":{"gitID":"shanmu9898"},"content":"* `export classes n/ClassesFile1 p/{path to the current folder} te/excel` : +"},{"lineNumber":350,"author":{"gitID":"shanmu9898"},"content":"Exports all classes and the names of students in the classes to a .csv file named `ClassesFile1` to the folder given in the path."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":353,"author":{"gitID":"shanmu9898"},"content":"// end::export[]"},{"lineNumber":354,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":355,"author":{"gitID":"shanmu9898"},"content":"// tag::shortcut[]"},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding your own shortcut : `shortcut`"},{"lineNumber":357,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":358,"author":{"gitID":"shanmu9898"},"content":"Sets your own personal shortcut for any of the commands above."},{"lineNumber":359,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":360,"author":{"gitID":"shanmu9898"},"content":"Format: `shortcut [command word] [shortcut word]`"},{"lineNumber":361,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":362,"author":{"gitID":"shanmu9898"},"content":"[TIP]"},{"lineNumber":363,"author":{"gitID":"shanmu9898"},"content":"You can choose multiple shortcuts for the same command. +"},{"lineNumber":364,"author":{"gitID":"shanmu9898"},"content":"You can later use these shortcuts in place of the original command even after closing and reopening the app. +"},{"lineNumber":365,"author":{"gitID":"shanmu9898"},"content":"You can also set shortcut for the shortcut command. +"},{"lineNumber":366,"author":{"gitID":"shanmu9898"},"content":"You can always see the list of shortcuts you set using `list shortcuts` as shown in `Figure 13` given below."},{"lineNumber":367,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":368,"author":{"gitID":"shanmu9898"},"content":"image::ShortcutsList.png[width\u003d\"800\"]"},{"lineNumber":369,"author":{"gitID":"Sisyphus25"},"content":"    Figure 13: List of shortcuts stored"},{"lineNumber":370,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":371,"author":{"gitID":"shanmu9898"},"content":"[WARNING]"},{"lineNumber":372,"author":{"gitID":"shanmu9898"},"content":"You cannot set the shortcut word to be a already preregistered command. +"},{"lineNumber":373,"author":{"gitID":"shanmu9898"},"content":"Your shortcut word cannot be more than a single word. +"},{"lineNumber":374,"author":{"gitID":"shanmu9898"},"content":"You can only use shortcut word for the command word. You cannot use it for the type. Eg. You can set the shortcut for `export` but not for `export classes`."},{"lineNumber":375,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":376,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":377,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":378,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":379,"author":{"gitID":"shanmu9898"},"content":"* `shortcut list l` +"},{"lineNumber":380,"author":{"gitID":"shanmu9898"},"content":"Sets `l` as the personalised alias for `list` command."},{"lineNumber":381,"author":{"gitID":"shanmu9898"},"content":"* `shortcut add a` +"},{"lineNumber":382,"author":{"gitID":"shanmu9898"},"content":"Sets `a` as the personalised alias for `add` command."},{"lineNumber":383,"author":{"gitID":"shanmu9898"},"content":"* `shortcut export e` +"},{"lineNumber":384,"author":{"gitID":"shanmu9898"},"content":"Sets `e` as the personalised alias for the `export` command."},{"lineNumber":385,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":386,"author":{"gitID":"shanmu9898"},"content":"// end::shortcut[]"},{"lineNumber":387,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":388,"author":{"gitID":"shanmu9898"},"content":"// tag::deleteshortcut[]"},{"lineNumber":389,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Deleting your personalised alias : `delete_shortcut`"},{"lineNumber":390,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":391,"author":{"gitID":"shanmu9898"},"content":"Deletes your personalised alias if you don\u0027t want the shortcut or if you created the shortcut by mistake."},{"lineNumber":392,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":393,"author":{"gitID":"shanmu9898"},"content":"Format: `delete_shortcut [command word] [shortcut word]`"},{"lineNumber":394,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":395,"author":{"gitID":"shanmu9898"},"content":"[TIP]"},{"lineNumber":396,"author":{"gitID":"shanmu9898"},"content":"You can choose to just undo the delete_shortcut if you delete a shortcut by mistake. +"},{"lineNumber":397,"author":{"gitID":"shanmu9898"},"content":"Listing all the shortcuts using the `list shortcuts` command as mentioned previously might help in seeing all the shortcuts at once. +"},{"lineNumber":398,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":399,"author":{"gitID":"shanmu9898"},"content":"[WARNING]"},{"lineNumber":400,"author":{"gitID":"shanmu9898"},"content":"You can only delete shortcuts that you have already added."},{"lineNumber":401,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":402,"author":{"gitID":"shanmu9898"},"content":"Examples:"},{"lineNumber":403,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":404,"author":{"gitID":"shanmu9898"},"content":"* `delete_shortcut list l` +"},{"lineNumber":405,"author":{"gitID":"shanmu9898"},"content":"Deletes the personalised alias `l` for `list` command."},{"lineNumber":406,"author":{"gitID":"shanmu9898"},"content":"* `delete_shortcut add a` +"},{"lineNumber":407,"author":{"gitID":"shanmu9898"},"content":"Deletes the personalised alias `a` for `add` command."},{"lineNumber":408,"author":{"gitID":"shanmu9898"},"content":"// end::deleteshortcut[]"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Editing a contact : `edit`"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"Edits an existing contact. +"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"****"},{"lineNumber":417,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last contact or student listing."},{"lineNumber":418,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":419,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":420,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":421,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the contact will be removed i.e adding of tags is not cumulative."},{"lineNumber":422,"author":{"gitID":"-"},"content":"* You can remove all the contact\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":423,"author":{"gitID":"-"},"content":"****"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"* `list contacts` +"},{"lineNumber":428,"author":{"gitID":"-"},"content":"`edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":429,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st contact to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":430,"author":{"gitID":"-"},"content":"* `list students` +"},{"lineNumber":431,"author":{"gitID":"-"},"content":"`edit 2 n/Betsy Crower t/` +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"Edits the name of the 2nd student to be `Betsy Crower` and clears all existing tags."},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Locating contacts by name: `find`"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"Finds contacts whose names contain any of the given keywords. +"},{"lineNumber":437,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"****"},{"lineNumber":440,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`."},{"lineNumber":441,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":442,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":443,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":444,"author":{"gitID":"-"},"content":"* Contacts matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."},{"lineNumber":445,"author":{"gitID":"-"},"content":"****"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":450,"author":{"gitID":"-"},"content":"Shows all contacts with `john` in their name."},{"lineNumber":451,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":452,"author":{"gitID":"shanmu9898"},"content":"Shows all contacts with `Betsy`, `Tim`, or `John` in their name."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an entry in the list : `delete`"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"Deletes the specified entry in the list. +"},{"lineNumber":458,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":459,"author":{"gitID":"-"},"content":""},{"lineNumber":460,"author":{"gitID":"-"},"content":"****"},{"lineNumber":461,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":462,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":463,"author":{"gitID":"-"},"content":"****"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"* `list contacts` +"},{"lineNumber":468,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":469,"author":{"gitID":"-"},"content":"Deletes the 2nd contact in the list"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"* `list tasks` +"},{"lineNumber":472,"author":{"gitID":"-"},"content":"`delete 4` +"},{"lineNumber":473,"author":{"gitID":"-"},"content":"Deletes the 4th task in the list"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a contact : `select`"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"Selects the contact identified by the index number used in the last contact listing. +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"****"},{"lineNumber":481,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":482,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`."},{"lineNumber":483,"author":{"gitID":"-"},"content":"****"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"Selects the 2nd contact in the list."},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":493,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":494,"author":{"gitID":"-"},"content":"Selects the 1st contact in the results of the `find` command."},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":500,"author":{"gitID":"-"},"content":""},{"lineNumber":501,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":502,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":503,"author":{"gitID":"shanmu9898"},"content":"Pressing the kbd:[Up] and kbd:[Down] arrows will display the previous and next input respectively in the command box."},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"Sisyphus25"},"content":"Restores TeachConnect to the state before the previous _undoable_ command was executed. +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":513,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":514,"author":{"gitID":"Sisyphus25"},"content":"Undoable commands: those commands that modify TeachConnect\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":520,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":521,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":524,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":525,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":526,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":529,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":530,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":531,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":536,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":541,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":542,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":545,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":546,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":549,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":550,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":552,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":553,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":554,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"Clears all entries. +"},{"lineNumber":559,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":564,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"shanmu9898"},"content":"Saves data in the hard disk automatically after any command that changes the data. +"},{"lineNumber":569,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"shanmu9898"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":574,"author":{"gitID":"shanmu9898"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder. Alternatively you can also choose the import and export commands!"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"shanmu9898"},"content":"*Q*: Exporting is giving me error. What do I do? +"},{"lineNumber":577,"author":{"gitID":"shanmu9898"},"content":"*A*: You can try freeing up some space on your computer. The problem may be with the storage in your computer."},{"lineNumber":578,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":579,"author":{"gitID":"shanmu9898"},"content":"*Q*: How do I contact you if something goes wrong? +"},{"lineNumber":580,"author":{"gitID":"shanmu9898"},"content":"*A*: Please contact us at CS2103B1W14@gmail.com."},{"lineNumber":581,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":583,"author":{"gitID":"Sisyphus25"},"content":"The table below summarizes TeachConnect\u0027s command list."},{"lineNumber":584,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":585,"author":{"gitID":"shanmu9898"},"content":"[width\u003d\"100%\",cols\u003d\"20%,\u003c40%,\u003c40%\",options\u003d\"header\",]"},{"lineNumber":586,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":587,"author":{"gitID":"Sisyphus25"},"content":"|Command |Format |Example"},{"lineNumber":588,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"|*Add*|`add [TYPE] n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`|`add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":590,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":591,"author":{"gitID":"Sisyphus25"},"content":"|*Change GUI theme*|`theme THEME_NAME` | `theme dark`"},{"lineNumber":592,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":593,"author":{"gitID":"Sisyphus25"},"content":"|*Clear*|`clear`|`clear`"},{"lineNumber":594,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":595,"author":{"gitID":"Sisyphus25"},"content":"|*Delete*|`delete INDEX`|`delete 3`"},{"lineNumber":596,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":597,"author":{"gitID":"shanmu9898"},"content":"|*Delete Shortcut*|`delete_shortcut [command word] [shortcut word]` | `delete_shortcut list l`"},{"lineNumber":598,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":599,"author":{"gitID":"Sisyphus25"},"content":"|*Edit*|`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...`|`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":600,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":601,"author":{"gitID":"shanmu9898"},"content":"|*Export Classes*|`export classes n/NAME p/PATH te/TYPE` | `export classes n/sampleclasses p/./Desktop/Folder te/excel`"},{"lineNumber":602,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":603,"author":{"gitID":"shanmu9898"},"content":"|*Export Contacts/Students*|`export n/NAME r/RANGE t/TAG p/PATH te/TYPE` | `export n/samplefile r/all t/friends p/./Desktop/Folder te/excel`"},{"lineNumber":604,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"|*Form*|`form SUBJECT n/CLASS_NAME s/START_DATE e/END_DATE i/INDEX...`| `form math n/math101 s/14/04/2018 e/15/09/2018 i/1,4`"},{"lineNumber":606,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":607,"author":{"gitID":"Sisyphus25"},"content":"|*List*|`list TYPE` | `list student`"},{"lineNumber":608,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":609,"author":{"gitID":"Sisyphus25"},"content":"|*Find*|`find KEYWORD [MORE_KEYWORDS]` | `find James Jake`"},{"lineNumber":610,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":611,"author":{"gitID":"Sisyphus25"},"content":"|*Help*|`help`|`help`"},{"lineNumber":612,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":613,"author":{"gitID":"Sisyphus25"},"content":"|*History*|`history`|`history`"},{"lineNumber":614,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":615,"author":{"gitID":"shanmu9898"},"content":"|*Import TeachConnect File*|`import [path]` | `import ./data/samplefile.xml`"},{"lineNumber":616,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":617,"author":{"gitID":"Sisyphus25"},"content":"|*List*|`list TYPE` | `list student`"},{"lineNumber":618,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":619,"author":{"gitID":"shanmu9898"},"content":"|*Redo*|`redo`|`redo`"},{"lineNumber":620,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":621,"author":{"gitID":"Sisyphus25"},"content":"|*Select Contact*|`select INDEX` |`select 2`"},{"lineNumber":622,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":623,"author":{"gitID":"Sisyphus25"},"content":"|*Set Appointment*|`set_appointment t/TITLE s/START_DATE START_TIME e/END_DATE END_TIME i/INDEX`|`set_appointment t/Meet parent s/05/04/2018 10:00 e/05/04/2018 11:00 i/3`"},{"lineNumber":624,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":625,"author":{"gitID":"shanmu9898"},"content":"|*Set Shortcut*|`shortcut [command word] [shortcut word]` | `shortcut list l`"},{"lineNumber":626,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":627,"author":{"gitID":"Sisyphus25"},"content":"|*Set Task*|`set_task t/TITLE e/END_DATE END_TIME` |`set_task t/Mark papers d/05/04/2018 10:00`"},{"lineNumber":628,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":629,"author":{"gitID":"shanmu9898"},"content":"|*Sort*|`sort`|`sort"},{"lineNumber":630,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":631,"author":{"gitID":"Sisyphus25"},"content":"|*Switch Calendar View mode*|`calendar VIEW_MODE` | `calendar d`"},{"lineNumber":632,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":633,"author":{"gitID":"shanmu9898"},"content":"|*Undo*|`undo`|`undo`|"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":636,"author":{"gitID":"Sisyphus25"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":637,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":638,"author":{"gitID":"Sisyphus25"},"content":" Table 1: TeachConnect\u0027s command list"}],"authorContributionMap":{"Sisyphus25":165,"-":287,"shanmu9898":186}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"TeachConnect was developed by a team of students, with assistance from the Project Supervisor, as a project"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"for the module CS2103T."},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"It was built upon the AddressBook - Level 4 project developed by the https://se-edu.github.io/docs/Team.html[se-edu]"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"team."},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Mukesh Gadupudi"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"image::shanmu9898.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"{empty}[https://github.com/shanmu9898[github]][https://cs2103jan2018-w14-b1.github.io/main/team/MukeshGadupudi.html[portfolio]]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"Role: Team Lead"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"Responsibilities:"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"* Model"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"* Deliverable and Deadlines"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"* Integration"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"* Tools Expert"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"* Storage"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Ngo Phuong Thao"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"image::sisyphus.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"{empty}[http://github.com/Sisyphus25[github]] [https://cs2103jan2018-w14-b1.github.io/main/team/rachelngo.html[portfolio]]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"Responsibilities:"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"* UI"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"* Storage"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"* Scheduling and Tracking"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"* Documentation"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"* Reviewing"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Randy Pang Chung"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"image::randypx.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"{empty}[http://github.com/randypx[github]] [https://cs2103jan2018-w14-b1.github.io/main/team/randypang.html[portfolio]]"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"Responsibilities:"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"* Logic"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"* Testing"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"* Reviewing"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"* Design Consideration and Implementation"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Jonathan Lim"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"image::LimShiMinJonathan.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"{empty}[http://github.com/LimShiMinJonathan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"Role: Developer"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"Responsibilities:"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"* -"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Sisyphus25":2,"-":24,"shanmu9898":47}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W14-B1/main[image:https://travis-ci.org/CS2103JAN2018-W14-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"https://coveralls.io/github/CS2103JAN2018-W14-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W14-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"image::images/StartupUI.jpg[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"__TeachConnect - The only management application you\u0027ll ever need"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"__"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"* TeachConnect is a contact and schedule management application designed for teachers and educational professionals."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"* TeachConnect provides an intuitive and efficient solution for managing students and parents\u0027 contact details, recording appointments, setting up reminders, and many more."},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"* The majority of user interaction is through a CLI (Command Line Interface), however a GUI is provided with many optimization options."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://commons.apache.org/proper/commons-csv/apidocs/org/apache/commons/csv/CSVPrinter.html[CSVPrinter], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/dlemmermann/CalendarFX[CalendarFX]."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Sisyphus25":9,"-":26,"shanmu9898":1}},{"path":"docs/team/randypang.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Randy Pang Chung - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d Project: TeachConnect"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"TeachConnect(TC) is application designed to help teachers and other teaching proffessionals manage their contacts and schedule."},{"lineNumber":12,"author":{"gitID":"-"},"content":"TC is tailored for teachers who would prefer to use a desktop application and its Command Line Interface is meant for teachers who"},{"lineNumber":13,"author":{"gitID":"-"},"content":"are used to typing frequently and can type fast, allowing them to use it faster than any other app.Nevertheless, TC also supports normal"},{"lineNumber":14,"author":{"gitID":"-"},"content":"graphic interfaces like clicking and scrolling."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"*Code contributed*: +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"link:{collatedDir}/main/randypx.md[Functional code] +"},{"lineNumber":18,"author":{"gitID":"-"},"content":"link:{collatedDir}/test/randypx.md[Test code] +"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Portfolio Purpose"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"This portfolio was made to document all contribution I have made to the project. +"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"The content includes are:"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":". The external behavior of my contributions"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":". The justification for their implementation"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":". Details of the implementation"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Enhancement Added: Addition of Student and Class"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"---"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dclass]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"---"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"---"},{"lineNumber":41,"author":{"gitID":"-"},"content":"The feature of adding students as a seperate type of contact allows teachers to manage their student contacts seperately from their"},{"lineNumber":42,"author":{"gitID":"-"},"content":"personal contacts. The class feature furhter allows teachers to group their students into groups based on the classes they are teaching."},{"lineNumber":43,"author":{"gitID":"-"},"content":"This helps teachers to view their student contacts in a more organized manner and also keep track on what and when they have taught a"},{"lineNumber":44,"author":{"gitID":"-"},"content":"student."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"---"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"---"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dstudentmanagement]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"---"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Enhancement Proposed (for Version 2.0)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Another add command to enter students into a already existing group."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* A grading feature to allow teachers to store a student\u0027s grades as well."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* A relations feature to \u0027relate\u0027 two contacts (student or not) together. A way to store any two contacts\u0027 relationship."},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Other contributions"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"** Modifications to delete function to delete from the current list displayed rather then a seperate delete command for every new feature."},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"** Project issues assignment and management"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"** Project PR review"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"** Bugs fixes for various issues raised by other teammates and testers"}],"authorContributionMap":{"Sisyphus25":12,"-":49,"shanmu9898":5}},{"path":"docs/team/LimShiMin.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Lim Shi Min - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d Project: TeachConnect"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"TeachConnect(TC) is an application to help teachers and educators manage their student contacts, appointments and tasks. It uses a Command Line Interface (CLI) which is tailored for users who love typing, and can type quickly. Its output is all displayed on its Graphical User Interface (GUI)."},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Portfolio Purpose"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"This portfolio was made to document all contribution I have made to the project. +"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"The content includes are:"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":". The external behavior of my contributions"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":". The justification for their implementation"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":". Details of the implementation"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of Contributions"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"*[Attempted] Major enhancement:* Security Features"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"*What it does:* This feature allows users to perform encryption and decryption on their contact lists using a user-provided password."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"*Justification:* This feature safeguards and protects potentially sensitive contact details and data (such as student\u0027s grades, or parent\u0027s contact details) from unauthorised persons. If the encrypted data file falls into the wrong hands, it is still safe as the file is non-human readable."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"*Minor enhancement:* Sorting of contacts"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"*What it does:* Allows users to sort all their contacts in lexicographical order."},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"*Justification:* This feature helps to keep TeachConnect neat and orderly. It also makes it easier to search for contacts."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"*Code contributed*: +"},{"lineNumber":36,"author":{"gitID":"-"},"content":"link:{collatedDir}/main/LimShiMinJonathan.md[Functional code] +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"link:{collatedDir}/test/LimShiMinJonathan.md[Test code] +"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"*Other Contributions*"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"** Project issues assignment and management."},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Project PR review."},{"lineNumber":43,"author":{"gitID":"-"},"content":"** Discussed bugs fixes for various issues."},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Edited and Formatted User Guide and Developer Guide"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Contributions to the User Guide:"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Minor Enhancement"},{"lineNumber":49,"author":{"gitID":"-"},"content":"---"},{"lineNumber":50,"author":{"gitID":"-"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dsort]"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"#End of Extract#"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"---"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d [Attempted] Major Enhancement:"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dencryption/decryption]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"#End of Extract#"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Minor Enhancement:"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dsort]"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"#End of Extract#"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"---"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Enhancement Proposed (for Version 2.0)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"* Enhanced sort command that allows sorting of contacts by various catergories (Such as by grades, class, and year)."},{"lineNumber":80,"author":{"gitID":"-"},"content":"* 2FA Authentication to keep contact details more secure."},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Alumni/Past Student \u0027Favourites\u0027 feature for teachers to keep in contact with their favourite students."},{"lineNumber":82,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"Sisyphus25":9,"-":68,"shanmu9898":5}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        getCalendarPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":88}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        selectPerson(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"                getModel().getAddressBook().getContactList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"randypx":1,"-":195}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_AMY;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_BOB;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_FAUST;"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_GUASS;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_HELEN;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_ILLYA;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        /* Case: add a student without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        Student toAdd \u003d STUDENT_AMY;"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + PREAMBLE_STUDENT + \"  \" + NAME_DESC_AMY + \"  \""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        model.addStudent(toAdd);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).withSubjects().build();"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).withSubjects().build();"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).withSubjects().build();"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_STUDENT;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT).withSubjects().build();"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_STUDENT;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"        /* Case: add a student to empty address book -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_GUASS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"        /* Case: add a student with tags, command with parameters in random order -\u003e added */"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        toAdd \u003d STUDENT_BOB;"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"                + TAG_DESC_STUDENT + EMAIL_DESC_BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"        /* Case: add a student, missing tags -\u003e added */"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_FAUST);"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":""},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        /* Case: add a default person -\u003e added */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_ILLYA);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"randypx"},"content":"        /* Case: selects first card in the person list, add a student -\u003e added, card selection remains unchanged */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(STUDENT_HELEN);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"        command \u003d PersonUtil.getAddStudentCommand(STUDENT_FAUST);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"        /* Case: add a duplicate student except with different tags -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"        // \"student\" is an existing tag used in the default model, see TypicalPersons#STUDENT_BOB"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"        command \u003d PersonUtil.getAddStudentCommand(STUDENT_FAUST) + \" \" + PREFIX_TAG.getPrefix() + \"student\";"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":162,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"randypx"},"content":"        command \u003d \"adds \" + PREAMBLE_STUDENT + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"randypx"},"content":"        /* Case: invalid type -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + \" stu \" + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":180,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":184,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"},{"lineNumber":185,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"},{"lineNumber":190,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"randypx"},"content":"                + INVALID_ADDRESS_DESC;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":199,"author":{"gitID":"randypx"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":200,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"randypx"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(Student toAdd) {"},{"lineNumber":228,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(PersonUtil.getAddStudentCommand(toAdd), toAdd);"},{"lineNumber":229,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"randypx"},"content":""},{"lineNumber":231,"author":{"gitID":"randypx"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, toAdd);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"randypx"},"content":"    private void assertCommandSuccess(String command, Student toAdd) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":257,"author":{"gitID":"randypx"},"content":"            expectedModel.addStudent(toAdd);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"randypx"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_ADD_STUDENT_SUCCESS, toAdd);"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":83,"-":218}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" \" + ListCommand.TYPE_CONTACT);"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"        assertEquals(getModel().getAddressBook().getContactList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getContactList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"randypx":3,"-":263}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalContacts;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(command, INDEX_FIRST);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalContacts().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"randypx":2,"-":147}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"\u003d TeachConnect - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":":repoURL: https://github.com/CS2103JAN2018-W14-B1/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"By: `Team W14-B1`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"Welcome to Teach Connect (TC)! TC is a command-line application which provides a convenient way for teachers and other educational professionals to better manage their contacts and schedules. This developer guide provides information that helps you to get started as a TC contributor, and aids you even if you are an experienced contributor."},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"The developer guide consists of the following sections:"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"* Setting up"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"* Design"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"* Implementation"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"* Documentation"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"* Testing"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"* Dev Ops"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"* Appendices"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"This section covers the steps needed to set up TeachConnect on a computer."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":55,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":56,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":57,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":58,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":59,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":60,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":64,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":69,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":78,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":79,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":82,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":98,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":105,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"This section discusses the design of TeachConnect\u0027s architecture and its components."},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"The high-level design of the App is illustrated in `Figure 1`."},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"    Figure 1: Architecture Diagram"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"Below is a quick overview of each component."},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":124,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":135,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":136,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"For example, the `Logic` component (refer to `Figure 2`) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":"    Figure 2: Class Diagram of the Logic Component"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"`Figure 3` shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":156,"author":{"gitID":"Sisyphus25"},"content":"    Figure 3: Component interactions for `delete 1` command (part 1)"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the TeachConnect data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"`Figure 4` shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":164,"author":{"gitID":"Sisyphus25"},"content":"    Figure 4: Component interactions for `delete 1` command (part 2)"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"The structure of the UI component is shown in `Figure 5`."},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"    Figure 5: Structure of the UI Component"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":187,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":188,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"The structure of the logic component is shown in `Figure 6`. `Figure 7` shows finer details concerning `XYZCommand` and `Command` in `Figure 6`."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"Sisyphus25"},"content":"    Figure 6: Structure of the Logic Component"},{"lineNumber":197,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"Sisyphus25"},"content":"    Figure 7: Structure of Commands in the Logic Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":203,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":206,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":207,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":208,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"`Figure 8` is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":213,"author":{"gitID":"Sisyphus25"},"content":"    Figure 8: Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"The structure of the Model component is shown in `Figure 9`."},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"    Figure 9: Structure of the Model Component"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"* stores TeachConnect data."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":"The structure of the Storage component is shown in `Figure 10`."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":236,"author":{"gitID":"Sisyphus25"},"content":"    Figure 10: Structure of the Storage Component"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":243,"author":{"gitID":"Sisyphus25"},"content":"* can save TeachConnect data in xml format and read it back."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"Sisyphus25"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of TeachConnect (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"Sisyphus25"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. `Figure 11` shows the inheritance diagram for commands:"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":263,"author":{"gitID":"Sisyphus25"},"content":"    Figure 11: Logic Command Class Diagram"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"Sisyphus25"},"content":"As you can see from `Figure 11`, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of TeachConnect before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":268,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":269,"author":{"gitID":"-"},"content":"----"},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":279,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"},{"lineNumber":296,"author":{"gitID":"-"},"content":"----"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"Sisyphus25"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in TeachConnect. The current state of TeachConnect is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"Sisyphus25"},"content":"    Figure 12: Undo Redo Starting Stack Diagram"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":308,"author":{"gitID":"Sisyphus25"},"content":"    Figure 13: Undo Redo New Command Stack Diagram"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"Sisyphus25"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore TeachConnect to the state before the `add` command executed."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":318,"author":{"gitID":"Sisyphus25"},"content":"    Figure 14: Undo Redo Execute Undo Stack Diagram"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":326,"author":{"gitID":"Sisyphus25"},"content":"    Figure 15: Undo Redo Sequence Diagram"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"Sisyphus25"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores TeachConnect to the state after the command is executed)."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":331,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":336,"author":{"gitID":"Sisyphus25"},"content":"    Figure 16: Undo Redo New Command 2 Stack Diagram"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":341,"author":{"gitID":"Sisyphus25"},"content":"    Figure 17: Undo Redo New Command 3 Stack Diagram"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":346,"author":{"gitID":"Sisyphus25"},"content":"    Figure 18: Undo Redo Activity Diagram"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":355,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies TeachConnect (`add`, `clear`, `edit`)."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":374,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":375,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":377,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":383,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":385,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":386,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":387,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":388,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"shanmu9898"},"content":"// tag::import[]"},{"lineNumber":391,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Import Contacts"},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":393,"author":{"gitID":"shanmu9898"},"content":"The ImportCommand uses `XmlAddressBookStorage` to generate a temporary `AddressBook` object from a given path. It takes in a String value path. The command then adds the contacts or the classes found in the temporary `AddressBook` object into the model. Below is the rough idea of the constructor for the class:"},{"lineNumber":394,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":395,"author":{"gitID":"shanmu9898"},"content":"public ImportCommand(String importPath) {"},{"lineNumber":396,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(importPath);"},{"lineNumber":397,"author":{"gitID":"shanmu9898"},"content":"        this.filePath \u003d importPath;"},{"lineNumber":398,"author":{"gitID":"shanmu9898"},"content":"        addressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":399,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":400,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":401,"author":{"gitID":"Sisyphus25"},"content":"The execution flow of the Import command is shown in `Figure 19`."},{"lineNumber":402,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":403,"author":{"gitID":"shanmu9898"},"content":"image::ImportCommandFlowChart.png[align\u003d\"center\"]"},{"lineNumber":404,"author":{"gitID":"Sisyphus25"},"content":"    Figure 19: Import command flow chart"},{"lineNumber":405,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":406,"author":{"gitID":"shanmu9898"},"content":"Import command extends `Undoable Command` and hence Undo can be called on it. It also initially checks if the given file path is valid and if so initialises the contacts from there, creates a `Person` object and adds it to the current `TeachConnect` with the help of `model`.For importing classes `Class` objects are first created and `students` related to the classes are stored before being added to the model. The code can be found below."},{"lineNumber":407,"author":{"gitID":"shanmu9898"},"content":"[source, java]"},{"lineNumber":408,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":409,"author":{"gitID":"shanmu9898"},"content":"public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":410,"author":{"gitID":"shanmu9898"},"content":"     peopleToBeImported(people);"},{"lineNumber":411,"author":{"gitID":"shanmu9898"},"content":"     studentToBeImported(students);"},{"lineNumber":412,"author":{"gitID":"shanmu9898"},"content":"     classesToBeImported(students, classes);"},{"lineNumber":413,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":414,"author":{"gitID":"shanmu9898"},"content":"     return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":415,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":416,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":419,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Import Command"},{"lineNumber":420,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":421,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** User can only import from an `XML` file."},{"lineNumber":422,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation goes well with the idea of TeachConnect. It\u0027s easier to implement and also there is a clear distinction of the file that needs to be imported by the user with the help of the .XML extension."},{"lineNumber":423,"author":{"gitID":"Sisyphus25"},"content":"** Cons: Users might want to import from Excel only to realise this isn\u0027t possible."},{"lineNumber":424,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2:** Users can import from an `Excel` file too."},{"lineNumber":425,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation might be more intuitive for the user and might come in handy."},{"lineNumber":426,"author":{"gitID":"Sisyphus25"},"content":"** Cons: This implementation will not really help the user to distinguish the exact file to be imported. Care has to be taken so that the input by the user follows a certain format to parse the content properly."},{"lineNumber":427,"author":{"gitID":"shanmu9898"},"content":"// end::import[]"},{"lineNumber":428,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":429,"author":{"gitID":"shanmu9898"},"content":"// tag::export[]"},{"lineNumber":430,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Export Contacts"},{"lineNumber":431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":432,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":433,"author":{"gitID":"shanmu9898"},"content":"The `ExportCommand` uses `XmlAddressBookStorage` class to generate a xml file based on a given range/index/tag and save it to the location specified with the chosen file name. It takes in String `name` String `range` Tag `tag` String `path` String `type`.It is also possible to export classes with String `path` String `name` String `type` as parameters. The tag is not compulsory and can be excluded or included depending on the user. Below is the basic idea of the constructor for the class:"},{"lineNumber":434,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":435,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":436,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":437,"author":{"gitID":"shanmu9898"},"content":"ExportCommand(String range, Tag tag, String path, String nameOfExportFile, String type) {"},{"lineNumber":438,"author":{"gitID":"shanmu9898"},"content":"        this.range \u003d range;"},{"lineNumber":439,"author":{"gitID":"shanmu9898"},"content":"        this.path \u003d path;"},{"lineNumber":440,"author":{"gitID":"shanmu9898"},"content":"        thispublic.tag \u003d tag;"},{"lineNumber":441,"author":{"gitID":"shanmu9898"},"content":"        this.nameOfExportFile \u003d nameOfExportFile;"},{"lineNumber":442,"author":{"gitID":"shanmu9898"},"content":"        this.type \u003d type;"},{"lineNumber":443,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":444,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook \u003d new AddressBook();"},{"lineNumber":445,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":446,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":447,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":448,"author":{"gitID":"Sisyphus25"},"content":"The execution flow of the Export command is shown in `Figure 20`."},{"lineNumber":449,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":450,"author":{"gitID":"shanmu9898"},"content":"image::ExportCommandDiagram.png[align\u003d\"center\"]"},{"lineNumber":451,"author":{"gitID":"Sisyphus25"},"content":"    Figure 20: Export command flow chart"},{"lineNumber":452,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":453,"author":{"gitID":"shanmu9898"},"content":"The method `handleRange()` splits the range using a separator \",\" and returns a `String` array with the upper bound and lower bound as values. In some cases it also returns the String `all` or the single integer `index` that has to be exported. Based on the type it also exports to an excel format (CSV file) or XML format (XML file)."},{"lineNumber":454,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":455,"author":{"gitID":"shanmu9898"},"content":"Below is an extract of the method `handleRange()`:"},{"lineNumber":456,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":457,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":458,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":459,"author":{"gitID":"shanmu9898"},"content":"public String[] handleRange() throws IOException {"},{"lineNumber":460,"author":{"gitID":"shanmu9898"},"content":"        String[] rangeStringArray \u003d this.range.split(\",\");"},{"lineNumber":461,"author":{"gitID":"shanmu9898"},"content":"        if (rangeStringArray.length \u003e 2) {"},{"lineNumber":462,"author":{"gitID":"shanmu9898"},"content":"            throw new IOException();"},{"lineNumber":463,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":464,"author":{"gitID":"shanmu9898"},"content":"        return rangeStringArray;"},{"lineNumber":465,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":466,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":467,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":468,"author":{"gitID":"shanmu9898"},"content":"Choosing to export classes follows a different pattern. It exports all the classes and the students related to those classes."},{"lineNumber":469,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":470,"author":{"gitID":"shanmu9898"},"content":"Any range with more than 2 values in the String array returns an IO Exception. There are 4 individual cases when exporting contacts and multiple combinations of these:"},{"lineNumber":471,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":472,"author":{"gitID":"shanmu9898"},"content":"* All (Without a tag)"},{"lineNumber":473,"author":{"gitID":"shanmu9898"},"content":"** if the word `all` is present in the user input, we will just export all the contacts from the last shown list."},{"lineNumber":474,"author":{"gitID":"shanmu9898"},"content":"* All (With a Tag)"},{"lineNumber":475,"author":{"gitID":"shanmu9898"},"content":"** if the word `all` is present along with a tag specified in the user input, we will just export all the contacts with that particular tag from the last shown list"},{"lineNumber":476,"author":{"gitID":"shanmu9898"},"content":"* Specific index (e.g. 1, 2, 3)"},{"lineNumber":477,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a specific index, we will add that index (one-based) to the `teachConnectBook`."},{"lineNumber":478,"author":{"gitID":"shanmu9898"},"content":"* Range of indexes (e.g. 1,5)"},{"lineNumber":479,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a range which is identified by the `,` character, we will add that range of index (one-based) to the `teachConnectBook` including the lower range but excluding the upper bound."},{"lineNumber":480,"author":{"gitID":"shanmu9898"},"content":"* Range of indexes (with a tag)"},{"lineNumber":481,"author":{"gitID":"shanmu9898"},"content":"** if the user input contains a range which is identified by the `,` character along with the tag, we will add that range of index (one-based) to the `teachConnectBook` if that contact contains that particular tag including the lower range but excluding the upper bound."},{"lineNumber":482,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":483,"author":{"gitID":"shanmu9898"},"content":"The final step is to create the xml/excel file from the `teachConnectBook`. This is done with the help of the method `tryStorage()`."},{"lineNumber":484,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":485,"author":{"gitID":"shanmu9898"},"content":"Depending on the type of export it can also be exported to an excel format with the help of Arraylists called `exportAdditionPeople`, `exportAdditionClasses`, `exportAdditionStudents`."},{"lineNumber":486,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":489,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Export Command"},{"lineNumber":490,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1:** Users can only export to `XML` files."},{"lineNumber":491,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This is the easier implementation and it goes well with the import command as import can only be done from an XML file."},{"lineNumber":492,"author":{"gitID":"shanmu9898"},"content":"** Cons: The exported file might not be very user friendly to read in the xml file format and hence later referencing to the file after exporting can be a nightmare."},{"lineNumber":493,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2 (current choice):** Users can export to `Excel` files too."},{"lineNumber":494,"author":{"gitID":"-"},"content":"** Pros: This implementation might be more intuitive for the user and might come in handy especially when the user wants to print it later or read the contents in a user friendly format."},{"lineNumber":495,"author":{"gitID":"-"},"content":"** Cons: The implementation would be more complex and hence there could be more boundary cases to consider."},{"lineNumber":496,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":497,"author":{"gitID":"shanmu9898"},"content":"// end::export[]"},{"lineNumber":498,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":499,"author":{"gitID":"shanmu9898"},"content":"// tag::shortcut[]"},{"lineNumber":500,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Personalised Shortcut"},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"shanmu9898"},"content":"The personalised shortcut uses a `ShortcutDouble` to hold the shortcut word and the command word. There is a `UniqueShortcutDoublesList` to which these `ShortcutDoubles` are added. The comparator in the `ShortcutDouble` accounts to check for any duplicates in the `UniqueShortcutDoublesList`. This list is then added to the `addressbook.xml` so as to load the shortcuts on initialisation. Below is a short code snippet of the constructor of the ShortcutDouble:"},{"lineNumber":504,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":505,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":506,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":507,"author":{"gitID":"shanmu9898"},"content":"public ShortcutDoubles(String shortcutWord, String commandWord) {"},{"lineNumber":508,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":509,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":510,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":511,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":512,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":513,"author":{"gitID":"shanmu9898"},"content":"This ShortcutDouble is called using the `ShortcutCommand`. Below is the constructor to the ShortcutCommand:"},{"lineNumber":514,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":515,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":516,"author":{"gitID":"shanmu9898"},"content":"public ShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":517,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":518,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":519,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":520,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":521,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":522,"author":{"gitID":"shanmu9898"},"content":"Shortcut command extends `UndoableCommand` and hence is undoable. It initially calls a filtered commandsList to which a new `ShortcutDouble` is added if it passes all validity checks."},{"lineNumber":523,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":524,"author":{"gitID":"shanmu9898"},"content":"There is a check to find if the command is already present and the method used for this is called `checkIfCommandPresent()`.By default it returns false."},{"lineNumber":525,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"You can also choose to list all the shortcuts created until now. This displays the `UniqueShortcutDoublesList` instead of the contacts in the list panel. `Figure 21` gives an example of a high level sequence diagram."},{"lineNumber":527,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":528,"author":{"gitID":"shanmu9898"},"content":"image::ListShortcutsHighLevelSequenceDiagrams.png[width\u003d\"600\"]"},{"lineNumber":529,"author":{"gitID":"Sisyphus25"},"content":"    Figure 21: List Shortcut High Level Sequence Diagram"},{"lineNumber":530,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":531,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":532,"author":{"gitID":"shanmu9898"},"content":"As of now the conditions to take note of are:"},{"lineNumber":533,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":534,"author":{"gitID":"shanmu9898"},"content":"* Shortcut can be only one word."},{"lineNumber":535,"author":{"gitID":"shanmu9898"},"content":"* The command word should already exist."},{"lineNumber":536,"author":{"gitID":"shanmu9898"},"content":"* New commands are to be added in the `commandsPresent` String array of `ShortcutCommand` class."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":539,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation Shortcut Command"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1:** There is a limit to the number of aliases a command word can have."},{"lineNumber":542,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation allows the developers to set up default shortcuts for each command word there by increasing the usability of the app."},{"lineNumber":543,"author":{"gitID":"Sisyphus25"},"content":"** Cons: It wouldn\u0027t help much if the user keeps forgetting the shortcut word too because there is only one shortcut alias and the user might forget it."},{"lineNumber":544,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2 (current choice):** Multiple number of shortcut words can be created for a single command word."},{"lineNumber":545,"author":{"gitID":"Sisyphus25"},"content":"** Pros: As users can create multiple aliases, this implementation gives them more personalisation and the flexibility of forgetting the words as they can always create more of them."},{"lineNumber":546,"author":{"gitID":"Sisyphus25"},"content":"** Cons: Developers need to consider several cases for duplicate shortcuts and maintain a dynamic list without forgetting the shortcuts when the app is closed without hardcoding the shortcut word into each command."},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"shanmu9898"},"content":"// end::shortcut[]"},{"lineNumber":549,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":550,"author":{"gitID":"shanmu9898"},"content":"// tag::deleteshortcut[]"},{"lineNumber":551,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Deleting Personalised Shortcut"},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":553,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":554,"author":{"gitID":"shanmu9898"},"content":"The ShortcutDouble can be deleted using the `DeleteShortcutCommand`. The sequence diagram is below :"},{"lineNumber":555,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":556,"author":{"gitID":"shanmu9898"},"content":"image::DeleteShortcutSequenceDiagram.png[width\u003d\"600\"]"},{"lineNumber":557,"author":{"gitID":"Sisyphus25"},"content":"    Figure 22: Delete Shortcut Sequence Diagram"},{"lineNumber":558,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":559,"author":{"gitID":"shanmu9898"},"content":"The `ShortcutDouble` is deleted from the `UniqueShortcutDoublesList`. It throws a `CommandShortcutNotFoundException` in case the shortcut is not found. Below is the constructor to the DeleteShortcutCommand:"},{"lineNumber":560,"author":{"gitID":"shanmu9898"},"content":"[source,java]"},{"lineNumber":561,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":562,"author":{"gitID":"shanmu9898"},"content":"public DeleteShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":563,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":564,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":565,"author":{"gitID":"shanmu9898"},"content":"        commandShortcut \u003d new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":566,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":567,"author":{"gitID":"shanmu9898"},"content":"----"},{"lineNumber":568,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":569,"author":{"gitID":"shanmu9898"},"content":"DeleteShortcut command extends `UndoableCommand` and hence is undoable. It calls the method `deleteCommandShortcut()` in the model class to achieve its objective."},{"lineNumber":570,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":571,"author":{"gitID":"shanmu9898"},"content":"As of now the conditions to take note of are:"},{"lineNumber":572,"author":{"gitID":"shanmu9898"},"content":"* DeleteShortcut can only delete a shortcut if the command is already present and the shortcut has been made previously."},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":575,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Validity of the Delete Shortcut Command"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1:** TeachConnect doesn\u0027t support Delete Shortcut Command."},{"lineNumber":578,"author":{"gitID":"Sisyphus25"},"content":"** Pros: The implementation would be more simple considering the fact that the shortcut has been added by the user."},{"lineNumber":579,"author":{"gitID":"Sisyphus25"},"content":"** Cons: This implementation would not give the user any room for mistake or change of mind as once added shortcut cannot be deleted."},{"lineNumber":580,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2 (current choice):** TeachConnect also supports Delete Shorcut Command."},{"lineNumber":581,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation will give the user the room to make mistake and change the shortcuts if needed. It would also help him in clearing the clutter of shortcuts which would have developed over time."},{"lineNumber":582,"author":{"gitID":"Sisyphus25"},"content":"** Cons: The developers will have to take care of various edge cases when the shortcuts are not present and keep modifying the dynamic list. Several relevant exceptions have to be thrown and taken care of."},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"shanmu9898"},"content":"// end::deleteshortcut[]"},{"lineNumber":585,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"// tag::studentmanagement[]"},{"lineNumber":587,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Student Management"},{"lineNumber":588,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"The student manangement allows the user of TeachConnect to manage a particular type of contact, a student. The user is capable of interacting with the student contact just like with any other contact, for example: adding, editing, deleting and so on. In addition, users will be able to form classes to group students of the same class together."},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"Each `Class` contains 4 variables:"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"* Name of class: for users to distinguish between classes."},{"lineNumber":595,"author":{"gitID":"-"},"content":"* Subject being taught: for users to record what was taught to any particular class or student."},{"lineNumber":596,"author":{"gitID":"-"},"content":"* Duration of Class: for users to record when that particular class was taught by them. +"},{"lineNumber":597,"author":{"gitID":"-"},"content":"Shown as a range of dates, e.g 01 January 18 to 01 December 18."},{"lineNumber":598,"author":{"gitID":"-"},"content":"* List of students taught: for users to recorded which class was attended by which student and vice versa."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"An overview of the Model Component after implementation is shown below in Figure 23:"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"image::EditedModelClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":603,"author":{"gitID":"Sisyphus25"},"content":"    Figure 23: Model Class after implementation of Student"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"As shown above, `student` class extends from the `person` class, giving `student` access to its constructor and getter methods for `name`, `phone`, `email`, `address` whereas only `student` will have access to `class`."},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":608,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation of student"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":""},{"lineNumber":611,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** `Student` class extends `Person` class."},{"lineNumber":612,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation allows students access to person methods while restricting person from accessing student methods."},{"lineNumber":613,"author":{"gitID":"-"},"content":"** Cons: The implementation is more complex as additional classes has to be added to facilitate storage and display."},{"lineNumber":614,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2:** Developers only use a tag to distinguish a student from a person."},{"lineNumber":615,"author":{"gitID":"-"},"content":"** Pros: It is more simple to implement and tags are visible to user."},{"lineNumber":616,"author":{"gitID":"Sisyphus25"},"content":"** Cons: This implementation would require every operation to check the tags. Tags can also be removed."},{"lineNumber":617,"author":{"gitID":"-"},"content":"// end::studentmanagement[]"},{"lineNumber":618,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":619,"author":{"gitID":"Sisyphus25"},"content":"// tag::eventmanagement[]"},{"lineNumber":620,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":621,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Schedule Management"},{"lineNumber":622,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":623,"author":{"gitID":"Sisyphus25"},"content":"There are two types of schedule: an `Appointment` or a `Task`. The model diagrams for `Appointment` and `Task` are shown in `Figure 24` and `Figure 25`."},{"lineNumber":624,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":625,"author":{"gitID":"Sisyphus25"},"content":"image::AppointmentModelClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":626,"author":{"gitID":"Sisyphus25"},"content":"    Figure 24: Appointment Class Diagram"},{"lineNumber":627,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":628,"author":{"gitID":"Sisyphus25"},"content":"image::TaskModelClassDiagram.png[align\u003d\"center\"]"},{"lineNumber":629,"author":{"gitID":"Sisyphus25"},"content":"    Figure 25: Task Class Diagram"},{"lineNumber":630,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":631,"author":{"gitID":"Sisyphus25"},"content":"`Appointment` has 4 variables:"},{"lineNumber":632,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":633,"author":{"gitID":"Sisyphus25"},"content":"* Title: Holds the description for the appointment."},{"lineNumber":634,"author":{"gitID":"Sisyphus25"},"content":"* Start Time: Holds the starting time of the appointment."},{"lineNumber":635,"author":{"gitID":"Sisyphus25"},"content":"* End time: Holds the end time of the appointment."},{"lineNumber":636,"author":{"gitID":"Sisyphus25"},"content":"* Person to meet: (optional) Holds the target in the appointment."},{"lineNumber":637,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":638,"author":{"gitID":"Sisyphus25"},"content":"`Task` has 2 variables:"},{"lineNumber":639,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":640,"author":{"gitID":"Sisyphus25"},"content":"* Title: Holds the description for the task."},{"lineNumber":641,"author":{"gitID":"Sisyphus25"},"content":"* Time: Holds the time the task is expected to be finished."},{"lineNumber":642,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":643,"author":{"gitID":"Sisyphus25"},"content":"Similar to `UniquePersonList` and `UniqueTagList`, `UniqueAppointmentList` and `UniqueTaskList` is linked to `AddressBook`. Request to change to the `AddressBook` model is signalled through `ModelManager`."},{"lineNumber":644,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":645,"author":{"gitID":"Sisyphus25"},"content":"Every `Appointment` in the `UniqueAppointmentList` is also added to `CalendarFX` \u0027s Calendar `Entry` list to be rendered on the Calendar View in the GUI. When there is a change in the `UniqueAppointmentList`, an `AppointmentListChangedEvent` will be propagated through the `EventsCenter`. When it reaches the `UI` component, the result is re-syncing of `UniqueAppointmentList` and `CalendarFx` \u0027s Calendar `Entry` list and the Calendar View in the GUI will be updated. The code below shows how the re-syncing works within the `UI` component."},{"lineNumber":646,"author":{"gitID":"Sisyphus25"},"content":"[source,java]"},{"lineNumber":647,"author":{"gitID":"Sisyphus25"},"content":"----"},{"lineNumber":648,"author":{"gitID":"Sisyphus25"},"content":"private void handleAppointmentListChangedEvent(AppointmentListChangedEvent event) {"},{"lineNumber":649,"author":{"gitID":"Sisyphus25"},"content":"        appointmentList \u003d event.appointmentList;"},{"lineNumber":650,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater("},{"lineNumber":651,"author":{"gitID":"Sisyphus25"},"content":"                this::updateCalendar"},{"lineNumber":652,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":653,"author":{"gitID":"Sisyphus25"},"content":"}"},{"lineNumber":654,"author":{"gitID":"Sisyphus25"},"content":"private void updateCalendar() {"},{"lineNumber":655,"author":{"gitID":"Sisyphus25"},"content":"        calendar.clear();"},{"lineNumber":656,"author":{"gitID":"Sisyphus25"},"content":"        ArrayList\u003cEntry\u003e entries \u003d getEntries();"},{"lineNumber":657,"author":{"gitID":"Sisyphus25"},"content":"        for (Entry entry : entries) {"},{"lineNumber":658,"author":{"gitID":"Sisyphus25"},"content":"                calendar.addEntry(entry);"},{"lineNumber":659,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":660,"author":{"gitID":"Sisyphus25"},"content":"}"},{"lineNumber":661,"author":{"gitID":"Sisyphus25"},"content":"----"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":664,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Implementation of set appointment/task"},{"lineNumber":665,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** Users can set appointment/task with already elapsed starting time/deadline."},{"lineNumber":666,"author":{"gitID":"Sisyphus25"},"content":"** Pros: With this implementation, TeachConnect can help the user keep track of past schedules which weren\u0027t added to the schedule list."},{"lineNumber":667,"author":{"gitID":"Sisyphus25"},"content":"** Cons: This is not the most intuitive implementation and the application could accept error-prone date input from the user side."},{"lineNumber":668,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2:** Users can only set  appointment/task with the starting time/deadline in the future."},{"lineNumber":669,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This is the more intuitive approach and it can prevent the user from keying in \"redundant\" schedule."},{"lineNumber":670,"author":{"gitID":"Sisyphus25"},"content":"** Cons: As TeachConnect fetches the current time from the user\u0027s system, if the user for some purposes sets the system\u0027s time to deviate from the world clock, some difficulties may arise when he/she wants to add new event."},{"lineNumber":671,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":672,"author":{"gitID":"Sisyphus25"},"content":"// end::eventmanagement[]"},{"lineNumber":673,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":674,"author":{"gitID":"Sisyphus25"},"content":"// tag::theme[]"},{"lineNumber":675,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":676,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Changing GUI theme"},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":678,"author":{"gitID":"Sisyphus25"},"content":"The current implementation of this command only involves `Logic`, `EventsCenter` and `UI` components of the application. To illustrate how the change theme command works, `Figure 26` shows the sequence diagram for changing the theme to `dark` theme."},{"lineNumber":679,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":680,"author":{"gitID":"Sisyphus25"},"content":"image::ChangeThemeSequenceDiagram.png[align\u003d\"center\"]"},{"lineNumber":681,"author":{"gitID":"Sisyphus25"},"content":"    Figure 26: Change Theme Command Sequence Diagram"},{"lineNumber":682,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":683,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":685,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Saving of user selected theme to `Storage`"},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 1 (current choice):** Theme selected is not saved to storage."},{"lineNumber":688,"author":{"gitID":"Sisyphus25"},"content":"** Pros: This implementation is more simple and we don\u0027t need to interact with `Model` and `Storage`."},{"lineNumber":689,"author":{"gitID":"Sisyphus25"},"content":"** Cons: If the users want to use a theme other than the default one, it will be very inconvenient for them as they will have to manual change the theme from the default one every time they start up TeachConnect."},{"lineNumber":690,"author":{"gitID":"Sisyphus25"},"content":"* **Alternative 2:** Last selected theme by the users would be saved to storage."},{"lineNumber":691,"author":{"gitID":"Sisyphus25"},"content":"** Pros: Users experience can be enhanced as users can have the theme they like selected automatically each time they start up TeachConnect."},{"lineNumber":692,"author":{"gitID":"Sisyphus25"},"content":"** Cons: The command implementation would be more complex as we need to interact with `Model` and `Storage` components too."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"Sisyphus25"},"content":"// end::theme[]"},{"lineNumber":695,"author":{"gitID":"-"},"content":"// tag::sort[]"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting Contacts"},{"lineNumber":698,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":699,"author":{"gitID":"-"},"content":"This command sorts all the contacts in TeachConnect lexicographically."},{"lineNumber":700,"author":{"gitID":"-"},"content":"The command calls upon a `sortByNameFilteredPersonList()` method in `Model`, which then calls upon the `sortList()` method in `UniqueContactList`. The `sortList()` method sorts the entire contact list using a comparator."},{"lineNumber":701,"author":{"gitID":"-"},"content":"Below is the code snippet."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":" public void sortList() {"},{"lineNumber":704,"author":{"gitID":"-"},"content":"        Comparator\u003cPerson\u003e sortByName \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":705,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":706,"author":{"gitID":"-"},"content":"            public int compare (Person contact1, Person contact2)  {"},{"lineNumber":707,"author":{"gitID":"-"},"content":"                return contact1.getName().fullName.compareToIgnoreCase(contact2.getName().fullName);"},{"lineNumber":708,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":709,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":710,"author":{"gitID":"-"},"content":"        FXCollections.sort(combinedList, sortByName);"},{"lineNumber":711,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":712,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":714,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Automatic sorting of contacts"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** TeachConnect will only sort contacts after user keys in the command."},{"lineNumber":717,"author":{"gitID":"-"},"content":"** Pros: This implementation is simpler and more intuitive."},{"lineNumber":718,"author":{"gitID":"-"},"content":"** Cons: Users might find it a slight hassle to have to key in the sort command every time a new contact is added."},{"lineNumber":719,"author":{"gitID":"-"},"content":"* **Alternative 2: ** TeachConnect automatically sorts contacts."},{"lineNumber":720,"author":{"gitID":"-"},"content":"** Pros: When new contacts are added, they are automatic sorted without the need to key in the command."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Cons: The command implementation might be more complex and it would make the command redundant. Users also might not always want their contact list to be sorted."},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"-"},"content":"// end::sort[]"},{"lineNumber":724,"author":{"gitID":"-"},"content":""},{"lineNumber":725,"author":{"gitID":"-"},"content":"// tag::encryption/decryption[]"},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encryption/Decryption [Proposed]"},{"lineNumber":728,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":729,"author":{"gitID":"-"},"content":"TeachConnect will also have a data encryption feature to keep the teacher\u0027s sensitive contact data safe from unauthorised persons."},{"lineNumber":730,"author":{"gitID":"-"},"content":"To illustrate how the encrypt command works, `Figure 27` shows the sequence diagram when the command `encrypt pw/\u003cpassword\u003e` is entered."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"image::EncryptionSequenceDiagram.png[align\u003d\"center\"]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"    Figure 27: Encrypt Command Sequence Diagram"},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":"The Decrypt command also follows the same flow, except that `DecryptEvent` is posted,`handleDecryptEvent` is called instead, and decryptUtil handles the decryption."},{"lineNumber":737,"author":{"gitID":"-"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"After encryption the result would be an encrypted `addressBook.xml` file, and after decryption the result is a decrypted and human-readable `addressBook.xml` file."},{"lineNumber":739,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":740,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspects : Saving of password to TeachConnect storage"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Users remember their own passwords."},{"lineNumber":745,"author":{"gitID":"-"},"content":"** Pros: The password is also not stored locally within TeachConnect, hence it would be impossible to obtain the password from the application. No one else would have the password but the user, provided that he/she does not share it with any unauthorised persons."},{"lineNumber":746,"author":{"gitID":"-"},"content":"** Cons: If the user forgets the password, then the file cannot be decrypted. Also, the user needs to find secure means to share this password with other authorised persons."},{"lineNumber":747,"author":{"gitID":"-"},"content":"* **Alternative 2: ** Password is saved within TeachConnect."},{"lineNumber":748,"author":{"gitID":"-"},"content":"** Pros: Users will find it more convenient as they do not have to remember their password."},{"lineNumber":749,"author":{"gitID":"-"},"content":"** Cons: The command implementation might be more complex. There is a risk of unauthorised persons breaking and reverse-engineering the password."},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"// end::encryption/decryption[]"},{"lineNumber":752,"author":{"gitID":"-"},"content":""},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":759,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":760,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":765,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":766,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":767,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":770,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":780,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":785,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":798,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":799,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":800,"author":{"gitID":"Sisyphus25"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in `Figure 28` below."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":803,"author":{"gitID":"Sisyphus25"},"content":"    Figure 28: Saving Document as pdf settings"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":806,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":818,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":821,"author":{"gitID":"-"},"content":""},{"lineNumber":822,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":825,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":838,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":839,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":840,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":841,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":842,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":843,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":844,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":845,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":846,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":""},{"lineNumber":849,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":850,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":853,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":856,"author":{"gitID":"-"},"content":""},{"lineNumber":857,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":870,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":877,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":878,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":879,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"Sisyphus25"},"content":"A project often depends on third-party libraries. For example, TeachConnect depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":884,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":885,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":888,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":889,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":891,"author":{"gitID":"-"},"content":""},{"lineNumber":892,"author":{"gitID":"Sisyphus25"},"content":"*Target user profile*: teachers or educational professionals who"},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"* is a teacher or educational professional"},{"lineNumber":895,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of students and parents contact details"},{"lineNumber":896,"author":{"gitID":"-"},"content":"* has a need to keep track of appointments with parents, students or other staff"},{"lineNumber":897,"author":{"gitID":"-"},"content":"* has a need to keep track of tasks and their deadlines"},{"lineNumber":898,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":899,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":900,"author":{"gitID":"Sisyphus25"},"content":"* prefer typing over mouse input"},{"lineNumber":901,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"Sisyphus25"},"content":"*Value proposition*: TeachConnect provides a simple and intuitive interface to help teachers manage their contacts, events and tasks."},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"shanmu9898"},"content":"*Feature Contribution*"},{"lineNumber":908,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":909,"author":{"gitID":"shanmu9898"},"content":"1. Mukesh Gadupudi"},{"lineNumber":910,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":911,"author":{"gitID":"shanmu9898"},"content":"** Major Feature : Sharing of Contacts"},{"lineNumber":912,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":913,"author":{"gitID":"shanmu9898"},"content":"*** Contacts can be imported or exported"},{"lineNumber":914,"author":{"gitID":"shanmu9898"},"content":"*** They can be exported based on the tag or index"},{"lineNumber":915,"author":{"gitID":"shanmu9898"},"content":"*** Import can be done given the file path of an XML file"},{"lineNumber":916,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":917,"author":{"gitID":"shanmu9898"},"content":"** Minor Feature : Personalised Shortcuts"},{"lineNumber":918,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":919,"author":{"gitID":"shanmu9898"},"content":"*** Shortcuts can be created or deleted for all the commands present."},{"lineNumber":920,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":921,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":922,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":923,"author":{"gitID":"shanmu9898"},"content":"*** Major Feature: This feature can help teachers share contacts with other teachers. This is especially useful when teachers change classes or pass on the class to other teachers. Updating and losing data is also a common problem and to overcome this a backup can be stored by using this feature."},{"lineNumber":924,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":925,"author":{"gitID":"shanmu9898"},"content":"*** Minor Feature: TeachConnect comes with a lot of features and each feature has its own command word. The most gruelling part is remembering the exact command word as stated in the user guide. To overcome this the shortcut command helps keep aliases to the commands there by helping teachers better remember the command words they are comfortable with."},{"lineNumber":926,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":927,"author":{"gitID":"Sisyphus25"},"content":"2. Rachel Ngo Phuong Thao"},{"lineNumber":928,"author":{"gitID":"Sisyphus25"},"content":"** Major Feature : Managing Appointments \u0026 Tasks"},{"lineNumber":929,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":930,"author":{"gitID":"Sisyphus25"},"content":"*** Users can add and remove appointments \u0026 tasks in TeachConnect."},{"lineNumber":931,"author":{"gitID":"Sisyphus25"},"content":"*** The appointments would be rendered in a calendar in the GUI."},{"lineNumber":932,"author":{"gitID":"Sisyphus25"},"content":"** Minor Feature : Changing the GUI theme"},{"lineNumber":933,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":934,"author":{"gitID":"Sisyphus25"},"content":"*** Users can set the theme of the GUI to `dark`, `light` or `galaxy` theme."},{"lineNumber":935,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":936,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope:"},{"lineNumber":937,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":938,"author":{"gitID":"Sisyphus25"},"content":"*** Major Feature: This feature can help teachers keeping track of any upcoming appointment or task they have. This can be useful for teachers or teaching associates who frequently need to meet up with students and parents for counselling or administrative purposes."},{"lineNumber":939,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":940,"author":{"gitID":"Sisyphus25"},"content":"*** Minor Feature: This feature increases the aesthetic sense and helps people set the theme according to their taste."},{"lineNumber":941,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":942,"author":{"gitID":"shanmu9898"},"content":"3. Jonathan"},{"lineNumber":943,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":944,"author":{"gitID":"shanmu9898"},"content":"** Major Feature : Data Encryption"},{"lineNumber":945,"author":{"gitID":"shanmu9898"},"content":"*** Encrypts the data for increased safety"},{"lineNumber":946,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":947,"author":{"gitID":"shanmu9898"},"content":"** Minor Feature : Sort Contacts"},{"lineNumber":948,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":949,"author":{"gitID":"shanmu9898"},"content":"*** Contacts can be sorted in alphabetical order of the name/tag or the phone number of the contacts."},{"lineNumber":950,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":951,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":952,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":953,"author":{"gitID":"shanmu9898"},"content":"*** Major Feature: Since TeachConnect has a lot of personal details of students and parents, the owner of the address book would want to encrypt the application data file to prevent outside access to sensitive information."},{"lineNumber":954,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":955,"author":{"gitID":"shanmu9898"},"content":"*** Minor Feature: This helps teacher relate and understand the index of the contacts in the TeachConnect better. Indexing becomes easy when they later want to export or set appointments."},{"lineNumber":956,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"4. Randy Pang Pang"},{"lineNumber":958,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"** Major Feature : Management of classes"},{"lineNumber":961,"author":{"gitID":"-"},"content":"*** Classes can be formed and deleted."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"** Minor Feature : Management of student contacts"},{"lineNumber":964,"author":{"gitID":"-"},"content":"*** Student contact can be created and managed in a similar fashion as a default contact."},{"lineNumber":965,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":966,"author":{"gitID":"shanmu9898"},"content":"** How the features fit into the product scope :"},{"lineNumber":967,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"*** Major Feature: The ability to group students according to the classes will help manage student contacts better. Furthermore, this will help record the subjects a student has been taught as well as when has the student been taught."},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":"*** Minor Feature: This feature is essential to TeachConnect as it helps teachers to remember and manage contacts with past and present students."},{"lineNumber":971,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":973,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":978,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":979,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":980,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |user |delete a person |remove contacts that I no longer need"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |user |edit the details of a person"},{"lineNumber":989,"author":{"gitID":"Sisyphus25"},"content":" |easily make changes to their details when they update their contact"},{"lineNumber":990,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":991,"author":{"gitID":"Sisyphus25"},"content":"|`* * *` |teacher |create a class |group and manage students who are taking the same class"},{"lineNumber":992,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"|`* * *` |teacher | list all the classes I have taught or am teaching |know what classes have I taught"},{"lineNumber":994,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"|`* * *` |teacher |add appointment with a contact to my schedule |be reminded of the appointment"},{"lineNumber":996,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"|`* * *` |teacher |delete appointments from my schedule |clear appointments I no longer need to be reminded about"},{"lineNumber":998,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"|`* * *` |teacher |list all appointments in my schedule |check all the appointments I have"},{"lineNumber":1000,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"|`* * *` |teacher |add tasks to my schedule |be reminded of a deadline"},{"lineNumber":1002,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"|`* * *` |teacher |delete tasks from my schedule |clear tasks I no longer need to be reminded about"},{"lineNumber":1004,"author":{"gitID":"-"},"content":""},{"lineNumber":1005,"author":{"gitID":"-"},"content":"|`* * *` |teacher |list all tasks in my schedule |check all the tasks I have"},{"lineNumber":1006,"author":{"gitID":"-"},"content":""},{"lineNumber":1007,"author":{"gitID":"-"},"content":"|`* *` |teacher | add persons to a class |group them for easy perusal"},{"lineNumber":1008,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user with many persons in TeachConnect |sort persons by name |locate a person easily"},{"lineNumber":1012,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1013,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |tag a person |mark their contact with details"},{"lineNumber":1014,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1015,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |find all person with a given tag |see all persons with contact marked with a certain detail"},{"lineNumber":1016,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1017,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |change the colour of a tag |make it easier for me to distinguish the tags"},{"lineNumber":1018,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1019,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |change the background colour of the application |make the application more pleasing to my eyes"},{"lineNumber":1020,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1021,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |export persons from TeachConnect to an external file| have persons\u0027 contacts ready for import"},{"lineNumber":1022,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1023,"author":{"gitID":"Sisyphus25"},"content":"|`*` |user |import persons from an external file to TeachConnect | have persons\u0027 contact details added without having to reenter the information"},{"lineNumber":1024,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"Sisyphus25"},"content":"(For all use cases below, the *System* is `TeachConnect` and the *Actor* is the `teacher`, unless specified otherwise)"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"1.  Teacher requests to list persons"},{"lineNumber":1038,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect shows a list of persons"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"3.  Teacher requests to delete a specific person in the list"},{"lineNumber":1040,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect deletes the person"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1047,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1048,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1052,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1054,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows an error message."},{"lineNumber":1055,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Create class"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"1.  Teacher requests to list contacts"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"2.  TeachConnect shows a list of contacts"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"3.  Teacher requests to create a class of a subject for a specified duration with specific students"},{"lineNumber":1066,"author":{"gitID":"Sisyphus25"},"content":"5.  TeachConnect creates the class"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1074,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"* 3a. The given subject or duration is invalid."},{"lineNumber":1078,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1079,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1080,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows an error message."},{"lineNumber":1081,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* 5a. One or more given index(s) is invalid."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1087,"author":{"gitID":"Sisyphus25"},"content":"** 5a1. TeachConnect shows an error message."},{"lineNumber":1088,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"1.  Teacher requests to add an appointment with a specific tittle at a specified time"},{"lineNumber":1097,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect adds the appointment"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"* 1a. Time given is invalid."},{"lineNumber":1105,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1107,"author":{"gitID":"Sisyphus25"},"content":"** 1a1. TeachConnect shows error message."},{"lineNumber":1108,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete appointment"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"1.  Teacher requests to list appointments"},{"lineNumber":1117,"author":{"gitID":"Sisyphus25"},"content":"2.  TeachConnect shows list of appointments"},{"lineNumber":1118,"author":{"gitID":"-"},"content":"3.  Teacher requests to delete a specific appointment in the list"},{"lineNumber":1119,"author":{"gitID":"Sisyphus25"},"content":"4.  TeachConnect deletes appointment"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1127,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1131,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1132,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1133,"author":{"gitID":"Sisyphus25"},"content":"** 3a1. TeachConnect shows error message."},{"lineNumber":1134,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1144,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1145,"author":{"gitID":"Sisyphus25"},"content":".  Should allow a user with above average typing speed for regular English text (i.e. not code, not system admin commands) to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1146,"author":{"gitID":"shanmu9898"},"content":".  Should be intutive for any first time user."},{"lineNumber":1147,"author":{"gitID":"shanmu9898"},"content":".  Should be able to handle any invalid input i.e should be able to inform the user and guide the user for valid input."},{"lineNumber":1148,"author":{"gitID":"Sisyphus25"},"content":".  Should respond within a second."},{"lineNumber":1149,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1172,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1178,"author":{"gitID":"-"},"content":""},{"lineNumber":1179,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1192,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1198,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1206,"author":{"gitID":"-"},"content":""},{"lineNumber":1207,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list contacts` command. Multiple persons in the list."},{"lineNumber":1208,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1210,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1212,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a student"},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":". Adding a student to TeachConnect"},{"lineNumber":1218,"author":{"gitID":"-"},"content":""},{"lineNumber":1219,"author":{"gitID":"-"},"content":"..  Test Case: `add student n/John Doe p/0000000 e/johny@example.com a/nowhere t/unknown` +"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"    Expected: The list view is toggled to the contacts list, if the list view is currently on another list, where a new student card,"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"    with a blue marker at the corner, can be seen with the entered particulars. Subject list will be empty."},{"lineNumber":1222,"author":{"gitID":"-"},"content":"..  Test Case: `add friend n/Mary Doe p/9999999 e/mary@example.com a/elsewhere` +"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"    Expected: Nothing is added. Error message is shown and command remains in the command box. List is not toggled."},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Forming a class of students"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":". Forming a class while list view is on the student list"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":".. Prerequisites: List all students using the `list students` command. At least one student in list."},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":"..  Test Case: `form English n/class 01 s/10/09/2018 e/10/09/2019 i/1` +"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"    Expected: The list view is toggled to the class list where a new class card is added showing the particulars entered and the name"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"    of the student at the top of the list. Toggling back to the student list with `list students`, the student added will have the"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"    subject of the class included in his card."},{"lineNumber":1235,"author":{"gitID":"-"},"content":"..  Test Case: `form Advance Math n/class 02 s/10/10/2018 e/09/12/2018 i/1` +"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"    Expected: No class is formed. Error message is shown. List view not toggled."},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Adding an appointment"},{"lineNumber":1239,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1240,"author":{"gitID":"Sisyphus25"},"content":". Adding an appointment to TeachConnect"},{"lineNumber":1241,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1242,"author":{"gitID":"Sisyphus25"},"content":"..  Test Case: `set_appointment t/Private meeting s/20/04/2018 18:00 e/20/04/2018 20:00 i/3` +"},{"lineNumber":1243,"author":{"gitID":"Sisyphus25"},"content":"    Expected: The list view is toggled to the appointment list where a new appointment card is added. The appointment should be with the third person in the most recent contact listing. The appointment should also show up on the calendar in the GUI. If you don\u0027t see the appointment on the calendar Day View, try to switch to the Week View or Month View using `calendar` command."},{"lineNumber":1244,"author":{"gitID":"Sisyphus25"},"content":"..  Test Case: `set_appointment t/Consultation s/32/04/2018 18:00 e/32/05/2018 21:00` +"},{"lineNumber":1245,"author":{"gitID":"Sisyphus25"},"content":"    Expected: No appointment is added as the date is invalid. Error message is shown."},{"lineNumber":1246,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1247,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Adding a task"},{"lineNumber":1248,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1249,"author":{"gitID":"Sisyphus25"},"content":". Adding a task to TeachConnect"},{"lineNumber":1250,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1251,"author":{"gitID":"Sisyphus25"},"content":"..  Test Case: `set_task t/Collect documents e/21/04/2018 20:00` +"},{"lineNumber":1252,"author":{"gitID":"Sisyphus25"},"content":"Expected: The list view is toggled to the task list where a new task card is added."},{"lineNumber":1253,"author":{"gitID":"Sisyphus25"},"content":"..  Test Case: `set_task t/Grade papers e/29/02/2018 21:00` +"},{"lineNumber":1254,"author":{"gitID":"Sisyphus25"},"content":"Expected: The list view is toggled to the task list where a new task card is added. There is an `Expired` tag on the task card as the deadline of the task already passed."},{"lineNumber":1255,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1256,"author":{"gitID":"Sisyphus25"},"content":"\u003d\u003d\u003d Changing theme"},{"lineNumber":1257,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1258,"author":{"gitID":"Sisyphus25"},"content":". Changing the theme of the GUI"},{"lineNumber":1259,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1260,"author":{"gitID":"Sisyphus25"},"content":"..  Test Case: `theme dark` +"},{"lineNumber":1261,"author":{"gitID":"Sisyphus25"},"content":"Expected: The theme of the GUI should be changed to `dark` theme. Success message is shown."},{"lineNumber":1262,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":1263,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Importing Contacts"},{"lineNumber":1264,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1265,"author":{"gitID":"shanmu9898"},"content":". Importing contacts into the book."},{"lineNumber":1266,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1267,"author":{"gitID":"shanmu9898"},"content":".. Prerequisites: Create a sample xml file to import."},{"lineNumber":1268,"author":{"gitID":"shanmu9898"},"content":".. Test case: `import {path of the file}` +"},{"lineNumber":1269,"author":{"gitID":"shanmu9898"},"content":"   Expected: Number of contacts, student, classes imported."},{"lineNumber":1270,"author":{"gitID":"shanmu9898"},"content":".. Test case: `import {empty xml file}` +"},{"lineNumber":1271,"author":{"gitID":"shanmu9898"},"content":"   Expected: No person is imported."},{"lineNumber":1272,"author":{"gitID":"shanmu9898"},"content":".. Other incorrect delete commands to try: `import {wrong file path}` responds with incorrect file path error."},{"lineNumber":1273,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1274,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Exporting Contacts"},{"lineNumber":1275,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1276,"author":{"gitID":"shanmu9898"},"content":". Exports contacts/classes from the book."},{"lineNumber":1277,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1278,"author":{"gitID":"shanmu9898"},"content":".. Prerequisites: The path should be to a valid folder"},{"lineNumber":1279,"author":{"gitID":"shanmu9898"},"content":".. Test case: `export classes n/sampleclasses p/./Desktop/Folder te/excel` +"},{"lineNumber":1280,"author":{"gitID":"shanmu9898"},"content":"   Expected: Exports all the classes along with the names of the students in them."},{"lineNumber":1281,"author":{"gitID":"shanmu9898"},"content":".. Test case: `export n/samplefile r/all t/friends p/./Desktop/Folder te/excel` +"},{"lineNumber":1282,"author":{"gitID":"shanmu9898"},"content":"   Expected: Exports all the contacts with the tag friends to the folder mentioned."},{"lineNumber":1283,"author":{"gitID":"shanmu9898"},"content":".. Other incorrect delete commands to try: `export n/samplefile r/all t/friends p/./Desktop/Folder te/{something other than excel or xm}` responds with invalid format exception."},{"lineNumber":1284,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1285,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Creating shortcuts"},{"lineNumber":1286,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1287,"author":{"gitID":"shanmu9898"},"content":". Creates shortcuts for the required command."},{"lineNumber":1288,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1289,"author":{"gitID":"shanmu9898"},"content":".. Prerequisites: That shortcut should not exist"},{"lineNumber":1290,"author":{"gitID":"shanmu9898"},"content":".. Test case: `shortcut list l` +"},{"lineNumber":1291,"author":{"gitID":"shanmu9898"},"content":"   Expected: Should create a shortcut for the command `list` with `l`."},{"lineNumber":1292,"author":{"gitID":"shanmu9898"},"content":".. Other incorrect delete commands to try: `shortcut list add` responds with error message."},{"lineNumber":1293,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1294,"author":{"gitID":"shanmu9898"},"content":"\u003d\u003d\u003d Delete shortcuts"},{"lineNumber":1295,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1296,"author":{"gitID":"shanmu9898"},"content":". Deletes shortcuts for the required command."},{"lineNumber":1297,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1298,"author":{"gitID":"shanmu9898"},"content":".. Prerequisites: That shortcut should exist"},{"lineNumber":1299,"author":{"gitID":"shanmu9898"},"content":".. Test case: `delete_shortcut list l` +"},{"lineNumber":1300,"author":{"gitID":"shanmu9898"},"content":"   Expected: Should delete the shortcut for the command `list` with `l`."},{"lineNumber":1301,"author":{"gitID":"shanmu9898"},"content":".. Other incorrect delete commands to try: `delete_shortcut list add` responds with error message because the command is not present."},{"lineNumber":1302,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"Sisyphus25":252,"-":822,"shanmu9898":235}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalContacts;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPersonCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"            FXCollections.observableList(getTypicalContacts());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            assertEquals(Integer.toString(i + 1), actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        assertPersonCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":6,"randypx":2,"-":50}},{"path":"src/test/java/seedu/address/ui/TaskCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_EXPIRED;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"content":"//@@author Sisyphus25-reused"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"//Reuse with modification from PersonCardTest"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class TaskCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Task task \u003d TYPICAL_TASK_2;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard taskCard \u003d new TaskCard(task, 0);"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        // same task, same index -\u003e returns true"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard copy \u003d new TaskCard(task, 0);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(taskCard.equals(copy));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(taskCard.equals(taskCard));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(null));"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(0));"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        // different task, same index -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Task differentTask \u003d TYPICAL_TASK_1;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(new TaskCard(differentTask, 0)));"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        Task expiredTask \u003d TYPICAL_TASK_EXPIRED;"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard expiredTaskCard \u003d new TaskCard(TYPICAL_TASK_EXPIRED, 1);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        // same task, different index -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(taskCard.equals(expiredTaskCard));"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":41,"-":2}},{"path":"src/test/java/seedu/address/ui/AppointmentCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"content":"//@@author Sisyphus25-reused"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"//Reuse with modification from PersonCardTest"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointment \u003d TYPICAL_APPOINTMENT_2;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard appointmentCard \u003d new AppointmentCard(appointment, 0);"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        // same appointment, same index -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard copy \u003d new AppointmentCard(appointment, 0);"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointmentCard.equals(copy));"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointmentCard.equals(appointmentCard));"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(null));"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(0));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        // different appointment, same index -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(new AppointmentCard(TYPICAL_APPOINTMENT_3, 0)));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        // same appointment, different index -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointmentCard.equals(new AppointmentCard(appointment, 1)));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":37,"-":3}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Integer.toString(expectedId), personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":71}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static void assertPersonCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedCard.getTagsNames(), actualCard.getTagsNames());"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        expectedCard.getTagsNames().forEach(tag -\u003e"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * color."},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cString\u003e expectedTagsNames \u003d expectedPerson.getTags().stream()"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTagsNames, actualCard.getTagsNames());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        expectedPerson.getTags().forEach(tag -\u003e"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, tag.tagColorStyle),"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"                        actualCard.getTagStyleClasses(tag.tagName))"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":26,"-":69}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"            + \" \"  + ListCommand.TYPE_CONTACT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        String thirdCommand \u003d \"list contacts\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"        String thirdCommand \u003d \"list contact\";"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":4,"-":154,"shanmu9898":1}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        String defaultConfigAsString \u003d \"App title : TeachConnect\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"shanmu9898":1}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"        assertNotNull(AppUtil.getImage(\"/images/Tc_logo.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"shanmu9898":1}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList("},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            new XmlAdaptedTag(\"classmates\", \"teal\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":145}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD + \" \" + ListCommand.TYPE_CONTACT;"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(listCommand,"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"                ListCommand.MESSAGE_SUCCESS + ListCommand.TYPE_CONTACT, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":3,"-":122}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        Index index \u003d INDEX_FIRST;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased(),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"        index \u003d INDEX_FIRST;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":214,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":267}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":27}},{"path":"src/test/java/seedu/address/logic/parser/ChangeThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Test scope: similar to ToggleCalendarViewCommandParser Test"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private ChangeThemeCommandParser parser \u003d new ChangeThemeCommandParser();"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsToggleCalendarViewCommand() {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"dark \", new ChangeThemeCommand(\"dark\"));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"not a theme\","},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"x\","},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_NAME_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"                Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_SECOND;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_FIRST;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"        Index targetIndex \u003d INDEX_THIRD;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":198}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private ImportCommandParser importCommandParser \u003d new ImportCommandParser();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(null);"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(\" \");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void parse_moreThanOneBlockOfString_throwsParseException() throws ParseException {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        importCommandParser.parse(\"invalid two strings\");"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"./src/test/data/XmlAddressBookStorgageTest/importsamplefile.xml\";"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand expectedCommand \u003d new ImportCommand(input);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(importCommandParser, input, expectedCommand);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":6,"shanmu9898":44}},{"path":"src/test/java/seedu/address/logic/parser/SetAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private SetAppointmentCommandParser parser \u003d new SetAppointmentCommandParser();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        // whitespace only preamble"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(expectedAppointment));"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        // no personToMeet"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand((expectedAppointment)));"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        // missing title prefix"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        // missing start time prefix"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + VALID_START_TIME + END_TIME_DESC,"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        // missing start time prefix"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + START_TIME_DESC + VALID_END_TIME,"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        // all prefixes missing"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + VALID_START_TIME + VALID_END_TIME,"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        // invalid title"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        // invalid start time"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + INVALID_START_TIME_DESC + END_TIME_DESC,"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"                Time.MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        // invalid end time"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + START_TIME_DESC + INVALID_END_TIME_DESC,"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"                Time.MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":71,"randypx":1,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.ListCommand.COMMAND_WORD;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_APPOINTMENT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_CONTACT;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_SHORTCUT;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandHelper.NAME_NEEDED;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandHelper.PATH_NEEDED;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandHelper.RANGE_ALL;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandHelper.TAG_NEEDED;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.ExportCommandHelper.TYPE_NEEDED;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST), command);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"        assertTrue(parser.parseCommand(COMMAND_WORD + \" \" + TYPE_CONTACT) instanceof ListCommand);"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        assertTrue(parser.parseCommand(COMMAND_WORD + \" \" + TYPE_APPOINTMENT) instanceof ListCommand);"},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(parser.parseCommand(COMMAND_WORD + \" \" + TYPE_SHORTCUT) instanceof ListCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":151,"author":{"gitID":"Sisyphus25"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST), command);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_export() throws Exception {"},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand command \u003d (ExportCommand) parser.parseCommand("},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":"                ExportCommand.COMMAND_WORD + \" \" + PREFIX_NAME + NAME_NEEDED + \" \" + PREFIX_RANGE + RANGE_ALL"},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":"                        + \" \" + PREFIX_TAG + TAG_NEEDED + \" \" + PREFIX_PATH + PATH_NEEDED + \" \" + PREFIX_TYPE"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"                        + TYPE_NEEDED);"},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"        assertEquals (new ExportCommand (\"all\", new Tag (\"friends\"), \"./data\","},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":"                \"name\", \"xml\"), command);"},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_import() throws Exception {"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d (ImportCommand) parser.parseCommand("},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"                ImportCommand.COMMAND_WORD + \" \""},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":"                        + \"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\");"},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ImportCommand(\"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\"),"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"                command);"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_shortcut() throws Exception {"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand command \u003d (ShortcutCommand) parser.parseCommand("},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"                ShortcutCommand.COMMAND_WORD + \" \" + \"list\" + \" \" + \"l\");"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ShortcutCommand(\"list\", \"l\"), command);"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":"    public void parseCommand_deleteShortcut() throws Exception {"},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand command \u003d (DeleteShortcutCommand) parser.parseCommand("},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"                DeleteShortcutCommand.COMMAND_WORD + \" \" + \"list\" + \" \" + \"l\");"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new DeleteShortcutCommand(\"list\", \"l\"), command);"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_toggleCalendarView() throws Exception {"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"        ToggleCalendarViewCommand command \u003d"},{"lineNumber":221,"author":{"gitID":"Sisyphus25"},"content":"                (ToggleCalendarViewCommand) parser.parseCommand(ToggleCalendarViewCommand.COMMAND_WORD + \" \" + \"m\");"},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new ToggleCalendarViewCommand(\u0027m\u0027), command);"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_setAppointment() throws Exception {"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d"},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"                (SetAppointmentCommand) parser.parseCommand(SetAppointmentCommand.COMMAND_WORD"},{"lineNumber":229,"author":{"gitID":"Sisyphus25"},"content":"                + TITLE_DESC + START_TIME_DESC + END_TIME_DESC);"},{"lineNumber":230,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointment \u003d new AppointmentBuilder(VALID_TITLE, VALID_START_TIME, VALID_END_TIME).build();"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SetAppointmentCommand(appointment), command);"},{"lineNumber":232,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":234,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_setTask() throws Exception {"},{"lineNumber":236,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand command \u003d"},{"lineNumber":237,"author":{"gitID":"Sisyphus25"},"content":"                (SetTaskCommand) parser.parseCommand(SetTaskCommand.COMMAND_WORD + TITLE_DESC + END_TIME_DESC);"},{"lineNumber":238,"author":{"gitID":"Sisyphus25"},"content":"        Task task \u003d new Task(new Title(VALID_TITLE), new Time(VALID_END_TIME, false));"},{"lineNumber":239,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new SetTaskCommand(task), command);"},{"lineNumber":240,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":242,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":243,"author":{"gitID":"Sisyphus25"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":244,"author":{"gitID":"Sisyphus25"},"content":"        ChangeThemeCommand command \u003d"},{"lineNumber":245,"author":{"gitID":"Sisyphus25"},"content":"                (ChangeThemeCommand) parser.parseCommand(ChangeThemeCommand.COMMAND_WORD + \" \" + \"dark\");"},{"lineNumber":246,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(new ChangeThemeCommand(\"dark\"), command);"},{"lineNumber":247,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":249,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":251,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author LimShiMinJonathan"},{"lineNumber":252,"author":{"gitID":"LimShiMinJonathan"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":254,"author":{"gitID":"LimShiMinJonathan"},"content":"        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD);"},{"lineNumber":255,"author":{"gitID":"LimShiMinJonathan"},"content":"        assertTrue(command instanceof SortCommand);"},{"lineNumber":256,"author":{"gitID":"LimShiMinJonathan"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"},{"lineNumber":257,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":258,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author"},{"lineNumber":260,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":50,"randypx":5,"LimShiMinJonathan":9,"-":147,"shanmu9898":49}},{"path":"src/test/java/seedu/address/logic/parser/ListCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ListCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private ListCommandParser parser \u003d new ListCommandParser();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsListCommand() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"contacts\", new ListCommand(ListCommand.TYPE_CONTACT));"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"students\", new ListCommand(ListCommand.TYPE_STUDENT));"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"tasks\", new ListCommand(ListCommand.TYPE_TASK));"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"appointments\", new ListCommand(ListCommand.TYPE_APPOINTMENT));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"shortcuts\", new ListCommand(ListCommand.TYPE_SHORTCUT));"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"classes\", new ListCommand(ListCommand.TYPE_CLASS));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"ffffffd\","},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"event\","},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"events appointments\","},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":29,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/SetTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TITLE_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TITLE_DESC;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private SetTaskCommandParser parser \u003d new SetTaskCommandParser();"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        Task expectedTask \u003d new Task(new Title(VALID_TITLE), new Time(VALID_END_TIME, false));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        // whitespace only preamble"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC + END_TIME_DESC,"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(expectedTask));"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetTaskCommand.MESSAGE_USAGE);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        // missing title prefix"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + END_TIME_DESC,"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        // missing end time prefix"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + VALID_END_TIME,"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        // all prefixes missing"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, VALID_TITLE + VALID_END_TIME,"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                expectedMessage);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        // invalid title"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, INVALID_TITLE_DESC + END_TIME_DESC, Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        // invalid end time"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, TITLE_DESC + INVALID_END_TIME_DESC, Time.MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":49,"randypx":1,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_null_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((Optional\u003cString\u003e) null));"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_invalidValue_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTitle(\" \"));"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTitle(Optional.of(\"  \")));"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(ParserUtil.parseTitle(Optional.empty()).isPresent());"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"    public void parseTitle_validValue_returnsTitle() throws Exception {"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        String validTitle \u003d \"Hanging out\";"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        Title expectedTitle \u003d new Title(validTitle);"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTitle, ParserUtil.parseTitle(validTitle));"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Optional.of(expectedTitle), ParserUtil.parseTitle(Optional.of(validTitle)));"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_null_throwsNullPointerException() {"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((Optional\u003cString\u003e) null));"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(ParserUtil.parseTime(Optional.empty()).isPresent());"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"    public void parseEventTime_validValue_returnsEventTime() throws Exception {"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        String validTime \u003d \"20/10/2018 10:00\";"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        Time expectedTime \u003d new Time(validTime, false);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(validTime));"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseTime(Optional.of(validTime)));"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":51,"randypx":1,"-":243}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"                DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"randypx":2,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/DeleteShortcutCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private DeleteShortcutCommandParser deleteShortcutCommandParser \u003d new DeleteShortcutCommandParser();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        deleteShortcutCommandParser.parse(null);"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        deleteShortcutCommandParser.parse(\" \");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        String inputCommandWord \u003d \"list\";"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        String inputShortcutWord \u003d \"l\";"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"list l\";"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand expectedCommand \u003d new DeleteShortcutCommand(inputCommandWord, inputShortcutWord);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(deleteShortcutCommandParser, input, expectedCommand);"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":42}},{"path":"src/test/java/seedu/address/logic/parser/ToggleCalendarViewParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewParserTest {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private ToggleCalendarViewParser parser \u003d new ToggleCalendarViewParser();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_validArgs_returnsToggleCalendarViewCommand() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        assertParseSuccess(parser, \"d\", new ToggleCalendarViewCommand(\u0027d\u0027));"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"day\","},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertParseFailure(parser, \"x\","},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    private ExportCommandParser exportCommandParser \u003d new ExportCommandParser();"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        exportCommandParser.parse(null);"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public void parse_differentType_invalidFormatCommandResult() throws ParseException {"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        Tag testingTag \u003d new Tag(\"shouldnotbethistag\");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        String testingInput \u003d \" n/name r/all p/./data te/random\";"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand expectedCommand \u003d new ExportCommand(\"all\", testingTag, \"./data\", \"name\", \"normal\");"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        assertParseFailure(exportCommandParser, testingInput, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"                ExportCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        Tag testingTag \u003d new Tag(\"shouldnotbethistag\");"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        String testingInput \u003d \" n/name r/all p/./data te/xml\";"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand expectedCommand \u003d new ExportCommand(\"all\", testingTag, \"./data\", \"name\", \"xml\");"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(exportCommandParser, testingInput, expectedCommand);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    public void parse_allfieldsPresent_success() {"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        Tag testingTag \u003d new Tag(\"friends\");"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        String testingInput \u003d \" n/name r/all t/friends p/./data te/xml\";"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand expectedCommand \u003d new ExportCommand(\"all\", testingTag, \"./data\", \"name\", \"xml\");"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(exportCommandParser, testingInput, expectedCommand);"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":7,"shanmu9898":50}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_STUDENT;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.AddCommandParser.MESSAGE_INVALID_TYPE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        // student preamble with whitespaces"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_STUDENT + PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_STUDENT, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"        // invalid type"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, MESSAGE_INVALID_TYPE);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":9,"-":142}},{"path":"src/test/java/seedu/address/logic/parser/ShortcutCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutCommandParser shortcutCommandParser \u003d new ShortcutCommandParser();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public void parse_nullString_throwsNullPointerException() throws ParseException {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        shortcutCommandParser.parse(null);"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public void parse_emptyString_throwsParseException() throws ParseException {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        shortcutCommandParser.parse(\" \");"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void parse_validString_success() {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        String inputCommandWord \u003d \"list\";"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        String inputShortcutWord \u003d \"l\";"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        String input \u003d \"list l\";"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand expectedCommand \u003d new ShortcutCommand(inputCommandWord, inputShortcutWord);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        assertParseSuccess(shortcutCommandParser, input, expectedCommand);"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":42}},{"path":"src/test/java/seedu/address/logic/parser/FormCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CLASS_MATH_DESC;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CLASS_PHYS_DESC;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALD_END_DATE_DESC;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLASS_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_SUBJECT_MATH;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_SUBJECT_PHYS;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASS_MATH;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_MATH;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"import seedu.address.logic.commands.FormCommand;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":""},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"public class FormCommandParserTest {"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    private FormCommandParser parser \u003d new FormCommandParser();"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":""},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        Subject expectedSubject \u003d new Subject(VALID_SUBJECT_MATH);"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        Name expectedClassName \u003d new Name(VALID_CLASS_MATH);"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        Time expectedStartDate \u003d new Time(VALID_START_DATE, true);"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        Time expectedEndDate \u003d new Time(VALID_END_DATE, true);"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        List\u003cIndex\u003e expectedIndex \u003d"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"                new ArrayList\u003c\u003e(Arrays.asList(Index.fromOneBased(1), Index.fromOneBased(2)));"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"        // subject preamble with whitespace"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_SUBJECT_MATH + \"  \" + CLASS_MATH_DESC"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"                + \"  \" + START_DATE_DESC + \"  \" + END_DATE_DESC"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"                + \"  \" + PREFIX_INDEX + \"1,2   \", new FormCommand(expectedClassName, expectedSubject,"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"                expectedStartDate, expectedEndDate, expectedIndex));"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":""},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"        // multiple names - last name accepted"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_SUBJECT_MATH + CLASS_PHYS_DESC + CLASS_MATH_DESC"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                        + START_DATE_DESC + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\","},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"                new FormCommand(expectedClassName, expectedSubject, expectedStartDate, expectedEndDate,"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"                        expectedIndex));"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":""},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        // multiple start dates - last start date accepted"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"                + \" \" + PREFIX_START_TIME + VALID_DATE + START_DATE_DESC"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", new FormCommand(expectedClassName,"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"                expectedSubject, expectedStartDate, expectedEndDate, expectedIndex));"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":""},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        // multiple end date - last end date accepted"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"                + START_DATE_DESC + \" \" + PREFIX_END_TIME + VALID_DATE"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", new FormCommand(expectedClassName,"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                expectedSubject, expectedStartDate, expectedEndDate, expectedIndex));"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":""},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        // multiple index - last index accepted"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"        assertParseSuccess(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"                        + START_DATE_DESC + \" \" + PREFIX_END_TIME + VALID_DATE"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"                        + END_DATE_DESC + \" \" + PREFIX_INDEX + \"3,4\" + \" \" + PREFIX_INDEX + \"1,2\","},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"                new FormCommand(expectedClassName, expectedSubject, expectedStartDate, expectedEndDate,"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"                        expectedIndex));"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":""},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FormCommand.MESSAGE_USAGE);"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":""},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        // missing name prefix"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + VALID_CLASS_MATH + START_DATE_DESC"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", expectedMessage);"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":""},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        // missing start date prefix"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + VALID_START_DATE"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", expectedMessage);"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":""},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        // missing end date prefix"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + START_DATE_DESC"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"                + VALID_END_DATE + \" \" + PREFIX_INDEX + \"1,2\", expectedMessage);"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":""},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"        // missing index prefix"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + START_DATE_DESC"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" 1,2\", expectedMessage);"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":""},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"        // all prefixes missing"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, VALID_SUBJECT_MATH + VALID_CLASS_MATH + VALID_START_DATE"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"                + VALID_END_DATE + \" 1,2\", expectedMessage);"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"        // invalid name"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + INVALID_CLASS_NAME_DESC"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"                + START_DATE_DESC + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":""},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        // invalid time"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + INVALID_START_DATE_DESC"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\", Time.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":""},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        // invalid index"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + START_DATE_DESC"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"                + END_DATE_DESC + \" \" + PREFIX_INDEX + \"a,b\", MESSAGE_INVALID_INDEX);"},{"lineNumber":120,"author":{"gitID":"randypx"},"content":""},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"        // invalid timeline"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + CLASS_MATH_DESC + \" \" + PREFIX_START_TIME"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"                        + VALID_END_DATE + \" \" + PREFIX_END_TIME + VALID_END_DATE + \" \" + PREFIX_INDEX + \"1,2\","},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"                Time.MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":""},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_MATH + INVALID_CLASS_NAME_DESC"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"                        + START_DATE_DESC + INVALD_END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\","},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":""},{"lineNumber":132,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"    public void parse_multiplePreamble_failure() {"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"        assertParseFailure(parser, PREAMBLE_SUBJECT_PHYS + PREAMBLE_SUBJECT_MATH"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"                        + VALID_CLASS_MATH + START_DATE_DESC + END_DATE_DESC + \" \" + PREFIX_INDEX + \"1,2\","},{"lineNumber":136,"author":{"gitID":"randypx"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FormCommand.MESSAGE_USAGE));"},{"lineNumber":137,"author":{"gitID":"randypx"},"content":""},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"randypx":123,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_validIndexDeleteAppointment_success() throws Exception {"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteAppointmentCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"                String.format(DeleteCommand.MESSAGE_DELETE_APPOINTMENT_SUCCESS, appointmentToDelete);"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        expectedModel.deleteAppointment(appointmentToDelete);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(Model.LIST_TYPE_APPOINTMENT);"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(deleteAppointmentCommand, model, expectedMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_validIndexDeleteTask_success() throws Exception {"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"                String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(Model.LIST_TYPE_TASK);"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_invalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex2 \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteAppointmentCommand \u003d prepareCommand(outOfBoundIndex2);"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(Model.LIST_TYPE_TASK);"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(Model.LIST_TYPE_APPOINTMENT);"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandFailure(deleteAppointmentCommand,"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"                model, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_SECOND);"},{"lineNumber":186,"author":{"gitID":"Sisyphus25"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":195,"author":{"gitID":"Sisyphus25"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":203,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":209,"author":{"gitID":"Sisyphus25"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":67,"-":176}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.StudentBuilder;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandTest {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    private static final String INVALID_FILE_LOCATION \u003d \"./data/samplefile.xml\";"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    private static final String VALID_FILE_LOCATION \u003d"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"            \"src/test/data/XmlAddressBookStorageTest/importsamplefile.xml\";"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private static final String VALID_FILE_LOCATION2 \u003d"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"            \"src/test/data/XmlAddressBookStorageTest/importClassAndStudentSample.xml\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullString_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        new ImportCommand(null);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public void execute_importFailure_throwsException() {"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(INVALID_FILE_LOCATION);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        assertCommandFailure(command, model, String.format(command.MESSAGE_INVALID_FILE));"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    public void execute_acceptedSuccess_successfulImport() {"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.executeUndoableCommand();"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(VALID_FILE_LOCATION);"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(command, model, String.format (command.MESSAGE_SUCCESS, 7, 0, 0, 0, 0, 0), model);"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"    public void execute_duplicateClassesAndStudents_successfulImport() throws DuplicatePersonException {"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        Student studentSample \u003d new StudentBuilder().withName(\"Mary Jane8\").withPhone(\"98765432\")"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"                .withEmail(\"MJ@example.com\").withAddress(\"478, Pasir Ris, #03-12\").withTags(\"AStar\").build();"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        model.addStudent(studentSample);"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(VALID_FILE_LOCATION2);"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(command, model, String.format (command.MESSAGE_SUCCESS, 0, 0, 7, 0, 2, 0), model);"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    public void execute_acceptedSuccess_successfulClassAndStudentImport() {"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        clearCommand.executeUndoableCommand();"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand command \u003d prepareCommand(VALID_FILE_LOCATION2);"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(command, model, String.format(command.MESSAGE_SUCCESS, 0, 0, 7, 0, 2, 0), model);"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"    public void equals() {"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        final ImportCommand comparableCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand comparedToCommand \u003d new ImportCommand(VALID_FILE_LOCATION);"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparedToCommand));"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparableCommand));"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(null));"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ClearCommand()));"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"        // different range -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ImportCommand(\"./data/sampleimportfile.xml\")));"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"     * A method to prepare the Import command based on the path given"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"    private ImportCommand prepareCommand(String path) {"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"        ImportCommand importCommand \u003d new ImportCommand(path);"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"        importCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"        return importCommand;"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":116}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"LimShiMinJonathan"},"content":"//@@author LimShiMinJonathan"},{"lineNumber":18,"author":{"gitID":"LimShiMinJonathan"},"content":"public class SortCommandTest {"},{"lineNumber":19,"author":{"gitID":"LimShiMinJonathan"},"content":"    private Model model;"},{"lineNumber":20,"author":{"gitID":"LimShiMinJonathan"},"content":"    private SortCommand sortCommand;"},{"lineNumber":21,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":22,"author":{"gitID":"LimShiMinJonathan"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void setUp() throws DuplicatePersonException {"},{"lineNumber":24,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":25,"author":{"gitID":"LimShiMinJonathan"},"content":"        AddressBook unsortedAddressBook \u003d new AddressBook();"},{"lineNumber":26,"author":{"gitID":"LimShiMinJonathan"},"content":"        unsortedAddressBook.setPersons(TypicalPersons.getUnsortedPersons());"},{"lineNumber":27,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":28,"author":{"gitID":"LimShiMinJonathan"},"content":"        model \u003d new ModelManager(unsortedAddressBook, new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":30,"author":{"gitID":"LimShiMinJonathan"},"content":"        sortCommand \u003d new SortCommand();"},{"lineNumber":31,"author":{"gitID":"LimShiMinJonathan"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":32,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":33,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":35,"author":{"gitID":"LimShiMinJonathan"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void executeSort() throws DuplicatePersonException {"},{"lineNumber":37,"author":{"gitID":"LimShiMinJonathan"},"content":"        AddressBook sortedAddressBook \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"LimShiMinJonathan"},"content":"        sortedAddressBook.setPersons(TypicalPersons.getTypicalPersons());"},{"lineNumber":39,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":40,"author":{"gitID":"LimShiMinJonathan"},"content":"        Model expectedModel;"},{"lineNumber":41,"author":{"gitID":"LimShiMinJonathan"},"content":"        expectedModel \u003d new ModelManager(sortedAddressBook, new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":43,"author":{"gitID":"LimShiMinJonathan"},"content":"        CommandResult result \u003d sortCommand.execute();"},{"lineNumber":44,"author":{"gitID":"LimShiMinJonathan"},"content":"        assertEquals(sortCommand.MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"LimShiMinJonathan"},"content":"        assertEquals(expectedModel.getFilteredPersonList(), model.getFilteredPersonList());"},{"lineNumber":46,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":48,"author":{"gitID":"LimShiMinJonathan"},"content":"}"},{"lineNumber":49,"author":{"gitID":"LimShiMinJonathan"},"content":"//@@author"}],"authorContributionMap":{"LimShiMinJonathan":33,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ListCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_APPOINTMENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_CONTACT;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_SHORTCUT;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_STUDENT;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.ListCommand.TYPE_TASK;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_personListIsNotFiltered_showsSameList() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(TYPE_CONTACT);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, MESSAGE_SUCCESS + TYPE_CONTACT, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_personListIsFiltered_showsEverything() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand(TYPE_CONTACT);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, MESSAGE_SUCCESS + TYPE_CONTACT, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    public void execute_listStudent_success() {"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        listCommand \u003d new ListCommand(TYPE_STUDENT);"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ONLY_STUDENTS);"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        assertCommandSuccess(listCommand, model, MESSAGE_SUCCESS + TYPE_STUDENT, expectedModel);"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_listEvent_success() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        assertListEventSuccess(TYPE_APPOINTMENT);"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        assertListEventSuccess(TYPE_TASK);"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"     * assert if execution of listing of event is successful or not"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"     * @throws CommandException"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    private void assertListEventSuccess(String eventType) throws CommandException {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        listCommand \u003d new ListCommand(eventType);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d listCommand.execute();"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(MESSAGE_SUCCESS + eventType, result.feedbackToUser);"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"    public void execute_listShortcut_success() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        listCommand \u003d new ListCommand(TYPE_SHORTCUT);"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        CommandResult result \u003d listCommand.execute();"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(MESSAGE_SUCCESS + TYPE_SHORTCUT, result.feedbackToUser);"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"Sisyphus25":34,"randypx":12,"-":42,"shanmu9898":12}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, new EditPersonDescriptor());"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND, descriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":207,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST, descriptor);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_SECOND);"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased()), personToEdit);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST, DESC_AMY);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, copyDescriptor);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"-":237}},{"path":"src/test/java/seedu/address/logic/commands/ToggleCalendarViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ToggleCalendarViewCommand.MESSAGE_VIEW_TOGGLE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewCommandTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        Character viewMode \u003d \u0027d\u0027;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d new ToggleCalendarViewCommand(viewMode).execute();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(MESSAGE_VIEW_TOGGLE_SUCCESS, result.feedbackToUser);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleCalendarViewEvent);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":4,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    public static final String VALID_TAG_STUDENT \u003d \"student\";"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public static final String VALID_TAG_NOTUSED \u003d \"notused\";"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_TITLE \u003d \"Consultation\";"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_START_TIME \u003d \"10/10/2018 10:00\";"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public static final String VALID_END_TIME \u003d \"10/10/2018 12:00\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    public static final String TAG_DESC_STUDENT \u003d \" \" + PREFIX_TAG + VALID_TAG_STUDENT;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    public static final String VALID_CLASS_MATH \u003d \"Math101\";"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    public static final String VALID_CLASS_PHYSICS \u003d \"Physics\";"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"    public static final String VALID_SUBJECT_MATH \u003d \"Mathematics\";"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    public static final String VALID_SUBJECT_PHYS \u003d \"Physics\";"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"    public static final String VALID_START_DATE \u003d \"10/10/2018\";"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"    public static final String VALID_END_DATE \u003d \"10/10/2019\";"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    public static final String VALID_DATE \u003d \"28/12/2018\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"    public static final String TITLE_DESC \u003d \" \" + PREFIX_TITLE + VALID_TITLE;"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    public static final String START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME;"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    public static final String END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME;"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"  \"; // spaces only"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"911afddf\"; // not a time stamp"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    public static final String INVALID_END_TIME_DESC \u003d"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"            \" \" + PREFIX_END_TIME + \"May 20, 2018 10am\"; // not in correct format"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    public static final String CLASS_MATH_DESC \u003d \" \" + PREFIX_NAME + VALID_CLASS_MATH;"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    public static final String CLASS_PHYS_DESC \u003d \" \" + PREFIX_NAME + VALID_CLASS_PHYSICS;"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"    public static final String START_DATE_DESC \u003d \" \" + PREFIX_START_TIME + VALID_START_DATE;"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"    public static final String END_DATE_DESC \u003d \" \" + PREFIX_END_TIME + VALID_END_DATE;"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":""},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"    public static final String INVALID_CLASS_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Cl@s$\";"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_TIME + \"10-10-2018\";"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"    public static final String INVALD_END_DATE_DESC \u003d \" \" + PREFIX_END_TIME + \"10 Oct 2019\";"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    public static final String PREAMBLE_STUDENT \u003d \" student \";"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"    public static final String PREAMBLE_SUBJECT_MATH \u003d \" Mathematics\";"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"    public static final String PREAMBLE_SUBJECT_PHYS \u003d \" Physics\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":137,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"randypx":21,"-":156,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/SetAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.APPOINTMENT_WITHOUT_PERSON_1;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.APPOINTMENT_WITHOUT_PERSON_3;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandTest {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        new SetAppointmentCommand(null, null);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_invalidPersonToMeetIndex_failure() {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d getSetAppointmentCommand(TYPICAL_APPOINTMENT_3, outOfBoundsIndex, model);"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            command.execute();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        } catch (CommandException ce) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            assertEquals(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX, ce.getMessage());"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentWithoutPersonToMeetAccepted_addSuccessful() throws Exception {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"                getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_3, null, model).execute();"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format("},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                SetAppointmentCommand.MESSAGE_SUCCESS, APPOINTMENT_WITHOUT_PERSON_3), commandResult.feedbackToUser);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentWithPersonToMeetAccepted_addSuccessful() throws Exception {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"                getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_3, INDEX_THIRD, model).execute();"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format("},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"                SetAppointmentCommand.MESSAGE_SUCCESS, TYPICAL_APPOINTMENT_3), commandResult.feedbackToUser);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_duplicateAppointmentsameIndex_throwsCommandException() throws Exception {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expectMessage(SetAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        getSetAppointmentCommand(APPOINTMENT_WITHOUT_PERSON_1, INDEX_FIRST, model).execute();"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment1 \u003d"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_1);"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment2 \u003d"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_2);"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addAppointment1.equals(addAppointment1));"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        // same values -\u003e returns true"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand addAppointment1Copy \u003d"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"                new SetAppointmentCommand(TYPICAL_APPOINTMENT_1);"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addAppointment1.equals(addAppointment1Copy));"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(1));"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(null));"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        // different appointments -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addAppointment1.equals(addAppointment2));"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"     * Generates a new SetAppointmentCommand with the details of the given appointment."},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"    private SetAppointmentCommand getSetAppointmentCommand(Appointment baseAppointment, Index index, Model model) {"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        SetAppointmentCommand command \u003d new SetAppointmentCommand(baseAppointment, index);"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        return command;"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":114,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/SetTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStub;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStubAcceptingTaskAdded;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStubThrowingDuplicateEventException;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandTest {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        new SetTaskCommand(null);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult commandResult \u003d getSetTaskCommand(TYPICAL_TASK_2, modelStub).execute();"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(String.format(SetTaskCommand.MESSAGE_SUCCESS, TYPICAL_TASK_2), commandResult.feedbackToUser);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Arrays.asList(TYPICAL_TASK_2), modelStub.tasksAdded);"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_duplicateEvent_throwsCommandException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateEventException();"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        thrown.expectMessage(SetTaskCommand.MESSAGE_DUPLICATE_TASK);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        getSetTaskCommand(TYPICAL_TASK_1, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addTask1 \u003d"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_1);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addTask2 \u003d"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_2);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        // same object -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addTask1.equals(addTask1));"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        // same values -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand addAppointment1Copy \u003d"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                new SetTaskCommand(TYPICAL_TASK_1);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(addTask1.equals(addAppointment1Copy));"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        // different types -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(1));"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(null));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        // different tasks -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(addTask1.equals(addTask2));"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"     * Generates a new SetTaskCommand with the details of the given task."},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    private SetTaskCommand getSetTaskCommand(Task task, Model model) {"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        SetTaskCommand command \u003d new SetTaskCommand(task);"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":74,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"                String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":1,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/DeleteShortcutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandTest {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    private final String validtestingCommandWord \u003d \"list\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String validtestingShortcutWord \u003d \"l\";"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    private final String invalidtestingCommandWord \u003d \"king\";"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        new DeleteShortcutCommand(null, validtestingShortcutWord);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        new DeleteShortcutCommand(validtestingCommandWord, null);"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_invalidCommandWord_throwsCommandException() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"                                                                  invalidtestingCommandWord,"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"                                                                  model).executeUndoableCommand();"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_inputNotPresent_throwsCommandException() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"                                                                  validtestingCommandWord,"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"                                                                  model).executeUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_validInput_commandSuccess()"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"                                        throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validtestingShortcutWord, validtestingCommandWord);"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"        model.addCommandShortcut(shortcutDoubles);"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"                                                         validtestingCommandWord,"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"                                                         model),"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"                                                         model,"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"                                                         String.format(DeleteShortcutCommand"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"                                                                       .MESSAGE_DELETE_SHORTCUT_SUCCESS),"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"                                                         expectedModel);"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteFirstCommand \u003d getDeleteShortcutForCommand(validtestingShortcutWord,"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"                                                                               validtestingCommandWord,"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"                                                                               model);"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteSecondCommand \u003d getDeleteShortcutForCommand(\"c\","},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"                                                                                \"clear\","},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"                                                                                 model);"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand deleteFirstCommandCopy \u003d getDeleteShortcutForCommand(\"l\","},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"                                                                           \"list\","},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"                                                                            model);"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"        // different person -\u003e returns false"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"    private DeleteShortcutCommand getDeleteShortcutForCommand(String shortcutWord, String commandWord, Model model) {"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"        DeleteShortcutCommand command \u003d new DeleteShortcutCommand(commandWord, shortcutWord);"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"        return command;"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":118}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.MESSAGE_CHANGE_THEME_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void execute_help_success() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        String theme \u003d \"dark\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        CommandResult result \u003d new ChangeThemeCommand(theme).execute();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(MESSAGE_CHANGE_THEME_SUCCESS, result.feedbackToUser);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ThemeChangeEvent);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":22,"-":4,"shanmu9898":1}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":65}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_THIRD);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        assertExecutionSuccess(INDEX_FIRST);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        showPersonAtIndex(model, INDEX_FIRST);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":12,"-":129}},{"path":"src/test/java/seedu/address/logic/commands/ShortcutCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandTest {"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    private Model expectedModel;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String validTestingCommandWord \u003d \"list\";"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    private final String validTestingShortcutWord \u003d \"l\";"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    private final String invalidTestingCommandWord \u003d \"king\";"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutCommand(null, validTestingShortcutWord);"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutCommand(validTestingCommandWord, null);"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_invalidCommandWord_throwsCommandException() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"        thrown.expectMessage(ShortcutCommand.MESSAGE_NO_COMMAND_TO_MAP);"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"                                                               invalidTestingCommandWord,"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"                                                               model).executeUndoableCommand();"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_shortcutWordPresent_throwsCommandException()"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException, CommandException {"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validTestingShortcutWord, validTestingCommandWord);"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        model.addCommandShortcut(shortcutDoubles);"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        CommandResult commandResult \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"                                                               validTestingCommandWord,"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"                                                               model).executeUndoableCommand();"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(commandResult.feedbackToUser, String.format(ShortcutCommand.MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"    public void executeUndoCommand_validInput_commandSuccess()"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"                             throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles shortcutDoubles \u003d new ShortcutDoubles(validTestingShortcutWord, validTestingCommandWord);"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"        expectedModel.addCommandShortcut(shortcutDoubles);"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"                                                      validTestingCommandWord,"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"                                                      model), model,"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"                                                       String.format(ShortcutCommand.MESSAGE_SUCCESS), expectedModel);"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutCommand getAddShortcutForCommand(String shortcutWord, String commandWord, Model model) {"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand command \u003d new ShortcutCommand(commandWord, shortcutWord);"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteFirstCommand \u003d getAddShortcutForCommand(validTestingShortcutWord,"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"                                                                      validTestingCommandWord,"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"                                                                      model);"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteSecondCommand \u003d getAddShortcutForCommand(\"c\","},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"                                                                       \"clear\","},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"                                                                        model);"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCommand deleteFirstCommandCopy \u003d getAddShortcutForCommand(\"l\","},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"                                                                          \"list\","},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"                                                                           model);"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"        // different person -\u003e returns false"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":123}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import junit.framework.TestCase;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithNoToggleListEvent(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"        model.changeCurrentActiveListType(\"appointments\");"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithToggleListEvent(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithNoToggleListEvent(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"        model.changeCurrentActiveListType(\"appointments\");"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        assertCommandSuccessWithToggleListEvent(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    private void assertCommandSuccessWithNoToggleListEvent("},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"            FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"     *     - a {@code ToggleListEvent} is called"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    private void assertCommandSuccessWithToggleListEvent("},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"            FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ToggleListEvent);"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":18,"-":109,"shanmu9898":2}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.modelstub.ModelStub;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_ADD_PERSON_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"        public void addPerson(Person person) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":2,"-":122}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_NAME \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_COLOR_STYLE \u003d \"notacolor\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG_NAME, INVALID_TAG_COLOR_STYLE));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(person.equals(person));"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedPerson personCopy \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(person.equals(personCopy));"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(person.equals(1));"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedPerson anotherPerson \u003d new XmlAdaptedPerson(ALICE);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(person.equals(anotherPerson));"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":23,"-":109}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.storage.XmlAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_2;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TITLE \u003d \"  \";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TIME \u003d \"not a time stamp\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_validTaskDetails_returnsPerson() throws Exception {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(TYPICAL_TASK_1, task.toModelType());"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(INVALID_TITLE, VALID_END_TIME);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Title.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTime_throwsIllegalValueException() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(VALID_TITLE, INVALID_TIME);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_TIME_CONSTRAINTS;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, task::toModelType);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(null, VALID_END_TIME);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTime_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedTask(VALID_TITLE, null);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(task.equals(task));"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask taskCopy \u003d new XmlAdaptedTask(TYPICAL_TASK_1);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(task.equals(taskCopy));"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(task.equals(TYPICAL_TASK_1));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask anotherTask \u003d new XmlAdaptedTask(TYPICAL_TASK_2);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(task.equals(anotherTask));"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":74,"randypx":1,"-":5,"shanmu9898":1}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TITLE;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.storage.XmlAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_2;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TITLE \u003d \"  \";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final String VALID_PERSON_TO_MEET \u003d \"Alice Email: alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TIME \u003d \"not a time stamp\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_validAppointmentDetails_returnsPerson() throws Exception {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(TYPICAL_APPOINTMENT_1, appointment.toModelType());"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTitle_throwsIllegalValueException() {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(INVALID_TITLE, VALID_START_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Title.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, INVALID_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_TIME_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidStartEndTime_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, VALID_START_TIME, INVALID_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_TIME_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullTitle_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(null, VALID_START_TIME, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, null, VALID_END_TIME, VALID_PERSON_TO_MEET);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Time\");"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, VALID_START_TIME, null, VALID_PERSON_TO_MEET);"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Time\");"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    public void toModelType_invalidTimePeriod_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                new XmlAdaptedAppointment(VALID_TITLE, \"20/10/2018 10:00\", \"20/10/2018 09:00\");"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        String expectedMessage \u003d Time.MESSAGE_TIME_PERIOD_CONSTRAINTS;"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    public void equals() {"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        //same object"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointment.equals(appointment));"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        //same value"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment appointmentCopy \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(appointment.equals(appointmentCopy));"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        //different type"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointment.equals(TYPICAL_APPOINTMENT_1));"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        //different obj"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment anotherAppointment \u003d new XmlAdaptedAppointment(TYPICAL_APPOINTMENT_2);"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(appointment.equals(anotherAppointment));"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":99,"randypx":1,"-":6,"shanmu9898":1}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_3;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.DING;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalShortcuts.SHORTCUT_DOUBLES_3;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"        original.addTask(TYPICAL_TASK_3);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"        original.addPerson(DING);"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"        original.addShortcutDoubles(SHORTCUT_DOUBLES_3);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"-":129,"shanmu9898":4}},{"path":"src/test/java/seedu/address/model/shortcut/ShortcutDoubleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcut;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutDoubleTest {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullCommandWord_throwsNullPointerException() {"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutDoubles(\"l\", null);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullShortcutWord_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        new ShortcutDoubles(null , \"list\");"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    public void equals() throws Exception {"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteFirstCommand \u003d new ShortcutDoubles(\"l\", \"list\");"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteSecondCommand \u003d new ShortcutDoubles(\"c\", \"clear\");"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles deleteFirstCommandCopy \u003d new ShortcutDoubles(\"l\", \"list\");"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        // different person -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":51}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedClassTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.storage.XmlAdaptedClass.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalClass.CLASS_CS2103T;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalClass.CLASS_MATH;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":""},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"public class XmlAdaptedClassTest {"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_NAME \u003d \"cl@ss\";"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_SUBJECT_SYMBOL \u003d \"Physic$\";"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_SUBJECT_SPACE \u003d \"Advance Math\";"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_DATE_SYMBOL \u003d \"10-10-2018\";"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_DATE_CHARACTER \u003d \"10 October 2018\";"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_DATE_NUMBER \u003d \"10/10/18\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_STUDENT_NAME \u003d \"R@ndy\";"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    private static final String VALID_NAME \u003d CLASS_CS2103T.getName().fullName;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    private static final String VALID_SUBJECT \u003d CLASS_CS2103T.getSubject().toString();"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    private static final String VALID_START_DATE \u003d CLASS_CS2103T.getStartDate().toString();"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    private static final String VALID_END_DATE \u003d CLASS_CS2103T.getEndDate().toString();"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    private static final List\u003cString\u003e VALID_STUDENT_NAMES \u003d CLASS_CS2103T.getStudents().stream()"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"            .map(Name::toString).collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":""},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    public void toModelType_validClassDetails_returnsClass() throws Exception {"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(CLASS_CS2103T);"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"        assertEquals(CLASS_CS2103T, adaptedClass.toModelType());"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":""},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(INVALID_NAME, VALID_SUBJECT, VALID_START_DATE,"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"                        VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(null, VALID_SUBJECT, VALID_START_DATE,"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"                        VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":""},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidSubjectWithSymbol_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, INVALID_SUBJECT_SYMBOL,"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"                VALID_START_DATE, VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":""},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidSubjectWithSpace_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, INVALID_SUBJECT_SPACE,"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                VALID_START_DATE, VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":""},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, null, VALID_START_DATE,"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"                VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":""},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidDateWrongSymbol_throwsIllegalArgumentException() {"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, INVALID_DATE_SYMBOL,"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                        VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":""},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidDateNoCharacter_throwsIllegalArgumentException() {"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, INVALID_DATE_CHARACTER,"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"                        VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":""},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidDateTooLittleDigits_throwsIllegalArgumentException() {"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, VALID_START_DATE,"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"                        INVALID_DATE_NUMBER, VALID_STUDENT_NAMES);"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Time.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":""},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidDateEndBeforeStart_throwsIllegalValueException() {"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, VALID_END_DATE,"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"                        VALID_START_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d Time.MESSAGE_TIME_PERIOD_CONSTRAINTS;"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":""},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"    public void toModelType_nullStartDate_throwsIllegalValueException() {"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, null,"},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"                VALID_END_DATE, VALID_STUDENT_NAMES);"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":""},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"    public void toModelType_nullEndDate_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, VALID_START_DATE,"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"                null, VALID_STUDENT_NAMES);"},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName());"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, adaptedClass::toModelType);"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":""},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidStudentNames_throwsIllegalArguementException() {"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"        List\u003cString\u003e invalidStudentNames \u003d new ArrayList\u003c\u003e(VALID_STUDENT_NAMES);"},{"lineNumber":136,"author":{"gitID":"randypx"},"content":"        invalidStudentNames.add(INVALID_STUDENT_NAME);"},{"lineNumber":137,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(VALID_NAME, VALID_SUBJECT, VALID_START_DATE,"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"                        VALID_END_DATE, invalidStudentNames);"},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, adaptedClass::toModelType);"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"randypx"},"content":""},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"    public void equals() {"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClass \u003d new XmlAdaptedClass(CLASS_CS2103T);"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":""},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"        //same object"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"        assertTrue(adaptedClass.equals(adaptedClass));"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":""},{"lineNumber":149,"author":{"gitID":"randypx"},"content":"        //same value"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass adaptedClassCopy \u003d new XmlAdaptedClass(CLASS_CS2103T);"},{"lineNumber":151,"author":{"gitID":"randypx"},"content":"        assertTrue(adaptedClass.equals(adaptedClassCopy));"},{"lineNumber":152,"author":{"gitID":"randypx"},"content":""},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"        //different type"},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"        assertFalse(adaptedClass.equals(1));"},{"lineNumber":155,"author":{"gitID":"randypx"},"content":""},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"        //different obj"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass anotherCLass \u003d new XmlAdaptedClass(CLASS_MATH);"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"        assertFalse(adaptedClass.equals(anotherCLass));"},{"lineNumber":159,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"randypx":147,"-":11}},{"path":"src/test/java/seedu/address/model/education/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":""},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"public class SubjectTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":""},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":""},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    public void isValidSubject() {"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"        assertFalse(Subject.isValidSubject(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        assertFalse(Subject.isValidSubject(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"        assertFalse(Subject.isValidSubject(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"        assertFalse(Subject.isValidSubject(\"math*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"        assertFalse(Subject.isValidSubject(\"advanced math\")); // multiple words"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"        assertTrue(Subject.isValidSubject(\"math\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"        assertTrue(Subject.isValidSubject(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        assertTrue(Subject.isValidSubject(\"math101\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"        assertTrue(Subject.isValidSubject(\"Biology\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":32,"-":9}},{"path":"src/test/java/seedu/address/model/education/UniqueClassListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":""},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"public class UniqueClassListTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"        UniqueClassList uniqueClassList \u003d new UniqueClassList();"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"        uniqueClassList.asObservableList().remove(0);"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":7,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandTest {"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    private final Tag testingTag \u003d new Tag(\"testingTag\");"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    private final String testingPath \u003d \"./test/data/XmlAddressBookStorageTest\";"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    private final String name \u003d \"testingName\";"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private final String testingRange \u003d \"1,5\";"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    private final String fileTypeNormal \u003d \"xml\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String fileTypeExcel \u003d \"excel\";"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullRange_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(null, testingTag, testingPath, name, fileTypeExcel);"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullPath_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(testingRange, testingTag, null, name, fileTypeNormal);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullName_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(testingRange, testingTag, testingPath, null, fileTypeNormal);"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    public void constructor_nullType_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"        new ExportCommand(testingRange, testingTag, testingPath, name, null);"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    public void execute_multipleRange_showsMessageError() {"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"        String testingMultiRange \u003d \"1,2,3\";"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingMultiRange, testingTag, testingPath,"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"                name, fileTypeNormal);"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    public void execute_outOfRange_showsMessageError() {"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"        String testingOutOfRange \u003d \"0,10000000\";"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingOutOfRange, testingTag, testingPath,"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"                name, fileTypeNormal);"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_OUT_OF_BOUNDS), model);"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExport_showsNoMessageError() {"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingRange, testingTag, testingPath, name, fileTypeNormal);"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithAllRange_showsNoMessageError() {"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"all\", testingTag, testingPath, name, fileTypeNormal);"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"    public void execute_exportWithSingleRangeAndMismatchTag_showsMessageError() {"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2\", testingTag, testingPath, name, fileTypeNormal);"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"        assertCommandFailure(exportCommand, model, String.format(exportCommand.MESSAGE_TAG_CONTACT_MISMATCH));"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithSingleRange_showsNoMessageError() {"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"        Tag friendsTag \u003d new Tag(\"friends\");"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2\", friendsTag, testingPath, name, fileTypeNormal);"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithExcel_showsNoMessageError() {"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"1,6\", testingTag, testingPath, name, fileTypeExcel);"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"    public void execute_successfulExportWithAllRangeExcel_showsNoMessageError() {"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"        Tag colleguesTag \u003d new Tag(\"collegues\");"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"all\", colleguesTag, testingPath, name, fileTypeExcel);"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"    public void execute_rangeNotCorrect_showsMessageError() {"},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2,1\", testingTag, testingPath, name, fileTypeNormal);"},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGiven_showsNoMessageError() {"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"all\", new Tag(\"shouldnotbethistag\"),"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"                testingPath, name, fileTypeNormal);"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGivnAndRangeError_showsMessageError() {"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"2,1\", new Tag(\"shouldnotbethistag\"),"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"                testingPath, name, fileTypeNormal);"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_RANGE_ERROR), model);"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenTagIsSupposedlyNotGivenAndRangeGiven_showsNoMessageError() {"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"1,6\", new Tag(\"shouldnotbethistag\"),"},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"                testingPath, name, fileTypeNormal);"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":"    public void execute_whenRangeIsSelectiveAndOutOfRange_showsMessageError() {"},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(\"10000000\", new Tag(\"shouldnotbethistag\"),"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"                testingPath, name, fileTypeNormal);"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_OUT_OF_BOUNDS), model);"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"    public void execute_classesBeingExported_showsNoError() {"},{"lineNumber":191,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingPath, name, fileTypeExcel);"},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"    public void execute_classesBeingExportedXml_showsNoError() {"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand exportCommand \u003d new ExportCommand(testingPath, name, fileTypeNormal);"},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"        exportCommand.setData(new ModelManager(getTypicalAddressBook(), new UserPrefs()), new CommandHistory(),"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"                new UndoRedoStack());"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"        assertCommandSuccess(exportCommand, model, String.format(exportCommand.MESSAGE_SUCCESS), model);"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":"    public void equals() {"},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"        final ExportCommand comparableCommand \u003d new ExportCommand(testingRange, testingTag, testingPath,"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"                name, fileTypeNormal);"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"        // same values -\u003e returns true"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand comparedToCommand \u003d new ExportCommand(testingRange, testingTag, testingPath,"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"                name, fileTypeNormal);"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparedToCommand));"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":"        // same object -\u003e returns true"},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(comparableCommand.equals(comparableCommand));"},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"        // null -\u003e returns false"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(null));"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"        // different types -\u003e returns false"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ClearCommand()));"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"        // different range -\u003e returns false"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"        assertFalse(comparableCommand.equals(new ExportCommand(\"1,2\", testingTag, testingPath, name,"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"                fileTypeNormal)));"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":233,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":234,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":12,"shanmu9898":222}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        assertEquals(Collections.emptyList(), addressBook.getStudentList());"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        assertEquals(Collections.emptyList(), addressBook.getContactList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Collections.emptyList(), addressBook.getAppointmentList());"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTaskList());"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(Collections.emptyList(), addressBook.getCommandsList());"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    public void getStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"        addressBook.getStudentList().remove(0);"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.getAppointmentList().remove(0);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.getTaskList().remove(0);"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    public void getClassList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"        addressBook.getClassList().remove(0);"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":""},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"    public void getShortcutList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"        addressBook.getCommandsList().remove(0);"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"     * A stub ReadOnlyAddressBook whose persons, tags and events lists can violate interface constraints."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        private final ObservableList\u003cStudent\u003e students \u003d FXCollections.observableArrayList();"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"        private final ObservableList\u003cPerson\u003e contacts \u003d FXCollections.observableArrayList();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"        private final ObservableList\u003cShortcutDoubles\u003e commandslist \u003d FXCollections.observableArrayList();"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"        private final ObservableList\u003cClass\u003e classes \u003d FXCollections.observableArrayList();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cStudent\u003e students,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                        Collection\u003c? extends Tag\u003e tags, Collection\u003cAppointment\u003e appointments,"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"                        Collection\u003cTask\u003e tasks, Collection\u003cShortcutDoubles\u003e commands,"},{"lineNumber":136,"author":{"gitID":"randypx"},"content":"                        Collection\u003cClass\u003e classes) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"            this.students.setAll(students);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":"            this.commandslist.setAll(commands);"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"            this.classes.setAll(classes);"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":""},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"            this.contacts.setAll(persons);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"        public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"            return students;"},{"lineNumber":159,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"randypx"},"content":""},{"lineNumber":161,"author":{"gitID":"randypx"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"randypx"},"content":"        public ObservableList\u003cPerson\u003e getContactList() {"},{"lineNumber":163,"author":{"gitID":"randypx"},"content":"            return contacts;"},{"lineNumber":164,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"randypx"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":171,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"Sisyphus25"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":173,"author":{"gitID":"Sisyphus25"},"content":"            return appointments;"},{"lineNumber":174,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"Sisyphus25"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":178,"author":{"gitID":"Sisyphus25"},"content":"            return tasks;"},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"        public ObservableList\u003cShortcutDoubles\u003e getCommandsList() {"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"            return commandslist;"},{"lineNumber":184,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"randypx"},"content":""},{"lineNumber":186,"author":{"gitID":"randypx"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"randypx"},"content":"        public ObservableList\u003cClass\u003e getClassList() {"},{"lineNumber":188,"author":{"gitID":"randypx"},"content":"            return classes;"},{"lineNumber":189,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"    public void updatePerson_modifiedAddressBooks_noError() throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.updatePerson(BOB, AMY);"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(testAddressBook, expectedAddressBook);"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagNotPresent_addressBookUnchanged() throws PersonNotFoundException,"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"            DuplicatePersonException {"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag_tagUsedByMultiplePeople_tagRemoved() throws PersonNotFoundException,"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":"            DuplicatePersonException {"},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"        testAddressBook.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"                .withPerson(amyWithoutFriendTag).build();"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(expectedAddressBook, testAddressBook);"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":230,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":29,"randypx":41,"-":96,"shanmu9898":64}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":19,"shanmu9898":1}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOTUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalClass.CLASS_CS2103T;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalClass.CLASS_MATH;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_1;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_APPOINTMENT_3;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_1;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalEvents.TYPICAL_TASK_3;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_COOPER;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_FAUST;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.testutil.TypicalShortcuts.SHORTCUT_DOUBLES_1;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import java.util.Collections;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"import junit.framework.TestCase;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    private AddressBook addressBook \u003d getTypicalAddressBook();"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    private UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    private ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"    public void getFilteredStudentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        modelManager.getFilteredStudentsList().remove(0);"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    public void getFilteredCommandList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        modelManager.getFilteredCommandsList().remove(0);"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.getFilteredAppointmentList().remove(0);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    public void getFilteredClassList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        modelManager.getFilteredClassList().remove(0);"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    public void addPerson_addPersonToAddressBook_evokeAddressBookChangedEvent() throws DuplicatePersonException {"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addPerson(IDA);"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    public void removePerson_removePersonFromAddressBook_evokeAddressBookChangedEvent() throws PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deletePerson(ALICE);"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"    public void addStudent_addStudentToAddressBook_evokeAddressBookChangedEvent() throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"        modelManager.addStudent(STUDENT_FAUST);"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":""},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"    public void addClass_addClassToAddressBook_evokeAddressBookChangedEvent() throws DuplicateClassException {"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"        modelManager.addClass(CLASS_CS2103T, new ArrayList\u003c\u003e(Collections.singletonList(STUDENT_COOPER)));"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":""},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"    public void removeClass_removeClassFromAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"            throws StudentClassNotFoundException {"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"        modelManager.deleteClass(CLASS_MATH);"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":""},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask_addTaskToAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"            throws DuplicateEventException {"},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addTask(TYPICAL_TASK_3);"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"    public void removeTask_removeTaskFromAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"            throws EventNotFoundException {"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":148,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deleteTask(TYPICAL_TASK_1);"},{"lineNumber":149,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":150,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"    public void addAppointment_addAppointmentToAddressBook_evokeAppointmentListChangedEvent()"},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"            throws DuplicateEventException {"},{"lineNumber":155,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":156,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.addAppointment(TYPICAL_APPOINTMENT_3);"},{"lineNumber":157,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AppointmentListChangedEvent);"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 3);"},{"lineNumber":159,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":161,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"randypx"},"content":"    public void removeAppointment_removeAppointmentFromAddressBook_evokeAppointmentListChangedEvent()"},{"lineNumber":163,"author":{"gitID":"randypx"},"content":"            throws EventNotFoundException {"},{"lineNumber":164,"author":{"gitID":"randypx"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"        modelManager.deleteAppointment(TYPICAL_APPOINTMENT_1);"},{"lineNumber":166,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AppointmentListChangedEvent);"},{"lineNumber":167,"author":{"gitID":"Sisyphus25"},"content":"        TestCase.assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"},{"lineNumber":168,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"    public void addShortcut_addShortcutToAddressBook_evokeAddressBookChangedEvent()"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"        modelManager.addCommandShortcut(SHORTCUT_DOUBLES_1);"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof AddressBookChangedEvent);"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagNotPresent_modelUnchanged() throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_NOTUSED));"},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(testAddressBook, userPrefs), modelManager);"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag_tagUsedByMultiplePeople_tagRemoved() throws DuplicatePersonException,"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"            PersonNotFoundException {"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"        AddressBook testAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"        ModelManager modelManager \u003d new ModelManager(testAddressBook, userPrefs);"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":233,"author":{"gitID":"shanmu9898"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":234,"author":{"gitID":"shanmu9898"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":235,"author":{"gitID":"shanmu9898"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":236,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":237,"author":{"gitID":"shanmu9898"},"content":"        assertEquals(new ModelManager(expectedAddressBook, userPrefs), modelManager);"},{"lineNumber":238,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":240,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":58,"randypx":57,"-":65,"shanmu9898":60}},{"path":"src/test/java/seedu/address/model/UniqueShortcutDoublesListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"public class UniqueShortcutDoublesListTest {"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"        UniqueShortcutDoublesList uniqueShortcutDoublesList \u003d new UniqueShortcutDoublesList();"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"        uniqueShortcutDoublesList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":20}},{"path":"src/test/java/seedu/address/model/event/AppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentTest {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    private static final Title VALID_TITLE \u003d new Title(\"Meet Student\");"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private static final Time VALID_START_TIME \u003d new Time(\"05/04/2018 10:00\", false);"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    private static final Time VALID_END_TIME \u003d new Time(\"05/04/2018 11:00\", false);"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private static final Time INVALID_END_TIME \u003d new Time(\"05/04/2018 09:00\", false);"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidAppointmentTime_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"                new Appointment(VALID_TITLE, VALID_START_TIME, INVALID_END_TIME));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTime() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        // invalid time stamps"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Time.isValidTime(VALID_START_TIME, INVALID_END_TIME)); //End time is before Start Time"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        // valid time stamps"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Time.isValidTime(VALID_START_TIME, VALID_END_TIME));"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":31}},{"path":"src/test/java/seedu/address/model/UniqueEventListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventListTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        UniqueEventList\u003cAppointment\u003e uniqueAppointmentList \u003d new UniqueEventList\u003cAppointment\u003e();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":8,"-":12}},{"path":"src/test/java/seedu/address/model/event/TimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class TimeTest {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Time(null, false));"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalid_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"invalidTimeStamp\", false));"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"\", false));"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"10/20 10:00\", false));"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"May 17 2018 10:00\", false));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"17-05-2019 10:00\", false));"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        //incorrect format"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        //not a time stamp"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"invalidTimeStamp\", false));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        //blank"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"\", false));"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        //invalid time stamp format"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"10/20 10:00\", false));"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"May 17 2018 10:00\", false));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"17-05-2019 10:00\", false));"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        //correct format but invalid time stamp"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        //invalid date"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"32/05/2019 10:00\", false));"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        //invalid month"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"32/13/2019 10:00\", false));"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        //invalid date month"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"29/02/2018 10:00\", false));"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"31/04/2018 10:00\", false));"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        //invalid time"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"29/02/2018 25:00\", false));"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Time(\"29/02/2018 23:60\", false));"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public void isExpired() {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        Time pastTime \u003d new Time(\"20/10/2013 10:00\", false);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        Time futureTime \u003d new Time(\"20/10/2100 10:00\", false);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(futureTime.isExpired());"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(pastTime.isExpired());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"}"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""}],"authorContributionMap":{"Sisyphus25":53,"-":4}},{"path":"src/test/java/seedu/address/model/event/TitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class TitleTest {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Title(null));"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public void constructor_invalidTitle_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        String invalidTitle \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"                new Title(invalidTitle));"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public void isValidTitle() {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        // null title"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        // invalid title"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Title.isValidTitle(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        assertFalse(Title.isValidTitle(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        // valid title"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Title.isValidTitle(\"Meet Dave\"));"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        assertTrue(Title.isValidTitle(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":33,"-":4}},{"path":"src/test/java/seedu/address/testutil/ExportCommandHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandHelper {"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"    public static final String RANGE_ALL \u003d \"all\";"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"    public static final String TAG_NEEDED \u003d \"friends\";"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"    public static final String PATH_NEEDED \u003d \"./data\";"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    public static final String NAME_NEEDED \u003d \"name\";"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_NEEDED \u003d \"xml\";"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":15}},{"path":"src/test/java/seedu/address/model/UniqueStudentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.UniqueStudentList;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":""},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"public class UniqueStudentListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"        UniqueStudentList uniqueStudentList \u003d new UniqueStudentList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"        uniqueStudentList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":7,"-":12}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"     * Add a new {@code Appointment} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    public AddressBookBuilder withAppointment(Appointment appointment) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addAppointment(appointment);"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"        } catch (DuplicateEventException ive) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalArgumentException(\"appointment is expected to be unique\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":12,"randypx":2,"-":53}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalShortcuts.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * Few Typical Shortcuts"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class TypicalShortcuts {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_1 \u003d"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"l\", \"list\").build();"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_2 \u003d"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"c\", \"clear\").build();"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_3 \u003d"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"ll\", \"list\").build();"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_4 \u003d"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"cc\", \"clear\").build();"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_5 \u003d"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"a\", \"add\").build();"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    public static final ShortcutDoubles SHORTCUT_DOUBLES_6 \u003d"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutCommandBuilder(\"aa\", \"add\").build();"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public static List\u003cShortcutDoubles\u003e getTypicalShortcuts() {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(SHORTCUT_DOUBLES_1, SHORTCUT_DOUBLES_2));"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":31}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStubThrowingDuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * A Model stub that always throw a DuplicateEventException when trying to add an appointment/task."},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStubThrowingDuplicateEventException extends ModelStub {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public void addAppointment (Appointment appointment) throws DuplicateEventException {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        throw new DuplicateEventException();"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask (Task task) throws DuplicateEventException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        throw new DuplicateEventException();"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        return new AddressBook();"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":25,"randypx":1,"-":2}},{"path":"src/test/java/seedu/address/testutil/ShortcutCommandBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":" * A utility class to help with building Shortcut objects."},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandBuilder {"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    private String shortcutWord;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"    private String commandWord;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCommandBuilder(String shortcutWord, String commandWord) {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"     * @return an {@code Appointment} from the data feed to constructor"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutDoubles build() {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"        return new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":26}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStubAcceptingTaskAdded.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A Model stub that always accept the task being added."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStubAcceptingTaskAdded extends ModelStub {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask(Task event) throws DuplicateEventException {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(event);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        tasksAdded.add(event);"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        return new AddressBook();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":24,"randypx":1,"-":4}},{"path":"src/test/java/seedu/address/testutil/StudentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":""},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":""},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":" * A utility class to help with building Student objects."},{"lineNumber":20,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"public class StudentBuilder {"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":""},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_SUBJECT \u003d \"english\";"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    private List\u003cSubject\u003e subjects;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":""},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"    public StudentBuilder() {"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        subjects \u003d SampleDataUtil.getSubjectList(DEFAULT_SUBJECT);"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":""},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"     * Initializes the StudentBuilder with the data of {@code personToCopy}."},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    public StudentBuilder(Student personToCopy) {"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"        subjects \u003d new ArrayList\u003c\u003e(personToCopy.getSubjectList());"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":""},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withName(String name) {"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":""},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withTags(String ... tags) {"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":""},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withAddress(String address) {"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":""},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withPhone(String phone) {"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":""},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withEmail(String email) {"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":""},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"     * Parses the {@code subjects} into a {@code List\u003cSubject\u003e} and set it to the {@code Student}"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"     * that we are building."},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"    public StudentBuilder withSubjects(String ... subjects) {"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        this.subjects \u003d SampleDataUtil.getSubjectList(subjects);"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    public Student build() {"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        return new Student(name, phone, email, address, tags, subjects);"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":105,"-":5}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_STUDENT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"     * Returns an add command string for adding the {@code student}."},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static String getAddStudentCommand(Student person) {"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        return AddCommand.COMMAND_WORD + PREAMBLE_STUDENT + getPersonDetails(person);"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":9,"-":38}},{"path":"src/test/java/seedu/address/testutil/TypicalImportedPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":" * Special Util class to get people for ImportCommandTest class."},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"public class TypicalImportedPersons {"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FLICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FLLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    public static final Person GIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FEORGE \u003d new StudentBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FVAN \u003d new StudentBuilder().withName(\"Ivan Kutz\").withPhone(\"9867723\")"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"wolf@example.com\").withAddress(\"Centre Street\").build();"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FOHN \u003d new StudentBuilder().withName(\"John Blake\").withPhone(\"9575232\")"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"star@example.com\").withAddress(\"Hollywood\").build();"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_HOON \u003d new StudentBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_IDA \u003d new StudentBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    public static final Person FOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"            .build();"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_STUDENT).build();"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    public static final Student FTUDENT_BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT)"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"            .build();"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"    private TypicalImportedPersons() {} // prevents instantiation"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    public static AddressBook getImportedAddressBook() {"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        for (Person person : getImportedPersons()) {"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"                ab.addPerson(person);"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        return ab;"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    public static List\u003cPerson\u003e getImportedPersons() {"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(FLICE, FENSON, FARL, FANIEL, FLLE, GIONA, FEORGE));"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":99}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_STUDENT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"    public static final Person DING \u003d new PersonBuilder().withName(\"Ding Thunderstorm\").withPhone(\"81524871\")"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"            .withEmail(\"hansolo@example.com\").withAddress(\"Science Park Road\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    // Students"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_ANGUS \u003d new StudentBuilder().withName(\"Angus Wyndham\")"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9867723\").withEmail(\"wynd@example.com\").withAddress(\"Centre Street\")"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"            .withSubjects(\"Biology\").build();"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_BRUCE \u003d new StudentBuilder().withName(\"Bruce Wayne\")"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9575232\").withEmail(\"star@example.com\").withAddress(\"Hollywood\")"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"            .withSubjects().build();"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_COOPER \u003d new StudentBuilder().withName(\"Cooper Crouch\")"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9247637\").withEmail(\"freeman@example.com\").withAddress(\"Kansas\")"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"            .withSubjects(\"Mathematics\", \"Biology\").build();"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_DAVID \u003d new StudentBuilder().withName(\"David Gray\")"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9234718\").withEmail(\"alien@example.com\").withAddress(\"Chinatown\")"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"            .withSubjects(\"Mathematics\").build();"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_EMILY \u003d new StudentBuilder().withName(\"Emily Walter\")"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"            .withPhone(\"8537425\").withEmail(\"lily@example.com\").withAddress(\"4th Avenue\")"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"            .withSubjects(\"Biology\", \"Physics\").build();"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":""},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    // Manually added"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_FAUST \u003d new StudentBuilder().withName(\"Faust Meier\")"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9524284\").withEmail(\"mephist@example.com\").withAddress(\"raffles hall\")"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"            .withTags(\"absent\").withSubjects().build();"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_GUASS \u003d new StudentBuilder().withName(\"Guass Muller\")"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"            .withPhone(\"8824681\").withEmail(\"greg@example.com\").withAddress(\"university town\")"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"            .withSubjects().build();"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_HELEN \u003d new StudentBuilder().withName(\"Hellen Wetscott\")"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"            .withPhone(\"8315264\").withEmail(\"knight@example.com\").withAddress(\"Sentosa Resort\")"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"            .withSubjects().build();"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_ILLYA \u003d new StudentBuilder().withName(\"Illya Einzbern\")"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"            .withPhone(\"9275423\").withEmail(\"berserker@example.com\").withAddress(\"fuyuki\")"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"            .withSubjects().build();"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":""},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_AMY \u003d new StudentBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().withSubjects().build();"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"    public static final Student STUDENT_BOB \u003d new StudentBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_STUDENT)"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"            .withSubjects().build();"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        for (Person person : getTypicalContacts()) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"                if (!(person instanceof Student)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                    ab.addPerson(person);"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"                } else {"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"                    ab.addStudent((Student) person);"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        for (Appointment ap : TypicalEvents.getTypicalAppointments()) {"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"                ab.addAppointment(ap);"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"        for (Task t : TypicalEvents.getTypicalTasks()) {"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"                ab.addTask(t);"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"            } catch (DuplicateEventException e) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"        for (Class c : TypicalClass.getTypicalClasses()) {"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"            try {"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"                ab.addClass(c);"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"            } catch (DuplicateClassException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"randypx"},"content":"        return ab;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":152,"author":{"gitID":"randypx"},"content":"    public static List\u003cPerson\u003e getTypicalContacts() {"},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, STUDENT_ANGUS, STUDENT_BRUCE,"},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"                CARL, DANIEL, STUDENT_COOPER, ELLE, STUDENT_DAVID, FIONA, STUDENT_EMILY, GEORGE));"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"randypx"},"content":""},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":159,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":160,"content":"    //@@author"},{"lineNumber":161,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author LimShiMinJonathan"},{"lineNumber":162,"author":{"gitID":"LimShiMinJonathan"},"content":"    public static List\u003cPerson\u003e getUnsortedPersons() {"},{"lineNumber":163,"author":{"gitID":"LimShiMinJonathan"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ELLE, BENSON, FIONA, DANIEL, ALICE, CARL, GEORGE));"},{"lineNumber":164,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":8,"randypx":64,"LimShiMinJonathan":5,"-":82,"shanmu9898":6}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":11,"-":83}},{"path":"src/test/java/seedu/address/testutil/TypicalClass.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_ANGUS;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_COOPER;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_DAVID;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_EMILY;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":""},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" * A utility class containing a list of class objects to be used in tests."},{"lineNumber":17,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"public class TypicalClass {"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":""},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    public static final Class CLASS_CS2103T \u003d new ClassBuilder().withName(\"T2\").withSubject(\"CS2103T\")"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"            .withStartDate(\"14/04/2018\").withEndDate(\"28/04/2018\")"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"            .withStudents(STUDENT_COOPER.getName().fullName, STUDENT_DAVID.getName().fullName).build();"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    public static final Class CLASS_MATH \u003d new ClassBuilder().withName(\"math 101\").withSubject(\"Mathematics\")"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"            .withStartDate(\"30/08/2018\").withEndDate(\"30/12/2019\")"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"            .withStudents(STUDENT_COOPER.getName().fullName, STUDENT_DAVID.getName().fullName).build();"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private static final Class CLASS_BIOLOGY \u003d new ClassBuilder().withName(\"Bio 01\").withSubject(\"Biology\")"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"            .withStartDate(\"05/12/2018\").withEndDate(\"05/05/2019\")"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"            .withStudents(STUDENT_ANGUS.getName().fullName, STUDENT_COOPER.getName().fullName,"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"                    STUDENT_EMILY.getName().fullName).build();"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    private static final Class CLASS_PHYSICS \u003d new ClassBuilder().withName(\"phys 03\").withSubject(\"Physics\")"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            .withStartDate(\"04/07/2018\").withEndDate(\"04/12/2018\")"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            .withStudents(STUDENT_EMILY.getName().fullName).build();"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    public static List\u003cClass\u003e getTypicalClasses() {"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CLASS_MATH, CLASS_BIOLOGY, CLASS_PHYSICS));"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":33,"-":4}},{"path":"src/test/java/seedu/address/testutil/ClassBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":""},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":" * A utility class to help with building class objects."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"public class ClassBuilder {"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":""},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_NAME \u003d \"Class 01\";"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_SUBJECT \u003d \"Math\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_START_DATE \u003d \"10/10/2018\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_END_DATE \u003d \"20/10/2019\";"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String DEFAULT_STUDENT \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private Subject subject;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private Time start;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private Time end;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private List\u003cName\u003e studentNameList;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    public ClassBuilder() {"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"        start \u003d new Time(DEFAULT_START_DATE, true);"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"        end \u003d new Time(DEFAULT_END_DATE, true);"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"        studentNameList \u003d SampleDataUtil.getStudentList(DEFAULT_STUDENT);"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"     * Initializes the ClassBuilder with the data of {@code classToCopy}."},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    public ClassBuilder(Class classToCopy) {"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"        name \u003d classToCopy.getName();"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        subject \u003d classToCopy.getSubject();"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        start \u003d classToCopy.getStartDate();"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        end \u003d classToCopy.getEndDate();"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        studentNameList \u003d new ArrayList\u003c\u003e(classToCopy.getStudents());"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":""},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Name} of the {@code Class} that we are building."},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    public ClassBuilder withName(String name) {"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"     * Sets the {@code Subject} of the {@code Class} that we are building."},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    public ClassBuilder withSubject(String subject) {"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":""},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"     * Sets the {@code endDate} of the {@code Class} that we are building."},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    public ClassBuilder withEndDate(String endDate) {"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        this.end \u003d new Time(endDate, true);"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":""},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"     * Sets the {@code startDate} of the {@code Class} that we are building."},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":""},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    public ClassBuilder withStartDate(String startDate) {"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"        this.start \u003d new Time(startDate, true);"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":""},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"     * Parses the {@code studentNames} into a {@code List\u003cName\u003e} and set it to the {@code Class}"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"     * that we are building."},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    public ClassBuilder withStudents(String ... studentNames) {"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        this.studentNameList \u003d SampleDataUtil.getStudentList(studentNames);"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":""},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    public Class build() {"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        return new Class(name, subject, start, end, studentNameList);"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":90,"-":1,"shanmu9898":3}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_ANGUS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" * A utility class containing a list of event objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class TypicalEvents {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_1 \u003d"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Meeting with parents\", \"09/10/2018 10:00\", \"09/10/2018 11:00\", ALICE).build();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_2 \u003d"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Consultation session\", \"04/07/2018 10:00\", \"04/07/2018 11:00\", BOB).build();"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment TYPICAL_APPOINTMENT_3 \u003d"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Tutoring session\", \"30/04/2018 10:00\", \"30/04/2018 11:00\", STUDENT_ANGUS).build();"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_1 \u003d"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Meeting with parents\", \"09/10/2018 10:00\", \"09/10/2018 11:00\").build();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_2 \u003d"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Consultation session\", \"04/07/2018 10:00\", \"04/07/2018 11:00\", BOB).build();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public static final Appointment APPOINTMENT_WITHOUT_PERSON_3 \u003d"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            new AppointmentBuilder(\"Tutoring session\", \"30/04/2018 10:00\", \"30/04/2018 11:00\").build();"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_1 \u003d"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"To do\"), new Time(\"10/10/2018 10:00\", false));"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_2 \u003d"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Mark papers\"), new Time(\"15/04/2018 23:00\", false));"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_3 \u003d"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Purchase markers\"), new Time(\"19/04/2018 10:00\", false));"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public static final Task TYPICAL_TASK_EXPIRED \u003d"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Expired task\"), new Time(\"19/04/2013 10:00\", false));"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_APPOINTMENT_1, TYPICAL_APPOINTMENT_2));"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_TASK_1, TYPICAL_TASK_2));"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":47,"randypx":2,"-":1}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":" * Provides a handle for CalendarPanel"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public static final String CALENDAR_VIEW_ID \u003d \"#calendarPlaceholder\";"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    protected CalendarPanelHandle(Node rootNode) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        super(rootNode);"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15}},{"path":"src/test/java/seedu/address/testutil/modelstub/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil.modelstub;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"public class ModelStub implements Model {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    public void addStudent(Student student) throws DuplicatePersonException {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    public void deleteStudent(Student target) throws PersonNotFoundException {"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentsList() {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        return null;"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":""},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"        return null;"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cClass\u003e getFilteredClassList() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"    public void indicateAppointmentListChanged() {"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"    public void changeCurrentActiveListType(String type) {"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void sortByNameFilteredPersonList() {"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateEventException {"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"    public void deleteAppointment(Appointment appointment) throws EventNotFoundException {"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":149,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"    public void addTask(Task task) throws DuplicateEventException {"},{"lineNumber":151,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":154,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"randypx"},"content":"    public void deleteTask(Task task) throws EventNotFoundException {"},{"lineNumber":156,"author":{"gitID":"Sisyphus25"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":""},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":"    public void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":"    public void deleteCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":172,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":173,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":174,"author":{"gitID":"randypx"},"content":"    public void addClass(Class group, List\u003cStudent\u003e studentList) throws DuplicateClassException {"},{"lineNumber":175,"author":{"gitID":"randypx"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"randypx"},"content":""},{"lineNumber":178,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"randypx"},"content":"    public void deleteClass(Class target) throws StudentClassNotFoundException {"},{"lineNumber":180,"author":{"gitID":"randypx"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":65,"randypx":35,"-":57,"shanmu9898":25}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_VIEW_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        return calendarPanel;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"-":47}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagsNames() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"     * @param tag Text value of the tag label"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"     * @return List of style classes for tag label with text value {@code tag}"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                .findFirst()"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":14,"-":72}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedStudentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.storage.XmlAdaptedStudent.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_ANGUS;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import static seedu.address.testutil.TypicalPersons.STUDENT_COOPER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":""},{"lineNumber":24,"content":"//@@author randypx-reused"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"public class XmlAdaptedStudentTest {"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_NAME \u003d \"@l1ce\";"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_PHONE \u003d \"+6582736\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_TAG_NAME \u003d \"#absent\";"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private static final String INVALID_TAG_COLOR_STYLE \u003d \"notacolor\";"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_SUBJECT_SYMBOL \u003d \"Physic$\";"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    private static final String INVALID_SUBJECT_SPACE \u003d \"Advance Math\";"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    private static final String VALID_NAME \u003d STUDENT_ANGUS.getName().toString();"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    private static final String VALID_PHONE \u003d STUDENT_ANGUS.getPhone().toString();"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"    private static final String VALID_EMAIL \u003d STUDENT_ANGUS.getEmail().toString();"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    private static final String VALID_ADDRESS \u003d STUDENT_ANGUS.getAddress().toString();"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d STUDENT_ANGUS.getTags().stream()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    private static final List\u003cString\u003e VALID_SUBJECTS \u003d STUDENT_ANGUS.getSubjectList().stream()"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"            .map(Subject::toString).collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":""},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    public void toModelType_validStudentDetails_returnsStudent() throws Exception {"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(STUDENT_ANGUS);"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"        assertEquals(STUDENT_ANGUS, student.toModelType());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"                        INVALID_ADDRESS, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"                null, VALID_TAGS, VALID_SUBJECTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, student::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG_NAME, INVALID_TAG_COLOR_STYLE));"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, invalidTags, VALID_SUBJECTS);"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalValueException.class, student::toModelType);"},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":""},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidSubjectWithSymbol_throwsIllegalArgumentException() {"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"        List\u003cString\u003e invalidSubjects \u003d new ArrayList\u003c\u003e(VALID_SUBJECTS);"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":"        invalidSubjects.add(INVALID_SUBJECT_SYMBOL);"},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, VALID_TAGS, invalidSubjects);"},{"lineNumber":136,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, student::toModelType);"},{"lineNumber":137,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":""},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"    public void toModelType_invalidSubjectWithSpace_throwsIllegalArguementException() {"},{"lineNumber":141,"author":{"gitID":"randypx"},"content":"        List\u003cString\u003e invalidSubjects \u003d new ArrayList\u003c\u003e(VALID_SUBJECTS);"},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"        invalidSubjects.add(INVALID_SUBJECT_SPACE);"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"                new XmlAdaptedStudent(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"                        VALID_ADDRESS, VALID_TAGS, invalidSubjects);"},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, student::toModelType);"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":""},{"lineNumber":149,"author":{"gitID":"randypx"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"    public void equals() {"},{"lineNumber":151,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent student \u003d new XmlAdaptedStudent(STUDENT_ANGUS);"},{"lineNumber":152,"author":{"gitID":"randypx"},"content":""},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"        //same object"},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"        assertTrue(student.equals(student));"},{"lineNumber":155,"author":{"gitID":"randypx"},"content":""},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"        //same value"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent studentCopy \u003d new XmlAdaptedStudent(STUDENT_ANGUS);"},{"lineNumber":158,"author":{"gitID":"randypx"},"content":"        assertTrue(student.equals(studentCopy));"},{"lineNumber":159,"author":{"gitID":"randypx"},"content":""},{"lineNumber":160,"author":{"gitID":"randypx"},"content":"        //different type"},{"lineNumber":161,"author":{"gitID":"randypx"},"content":"        assertFalse(student.equals(1));"},{"lineNumber":162,"author":{"gitID":"randypx"},"content":""},{"lineNumber":163,"author":{"gitID":"randypx"},"content":"        //different obj"},{"lineNumber":164,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent anotherStudent \u003d new XmlAdaptedStudent(STUDENT_COOPER);"},{"lineNumber":165,"author":{"gitID":"randypx"},"content":"        assertFalse(student.equals(anotherStudent));"},{"lineNumber":166,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":4,"randypx":99,"-":63}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/Tc_logo.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":118,"shanmu9898":1}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.event.PersonToMeet.EMAIL_SPLITTER;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * A utility class to help with building Appointment objects."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentBuilder {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private Title title;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    private Time time;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private Time endTime;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private PersonToMeet personToMeet;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime) {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        this(title, time, endTime, (String) null);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime, Person personToMeet) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        this(title, time, endTime, personToMeet.getName() + EMAIL_SPLITTER + personToMeet.getEmail());"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentBuilder(String title, String time, String endTime, String personToMeet) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d new Title(title);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d new Time(time, false);"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d new Time(endTime, false);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            String[] components \u003d personToMeet.split(EMAIL_SPLITTER);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            this.personToMeet \u003d new PersonToMeet(components[0], components[1]);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     * @return an {@code Appointment} from the data feed to constructor"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment build() {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        return new Appointment(title, time, endTime, personToMeet);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":45,"randypx":1}},{"path":"src/main/java/seedu/address/ui/ThemeList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Provide list of themes and respective URL to their CSS stylesheet"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ThemeList {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    private HashMap\u003cString, String\u003e themeList;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ThemeList() {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        themeList \u003d new HashMap\u003c\u003e();"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"dark\", \"view/DarkTheme.css\");"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"light\", \"view/LightTheme.css\");"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"doge\", \"view/DogeTheme.css\");"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        themeList.put(\"galaxy\", \"view/GalaxyTheme.css\");"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public String getThemeStyleSheet(String theme) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        if (!themeList.containsKey(theme)) {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            return themeList.get(\"light\");"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        return themeList.get(theme);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":26}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.time.Duration;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.time.ZoneId;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":" * The Calendar Panel of the App."},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private CalendarView calendarView;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private Calendar calendar;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    private ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarPanel(ObservableList\u003cAppointment\u003e appointmentObservableList) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        this.appointmentList \u003d appointmentObservableList;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        calendarView \u003d new CalendarView();"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        CalendarSource calendarSource \u003d new CalendarSource(\"My Calendar\");"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        calendar \u003d new Calendar(\"Appointments\");"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.getCalendarSources().add(calendarSource);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        calendarSource.getCalendars().add(calendar);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        calendar.setStyle(Calendar.Style.getStyle(0));"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        calendar.setLookAheadDuration(Duration.ofDays(365));"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        updateCalendar();"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        disableViews();"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * Clear the entry list in the CalendarFX calendar and"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"     * populate it with appointment in the updated appointmentList"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    private void updateCalendar() {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        calendar.clear();"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        ArrayList\u003cEntry\u003e entries \u003d getEntries();"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        for (Entry entry : entries) {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            calendar.addEntry(entry);"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    private ArrayList\u003cEntry\u003e getEntries() {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        ArrayList\u003cEntry\u003e entries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        for (Appointment appointment : appointmentList) {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            entries.add(getEntry(appointment));"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        return entries;"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    private Entry getEntry(Appointment appointment) {"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        LocalDateTime ldtstart \u003d LocalDateTime.ofInstant("},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                appointment.getStartTime().value.getTime().toInstant(), ZoneId.systemDefault());"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        LocalDateTime ldtend \u003d LocalDateTime.ofInstant("},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                appointment.getEndTime().value.getTime().toInstant(), ZoneId.systemDefault());"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        String description \u003d appointment.getTitle().value;"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        return new Entry(description, new Interval(ldtstart, ldtend));"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    private void handleAppointmentListChangedEvent(AppointmentListChangedEvent event) {"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        appointmentList \u003d event.appointmentList;"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater("},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"                this::updateCalendar"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25-reused"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/CS2103AUG2017-T17-B2/main with modifications"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    private void setTime() {"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"    private void handleToggleCalendarViewEvent(ToggleCalendarViewEvent event) {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        Character c \u003d event.viewMode;"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater(() -\u003e toggleView(c));"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    public CalendarView getRoot() {"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        return this.calendarView;"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"     * Remove clutter from interface"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"    private void disableViews() {"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSearchResultsTray(false);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPageSwitcher(false);"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSourceTrayButton(false);"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowToolBar(false);"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.setShowSourceTray(false);"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"        calendarView.showDayPage();"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"     * Changes calendar view accordingly"},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"    private void toggleView(Character c) {"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        switch(c) {"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027d\u0027):"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showDayPage();"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027w\u0027):"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showWeekPage();"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"        case (\u0027m\u0027):"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"            calendarView.showMonthPage();"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"            return;"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":148,"author":{"gitID":"Sisyphus25"},"content":"            //should not reach here"},{"lineNumber":149,"author":{"gitID":"Sisyphus25"},"content":"            assert (false);"},{"lineNumber":150,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":152,"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":147,"-":5}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"EEE, MMMMM dd, HH:mm a\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private static final Calendar CALENDAR \u003d Calendar.getInstance();"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public final Task task;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private Label title;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private Label time;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    private FlowPane tags;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        this.task \u003d task;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        id.setText(displayedIndex + \"\");"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        title.setText(task.getTitle().value);"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        time.setText(\"Deadline: \" + DATE_FORMATTER.format(task.getTime().value.getTime()));"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        if (task.getTime().isExpired()) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            addExpiredTag();"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"     * Add an expired tag to the Task Card"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    private void addExpiredTag() {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        Label expiredTask \u003d new Label(\"Expired\");"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        expiredTask.getStyleClass().add(\"red\");"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        tags.getChildren().add(expiredTask);"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"        // state check"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":71,"-":5}},{"path":"src/main/java/seedu/address/ui/TaskListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"content":"//@@author Sisyphus25-reused"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"//Reuse from PersonListPanel class with modification"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" * Panel containing the list of tasks."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"public class TaskListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        setConnections(taskList);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map(taskList, (task) -\u003e"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"                new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TaskCard}."},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            super.updateItem(task, empty);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(null);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                setText(null);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":47,"-":11}},{"path":"src/main/java/seedu/address/ui/ShortcutListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":" * Panel containing the list of Shortcuts."},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutListPanel extends  UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    private static final String FXML \u003d \"ShortcutListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    private ListView\u003cShortcutCard\u003e shortcutListView;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutListPanel(ObservableList\u003cShortcutDoubles\u003e shortcutList) {"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        setConnections(shortcutList);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    private void setConnections(ObservableList\u003cShortcutDoubles\u003e shortcutList) {"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cShortcutCard\u003e mappedList \u003d EasyBind.map(shortcutList, (shortcutDoubles) -\u003e"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"                new ShortcutCard(shortcutDoubles, shortcutList.indexOf(shortcutDoubles) + 1));"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        shortcutListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        shortcutListView.setCellFactory(listView -\u003e new ShortcutListViewCell());"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    class ShortcutListViewCell extends ListCell\u003cShortcutCard\u003e {"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        @Override"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        protected void updateItem(ShortcutCard shortcutCard, boolean isEmpty) {"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"            super.updateItem(shortcutCard, isEmpty);"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"            if (isEmpty || shortcutCard \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"                setGraphic(null);"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"                setText(null);"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"                setGraphic(shortcutCard.getRoot());"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":56}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * An UI component that displays information of a {@code Appointment}."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"EEE, MMMMM dd, HH:mm a\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public final Appointment appointment;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private Label title;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private Label time;"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private Label endTime;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    private Label personToMeet;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        id.setText(displayedIndex + \"\");"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        title.setText(appointment.getTitle().value);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        time.setText(\"From: \" + DATE_FORMATTER.format(appointment.getStartTime().value.getTime()));"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        endTime.setText(\"To: \" + DATE_FORMATTER.format(appointment.getEndTime().value.getTime()));"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        if (appointment.getPersonToMeet() !\u003d null) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet.setText(\"With \" + appointment.getPersonToMeet().getName());"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet.setText(\"\");"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof AppointmentCard)) {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        // state check"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":65,"-":4}},{"path":"src/main/java/seedu/address/ui/ClassListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":""},{"lineNumber":16,"content":"//@@author randypx-reused"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"//Reuse from PersonListPanel class with modification"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":" * Panel containing the list of classes."},{"lineNumber":20,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"public class ClassListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private static final String FXML \u003d \"ClassListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ClassListPanel.class);"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private ListView\u003cClassCard\u003e classListView;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    public ClassListPanel(ObservableList\u003cClass\u003e classList) {"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        setConnections(classList);"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    private void setConnections(ObservableList\u003cClass\u003e classList) {"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"        ObservableList\u003cClassCard\u003e mappedList \u003d EasyBind.map(classList, (group)"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"            -\u003e new ClassCard(group, classList.indexOf(group) + 1));"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"        classListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        classListView.setCellFactory(listView -\u003e new ClassListViewCell());"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":""},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClassCard}."},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    class ClassListViewCell extends ListCell\u003cClassCard\u003e {"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":""},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        @Override"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        protected void updateItem(ClassCard classCard, boolean empty) {"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"            super.updateItem(classCard, empty);"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"            if (empty || classCard \u003d\u003d null) {"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"                setGraphic(null);"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"                setText(null);"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"                setGraphic(classCard.getRoot());"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":""},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":4,"randypx":43,"-":11}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"content":"//@@author Sisyphus25-reused"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"//Reuse from PersonListPanel class with modification"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" * Panel containing the list of appointments."},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private ListView\u003cAppointmentCard\u003e appointmentListView;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        setConnections(appointmentList);"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        ObservableList\u003cAppointmentCard\u003e mappedList \u003d EasyBind.map(appointmentList, (appointment) -\u003e"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"                        new AppointmentCard(appointment, appointmentList.indexOf(appointment) + 1));"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code AppointmentCard}."},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointmentCard\u003e {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        @Override"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        protected void updateItem(AppointmentCard appointment, boolean empty) {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            super.updateItem(appointment, empty);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            if (empty || appointment \u003d\u003d null) {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(null);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                setText(null);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"                setGraphic(appointment.getRoot());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":47,"-":11}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.commons.events.model.ClassListChangedEvent;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"import seedu.address.commons.events.model.StudentListChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    private static final String EXTENSIONS_STYLESHEET \u003d \"view/Extensions.css\";"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TAG_COLOUR_STYLESHEET \u003d \"view/TagColour.css\";"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    private static final ThemeList THEME_LIST \u003d new ThemeList();"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DEFAULT_THEME \u003d \"light\";"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    private AppointmentListPanel appointmentListPanel;"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    private TaskListPanel taskListPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutListPanel shortcutListPanel;"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    private ClassListPanel classListPanel;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    private String theme;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    private StackPane listPanelPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        setTheme();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    private void setTheme() {"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"        setTheme(DEFAULT_THEME);"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    private void setTheme(String theme) {"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(EXTENSIONS_STYLESHEET);"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(TAG_COLOUR_STYLESHEET);"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().add(THEME_LIST.getThemeStyleSheet(theme));"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"    private void handleThemeChangeEvent(ThemeChangeEvent event) {"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"        theme \u003d event.theme;"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        Platform.runLater("},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"                this::changeTheme"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        );"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"    private void changeTheme() {"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"        primaryStage.getScene().getStylesheets().clear();"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        setTheme(theme);"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":141,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":146,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":147,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":151,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":"        listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":175,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":176,"author":{"gitID":"Sisyphus25"},"content":"        calendarPanel \u003d new CalendarPanel(logic.getFilteredAppointmentList());"},{"lineNumber":177,"author":{"gitID":"Sisyphus25"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":178,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":"        shortcutListPanel \u003d new ShortcutListPanel(logic.getFilteredShortcutList());"},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":184,"author":{"gitID":"randypx"},"content":"        classListPanel \u003d new ClassListPanel(logic.getFilteredClassList());"},{"lineNumber":185,"author":{"gitID":"randypx"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":213,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"     * Toggles list"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":229,"author":{"gitID":"Sisyphus25"},"content":"    public void toggleList(String list) {"},{"lineNumber":230,"author":{"gitID":"Sisyphus25"},"content":"        listPanelPlaceholder.getChildren().clear();"},{"lineNumber":231,"author":{"gitID":"Sisyphus25"},"content":"        switch(list) {"},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":"        case \"appointments\":"},{"lineNumber":233,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"},{"lineNumber":234,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":235,"author":{"gitID":"shanmu9898"},"content":"        case \"tasks\":"},{"lineNumber":236,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":237,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":238,"author":{"gitID":"shanmu9898"},"content":"        case \"contacts\":"},{"lineNumber":239,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":240,"author":{"gitID":"randypx"},"content":"            break;"},{"lineNumber":241,"author":{"gitID":"shanmu9898"},"content":"        case \"shortcuts\":"},{"lineNumber":242,"author":{"gitID":"shanmu9898"},"content":"            listPanelPlaceholder.getChildren().add(shortcutListPanel.getRoot());"},{"lineNumber":243,"author":{"gitID":"shanmu9898"},"content":"            break;"},{"lineNumber":244,"author":{"gitID":"randypx"},"content":"        case \"classes\":"},{"lineNumber":245,"author":{"gitID":"randypx"},"content":"            listPanelPlaceholder.getChildren().add(classListPanel.getRoot());"},{"lineNumber":246,"author":{"gitID":"randypx"},"content":"            break;"},{"lineNumber":247,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":248,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":249,"author":{"gitID":"Sisyphus25"},"content":"            listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":250,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":252,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":276,"author":{"gitID":"Sisyphus25"},"content":"    @Subscribe"},{"lineNumber":277,"author":{"gitID":"Sisyphus25"},"content":"    private void handleToggleListEvent(ToggleListEvent event) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":279,"author":{"gitID":"Sisyphus25"},"content":"        toggleList(event.list);"},{"lineNumber":280,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"randypx"},"content":""},{"lineNumber":282,"author":{"gitID":"randypx"},"content":"    @Subscribe"},{"lineNumber":283,"author":{"gitID":"randypx"},"content":"    private void handleStudentListChangedEvent(StudentListChangedEvent event) {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":286,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"randypx"},"content":""},{"lineNumber":288,"author":{"gitID":"randypx"},"content":"    @Subscribe"},{"lineNumber":289,"author":{"gitID":"randypx"},"content":"    private void handleClassListChangedEvent(ClassListChangedEvent event) {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":291,"author":{"gitID":"randypx"},"content":"        classListPanel \u003d new ClassListPanel(logic.getFilteredClassList());    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":75,"randypx":17,"-":189,"shanmu9898":11}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.StringJoiner;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import javafx.scene.shape.Polygon;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private StackPane cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    private Label subjects;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    private Polygon studentTag;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        id.setText(displayedIndex + \"\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        initTags(person);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        if (person instanceof Student) {"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"            initSubjects((Student) person);"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"            subjects.setText(\"\");"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"            studentTag.setVisible(false);"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    private void initTags(Person person) {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            tagLabel.getStyleClass().add(tag.tagColorStyle);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        });"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"     * Sets the text of  the {@code subjects} label with all the {@code Subject} of the student\u0027s classes."},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    private void initSubjects(Student student) {"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        StringJoiner joiner \u003d new StringJoiner(\", \");"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"        for (Subject subject: student.getSubjectList()) {"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"            joiner.add(subject.toString());"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        subjects.setText(\"Subjects: \" + joiner.toString());"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Sisyphus25":26,"randypx":17,"-":66}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    private String appTitle \u003d \"TeachConnect\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"shanmu9898":1}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_CLASS_DISPLAYED_INDEX \u003d \"The class index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index %1$s is invalid\";"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_STUDENT_INDEX \u003d \"Index %1$s is invalid is not a student\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_DELETE_UNSUPPORTED \u003d \"Current listing does not support \u0027delete\u0027\\n\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"randypx":4,"-":12}},{"path":"src/main/java/seedu/address/ui/ClassCard.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":""},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * An UI component that displays information of a {@code Class}."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"public class ClassCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":""},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private static final String FXML \u003d \"ClassListCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private static final String DATE_FORMAT \u003d \"dd MMMMM yy\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":""},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    public final Class classroom;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":""},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private Label className;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    private Label id;"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    private Label subject;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    private Label duration;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    private Label students;"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public ClassCard(Class group, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"        this.classroom \u003d group;"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"        id.setText(displayedIndex + \"\");"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"        className.setText(group.getName().fullName);"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        subject.setText(group.getSubject().value);"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        duration.setText(\"From \" + DATE_FORMATTER.format(group.getStartDate().value.getTime()) + \" to \""},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"                + DATE_FORMATTER.format(group.getEndDate().value.getTime()));"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        StringBuilder studentList \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        group.getStudents().forEach(student -\u003e studentList.append(student.fullName).append(\"\\n\"));"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"        students.setText(studentList.toString());"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":""},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"            return true;"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":""},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"        // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"        if (!(other instanceof ClassCard)) {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            return false;"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":""},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        // state check"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        ClassCard card \u003d (ClassCard) other;"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 classroom.equals(card.classroom);"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":6,"randypx":58,"-":4}},{"path":"src/main/java/seedu/address/ui/ShortcutCard.java","lines":[{"lineNumber":1,"content":"//@@author shanmu9898-unused"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * An UI component that displays information of a {@code Shortcut Double}"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    private static final String FXML \u003d \"ShortcutListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public  final ShortcutDoubles shortcutDoubles;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    private HBox cardPane;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    private Label shortcut;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    private Label command;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCard(ShortcutDoubles shortcutDoubles, int displayedIndex) {"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutDoubles \u003d shortcutDoubles;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        shortcut.setText(\"\u003d\u003d\u003d\u003e \" + shortcutDoubles.shortcutWord);"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        command.setText(shortcutDoubles.commandWord);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof ShortcutCard)) {"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        // state check"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"        ShortcutCard card \u003d (ShortcutCard) other;"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 shortcutDoubles.equals(card.shortcutDoubles);"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":2,"-":12,"shanmu9898":39}},{"path":"src/main/java/seedu/address/commons/events/ui/ThemeChangeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to change them"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ThemeChangeEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public final String theme;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ThemeChangeEvent(String theme) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        this.theme \u003d theme;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":4}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"                + data.getTagList().size() + \", number of events \" + data.getAppointmentList().size()"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"                + data.getCommandsList().size() + \", number of shortcuts\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":1,"-":18,"shanmu9898":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleCalendarViewEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to toggle Calendar view mode"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    public final Character viewMode;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewEvent(Character viewMode) {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"        this.viewMode \u003d viewMode;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":16,"-":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered list of tasks */"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    /** Returns an unmodifiable view of the filtered list of Shortcuts */"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cShortcutDoubles\u003e getFilteredShortcutList();"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    //@@author randypx-reused"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    /** Returns an unmodifiable view of the filtered list of classes */"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    ObservableList\u003cClass\u003e getFilteredClassList();"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":""},{"lineNumber":43,"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns the item type of the current active list that is shown in the GUI by the address book*/"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    String getCurrentActiveListType();"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":11,"randypx":4,"-":27,"shanmu9898":7}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Indicates a request to toggle List"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleListEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    public final String list;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleListEvent(String list) {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"        this.list \u003d list;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":21}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"Type must be student or defualt(empty).\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"        String[] preambleArgs \u003d argMultimap.getPreamble().split(\" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"                || preambleArgs.length \u003e 1) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"            switch (preambleArgs[0]) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"            case \"\":"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Person(name, phone, email, address, tagList));"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            case \"student\":"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                return new AddCommand(new Student(name, phone, email, address, tagList));"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":""},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            default:"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_TYPE);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":62}},{"path":"src/main/java/seedu/address/commons/events/model/ClassListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":" * Indicates the class list has changed due to the deletion/edit of a student."},{"lineNumber":8,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"public class ClassListChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":""},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"    public ClassListChangedEvent() {"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":""},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/StudentListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":" * Indicates the student list has changed due to the addition/ deletion of a class."},{"lineNumber":8,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"public class StudentListChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":""},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"    public StudentListChangedEvent() {"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":""},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":15,"-":3}},{"path":"src/main/java/seedu/address/commons/events/model/AppointmentListChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" * Indicates the appointment list has changed"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"public class AppointmentListChangedEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public final ObservableList\u003cAppointment\u003e appointmentList;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public AppointmentListChangedEvent(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        this.appointmentList \u003d appointmentList;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":21,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new ImportCommand object"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        String[] parameterGetterArray \u003d trimmedArgs.split(\" \");"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        if (parameterGetterArray.length !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"            return new ImportCommand(parameterGetterArray[0]);"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":4,"shanmu9898":37}},{"path":"src/main/java/seedu/address/logic/parser/ToggleCalendarViewParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" * Parser for ToggleCalendarViewCommand"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewParser implements Parser\u003cToggleCalendarViewCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code viewMode} of arguments in the context of the ToggleCalendarViewParser"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ToggleCalendarViewCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        String viewMode \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        if (viewMode.isEmpty() || !isValidViewMode(viewMode)) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"                    ToggleCalendarViewCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        return new ToggleCalendarViewCommand(viewMode.charAt(0));"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * @param str"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if the string is a valid view mode or not"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidViewMode(String str) {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        if (str.length() !\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        switch (str.charAt(0)) {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027w\u0027):"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027d\u0027):"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        case(\u0027m\u0027):"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":40,"-":4,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/parser/SetAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new SetAppointmentCommand object"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommandParser implements Parser\u003cSetAppointmentCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code String} of arguments in the context of the SetAppointmentCommand"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     * and returns a SetAppointmentCommand object for execution."},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_START_TIME,"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"                        PREFIX_END_TIME, PREFIX_INDEX);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_START_TIME, PREFIX_END_TIME)"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"                    SetAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            Index index \u003d null;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            Time startTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            Time endTime \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            Optional\u003cIndex\u003e optionalIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX));"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            if (optionalIndex.isPresent()) {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"                index \u003d optionalIndex.get();"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            Appointment appointment \u003d new Appointment(title, startTime, endTime);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            return new SetAppointmentCommand(appointment, index);"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        } catch (IllegalValueException | IllegalArgumentException ive) {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":59,"randypx":2,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/DeleteShortcutCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new DeleteShortcutCommand object"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommandParser implements Parser\u003cDeleteShortcutCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteShortcutCommand"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"     * and returns a DeleteShortcutCommand object for execution."},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public DeleteShortcutCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        String[] splitWords \u003d trimmedArgs.split(\" \");"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"        if (splitWords.length \u003e 2 || splitWords.length \u003c 2) {"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteShortcutCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"            return new DeleteShortcutCommand(splitWords[0], splitWords[1]);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":31}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.DeleteShortcutCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"import seedu.address.logic.commands.FormCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetAppointmentCommand;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ToggleCalendarViewCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cShortcutDoubles\u003e shortcutDoubles;"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    public AddressBookParser(List\u003cShortcutDoubles\u003e shortcutDoubles) {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutDoubles \u003d shortcutDoubles;"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    public AddressBookParser(){}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException  {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"        if (shortcutDoubles !\u003d null) {"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"            for (ShortcutDoubles s : shortcutDoubles) {"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"                if (s.shortcutWord.equals(commandWord)) {"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"                    commandWord \u003d s.commandWord;"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"                }"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"        case FormCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"            return new FormCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"        case SetAppointmentCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"            return new SetAppointmentCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"        case SetTaskCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"            return new SetTaskCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return new SortCommand();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"        case ShortcutCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"            return new ShortcutCommandParser().parse(arguments);"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        case ToggleCalendarViewCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"            return new ToggleCalendarViewParser().parse(arguments);"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":"        case DeleteShortcutCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":"            return new DeleteShortcutCommandParser().parse(arguments);"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":18,"randypx":4,"-":94,"shanmu9898":37}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_PATH \u003d new Prefix(\"p/\");"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_TAG_EXPORT \u003d new Prefix(\"t/\");"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_RANGE \u003d new Prefix(\"r/\");"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"te/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":3,"randypx":1,"-":14,"shanmu9898":4}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":" * Parses input arguments and creates a new ExportCommand object"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PATH, PREFIX_TYPE);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        String[] preambleArgs \u003d argMultiMap.getPreamble().split(\" \");"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_NAME, PREFIX_PATH, PREFIX_TYPE)"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"                || preambleArgs.length \u003e 1) {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        args.trim();"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"        String[] splitwords \u003d args.split(\" \");"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        if (splitwords[1].equalsIgnoreCase(\"classes\")) {"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"            argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PATH, PREFIX_TYPE);"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"            preambleArgs \u003d argMultiMap.getPreamble().split(\" \");"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"            if (!arePrefixesPresent(argMultiMap, PREFIX_NAME, PREFIX_PATH, PREFIX_TYPE)"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"                    || preambleArgs.length \u003e 1) {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"            String name \u003d argMultiMap.getValue(PREFIX_NAME).orElse(\"\");"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"            String path \u003d argMultiMap.getValue(PREFIX_PATH).orElse(\"\");"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"            String type \u003d argMultiMap.getValue(PREFIX_TYPE).orElse(\"xml\");"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"            if (!(type.equalsIgnoreCase(\"excel\") || type.equalsIgnoreCase(\"xml\"))) {"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"            return new ExportCommand(path, name, type);"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"            argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_RANGE,"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"                    PREFIX_TAG_EXPORT, PREFIX_PATH, PREFIX_TYPE);"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"            preambleArgs \u003d argMultiMap.getPreamble().split(\" \");"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            if (!arePrefixesPresent(argMultiMap, PREFIX_NAME, PREFIX_RANGE, PREFIX_PATH, PREFIX_TYPE)"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"                    || preambleArgs.length \u003e 1) {"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"            String name \u003d argMultiMap.getValue(PREFIX_NAME).orElse(\"\");"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"            String range \u003d argMultiMap.getValue(PREFIX_RANGE).orElse(\"all\");"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"            String tag \u003d argMultiMap.getValue(PREFIX_TAG_EXPORT).orElse(\"shouldnotbethistag\");"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"            String path \u003d argMultiMap.getValue(PREFIX_PATH).orElse(\"\");"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"            String type \u003d argMultiMap.getValue(PREFIX_TYPE).orElse(\"xml\");"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"            if (!(type.equalsIgnoreCase(\"excel\") || type.equalsIgnoreCase(\"xml\"))) {"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"            Tag tagExport \u003d new Tag(tag);"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"            return new ExportCommand(range, tagExport, path, name, type);"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":4,"shanmu9898":93}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public static final String[] THEME_LIST \u003d {\"dark\", \"light\", \"doge\", \"galaxy\"};"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e onebasedIndex} into an {@code Optional\u003cIndex\u003e}"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"     * if {@code onebasedIndex} is present."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cIndex\u003e parseIndex(Optional\u003cString\u003e oneBasedIndex) throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(oneBasedIndex);"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        return oneBasedIndex.isPresent() ? Optional.of(parseIndex(oneBasedIndex.get())) : Optional.empty();"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"     * Parses {@code oneBasedIndexes} into a {@code List\u003cIndex\u003e} and returns it."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"     * @throws IllegalValueException if the specified indexes is invalid (not non-zero unsigned integer)."},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        String[] indexArr \u003d oneBasedIndexes.split(\"[ ,]\");"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        for (String index: indexArr) {"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"            indexList.add(Index.fromOneBased(Integer.parseInt(index)));"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"        return indexList;"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":""},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"     * Parses a {@code Optional\u003cString\u003e onebasedIndexes} into an {@code Optional\u003cList\u003cIndex\u003e\u003e}"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"     * if {@code onebasedIndexes} is present."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"    public static Optional\u003cList\u003cIndex\u003e\u003e parseIndexes(Optional\u003cString\u003e oneBasedIndexes) throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"        requireNonNull(oneBasedIndexes);"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        return oneBasedIndexes.isPresent() ? Optional.of(parseIndexes(oneBasedIndexes.get())) : Optional.empty();"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":186,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e title} into an {@code Optional\u003cTitle\u003e} if {@code title} is present."},{"lineNumber":188,"author":{"gitID":"Sisyphus25"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cTitle\u003e parseTitle(Optional\u003cString\u003e title) throws IllegalValueException {"},{"lineNumber":191,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"        return title.isPresent() ? Optional.of(parseTitle(title.get())) : Optional.empty();"},{"lineNumber":193,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":195,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code String title} into a {@code Title}."},{"lineNumber":197,"author":{"gitID":"Sisyphus25"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":198,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":199,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if the given {@code title} is invalid."},{"lineNumber":200,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"Sisyphus25"},"content":"    public static Title parseTitle(String title) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":203,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedTitle \u003d title.trim();"},{"lineNumber":204,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(trimmedTitle)) {"},{"lineNumber":205,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"Sisyphus25"},"content":"        return new Title(trimmedTitle);"},{"lineNumber":208,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":210,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":212,"author":{"gitID":"Sisyphus25"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":213,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"Sisyphus25"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalArgumentException {"},{"lineNumber":215,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(time);"},{"lineNumber":216,"author":{"gitID":"Sisyphus25"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":217,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":219,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"Sisyphus25"},"content":"     * Parses a {@code String time} into a {@code Time}."},{"lineNumber":221,"author":{"gitID":"Sisyphus25"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":222,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"Sisyphus25"},"content":"    public static Time parseTime(String time) throws IllegalArgumentException {"},{"lineNumber":224,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(time);"},{"lineNumber":225,"author":{"gitID":"Sisyphus25"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":226,"author":{"gitID":"Sisyphus25"},"content":"        return new Time(trimmedTime, false);"},{"lineNumber":227,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"Sisyphus25"},"content":"    //@@author randypx-reused"},{"lineNumber":229,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"randypx"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"randypx"},"content":"    public static Optional\u003cTime\u003e parseDate(Optional\u003cString\u003e date) throws IllegalArgumentException {"},{"lineNumber":234,"author":{"gitID":"randypx"},"content":"        requireNonNull(date);"},{"lineNumber":235,"author":{"gitID":"randypx"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":236,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"randypx"},"content":""},{"lineNumber":238,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"randypx"},"content":"     * Parses a {@code String time} into a {@code Time}."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":241,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"randypx"},"content":"    public static Time parseDate(String date) throws IllegalArgumentException {"},{"lineNumber":243,"author":{"gitID":"randypx"},"content":"        requireNonNull(date);"},{"lineNumber":244,"author":{"gitID":"randypx"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":245,"author":{"gitID":"randypx"},"content":"        return new Time(trimmedDate, true);"},{"lineNumber":246,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":248,"content":"    //@@author"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":259,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"randypx"},"content":""},{"lineNumber":276,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":277,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":278,"author":{"gitID":"randypx"},"content":"     * Parses a {@code String subject} into a {@code Subject}."},{"lineNumber":279,"author":{"gitID":"randypx"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":280,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":281,"author":{"gitID":"randypx"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":282,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"randypx"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":284,"author":{"gitID":"randypx"},"content":"        requireNonNull(subject);"},{"lineNumber":285,"author":{"gitID":"randypx"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":286,"author":{"gitID":"randypx"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":287,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":288,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"randypx"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":290,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":57,"randypx":57,"-":176}},{"path":"src/main/java/seedu/address/logic/parser/ShortcutCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.ShortcutCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" * Parser"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommandParser implements Parser\u003cShortcutCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"     * Parses the given {@code String} of arguments in the context of the ShortcutCommand"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"     * and returns an ShortcutCommand object for execution."},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(args);"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        String[] splitWords \u003d trimmedArgs.split(\" \");"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        if (splitWords.length \u003e 2 || splitWords.length \u003c 2) {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShortcutCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"            return new ShortcutCommand(splitWords[0], splitWords[1]);"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"-":3,"shanmu9898":27}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.ParserUtil.THEME_LIST;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new ChangeThemeCommand object"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code viewMode} of arguments in the context of the ChangeThemeCommandParser"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"        String theme \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        if (!isValidTheme(theme)) {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"                    ChangeThemeCommand.MESSAGE_INVALID_THEME));"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        return new ChangeThemeCommand(theme);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     * @param theme"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if {@code theme} is a valid theme name"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidTheme(String theme) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        return !theme.isEmpty() \u0026\u0026 Arrays.asList(THEME_LIST).contains(theme);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":33,"-":4,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_DELETE_UNSUPPORTED;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import static seedu.address.model.Model.LIST_TYPE_APPOINTMENT;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.model.Model.LIST_TYPE_CLASS;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.model.Model.LIST_TYPE_CONTACT;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import static seedu.address.model.Model.LIST_TYPE_TASK;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":" * Deletes an entry identified using it\u0027s last displayed index."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            + \": Deletes the entry identified by the index number used in the last shown listing.\\n\""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_STUDENT_SUCCESS \u003d \"Deleted Student: %1$s\";"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_CLASS_SUCCESS \u003d \"Deleted Class: %1$s\";"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    private final Index targetIndex;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    private Object toDelete;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        if (toDelete instanceof Student) {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteStudent((Student) toDelete);"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_STUDENT_SUCCESS, toDelete));"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"                throw new AssertionError(\"The target student cannot be missing\");"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        } else if (toDelete instanceof Person) {"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"                model.deletePerson((Person) toDelete);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, toDelete));"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"                throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        } else if (toDelete instanceof Appointment) {"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteAppointment((Appointment) toDelete);"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS, toDelete));"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"            } catch (EventNotFoundException enfe) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"                throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        } else if (toDelete instanceof Task) {"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteTask((Task) toDelete);"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, toDelete));"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"            } catch (EventNotFoundException enfe) {"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"                throw new AssertionError(\"The target task cannot be missing\");"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        } else if (toDelete instanceof Class) {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"                model.deleteClass((Class) toDelete);"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_CLASS_SUCCESS, toDelete));"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"            } catch (StudentClassNotFoundException scnfe) {"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"                throw new AssertionError(\"The target class cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"            throw new NullPointerException();"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        String listType \u003d model.getCurrentActiveListType();"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        switch (listType) {"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        case LIST_TYPE_CONTACT: {"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"            toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        case LIST_TYPE_APPOINTMENT: {"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"            toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"        case LIST_TYPE_TASK: {"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"            toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"        case LIST_TYPE_CLASS: {"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cClass\u003e lastShownList \u003d model.getFilteredClassList();"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_CLASS_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"            toDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_DELETE_UNSUPPORTED);"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(this.toDelete, ((DeleteCommand) other).toDelete));"},{"lineNumber":146,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":124,"randypx":12,"-":11}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ONLY_STUDENTS;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all \";"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_CONTACT \u003d \"contacts\";"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_STUDENT \u003d \"students\";"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_APPOINTMENT \u003d \"appointments\";"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_TASK \u003d \"tasks\";"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public static final String TYPE_SHORTCUT \u003d \"shortcuts\";"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    public static final String TYPE_CLASS \u003d \"classes\";"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private static final String MESSAGE_INVALID_TYPE \u003d \"TYPE is missing or invalid\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists selected type. \\n\""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"            + \"Parameter: TYPE. \""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"            + \"Accepted TYPEs are \" + TYPE_CONTACT + \" \" + TYPE_STUDENT"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"            + \" \" + TYPE_APPOINTMENT + \" \" + TYPE_TASK"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            + \" \" + TYPE_SHORTCUT + \" \" + TYPE_CLASS + \"\\n\""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            + \"Example: \" + COMMAND_WORD + \" appointments \\n\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final String type;"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ListCommand(String type) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.type \u003d type;"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        switch (type) {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_CONTACT:"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_CONTACT);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_CONTACT);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_STUDENT:"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_CONTACT);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ONLY_STUDENTS);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_STUDENT);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_APPOINTMENT:"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_APPOINTMENT);"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_APPOINTMENT);"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_TASK:"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_TASK);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_TASK);"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_SHORTCUT:"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_SHORTCUT);"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_SHORTCUT);"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        case TYPE_CLASS:"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"            evokeToggleListEvent(TYPE_CLASS);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(MESSAGE_SUCCESS + TYPE_CLASS);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_INVALID_TYPE);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    /** Raises an event to indicate the change of list view */"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"    private void evokeToggleListEvent(String type) {"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        model.changeCurrentActiveListType(type);"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ToggleListEvent(type));"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ListCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.type.equals(((ListCommand) other).type)); // state check"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":53,"randypx":13,"-":17,"shanmu9898":5}},{"path":"src/main/java/seedu/address/logic/parser/SetTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.logic.commands.SetTaskCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" * Parses input arguments and creates a new SetTaskCommand object"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommandParser implements Parser\u003cSetTaskCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code String} of arguments in the context of the SetTaskCommand"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     * and returns a SetTaskCommand object for execution."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public SetTaskCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_END_TIME);"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_END_TIME)"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"                    SetTaskCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE)).get();"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"            Time time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"            Task task \u003d new Task(title, time);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"            return new SetTaskCommand(task);"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        } catch (IllegalValueException | IllegalArgumentException ive) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":49,"randypx":1,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":" * Parser for ListCommand"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"     * Parses the given {@code args} of arguments in the context of the ListCommandParser"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * and returns an ListCommand object for execution."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        String item \u003d args.trim();"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        if (!isValidItem(item)) {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"                    ListCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        return new ListCommand(item);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     * @param str"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"     * @return whether if the string is a valid view mode or not"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    private boolean isValidItem(String str) {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        switch (str) {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_CONTACT):"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_STUDENT):"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_APPOINTMENT):"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_TASK):"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_SHORTCUT):"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        case(ListCommand.TYPE_CLASS):"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        default:"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":38,"-":5,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteShortcutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":" * Deletes a specific shortcut from the addressbook."},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"public class DeleteShortcutCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"delete_shortcut\";"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" CommandWord \" + \" ShortcutWord \""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"                                               + \" :Deletes a shortcut for any command word\";"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_DELETE_SHORTCUT_SUCCESS \u003d \"The shortcut has been deleted!\";"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    private final String shortcutWord;"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    private final String commandWord;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    private ShortcutDoubles commandShortcut;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public DeleteShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        commandShortcut \u003d new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandShortcut);"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"            model.deleteCommandShortcut(commandShortcut);"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.CommandShortcutNotFoundException csnf) {"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(\"Please enter a valid Shortcut Command you have saved\");"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_SHORTCUT_SUCCESS));"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof DeleteShortcutCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shortcutWord.equals(((DeleteShortcutCommand) other).shortcutWord) // state check"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.commandWord.equals(((DeleteShortcutCommand) other).commandWord) // state check"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 Objects.equals(this.commandShortcut, ((DeleteShortcutCommand) other).commandShortcut));"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":55}},{"path":"src/main/java/seedu/address/logic/commands/ToggleCalendarViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleCalendarViewEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * Command to change calendar view"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ToggleCalendarViewCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"calendar\";"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Toggles calendar view. \\n\""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameter: VIEW_MODE\\n\""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"            + \"View mode: Day view: d, Week view: w, Month view: m\\n\""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" d\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_VIEW_TOGGLE_SUCCESS \u003d \"View changed.\";"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private Character viewMode;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public ToggleCalendarViewCommand(Character viewMode) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(viewMode);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        this.viewMode \u003d viewMode;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ToggleCalendarViewEvent(viewMode));"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        return new CommandResult(MESSAGE_VIEW_TOGGLE_SUCCESS);"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ToggleCalendarViewCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.viewMode \u003d\u003d ((ToggleCalendarViewCommand) other).viewMode); // state check"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":39,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"LimShiMinJonathan"},"content":"//@@author LimShiMinJonathan"},{"lineNumber":4,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":5,"author":{"gitID":"LimShiMinJonathan"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"LimShiMinJonathan"},"content":" * Sorts contacts lexicographically."},{"lineNumber":7,"author":{"gitID":"LimShiMinJonathan"},"content":" */"},{"lineNumber":8,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":9,"author":{"gitID":"LimShiMinJonathan"},"content":"public class SortCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":11,"author":{"gitID":"LimShiMinJonathan"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":12,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":13,"author":{"gitID":"LimShiMinJonathan"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts contacts lexicographically \""},{"lineNumber":14,"author":{"gitID":"LimShiMinJonathan"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":16,"author":{"gitID":"LimShiMinJonathan"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Contacts have been sorted!\";"},{"lineNumber":17,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":18,"author":{"gitID":"LimShiMinJonathan"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"LimShiMinJonathan"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":21,"author":{"gitID":"LimShiMinJonathan"},"content":"        model.sortByNameFilteredPersonList();"},{"lineNumber":22,"author":{"gitID":"LimShiMinJonathan"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"LimShiMinJonathan"},"content":"}"},{"lineNumber":25,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":26,"author":{"gitID":"LimShiMinJonathan"},"content":"//@@author"}],"authorContributionMap":{"LimShiMinJonathan":24,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Set the person list to active and switch to person list view for the GUI."},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * Method used to support command that needed the person list to be shown: Find, Select"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public void setPersonListActive() {"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"        model.changeCurrentActiveListType(model.LIST_TYPE_CONTACT);"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        EventsCenter.getInstance().post(new ToggleListEvent(model.LIST_TYPE_CONTACT));"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":8,"randypx":2,"-":44,"shanmu9898":1}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"            + \" [TYPE] \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            + \" student \""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            + PREFIX_NAME + \" Mary Jane \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"            + PREFIX_EMAIL + \"MJ@example.com \""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"            + PREFIX_ADDRESS + \"478, Pasir Ris, #03-12 \""},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"            + PREFIX_TAG + \"AStar\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_PERSON_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_ADD_STUDENT_SUCCESS \u003d \"New student added: %1$s\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            if (toAdd instanceof Student) {"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"                model.addStudent((Student) toAdd);"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_STUDENT_SUCCESS, toAdd));"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"                model.addPerson(toAdd);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_ADD_PERSON_SUCCESS, toAdd));"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":18,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/ShortcutCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":" *Creates a shortcut for the user for any commands available in the list."},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"shortcut\";"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" CommandWord \" + \" ShortcutWord \""},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"                                               + \" :Creates a shortcut for any command word \\n\""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"                                               + \"Example: \" + COMMAND_WORD + \" list l\";"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SHORTCUT_AVAILABLE \u003d \"This shortcut already exists!\";"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Successfully added the shortcut\";"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_NO_COMMAND_TO_MAP \u003d \"The command statement is invalid and hence cant be mapped!\";"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    private final String shortcutWord;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    private final String commandWord;"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cShortcutDoubles\u003e commandsList;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private final String[] commandsPresent \u003d {\"add\", \"clear\", \"theme\", \"delete\", \"edit\", \"exit\", \"export\", \"find\","},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"                                              \"help\", \"history\", \"import\", \"list\", \"redo\", \"undo\", \"select\","},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"                                              \"set_appointment\", \"set_task\", \"shortcut\", \"sort\", \"undo\", \"calendar\","},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"                                              \"delete_shortcut\", \"remove\", \"form\"};"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutCommand(String commandWord, String shortcutWord) {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        commandsList \u003d model.getFilteredCommandsList();"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"        if (commandsList !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"            if (checkIfCommandPresent()) {"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(String.format(MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles toAdd \u003d new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"            model.addCommandShortcut(toAdd);"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.DuplicateShortcutDoublesException e) {"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(String.format(MESSAGE_SHORTCUT_AVAILABLE));"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"     * Checks if the shortcut command is valid or not"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"     * @return whether true or false"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    private boolean checkIfCommandPresent() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"        if (!containsKeyWord(commandWord) || containsKeyWord(shortcutWord)) {"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(MESSAGE_NO_COMMAND_TO_MAP);"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"        for (ShortcutDoubles s : commandsList) {"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"            if (s.shortcutWord.equals(shortcutWord)) {"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"                return true;"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        return false;"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"     * Checks if the command word is in the Array of commands present"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"     * @param commandWord"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"     * @return whether true if the command is present in the command word list or false otherwise"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    private boolean containsKeyWord(String commandWord) {"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        for (String s : commandsPresent) {"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"            if (s.equals(commandWord)) {"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"                return true;"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        return false;"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof ShortcutCommand // instanceof handles nulls"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.shortcutWord.equals(((ShortcutCommand) other).shortcutWord) // state check"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.commandWord.equals(((ShortcutCommand) other).commandWord)); // state check"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":100}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATH;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RANGE;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_EXPORT;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import java.io.BufferedWriter;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"import java.nio.file.Files;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import org.apache.commons.csv.CSVFormat;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import org.apache.commons.csv.CSVPrinter;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":" * Exports people to an XML/Excel file of choice based on tag, index or range"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"public class ExportCommand extends Command {"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_FAIL \u003d \"TeachConnect faced some error while exporting! Please try again!\";"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Please check the index bounds!\";"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Export Success!\";"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_RANGE_ERROR \u003d \"Please input valid range\";"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_TAG_CONTACT_MISMATCH \u003d \"The tag and contact don\u0027t match\";"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports contacts to the TeachConnect Book based \""},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"            + \"on index, range or tag \\n\""},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"            + \"Parameters: \""},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_NAME + \" NAME \""},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_RANGE + \" RANGE \""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \" TAG \""},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_PATH + \" PATH \""},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TYPE + \"FORMAT \\n\""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"{Name of file} \" + PREFIX_RANGE + \"all \""},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \"friends \" + PREFIX_PATH + \"{Path to store} \" + PREFIX_TYPE + \"excel/xml \\n\""},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"{Name of file} \" + PREFIX_RANGE + \"1 \""},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \"friends \" + PREFIX_PATH + \"{Path to store} \" + PREFIX_TYPE + \"excel/xml \\n\""},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 3: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"{Name of file} \" + PREFIX_RANGE + \"1,2 \""},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"            + PREFIX_TAG_EXPORT + \"friends \" + PREFIX_PATH + \"{Path to store} \" + PREFIX_TYPE + \"excel/xml \\n\""},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"            + \"Example 4: \" + COMMAND_WORD + \" classes \" + PREFIX_NAME + \"{Name of file} \" + PREFIX_PATH"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"            + \"{Path to store} \" + PREFIX_TYPE + \"excel/xml \\n\";"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"    private Tag tag;"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    private final String range;"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"    private final String path;"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"    private AddressBook teachConnectBook;"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"    private AddressBookStorage teachConnectStorage;"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"    private final String nameOfExportFile;"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"    private final String type;"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    private ArrayList\u003cPerson\u003e exportPersonAddition \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"    private ArrayList\u003cClass\u003e exportClassAddition \u003d new ArrayList\u003cClass\u003e();"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    private ArrayList\u003cStudent\u003e exportStudentAddition \u003d new ArrayList\u003cStudent\u003e();"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"    private boolean isClassesOrNot \u003d false;"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"     * Creates an ExportCommand to export the specified {@code Persons}"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    public ExportCommand(String range, Tag tag, String path, String nameOfExportFile, String type) {"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(range);"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(tag);"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(path);"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(nameOfExportFile);"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(type);"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"        this.range \u003d range;"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        this.path \u003d path;"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        this.tag \u003d tag;"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        this.nameOfExportFile \u003d nameOfExportFile;"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"        this.type \u003d type;"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook \u003d new AddressBook();"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    public ExportCommand(String path, String name, String type) {"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"        this.range \u003d null;"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"        this.path \u003d path;"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"        this.nameOfExportFile \u003d name;"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"        isClassesOrNot \u003d true;"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"        this.type \u003d type;"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook \u003d new AddressBook();"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"     * Handles exceptions of various messages and takes care of the actual execution of the command."},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"        if (isClassesOrNot) {"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"                exportClasses();"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicateClassException e) {"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"            String[] rangeGiven;"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"            CommandResult handledRangeSituation;"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"                rangeGiven \u003d handleRange();"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":"            } catch (IOException e) {"},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"                handledRangeSituation \u003d handleRangeArray(rangeGiven);"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":"            } catch (IndexOutOfBoundsException e) {"},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_OUT_OF_BOUNDS);"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":"            if (handledRangeSituation !\u003d null) {"},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":"                return handledRangeSituation;"},{"lineNumber":143,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":145,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":"        if (!tryStorage(type, isClassesOrNot)) {"},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":"     * Exports classes to an xml file"},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"    private void exportClasses() throws DuplicateClassException, DuplicatePersonException {"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cClass\u003e classes \u003d model.getFilteredClassList();"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cStudent\u003e students \u003d model.getFilteredStudentsList();"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"        for (Class c : classes) {"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"            List\u003cName\u003e studentNames \u003d c.getStudents();"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":"            addStudentsToList(students, studentNames);"},{"lineNumber":162,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":163,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"shanmu9898"},"content":"        for (Class c : classes) {"},{"lineNumber":165,"author":{"gitID":"shanmu9898"},"content":"            exportClassAddition.add(c);"},{"lineNumber":166,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setClasses(exportClassAddition);"},{"lineNumber":168,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setStudents(exportStudentAddition);"},{"lineNumber":169,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":170,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":172,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"shanmu9898"},"content":"     * Adds students into the list to add to the XML file later for supporting classes"},{"lineNumber":174,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"shanmu9898"},"content":"    private void addStudentsToList(ObservableList\u003cStudent\u003e students, List\u003cName\u003e studentNames) {"},{"lineNumber":176,"author":{"gitID":"shanmu9898"},"content":"        for (Student s : students) {"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"            if (studentNames.contains(s.getName()) \u0026\u0026 !exportStudentAddition.contains(s)) {"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add(s);"},{"lineNumber":179,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":183,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"shanmu9898"},"content":"     * This method saves the file either as an XML file or an CSV file depending on the user preferences."},{"lineNumber":185,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":186,"author":{"gitID":"shanmu9898"},"content":"     * @return a boolean values if the storage has been possible or not"},{"lineNumber":187,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"shanmu9898"},"content":"    private boolean tryStorage(String type, boolean isClassesOrNot) throws CommandException {"},{"lineNumber":189,"author":{"gitID":"shanmu9898"},"content":"        if (type.equalsIgnoreCase(\"xml\")) {"},{"lineNumber":190,"author":{"gitID":"shanmu9898"},"content":"            return saveAsXml();"},{"lineNumber":191,"author":{"gitID":"shanmu9898"},"content":"        } else if (type.equalsIgnoreCase(\"excel\")) {"},{"lineNumber":192,"author":{"gitID":"shanmu9898"},"content":"            return saveAsCsv(isClassesOrNot);"},{"lineNumber":193,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"shanmu9898"},"content":"        return true;"},{"lineNumber":195,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":197,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"shanmu9898"},"content":"     * Tries to save the file as an XML file"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"    private boolean saveAsXml() {"},{"lineNumber":201,"author":{"gitID":"shanmu9898"},"content":"        teachConnectStorage \u003d new XmlAddressBookStorage(path + \"/\" + nameOfExportFile + \".xml\");"},{"lineNumber":202,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":203,"author":{"gitID":"shanmu9898"},"content":"            teachConnectStorage.saveAddressBook(teachConnectBook);"},{"lineNumber":204,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":205,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":206,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"shanmu9898"},"content":"        return true;"},{"lineNumber":208,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":210,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"shanmu9898"},"content":"     * Will save as a CSV file using a CSVPrinter including the list of tags"},{"lineNumber":212,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"shanmu9898"},"content":"     * @return boolean"},{"lineNumber":214,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"shanmu9898"},"content":"    private boolean saveAsCsv(boolean isClassesOrNot) throws CommandException {"},{"lineNumber":216,"author":{"gitID":"shanmu9898"},"content":"        CSVPrinter csvPrinter;"},{"lineNumber":217,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"shanmu9898"},"content":"            csvPrinter \u003d csvFileToBeWritten(isClassesOrNot);"},{"lineNumber":219,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":220,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_FAIL));"},{"lineNumber":221,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":"        if (isClassesOrNot) {"},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"            saveAsCsvClasses(csvPrinter);"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":"            saveAsCsvPersons(csvPrinter);"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"            csvPrinter.flush();"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":"            e.printStackTrace();"},{"lineNumber":233,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":235,"author":{"gitID":"shanmu9898"},"content":"        return true;"},{"lineNumber":236,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":238,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"shanmu9898"},"content":"     * Helper for a saving Persons in a CSV format"},{"lineNumber":240,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":241,"author":{"gitID":"shanmu9898"},"content":"     * @param csvPrinter - Helps in writing data to a CSV file"},{"lineNumber":242,"author":{"gitID":"shanmu9898"},"content":"     * @throws CommandException - Should show message fail error"},{"lineNumber":243,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"shanmu9898"},"content":"    private void saveAsCsvPersons(CSVPrinter csvPrinter) throws CommandException {"},{"lineNumber":245,"author":{"gitID":"shanmu9898"},"content":"        for (Person p : exportPersonAddition) {"},{"lineNumber":246,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":247,"author":{"gitID":"shanmu9898"},"content":"                csvPrinter.printRecord(p.getName(), p.getEmail(), p.getPhone(), p.getAddress(), p.getTags());"},{"lineNumber":248,"author":{"gitID":"shanmu9898"},"content":"            } catch (IOException e) {"},{"lineNumber":249,"author":{"gitID":"shanmu9898"},"content":"                throw new CommandException(String.format(MESSAGE_FAIL));"},{"lineNumber":250,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":254,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"shanmu9898"},"content":"     * Helper for a saving Classes in a CSV format"},{"lineNumber":256,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":257,"author":{"gitID":"shanmu9898"},"content":"     * @param csvPrinter - Helps in writing data to a CSV file"},{"lineNumber":258,"author":{"gitID":"shanmu9898"},"content":"     * @throws CommandException - Should show message fail error"},{"lineNumber":259,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"shanmu9898"},"content":"    private void saveAsCsvClasses(CSVPrinter csvPrinter) throws CommandException {"},{"lineNumber":261,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":262,"author":{"gitID":"shanmu9898"},"content":"            for (Class c : exportClassAddition) {"},{"lineNumber":263,"author":{"gitID":"shanmu9898"},"content":"                csvPrinter.printRecord(c.getName(), c.getSubject(), c.getStartDate(),"},{"lineNumber":264,"author":{"gitID":"shanmu9898"},"content":"                        c.getEndDate(), c.getStudents());"},{"lineNumber":265,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":266,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":267,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_FAIL));"},{"lineNumber":268,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":271,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":272,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"shanmu9898"},"content":"     * Returns CSVPrinter which is the file to which the contents are going to be added."},{"lineNumber":274,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"shanmu9898"},"content":"    public CSVPrinter csvFileToBeWritten(boolean isClassesOrNot) throws IOException {"},{"lineNumber":276,"author":{"gitID":"shanmu9898"},"content":"        CSVPrinter csvPrinter;"},{"lineNumber":277,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":278,"author":{"gitID":"shanmu9898"},"content":"        BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(path + \"/\" + nameOfExportFile + \".csv\"));"},{"lineNumber":279,"author":{"gitID":"shanmu9898"},"content":"        if (!isClassesOrNot) {"},{"lineNumber":280,"author":{"gitID":"shanmu9898"},"content":"            csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(\"Name\", \"Email\", \"Phone\","},{"lineNumber":281,"author":{"gitID":"shanmu9898"},"content":"                    \"Address\", \"Tags\"));"},{"lineNumber":282,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":283,"author":{"gitID":"shanmu9898"},"content":"            csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(\"Name\", \"Subject\", \"Start Date\","},{"lineNumber":284,"author":{"gitID":"shanmu9898"},"content":"                    \"End Date\", \"Students\"));"},{"lineNumber":285,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":287,"author":{"gitID":"shanmu9898"},"content":"        return csvPrinter;"},{"lineNumber":288,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":290,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":291,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"shanmu9898"},"content":"     * Handles the range array returned by the handleRange() function"},{"lineNumber":293,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":294,"author":{"gitID":"shanmu9898"},"content":"     * @param rangeGiven"},{"lineNumber":295,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":296,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"shanmu9898"},"content":"    private CommandResult handleRangeArray(String[] rangeGiven) throws DuplicatePersonException,"},{"lineNumber":298,"author":{"gitID":"shanmu9898"},"content":"            IndexOutOfBoundsException,"},{"lineNumber":299,"author":{"gitID":"shanmu9898"},"content":"            CommandException {"},{"lineNumber":300,"author":{"gitID":"shanmu9898"},"content":"        if (rangeGiven[0].equals(\"all\")) {"},{"lineNumber":301,"author":{"gitID":"shanmu9898"},"content":"            exportAllRange(tag);"},{"lineNumber":302,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":303,"author":{"gitID":"shanmu9898"},"content":"            if (exportGivenRange(rangeGiven)) {"},{"lineNumber":304,"author":{"gitID":"shanmu9898"},"content":"                return new CommandResult(MESSAGE_RANGE_ERROR);"},{"lineNumber":305,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":306,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"shanmu9898"},"content":"        return null;"},{"lineNumber":308,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":310,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"shanmu9898"},"content":"     * Exports a particular range considering all the edge constraints."},{"lineNumber":312,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":313,"author":{"gitID":"shanmu9898"},"content":"    private boolean exportGivenRange(String[] rangeGiven) throws DuplicatePersonException, CommandException {"},{"lineNumber":314,"author":{"gitID":"shanmu9898"},"content":"        if (rangeGiven.length !\u003d 1) {"},{"lineNumber":315,"author":{"gitID":"shanmu9898"},"content":"            int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":316,"author":{"gitID":"shanmu9898"},"content":"            int high \u003d Integer.parseInt(rangeGiven[1]);"},{"lineNumber":317,"author":{"gitID":"shanmu9898"},"content":"            if (low \u003e\u003d high) {"},{"lineNumber":318,"author":{"gitID":"shanmu9898"},"content":"                return true;"},{"lineNumber":319,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":320,"author":{"gitID":"shanmu9898"},"content":"                exportRange(low, high, tag);"},{"lineNumber":321,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":322,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":323,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":324,"author":{"gitID":"shanmu9898"},"content":"            int low \u003d Integer.parseInt(rangeGiven[0]);"},{"lineNumber":325,"author":{"gitID":"shanmu9898"},"content":"            exportSpecific(low, tag);"},{"lineNumber":326,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"shanmu9898"},"content":"        return false;"},{"lineNumber":328,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":330,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"shanmu9898"},"content":"     * Adds a specific person/student to the teachConnectBook"},{"lineNumber":332,"author":{"gitID":"shanmu9898"},"content":"     * parameters are an integer and a tag"},{"lineNumber":333,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":334,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":335,"author":{"gitID":"shanmu9898"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":336,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"shanmu9898"},"content":"    private void exportSpecific(int low, Tag tag) throws DuplicatePersonException,"},{"lineNumber":338,"author":{"gitID":"shanmu9898"},"content":"            IndexOutOfBoundsException,"},{"lineNumber":339,"author":{"gitID":"shanmu9898"},"content":"            CommandException {"},{"lineNumber":340,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":341,"author":{"gitID":"shanmu9898"},"content":"        if (exportPeople.get(low - 1).getTags().contains(tag) || tag.equals(new Tag(\"shouldnotbethistag\"))) {"},{"lineNumber":342,"author":{"gitID":"shanmu9898"},"content":"            if (exportPeople.get(low - 1) instanceof Student) {"},{"lineNumber":343,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add((Student) exportPeople.get(low - 1));"},{"lineNumber":344,"author":{"gitID":"shanmu9898"},"content":"                teachConnectBook.addStudent((Student) exportPeople.get(low - 1));"},{"lineNumber":345,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":346,"author":{"gitID":"shanmu9898"},"content":"                exportPersonAddition.add(exportPeople.get(low - 1));"},{"lineNumber":347,"author":{"gitID":"shanmu9898"},"content":"                teachConnectBook.addPerson(exportPeople.get(low - 1));"},{"lineNumber":348,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":349,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":350,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":351,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_TAG_CONTACT_MISMATCH));"},{"lineNumber":352,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":353,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":354,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":356,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":357,"author":{"gitID":"shanmu9898"},"content":"     * Exports a range of people based on the tag and the index range given"},{"lineNumber":358,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":359,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":360,"author":{"gitID":"shanmu9898"},"content":"     * @throws IndexOutOfBoundsException"},{"lineNumber":361,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":362,"author":{"gitID":"shanmu9898"},"content":"    private void exportRange(int low, int high, Tag tag) throws DuplicatePersonException, IndexOutOfBoundsException {"},{"lineNumber":363,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":364,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":365,"author":{"gitID":"shanmu9898"},"content":"        if (tag.equals(new Tag(\"shouldnotbethistag\"))) {"},{"lineNumber":366,"author":{"gitID":"shanmu9898"},"content":"            exportWithoutTag(low, high, exportPeople);"},{"lineNumber":367,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":368,"author":{"gitID":"shanmu9898"},"content":"            exportWithTag(low, high, tag, exportPeople);"},{"lineNumber":369,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":370,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":371,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setPersons(exportPersonAddition);"},{"lineNumber":372,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setStudents(exportStudentAddition);"},{"lineNumber":373,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":375,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":376,"author":{"gitID":"shanmu9898"},"content":"     * Exports people or students when tag is present and range is given"},{"lineNumber":377,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":378,"author":{"gitID":"shanmu9898"},"content":"     * @param low  - lower range"},{"lineNumber":379,"author":{"gitID":"shanmu9898"},"content":"     * @param high - higher range"},{"lineNumber":380,"author":{"gitID":"shanmu9898"},"content":"     * @param tag  - tag given based on which people can be exported"},{"lineNumber":381,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":382,"author":{"gitID":"shanmu9898"},"content":"    private void exportWithTag(int low, int high, Tag tag, ObservableList\u003cPerson\u003e exportPeople) {"},{"lineNumber":383,"author":{"gitID":"shanmu9898"},"content":"        for (int i \u003d low; i \u003c\u003d high; i++) {"},{"lineNumber":384,"author":{"gitID":"shanmu9898"},"content":"            if (exportPeople.get(i - 1).getTags().contains(tag) \u0026\u0026 exportPeople.get(i - 1) instanceof Student) {"},{"lineNumber":385,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add((Student) exportPeople.get(i - 1));"},{"lineNumber":386,"author":{"gitID":"shanmu9898"},"content":"            } else if (exportPeople.get(i - 1).getTags().contains(tag)) {"},{"lineNumber":387,"author":{"gitID":"shanmu9898"},"content":"                exportPersonAddition.add(exportPeople.get(i - 1));"},{"lineNumber":388,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":389,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":390,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":392,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":393,"author":{"gitID":"shanmu9898"},"content":"     * Exports people or students when tag is not present and range is given"},{"lineNumber":394,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":395,"author":{"gitID":"shanmu9898"},"content":"     * @param low  - lower range"},{"lineNumber":396,"author":{"gitID":"shanmu9898"},"content":"     * @param high - higher range"},{"lineNumber":397,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":398,"author":{"gitID":"shanmu9898"},"content":"    private void exportWithoutTag(int low, int high, ObservableList\u003cPerson\u003e exportPeople) {"},{"lineNumber":399,"author":{"gitID":"shanmu9898"},"content":"        for (int i \u003d low; i \u003c\u003d high; i++) {"},{"lineNumber":400,"author":{"gitID":"shanmu9898"},"content":"            if (exportPeople.get(i - 1) instanceof Student) {"},{"lineNumber":401,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add((Student) exportPeople.get(i - 1));"},{"lineNumber":402,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":403,"author":{"gitID":"shanmu9898"},"content":"                exportPersonAddition.add(exportPeople.get(i - 1));"},{"lineNumber":404,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":405,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":406,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":408,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":409,"author":{"gitID":"shanmu9898"},"content":"     * Exports all the contacts in the TeachConnect book if contain certain tag"},{"lineNumber":410,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":411,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicatePersonException"},{"lineNumber":412,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":413,"author":{"gitID":"shanmu9898"},"content":"    private void exportAllRange(Tag tag) throws DuplicatePersonException {"},{"lineNumber":414,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e exportPeople \u003d model.getFilteredPersonList();"},{"lineNumber":415,"author":{"gitID":"shanmu9898"},"content":"        if (tag.equals(new Tag(\"shouldnotbethistag\"))) {"},{"lineNumber":416,"author":{"gitID":"shanmu9898"},"content":"            exportEveryoneWithoutTag(exportPeople);"},{"lineNumber":417,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":418,"author":{"gitID":"shanmu9898"},"content":"            exportEveryoneWithTag(tag, exportPeople);"},{"lineNumber":419,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":420,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setPersons(exportPersonAddition);"},{"lineNumber":421,"author":{"gitID":"shanmu9898"},"content":"        teachConnectBook.setStudents(exportStudentAddition);"},{"lineNumber":422,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":424,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":425,"author":{"gitID":"shanmu9898"},"content":"     * Exports everyone with a tag given"},{"lineNumber":426,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":427,"author":{"gitID":"shanmu9898"},"content":"    private void exportEveryoneWithTag(Tag tag, ObservableList\u003cPerson\u003e exportPeople) {"},{"lineNumber":428,"author":{"gitID":"shanmu9898"},"content":"        for (Person p : exportPeople) {"},{"lineNumber":429,"author":{"gitID":"shanmu9898"},"content":"            if (p.getTags().contains(tag) \u0026\u0026 p instanceof Student) {"},{"lineNumber":430,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add((Student) p);"},{"lineNumber":431,"author":{"gitID":"shanmu9898"},"content":"            } else if (p.getTags().contains(tag)) {"},{"lineNumber":432,"author":{"gitID":"shanmu9898"},"content":"                exportPersonAddition.add(p);"},{"lineNumber":433,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":434,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":435,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":436,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":437,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":438,"author":{"gitID":"shanmu9898"},"content":"     * Exports everyone without a tag given"},{"lineNumber":439,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":440,"author":{"gitID":"shanmu9898"},"content":"    private void exportEveryoneWithoutTag(ObservableList\u003cPerson\u003e exportPeople) {"},{"lineNumber":441,"author":{"gitID":"shanmu9898"},"content":"        for (Person p : exportPeople) {"},{"lineNumber":442,"author":{"gitID":"shanmu9898"},"content":"            if (p instanceof Student) {"},{"lineNumber":443,"author":{"gitID":"shanmu9898"},"content":"                exportStudentAddition.add((Student) p);"},{"lineNumber":444,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":445,"author":{"gitID":"shanmu9898"},"content":"                exportPersonAddition.add(p);"},{"lineNumber":446,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":447,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":448,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":450,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":451,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":452,"author":{"gitID":"shanmu9898"},"content":"     * Helper method to identify the lower and higher end of the range given"},{"lineNumber":453,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":454,"author":{"gitID":"shanmu9898"},"content":"     * @return rangeStringArray"},{"lineNumber":455,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":456,"author":{"gitID":"shanmu9898"},"content":"    public String[] handleRange() throws IOException {"},{"lineNumber":457,"author":{"gitID":"shanmu9898"},"content":"        String[] rangeStringArray \u003d this.range.split(\",\");"},{"lineNumber":458,"author":{"gitID":"shanmu9898"},"content":"        if (rangeStringArray.length \u003e 2) {"},{"lineNumber":459,"author":{"gitID":"shanmu9898"},"content":"            throw new IOException();"},{"lineNumber":460,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":461,"author":{"gitID":"shanmu9898"},"content":"        return rangeStringArray;"},{"lineNumber":462,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":463,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":464,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":465,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":466,"author":{"gitID":"shanmu9898"},"content":"     * @param other [in this case ExportCommand]"},{"lineNumber":467,"author":{"gitID":"shanmu9898"},"content":"     * @return a boolean value"},{"lineNumber":468,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":469,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":470,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":471,"author":{"gitID":"shanmu9898"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":472,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":473,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":474,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":475,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof ExportCommand)) {"},{"lineNumber":476,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":477,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":478,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":479,"author":{"gitID":"shanmu9898"},"content":"        ExportCommand e \u003d (ExportCommand) other;"},{"lineNumber":480,"author":{"gitID":"shanmu9898"},"content":"        return range.equals(e.range) \u0026\u0026 path.equals(e.path);"},{"lineNumber":481,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":482,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":483,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":483}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ThemeChangeEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":" * Change theme of the GUI."},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"            + \": Change the theme of TeachConnect.\\n\""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: THEME\\n\""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_CHANGE_THEME_SUCCESS \u003d \"Theme changed\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_INVALID_THEME \u003d \"Not a valid theme\";"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    private final String theme;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(theme);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.theme \u003d theme;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        EventsCenter.getInstance().post(new ThemeChangeEvent(theme));"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        return new CommandResult(MESSAGE_CHANGE_THEME_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof ChangeThemeCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.theme.equals(((ChangeThemeCommand) other).theme)); // state check"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":39,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"        if (!model.getCurrentActiveListType().equals(model.LIST_TYPE_CONTACT)) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            setPersonListActive();"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"randypx":1,"-":51}},{"path":"src/main/java/seedu/address/logic/parser/FormCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":""},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.logic.commands.FormCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"public class FormCommandParser implements Parser\u003cFormCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":""},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    private static final String MESSAGE_TIME_PERIOD_CONSTRAINTS \u003d \"The end time should be after the start time\";"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"     * Parses the given {@code String} of arguments in the context of the FormCommand"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"     * and returns an FormCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    public FormCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_INDEX);"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":""},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"        String[] preamble \u003d argMultimap.getPreamble().split(\" \");"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_INDEX)"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"                || preamble.length \u003e 1) {"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FormCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":""},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"            Subject subject \u003d ParserUtil.parseSubject(preamble[0]);"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"            Name className \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"            Time startTime \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_TIME)).get();"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"            Time endTime \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_TIME)).get();"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"            List\u003cIndex\u003e indexList \u003d ParserUtil.parseIndexes(argMultimap.getValue(PREFIX_INDEX)).get();"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"            checkArgument(Time.isValidTime(startTime, endTime), MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":""},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"            return new FormCommand(className, subject, startTime, endTime, indexList);"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"        } catch (IllegalValueException | IllegalArgumentException e) {"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":5,"randypx":37,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"        if (!model.getCurrentActiveListType().equals(model.LIST_TYPE_CONTACT)) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"            setPersonListActive();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"randypx":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_EDIT_STUDENT_SUCCESS \u003d \"Edited Student: %1$s\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    private Student studentToEdit;"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    private Student editedStudent;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"            if (personToEdit !\u003d null) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"                model.updateStudent(studentToEdit, editedStudent);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"                return new CommandResult(String.format(MESSAGE_EDIT_STUDENT_SUCCESS, editedStudent));"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"            throw new AssertionError(\"The target contact cannot be missing\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        if (lastShownList.get(index.getZeroBased()) instanceof Student) {"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"            studentToEdit \u003d (Student) lastShownList.get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"            editedStudent \u003d (Student) createEditedPerson(studentToEdit, editPersonDescriptor);"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"            personToEdit \u003d editedPerson \u003d null;"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"            studentToEdit \u003d editedStudent \u003d null;"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"        if (personToEdit instanceof Student) {"},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"            return new Student(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":""},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":170,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":171,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":182,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":221,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":222,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":229,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":230,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":231,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":22,"-":236}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        UndoableCommand toUndo \u003d undoRedoStack.popUndo();"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        toUndo.undo();"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        if (toUndo instanceof SetAppointmentCommand || toUndo instanceof DeleteCommand) {"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            model.indicateAppointmentListChanged();"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":5,"-":35}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        addressBookParser \u003d new AddressBookParser(model.getFilteredCommandsList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getFilteredShortcutList() {"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        return model.getFilteredCommandsList();"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":""},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cClass\u003e getFilteredClassList() {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        return model.getFilteredClassList();"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        return model.getCurrentActiveListType();"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":18,"randypx":8,"-":56,"shanmu9898":4}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"shanmu9898":4}},{"path":"src/main/java/seedu/address/logic/commands/SetTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Adds a task to the address book."},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class SetTaskCommand extends UndoableCommand {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"set_task\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the address book.\\n\""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: \""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"DATE TIME\\n\""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"Mark papers \""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"20/05/2018 12:00 \";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book\";"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private final Task toAdd;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetTaskCommand to add the specified {@code Task}"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public SetTaskCommand(Task task) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(task);"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        toAdd \u003d task;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"            model.addTask(toAdd);"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TASK);"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof SetTaskCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 toAdd.equals(((SetTaskCommand) other).toAdd));"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":52,"randypx":1,"-":5}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private String tagColorStyle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName} and {@code tagColorStyle}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTag(String tagName, String tagColorStyle) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        tagColorStyle \u003d source.tagColorStyle;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        if (!Tag.isValidTagColorStyle(tagColorStyle)) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        return new Tag(tagName, tagColorStyle);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName)"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tagColorStyle.equals(((XmlAdaptedTag) other).tagColorStyle);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"-":55}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":" * Imports contacts from a different TeachConnect XML file"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": imports contacts to the address book.\""},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"            + \"Parameters: file location...\\n\""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"            + \"Example: \" + COMMAND_WORD + \" main/src/test/data/sandbox/somerandomfile.xml\";"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"%1$s contacts, %3$d students and %5$d classes \\n\""},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"            + \" have been successfully imported \\n\""},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"            + \"and %2$s contacts, %4$d students and %6$d classes have been left out!\";"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    protected static final String MESSAGE_INVALID_FILE \u003d \"Please input a valid file location\";"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    protected Storage storage;"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"    private AddressBook addressBookImported;"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"    private String filePath;"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfContactsAdded \u003d 0;"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfContactsNotAdded \u003d 0;"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfStudentsAdded \u003d 0;"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfStudentsNotAdded \u003d 0;"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfClassesAdded \u003d 0;"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"    private int numberOfClassesNotAdded \u003d 0;"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":"     * Creates an ImportCommand to import the specified TeachConnect XML file"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"    public ImportCommand(String importPath) {"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(importPath);"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"        this.filePath \u003d importPath;"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        addressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cPerson\u003e people;"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"        ObservableList\u003cStudent\u003e students;"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"        List\u003cClass\u003e classes;"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"            if (addressBookStorage.readAddressBook(filePath).isPresent()) {"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"                this.addressBookImported \u003d new AddressBook(addressBookStorage.readAddressBook().get());"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"                people \u003d addressBookImported.getPersonList();"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"                students \u003d addressBookImported.getStudentList();"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"                classes \u003d addressBookImported.getClassList();"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"            } else {"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"                throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"            peopleToBeImported(people);"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"            studentToBeImported(students);"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"            classesToBeImported(students, classes);"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        } catch (IOException e) {"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_FILE));"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, numberOfContactsAdded, numberOfContactsNotAdded,"},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"                numberOfStudentsAdded, numberOfStudentsNotAdded, numberOfClassesAdded, numberOfClassesNotAdded));"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"     * Adds students and classes to the model because classes need students too."},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"     * @param students"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"     * @param classes"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    private void classesToBeImported(ObservableList\u003cStudent\u003e students, List\u003cClass\u003e classes) {"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        for (int i \u003d 0; i \u003c classes.size(); i++) {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"                model.addClass(classes.get(i), students);"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"                numberOfClassesAdded++;"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicateClassException e) {"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"                numberOfClassesNotAdded++;"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"     * Adds students to the model"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"     * @param students"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"    private void studentToBeImported(ObservableList\u003cStudent\u003e students) {"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"        for (int i \u003d 0; i \u003c students.size(); i++) {"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"                model.addStudent(students.get(i));"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":"                numberOfStudentsAdded++;"},{"lineNumber":109,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":110,"author":{"gitID":"shanmu9898"},"content":"                numberOfStudentsNotAdded++;"},{"lineNumber":111,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":115,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"     * Adds people to the model"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":"     * @param people"},{"lineNumber":118,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"shanmu9898"},"content":"    private void peopleToBeImported(ObservableList\u003cPerson\u003e people) {"},{"lineNumber":120,"author":{"gitID":"shanmu9898"},"content":"        for (int i \u003d 0; i \u003c people.size(); i++) {"},{"lineNumber":121,"author":{"gitID":"shanmu9898"},"content":"            try {"},{"lineNumber":122,"author":{"gitID":"shanmu9898"},"content":"                model.addPerson(people.get(i));"},{"lineNumber":123,"author":{"gitID":"shanmu9898"},"content":"                numberOfContactsAdded++;"},{"lineNumber":124,"author":{"gitID":"shanmu9898"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":125,"author":{"gitID":"shanmu9898"},"content":"                numberOfContactsNotAdded++;"},{"lineNumber":126,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":130,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitID":"shanmu9898"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":133,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":134,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 filePath.equals(((ImportCommand) other).filePath));"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":138,"author":{"gitID":"shanmu9898"},"content":"}"},{"lineNumber":139,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":140,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":141,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":142,"author":{"gitID":"shanmu9898"},"content":""}],"authorContributionMap":{"randypx":2,"-":7,"shanmu9898":133}},{"path":"src/main/java/seedu/address/logic/commands/SetAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":" * Adds an appointment with the person at {@code index} in the person list to the address book."},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"public class SetAppointmentCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    public static final String COMMAND_WORD \u003d \"set_appointment\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            + \": Adds an appoinment to the address book.\\n\""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_START_TIME + \"START-DATE START-TIME \""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"END-DATE END-TIME \""},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_INDEX + \"PERSON TO MEET\\n\""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_TITLE + \"Consultation \""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_START_TIME + \"20/05/2018 10:00 \""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_END_TIME + \"20/05/2018 12:00 \""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"            + PREFIX_INDEX + \"3 \";"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    private final Appointment baseAppointmentWithoutPerson;"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    private PersonToMeet personToMeet;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetAppointmentCommand without any PersonToMeet"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand(Appointment baseAppointmentWithoutPerson) {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        this(baseAppointmentWithoutPerson, null);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"     * Creates a SetAppointmentCommand to add the specified {@code Appointment}"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"    public SetAppointmentCommand(Appointment baseAppointmentWithoutPerson, Index index) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(baseAppointmentWithoutPerson);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        this.baseAppointmentWithoutPerson \u003d baseAppointmentWithoutPerson;"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        this.index \u003d index;"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(model);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"            Appointment toAdd;"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"            if (personToMeet !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"                toAdd \u003d new Appointment(baseAppointmentWithoutPerson.getTitle(),"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                        baseAppointmentWithoutPerson.getStartTime(),"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"                        baseAppointmentWithoutPerson.getEndTime(), personToMeet);"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            } else {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"                toAdd \u003d baseAppointmentWithoutPerson;"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"            model.addAppointment(toAdd);"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        if (index !\u003d null) {"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"            Person person \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet \u003d new PersonToMeet(person.getName().fullName, person.getEmail().value);"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof SetAppointmentCommand // instanceof handles nulls"},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 baseAppointmentWithoutPerson.equals(((SetAppointmentCommand) other).baseAppointmentWithoutPerson));"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":98,"randypx":2,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.event.PersonToMeet.EMAIL_SPLITTER;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    private String startTime;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    private String endTime;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    private String personToMeet;"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(String title, String startTime, String endTime) {"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        this(title, startTime, endTime, null);"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an {@code XmlAdaptedAppointment} with the given appointment details."},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(String title, String startTime, String endTime, String personToMeet) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            this.personToMeet \u003d personToMeet;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        title \u003d source.getTitle().toString();"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        startTime \u003d source.getStartTime().toString();"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"        endTime \u003d source.getEndTime().toString();"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        if (source.getPersonToMeet() !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            personToMeet \u003d source.getPersonToMeet().toString();"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Appointment object."},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(this.title)) {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        if (this.startTime \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Time\"));"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"        if (this.endTime \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Time\"));"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"        final Time startTime \u003d new Time(this.startTime, false);"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"        final Time endTime \u003d new Time(this.endTime, false);"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"        if (!Time.isValidTime(startTime, endTime)) {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"        if (this.personToMeet !\u003d null) {"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"            String[] components \u003d this.personToMeet.split(EMAIL_SPLITTER);"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"            PersonToMeet personToMeet \u003d new PersonToMeet(components[0], components[1]);"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"            return new Appointment(title, startTime, endTime, personToMeet);"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"        return new Appointment(title, startTime, endTime);"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"        return Objects.equals(title, otherAppointment.title)"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(startTime, otherAppointment.startTime)"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(endTime, otherAppointment.endTime)"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(personToMeet, otherAppointment.personToMeet);"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":117,"randypx":1,"-":3}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedShortcutDouble.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":" *Class to create a shortcut double and save it as an XML element."},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"public class XmlAdaptedShortcutDouble {"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"    @XmlElement"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    private String shortcutWord;"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"    @XmlElement"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"    private String commandWord;"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble() {}"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble(String shortcutWord, String commandWord) {"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"    public XmlAdaptedShortcutDouble(ShortcutDoubles source) {"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"        shortcutWord \u003d source.shortcutWord;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        commandWord \u003d source.commandWord;"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutDoubles toModelType() throws IllegalValueException {"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        return new ShortcutDoubles(shortcutWord, commandWord);"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof XmlAdaptedShortcutDouble)) {"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        return commandWord.equals(((XmlAdaptedShortcutDouble) other).commandWord)"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 shortcutWord.equals(((XmlAdaptedShortcutDouble) other).shortcutWord);"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":48}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"public class XmlAdaptedTask {"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private String title;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    private String time;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs an {@code XmlAdaptedTask} with the given task details."},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask(String title, String time) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d time;"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTask"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        title \u003d source.getTitle().toString();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        time \u003d source.getTime().toString();"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Task object."},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted task"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        if (this.title \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        if (!Title.isValidTitle(this.title)) {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(Title.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"        final Title title \u003d new Title(this.title);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        if (this.time \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\"));"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        final Time time \u003d new Time(this.time, false);"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        return new Task(title, time);"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        return Objects.equals(title, otherTask.title)"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 Objects.equals(time, otherTask.time);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":82,"randypx":1,"-":2}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private List\u003cXmlAdaptedStudent\u003e students;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @XmlElement"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"    private List\u003cXmlAdaptedShortcutDouble\u003e commandsList;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    @XmlElement"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    private List\u003cXmlAdaptedClass\u003e classList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"        students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        commandsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        classList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"        students.addAll(src.getStudentList().stream().map(XmlAdaptedStudent::new).collect(Collectors.toList()));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"        appointments.addAll(src.getAppointmentList().stream().map("},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"                XmlAdaptedAppointment::new).collect(Collectors.toList()));"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        tasks.addAll(src.getTaskList().stream().map("},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"                XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"        commandsList.addAll(src.getCommandsList().stream().map(XmlAdaptedShortcutDouble::new)"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"                    .collect(Collectors.toList()));"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        classList.addAll(src.getClassList().stream().map(XmlAdaptedClass::new).collect(Collectors.toList()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"     * {@code XmlAdaptedPerson},{@code XmlAdaptedTag}, {@code XmlAdaptedAppointment}, {@code XmlAdaptedTask}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        for (XmlAdaptedStudent s : students) {"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"            addressBook.addStudent(s.toModelType());"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        for (XmlAdaptedAppointment a: appointments) {"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addAppointment(a.toModelType());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"        for (XmlAdaptedTask t: tasks) {"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"            addressBook.addTask(t.toModelType());"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        for (XmlAdaptedShortcutDouble s : commandsList) {"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"            addressBook.addShortcutDoubles(s.toModelType());"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        for (XmlAdaptedClass c : classList) {"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"            addressBook.addClass(c.toModelType());"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                \u0026\u0026 students.equals(otherAb.students)"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments)"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 tasks.equals(otherAb.tasks)"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 commandsList.equals(otherAb.commandsList)"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 classList.equals(otherAb.classList);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":""}],"authorContributionMap":{"Sisyphus25":22,"randypx":16,"-":73,"shanmu9898":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.PersonToMeet;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Title;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return new Person[]{"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                    getTagSet(\"friends\")),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"            new Student(new Name(\"Robert Leo\"), new Phone(\"99384932\"), new Email(\"robert@example.com\"),"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"                    new Address(\"Blk 20 Clementi Road 9, #03-17\"),"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"                    getTagSet(\"attention\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    getTagSet(\"neighbours\")),"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"            new Student(new Name(\"Tony Tan\"), new Phone(\"93928394\"), new Email(\"tntan@example.com\"),"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"                    new Address(\"Blk 24 Red Hill Street 44, #13-06\"),"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"                    getTagSet(\"behind\")),"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            new Student(new Name(\"Carilynne Ng\"), new Phone(\"99849343\"), new Email(\"carlng@example.com\"),"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                    new Address(\"Blk 50 Clementi Road 3, #43-14\"),"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"                    getTagSet(\"AStar\")),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    getTagSet(\"family\")),"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"                    getTagSet(\"parent\")),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    getTagSet(\"colleagues\"))"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"    public static Student[] getSampleStudents() {"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        return new Student[]{"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"            new Student(new Name(\"Jared Clover\"), new Phone(\"9245262\"), new Email(\"4thClover@example.com\"),"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"                    new Address(\"Blk 333 Lorong 1 Simei, #01-07\"), getTagSet(\"absent\"),"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"                    getSubjectList(\"CS2103T\", \"CS2101\")),"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"            new Student(new Name(\"Hadley Bolton\"), new Phone(\"9236481\"), new Email(\"hadley123@example.com\"),"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"                    new Address(\"Blk 342 Yishun Street 86, #18-28\"), getTagSet(\"enthusiastic\"),"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"                    getSubjectList(\"CS2103T\", \"CS2010\")),"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"            new Student(new Name(\"Ira Martel\"), new Phone(\"92654727\"), new Email(\"martel98@example.com\"),"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"                    new Address(\"Blk 400 Lorong 8 Boon Keng, #07-19\"), getTagSet(\"sick\", \"Fever\"),"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"                    getSubjectList(\"CS2101\")),"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"            new Student(new Name(\"Isaac Ellison\"), new Phone(\"92467525\"), new Email(\"newton@example.com\"),"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"                    new Address(\"Blk 399 Toa Payoh Street 87, #05-06\"), getTagSet(),"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"                    getSubjectList(\"CS2103T\", \"CS2101\", \"CS2010\")),"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"            new Student(new Name(\"Riley Whittle\"), new Phone(\"88523221\"), new Email(\"whittley@example.com\"),"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"                    new Address(\"Blk 410 Jurong West Street 88, #07-08\"), getTagSet(\"new\"))"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        };"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":""},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    public static Class[] getSampleClass() {"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"        return new Class[]{"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"            new Class(new Name(\"Tutorial Class 02\"), new Subject(\"CS2103T\"),"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                    new Time(\"01/01/2018\", true),"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"                    new Time(\"28/05/2018\", true),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                    getStudentList(\"Jared Clover\", \"Hadley Bolton\", \"Isaac Ellison\")),"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"            new Class(new Name(\"Sectional Teaching 02\"), new Subject(\"CS2101\"),"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"                    new Time(\"04/01/2018\", true),"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"                    new Time(\"19/06/2018\", true),"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                    getStudentList(\"Jared Clover\", \"Ira Martel\", \"Isaac Ellison\")),"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"            new Class(new Name(\"Tutorial Class 01\"), new Subject(\"CS2010\"),"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"                    new Time(\"15/10/2018\", true),"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"                    new Time(\"10/02/2019\", true),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                    getStudentList(\"Hadley Bolton\", \"Isaac Ellison\"))"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"        };"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":""},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"    public static ShortcutDoubles[] getSampleShortcutDoubles() {"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"        return new ShortcutDoubles[]{"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutDoubles(\"a\", \"add\"),"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"            new ShortcutDoubles(\"s\", \"shortcut\")"},{"lineNumber":106,"author":{"gitID":"shanmu9898"},"content":"        };"},{"lineNumber":107,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    public static Appointment[] getSampleAppointment() {"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"        return new Appointment[]{"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Faculty Meeting\"),"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"10/04/2018 15:00\", false),"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"10/04/2018 18:00\", false),"},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"                        new PersonToMeet(\"Bernice Yu\", \"berniceyu@example.com\")),"},{"lineNumber":115,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Tutoring Session\"),"},{"lineNumber":116,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"19/04/2018 14:00\", false),"},{"lineNumber":117,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"19/04/2018 16:00\", false),"},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"                        new PersonToMeet(\"Tony Tan\", \"tntan@example.com\")),"},{"lineNumber":119,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Dinner with friends\"),"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"19/04/2018 18:00\", false),"},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"19/04/2018 20:00\", false)),"},{"lineNumber":122,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Meet up with parents\"),"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"20/04/2018 10:00\", false),"},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"20/04/2018 11:00\", false),"},{"lineNumber":125,"author":{"gitID":"Sisyphus25"},"content":"                        new PersonToMeet(\"Irfan Ibrahim\", \"irfan@example.com\")),"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Tutoring session\"),"},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"23/04/2018 13:00\", false),"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"23/04/2018 15:00\", false),"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"                        new PersonToMeet(\"Carilynne Ng\", \"carlng@example.com\")),"},{"lineNumber":130,"author":{"gitID":"Sisyphus25"},"content":"            new Appointment(new Title(\"Faculty Meeting\"),"},{"lineNumber":131,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"25/04/2018 12:00\", false),"},{"lineNumber":132,"author":{"gitID":"Sisyphus25"},"content":"                        new Time(\"25/04/2018 18:00\", false))"},{"lineNumber":133,"author":{"gitID":"Sisyphus25"},"content":"        };"},{"lineNumber":134,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"    public static Task[] getSampleTask() {"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"        return new Task[]{"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"            new Task(new Title(\"Mark papers\"), new Time(\"30/03/2018 18:00\", false)),"},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Collect documents\"), new Time(\"11/04/2018 10:00\", false)),"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Arrange tutor session\"), new Time(\"18/04/2018 23:00\", false)),"},{"lineNumber":141,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Prepare documents for meeting\"), new Time(\"22/04/2018 10:00\", false)),"},{"lineNumber":142,"author":{"gitID":"Sisyphus25"},"content":"            new Task(new Title(\"Review final papers\"), new Time(\"26/04/2018 22:00\", false))"},{"lineNumber":143,"author":{"gitID":"Sisyphus25"},"content":"        };"},{"lineNumber":144,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":154,"author":{"gitID":"randypx"},"content":"            for (Student sampleStudent : getSampleStudents()) {"},{"lineNumber":155,"author":{"gitID":"randypx"},"content":"                sampleAb.addStudent(sampleStudent);"},{"lineNumber":156,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"randypx"},"content":""},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"            for (ShortcutDoubles s : getSampleShortcutDoubles()) {"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"                sampleAb.addShortcutDoubles(s);"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":162,"author":{"gitID":"Sisyphus25"},"content":"            for (Appointment a : getSampleAppointment()) {"},{"lineNumber":163,"author":{"gitID":"Sisyphus25"},"content":"                sampleAb.addAppointment(a);"},{"lineNumber":164,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":165,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":166,"author":{"gitID":"Sisyphus25"},"content":"            for (Task t : getSampleTask()) {"},{"lineNumber":167,"author":{"gitID":"Sisyphus25"},"content":"                sampleAb.addTask(t);"},{"lineNumber":168,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":169,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":170,"author":{"gitID":"randypx"},"content":"            for (Class sampleClass : getSampleClass()) {"},{"lineNumber":171,"author":{"gitID":"randypx"},"content":"                sampleAb.addClass(sampleClass);"},{"lineNumber":172,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"randypx"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":176,"author":{"gitID":"randypx"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate contactss\", e);"},{"lineNumber":177,"author":{"gitID":"shanmu9898"},"content":"        } catch (UniqueShortcutDoublesList.DuplicateShortcutDoublesException e) {"},{"lineNumber":178,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate command shortcuts\", e);"},{"lineNumber":179,"author":{"gitID":"Sisyphus25"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate events\", e);"},{"lineNumber":181,"author":{"gitID":"randypx"},"content":"        } catch (DuplicateClassException e) {"},{"lineNumber":182,"author":{"gitID":"randypx"},"content":"            throw new AssertionError(\"smaple date cannot contain duplicate classes\", e);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":199,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"randypx"},"content":"     * Returns a subject list containing the list of strings given."},{"lineNumber":201,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"randypx"},"content":"    public static List\u003cSubject\u003e getSubjectList(String... strings) {"},{"lineNumber":203,"author":{"gitID":"randypx"},"content":"        ArrayList\u003cSubject\u003e subjectList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":204,"author":{"gitID":"randypx"},"content":"        for (String s : strings) {"},{"lineNumber":205,"author":{"gitID":"randypx"},"content":"            subjectList.add(new Subject(s));"},{"lineNumber":206,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"randypx"},"content":"        return subjectList;"},{"lineNumber":208,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"randypx"},"content":""},{"lineNumber":210,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"randypx"},"content":"     * Returns a student list containing the list of strings given."},{"lineNumber":212,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"randypx"},"content":"    public static List\u003cName\u003e getStudentList(String... strings) {"},{"lineNumber":214,"author":{"gitID":"randypx"},"content":"        ArrayList\u003cName\u003e studentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"randypx"},"content":"        for (String s : strings) {"},{"lineNumber":216,"author":{"gitID":"randypx"},"content":"            studentList.add(new Name(s));"},{"lineNumber":217,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"randypx"},"content":"        return studentList;"},{"lineNumber":219,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"randypx"},"content":""},{"lineNumber":221,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":222,"author":{"gitID":"shanmu9898"},"content":"    public static Set\u003cShortcutDoubles\u003e getSampleShortcutDoublesTagSet(String... strings) {"},{"lineNumber":223,"author":{"gitID":"shanmu9898"},"content":"        HashSet\u003cShortcutDoubles\u003e shortcutDoubles \u003d new HashSet\u003c\u003e();"},{"lineNumber":224,"author":{"gitID":"shanmu9898"},"content":"        for (String s : strings) {"},{"lineNumber":225,"author":{"gitID":"shanmu9898"},"content":"            shortcutDoubles.add(new ShortcutDoubles(s, s));"},{"lineNumber":226,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"        return shortcutDoubles;"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":61,"randypx":76,"-":68,"shanmu9898":26}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedStudent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":""},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":" * JAXB-friendly version of the Student."},{"lineNumber":22,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"public class XmlAdaptedStudent {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    private List\u003cString\u003e subjectList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":""},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"     * Constructs an XmlAdaptedStudent."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedStudent() {}"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":""},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"     * Constructs an {@code XmlAdaptedStudent} with the given student details."},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedStudent(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"                             List\u003cString\u003e subjectList) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"        if (subjectList !\u003d null) {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"            this.subjectList \u003d new ArrayList\u003c\u003e(subjectList);"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":""},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"     * Converts a given Student into this class for JAXB use."},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedStudent"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedStudent(Student source) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"        for (Subject subject : source.getSubjectList()) {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"            subjectList.add(subject.toString());"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":""},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"     * Converts this jaxb-friendly adapted student object into the model\u0027s Student object."},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted student"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"    public Student toModelType() throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        final List\u003cTag\u003e studentTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"            studentTags.add(tag.toModelType());"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"        final List\u003cSubject\u003e subjects \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        for (String subject : subjectList) {"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"            subjects.add(new Subject(subject));"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(studentTags);"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"        return new Student(name, phone, email, address, tags, subjects);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"        if (!(other instanceof XmlAdaptedStudent)) {"},{"lineNumber":141,"author":{"gitID":"randypx"},"content":"            return false;"},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":""},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"        XmlAdaptedStudent otherStudent \u003d (XmlAdaptedStudent) other;"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"        return Objects.equals(name, otherStudent.name)"},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(phone, otherStudent.phone)"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(email, otherStudent.email)"},{"lineNumber":148,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(address, otherStudent.address)"},{"lineNumber":149,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 tagged.equals(otherStudent.tagged)"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 subjectList.equals(otherStudent.subjectList);"},{"lineNumber":151,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":66,"-":86}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":" * \u003cp\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"     * Add a listener to the list for any changes."},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"     * Update {@code contacts} for any changes made."},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"    public void addListener(UniqueContactList contacts) {"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"        internalList.addListener(new ListChangeListener\u003cPerson\u003e() {"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"            @Override"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"            public void onChanged(Change\u003c? extends Person\u003e c) {"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"                contacts.updateList(c);"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        });"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":""},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":17,"-":119,"shanmu9898":2}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"     * Returns true if a given string is a valid person address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":1,"-":57}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":100,"shanmu9898":2}},{"path":"src/main/java/seedu/address/model/person/UniqueContactList.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":" * A list that is the aggregation of {@code UniquePersonList} and {@code UniqueStudentList}"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":" * and is the list displayed in the GUI."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * This list remains up-to-date by listening to the changes of both lists and is not changed by anything else."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"public class UniqueContactList {"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"    private final UniquePersonList persons;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"    private final UniqueStudentList students;"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private final ObservableList\u003cPerson\u003e combinedList \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":""},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    public UniqueContactList(UniquePersonList p, UniqueStudentList s) {"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"        persons \u003d p;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"        students \u003d s;"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"        persons.addListener(this);"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"        students.addListener(this);"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"     * This method is called when there is a change in eithor {@code UniquePersonList} or {@code UniqueStudentList}."},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"     * @param c this contains the change(s) that has occured."},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    public void updateList(ListChangeListener.Change\u003c? extends Person\u003e c) {"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"        while (c.next()) {"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"            if (c.wasReplaced()) {"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"                for (int i \u003d 0; i \u003c c.getRemovedSize(); i++) {"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"                    int index \u003d combinedList.indexOf(c.getRemoved().get(i));"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"                    combinedList.set(index, c.getAddedSubList().get(i));"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"                if (c.getTo() \u003e c.getRemovedSize()) {"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"                    for (int i \u003d c.getRemovedSize(); i \u003c c.getTo(); i++) {"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"                        combinedList.add(c.getAddedSubList().get(i));"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"                    }"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"            } else if (c.wasRemoved()) {"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"                combinedList.removeAll(c.getRemoved());"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"            } else if (c.wasAdded()) {"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"                combinedList.addAll(c.getAddedSubList());"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":""},{"lineNumber":53,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author LimShiMinJonathan"},{"lineNumber":54,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":55,"author":{"gitID":"LimShiMinJonathan"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"LimShiMinJonathan"},"content":"     * Returns a sorted list of contacts."},{"lineNumber":57,"author":{"gitID":"LimShiMinJonathan"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"LimShiMinJonathan"},"content":""},{"lineNumber":59,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void sortList() {"},{"lineNumber":60,"author":{"gitID":"LimShiMinJonathan"},"content":"        Comparator\u003cPerson\u003e sortByName \u003d new Comparator\u003cPerson\u003e() {"},{"lineNumber":61,"author":{"gitID":"LimShiMinJonathan"},"content":"            @Override"},{"lineNumber":62,"author":{"gitID":"LimShiMinJonathan"},"content":"            public int compare (Person contact1, Person contact2)  {"},{"lineNumber":63,"author":{"gitID":"LimShiMinJonathan"},"content":"                return contact1.getName().fullName.compareToIgnoreCase(contact2.getName().fullName);"},{"lineNumber":64,"author":{"gitID":"LimShiMinJonathan"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"LimShiMinJonathan"},"content":"        };"},{"lineNumber":66,"author":{"gitID":"LimShiMinJonathan"},"content":"        FXCollections.sort(combinedList, sortByName);"},{"lineNumber":67,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        return FXCollections.unmodifiableObservableList(combinedList);"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":""},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":52,"LimShiMinJonathan":16,"-":9}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":58,"shanmu9898":1}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"     * Returns an unmodifiable view of the students list."},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"     * This list will not contain any duplicate students."},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    ObservableList\u003cStudent\u003e getStudentList();"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"     * Returns an unmodifiable view of a list of all contacts."},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"     * This list will not contain any duplicate persons or students."},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    ObservableList\u003cPerson\u003e getContactList();"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     * This list will not contain any duplicate appointment."},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * Returns an unmodifiable view of the tasks list."},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     * This list will not contain any duplicate tasks."},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"     * Returns an unmodifiable view of the commands list."},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"     * This list will not contain any duplicate commands."},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cShortcutDoubles\u003e getCommandsList();"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"     * Returns an unmodifiable view of the class list."},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"     * This list will not contain any duplicate classes."},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    ObservableList\u003cClass\u003e getClassList();"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":15,"randypx":19,"-":24,"shanmu9898":7}},{"path":"src/main/java/seedu/address/model/person/Student.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":""},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":""},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":" * Represents a Student in the address book."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" * Contact details are immutable."},{"lineNumber":17,"author":{"gitID":"randypx"},"content":" *"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":" * @see Person"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"public class Student extends Person {"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":""},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private List\u003cSubject\u003e subjectList;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    public Student(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"        subjectList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"     * Construct a new student with a filled subject list"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"     * Every field must be present and not null."},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    public Student(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cSubject\u003e subjects) {"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"        subjectList \u003d new ArrayList\u003c\u003e(subjects);"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":""},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"     * Adds a new {@code Class} into the student\u0027s {@code classList}."},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    public void enterClass(Class newClass) {"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        subjectList.add(newClass.getSubject());"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":""},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"     * Removes a {@code Class} from the student\u0027s {@code classList}"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"    public void exitClass(Class toExit) {"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"        subjectList.remove(toExit.getSubject());"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":""},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"     * Returns an immutable subject list, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"    public List\u003cSubject\u003e getSubjectList() {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        return Collections.unmodifiableList(subjectList);"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":""},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"     * Checks if student is attending the given {@code class}."},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"    public boolean isAttending(Class group) {"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        return subjectList.contains(group.getSubject());"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":""},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        builder.append(getName())"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"                .append(\" Phone: \")"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"                .append(getPhone())"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"                .append(\" Email: \")"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"                .append(getEmail())"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"                .append(\" Address: \")"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"                .append(getAddress())"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"                .append(\" Tags: \");"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"        builder.append(\" Subjects: \");"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"        getSubjectList().forEach(builder::append);"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"        return builder.toString();"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":""},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof Student)) {"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"        Student otherPerson \u003d (Student) other;"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"randypx":87,"shanmu9898":18}},{"path":"src/main/java/seedu/address/model/education/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":" * Represents the subject being taught in a class."},{"lineNumber":9,"author":{"gitID":"randypx"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"public class Subject {"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":""},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"            \"Subject should only contain alphanumeric characters and should not be blank\";"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":""},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"     * The first character of the subject must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    public static final String SUBJECT_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}]*\";"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":""},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":""},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"     * Constructs an {@code Subject}."},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"     * @param subject A valid subject."},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    public Subject(String subject) {"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"        requireNonNull(subject);"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"        this.value \u003d subject;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"     * Returns true if a given string is a valid subject."},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"        return test.matches(SUBJECT_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":""},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":""},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"                || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.value.equals(((Subject) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":""},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":""},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":55,"-":4}},{"path":"src/main/java/seedu/address/model/education/Class.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":""},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":""},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"//@@author randypx"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":" * Represents a class, of a particular subject, taught by the user, for a specified duration."},{"lineNumber":15,"author":{"gitID":"randypx"},"content":" * Also contains a list of student attending the class."},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":17,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"public class Class {"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":""},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    private final Name className;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"    private final Subject subject;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"    private final Time startDate;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"    private final Time endDate;"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":"    private ArrayList\u003cName\u003e attendingStudents;"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":""},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"     * Guarantees: current time \u003c\u003d start time \u003c end time"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    public Class (Name name, Subject subject, Time start, Time end, List\u003cName\u003e studentList) {"},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"        this.className \u003d name;"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"        this.subject \u003d subject;"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"        this.startDate \u003d start;"},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"        this.endDate \u003d end;"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"        attendingStudents \u003d new ArrayList\u003c\u003e(studentList);"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"randypx"},"content":""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"        return className;"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":""},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public Subject getSubject() {"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        return subject;"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":""},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    public Time getStartDate() {"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        return startDate;"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    public Time getEndDate() {"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"        return endDate;"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":""},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"     * Returns an immutable student list, which throws {@code UnsupportedOperationException}"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"     * if modification is attempted."},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"    public List\u003cName\u003e getStudents() {"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"        return Collections.unmodifiableList(attendingStudents);"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":""},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"     * Removes a student from the list of students attending the class."},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"    public void removeStudent(Student student) {"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        Name studentName \u003d student.getName();"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        attendingStudents.remove(studentName);"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"     * Adds a student to the list of students attending the class."},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    public void addStudent(Student student) {"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"        Name studentName \u003d student.getName();"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"        attendingStudents.add(studentName);"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":""},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"     * Checks if given {@code student} is attending this class."},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"    public boolean containStudent(Student student) {"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        return attendingStudents.contains(student.getName());"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":""},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                || (other instanceof Class // instanceof handles nulls"},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.className.equals(((Class) other).className)"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.subject.equals(((Class) other).subject)"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.startDate.equals(((Class) other).startDate)"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.endDate.equals(((Class) other).endDate)"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.attendingStudents.equals(((Class) other).attendingStudents));"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":""},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"        return Objects.hash(subject, startDate, endDate, attendingStudents);"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":""},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        builder.append(getName())"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"                .append(\" Subject: \")"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"                .append(getSubject())"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"                .append(\" Start: \")"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"                .append(getStartDate())"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"                .append(\" Address: \")"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"                .append(getEndDate())"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"                .append(\" Students: \");"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"        getStudents().forEach(builder::append);"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        return builder.toString();"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":115}},{"path":"src/main/java/seedu/address/model/education/exceptions/StudentClassNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education.exceptions;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":" * Signals that the operation is unable to find the specified class."},{"lineNumber":5,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"public class StudentClassNotFoundException extends Exception {}"}],"authorContributionMap":{"randypx":6}},{"path":"src/main/java/seedu/address/model/education/exceptions/DuplicateClassException.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education.exceptions;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"randypx"},"content":""},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":" * Signals that the operation will result in duplicate Class objects."},{"lineNumber":7,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"public class DuplicateClassException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"    public DuplicateClassException() {"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"        super(\"Operation would result in duplicate classes\");"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"randypx":11,"-":1}},{"path":"src/main/java/seedu/address/model/person/UniqueStudentList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"//author randypx-reused"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":" * A list of students that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitID":"-"},"content":" *"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"public class UniqueStudentList implements Iterable\u003cStudent\u003e {"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"    public boolean contains(Student toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"     * Adds a student to the list."},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing student in the list."},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"    public void add(Student toAdd) throws DuplicatePersonException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"     * Replaces the student {@code target} in the list with {@code editedStudent}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    public void setStudent(Student target, Student editedStudent)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        if (!target.equals(editedStudent) \u0026\u0026 internalList.contains(editedStudent)) {"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        internalList.set(index, editedStudent);"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"randypx"},"content":""},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"     * Removes the equivalent student from the list."},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"     * @throws PersonNotFoundException if no such student could be found in the list."},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"    public boolean remove(Student toRemove) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        requireNonNull(toRemove);"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        final boolean studentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"        if (!studentFoundAndDeleted) {"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"        return studentFoundAndDeleted;"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":""},{"lineNumber":87,"author":{"gitID":"randypx"},"content":"    public void setStudents(UniqueStudentList replacement) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicatePersonException {"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        requireAllNonNull(students);"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"        final UniqueStudentList replacement \u003d new UniqueStudentList();"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        for (final Student student : students) {"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"            replacement.add(student);"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"        setStudents(replacement);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cStudent\u003e asObservableList() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"     * Add a listener to the list for any changes."},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"     * Update {@code contacts} for any changes made."},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"    public void addListener(UniqueContactList contacts) {"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        internalList.addListener(new ListChangeListener\u003cStudent\u003e() {"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"            @Override"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"            public void onChanged(Change\u003c? extends Student\u003e c) {"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"                contacts.updateList(c);"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"        });"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"randypx"},"content":""},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"    //@@author randypx-reused"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"    public Iterator\u003cStudent\u003e iterator() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"                || (other instanceof UniqueStudentList // instanceof handles nulls"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueStudentList) other).internalList));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"randypx":66,"-":72}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedClass.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":""},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":17,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"public class XmlAdaptedClass {"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":""},{"lineNumber":20,"author":{"gitID":"randypx"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Class\u0027 %s field is missing!\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"    private String subject;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private String startDate;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    private String endDate;"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":""},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    private List\u003cString\u003e students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"randypx"},"content":""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"     * Constructs an XmlAdaptedClass."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedClass() {}"},{"lineNumber":39,"author":{"gitID":"randypx"},"content":""},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"     * Constructs an {@code XmlAdaptedclass} with the given class details."},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedClass(String name, String subject, String startDate, String endDate,"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"                           List\u003cString\u003e students) {"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"        this.name \u003d name;"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        this.subject \u003d subject;"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"        if (students !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"            this.students \u003d new ArrayList\u003c\u003e(students);"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":""},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"     * Converts a given Class into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedClass."},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"    public XmlAdaptedClass(Class source) {"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        subject \u003d source.getSubject().value;"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        startDate \u003d source.getStartDate().toString();"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        endDate \u003d source.getEndDate().toString();"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        students \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        for (Name studentName : source.getStudents()) {"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"            students.add(studentName.fullName);"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"     * Converts this jaxb-friendly adapted class object into the model\u0027s Class object."},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted class"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"    public Class toModelType() throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"        final List\u003cName\u003e studentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"        for (String studentName : students) {"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"            studentList.add(new Name(studentName));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        if (this.subject \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        final Subject subject \u003d new Subject(this.subject);"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":""},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"        final Time startDate \u003d new Time(this.startDate, true);"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":""},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"        if (this.endDate \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"        final Time endDate \u003d new Time(this.endDate, true);"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":""},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"        if (!Time.isValidTime(startDate, endDate)) {"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":""},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"        return new Class(name, subject, startDate, endDate, studentList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"        if (!(other instanceof XmlAdaptedClass)) {"},{"lineNumber":121,"author":{"gitID":"randypx"},"content":"            return false;"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"randypx"},"content":""},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"        XmlAdaptedClass otherClass \u003d (XmlAdaptedClass) other;"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        return Objects.equals(name, otherClass.name)"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(subject, otherClass.subject)"},{"lineNumber":127,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(startDate, otherClass.startDate)"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 Objects.equals(endDate, otherClass.endDate)"},{"lineNumber":129,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 students.equals(otherClass.students);"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":2,"randypx":98,"-":31}},{"path":"src/main/java/seedu/address/model/shortcuts/ShortcutDoubles.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcuts;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":" * Represents a Command Double"},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"public class ShortcutDoubles {"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"    public final String shortcutWord;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":"    public final String commandWord;"},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":"    public ShortcutDoubles(String shortcutWord, String commandWord) {"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutWord);"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandWord);"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutWord \u003d shortcutWord;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"        this.commandWord \u003d commandWord;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"        if (!(other instanceof ShortcutDoubles)) {"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"            return false;"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        ShortcutDoubles otherShortcut \u003d (ShortcutDoubles) other;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"        return otherShortcut.commandWord.equals(this.commandWord)"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 otherShortcut.shortcutWord.equals(this.shortcutWord);"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":35}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.model.AppointmentListChangedEvent;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.commons.events.model.ClassListChangedEvent;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.commons.events.model.StudentListChangedEvent;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.events.ui.ToggleListEvent;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":38,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    private final FilteredList\u003cPerson\u003e filteredContacts;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    private final FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    private final FilteredList\u003cShortcutDoubles\u003e filteredShortcutCommands;"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    private final FilteredList\u003cClass\u003e filteredClass;"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"    private final FilteredList\u003cStudent\u003e filteredStudents;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private final SortedList\u003cPerson\u003e sortedFilteredConatacts;"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"    private String currentActiveListType;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        filteredContacts \u003d new FilteredList\u003c\u003e(this.addressBook.getContactList());"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":"        filteredShortcutCommands \u003d new FilteredList\u003c\u003e(this.addressBook.getCommandsList());"},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"        filteredStudents \u003d new FilteredList\u003c\u003e(this.addressBook.getStudentList());"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        filteredClass \u003d new FilteredList\u003c\u003e(this.addressBook.getClassList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        sortedFilteredConatacts \u003d new SortedList\u003cPerson\u003e(filteredContacts);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"        currentActiveListType \u003d LIST_TYPE_CONTACT;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"    /** Raises an event to indicate the appointment list has changed */"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    public void indicateAppointmentListChanged() {"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        raise(new AppointmentListChangedEvent(addressBook.getAppointmentList()));"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"    /** Raises an event to indicate the change of list view */"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"    private void evokeToggleListEvent(String type) {"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":"        changeCurrentActiveListType(type);"},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        raise(new ToggleListEvent(type));"},{"lineNumber":105,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"randypx"},"content":"    /** Raises an event to indicate the student list has changed due to the addition/deletion of a class*/"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    private void indicateStudentListChanged() {"},{"lineNumber":108,"author":{"gitID":"randypx"},"content":"        raise(new StudentListChangedEvent());"},{"lineNumber":109,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":""},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"    /** Raises an event to indicate the class list has changed due to the deletion/edit of a student*/"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"    private void indicateClassListChanged() {"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"        raise(new ClassListChangedEvent());"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":""},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"randypx"},"content":"    public synchronized void deleteStudent(Student target) throws PersonNotFoundException {"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"        addressBook.removeStudent(target);"},{"lineNumber":126,"author":{"gitID":"randypx"},"content":"        indicateClassListChanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"randypx"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"        evokeToggleListEvent(LIST_TYPE_CONTACT);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"    public synchronized void addStudent(Student student) throws DuplicatePersonException {"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"        addressBook.addStudent(student);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"        evokeToggleListEvent(LIST_TYPE_CONTACT);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":147,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"shanmu9898"},"content":"    public synchronized void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"               throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":150,"author":{"gitID":"shanmu9898"},"content":"        addressBook.addShortcutDoubles(shortcutDoubles);"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"        evokeToggleListEvent(LIST_TYPE_SHORTCUT);"},{"lineNumber":152,"author":{"gitID":"shanmu9898"},"content":"        indicateAddressBookChanged();"},{"lineNumber":153,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":155,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"shanmu9898"},"content":"    public synchronized void deleteCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":157,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":158,"author":{"gitID":"shanmu9898"},"content":"        addressBook.removeShortcutDouble(shortcutDoubles);"},{"lineNumber":159,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"randypx"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":173,"author":{"gitID":"randypx"},"content":"        requireAllNonNull(target, editedStudent);"},{"lineNumber":174,"author":{"gitID":"randypx"},"content":""},{"lineNumber":175,"author":{"gitID":"randypx"},"content":"        addressBook.updateStudent(target, editedStudent);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":177,"author":{"gitID":"randypx"},"content":"        indicateClassListChanged();"},{"lineNumber":178,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"randypx"},"content":""},{"lineNumber":180,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":181,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"Sisyphus25"},"content":"    public void addAppointment(Appointment appointment) throws DuplicateEventException {"},{"lineNumber":183,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":184,"author":{"gitID":"Sisyphus25"},"content":"        evokeToggleListEvent(LIST_TYPE_APPOINTMENT);"},{"lineNumber":185,"author":{"gitID":"Sisyphus25"},"content":"        indicateAddressBookChanged();"},{"lineNumber":186,"author":{"gitID":"Sisyphus25"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":187,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":189,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"Sisyphus25"},"content":"    public void deleteAppointment(Appointment target) throws EventNotFoundException {"},{"lineNumber":191,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.removeAppointment(target);"},{"lineNumber":192,"author":{"gitID":"Sisyphus25"},"content":"        indicateAddressBookChanged();"},{"lineNumber":193,"author":{"gitID":"Sisyphus25"},"content":"        indicateAppointmentListChanged();"},{"lineNumber":194,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":196,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask(Task task) throws DuplicateEventException {"},{"lineNumber":198,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.addTask(task);"},{"lineNumber":199,"author":{"gitID":"Sisyphus25"},"content":"        evokeToggleListEvent(LIST_TYPE_TASK);"},{"lineNumber":200,"author":{"gitID":"Sisyphus25"},"content":"        indicateAddressBookChanged();"},{"lineNumber":201,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":203,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":204,"author":{"gitID":"Sisyphus25"},"content":"    public void deleteTask(Task target) throws EventNotFoundException {"},{"lineNumber":205,"author":{"gitID":"Sisyphus25"},"content":"        addressBook.removeTask(target);"},{"lineNumber":206,"author":{"gitID":"Sisyphus25"},"content":"        indicateAddressBookChanged();"},{"lineNumber":207,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"Sisyphus25"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":210,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":211,"author":{"gitID":"randypx"},"content":"    public void addClass(Class group, List\u003cStudent\u003e studentList) throws DuplicateClassException {"},{"lineNumber":212,"author":{"gitID":"randypx"},"content":"        addressBook.addClass(group);"},{"lineNumber":213,"author":{"gitID":"randypx"},"content":"        for (Student student : studentList) {"},{"lineNumber":214,"author":{"gitID":"randypx"},"content":"            student.enterClass(group);"},{"lineNumber":215,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"randypx"},"content":"        evokeToggleListEvent(LIST_TYPE_CLASS);"},{"lineNumber":217,"author":{"gitID":"randypx"},"content":"        indicateStudentListChanged();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":219,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"randypx"},"content":""},{"lineNumber":221,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":222,"author":{"gitID":"randypx"},"content":"    public void deleteClass(Class target) throws StudentClassNotFoundException {"},{"lineNumber":223,"author":{"gitID":"randypx"},"content":"        addressBook.removeClass(target);"},{"lineNumber":224,"author":{"gitID":"randypx"},"content":"        indicateStudentListChanged();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":226,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"randypx"},"content":""},{"lineNumber":228,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":229,"author":{"gitID":"shanmu9898"},"content":"    public void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":230,"author":{"gitID":"shanmu9898"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":231,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":241,"author":{"gitID":"randypx"},"content":"        return FXCollections.unmodifiableObservableList(filteredContacts);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author LimShiMinJonathan"},{"lineNumber":245,"author":{"gitID":"LimShiMinJonathan"},"content":"    @Override"},{"lineNumber":246,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void sortByNameFilteredPersonList() {"},{"lineNumber":247,"author":{"gitID":"LimShiMinJonathan"},"content":"        addressBook.sortContacts();"},{"lineNumber":248,"author":{"gitID":"LimShiMinJonathan"},"content":"        indicateAddressBookChanged();"},{"lineNumber":249,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author"},{"lineNumber":251,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":252,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":254,"author":{"gitID":"Sisyphus25"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointments);"},{"lineNumber":255,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":257,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":259,"author":{"gitID":"Sisyphus25"},"content":"        return FXCollections.unmodifiableObservableList(filteredTasks);"},{"lineNumber":260,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":262,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":263,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList() {"},{"lineNumber":265,"author":{"gitID":"shanmu9898"},"content":"        return FXCollections.unmodifiableObservableList(filteredShortcutCommands);"},{"lineNumber":266,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":268,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cStudent\u003e getFilteredStudentsList() {"},{"lineNumber":270,"author":{"gitID":"shanmu9898"},"content":"        return FXCollections.unmodifiableObservableList(filteredStudents);"},{"lineNumber":271,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":273,"author":{"gitID":"shanmu9898"},"content":"    //@@author randypx-reused"},{"lineNumber":274,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cClass\u003e getFilteredClassList() {"},{"lineNumber":276,"author":{"gitID":"randypx"},"content":"        return FXCollections.unmodifiableObservableList(filteredClass);"},{"lineNumber":277,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"randypx"},"content":""},{"lineNumber":279,"content":"    //@@author"},{"lineNumber":280,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"Sisyphus25"},"content":"    public String getCurrentActiveListType() {"},{"lineNumber":282,"author":{"gitID":"Sisyphus25"},"content":"        return currentActiveListType;"},{"lineNumber":283,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":285,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":286,"author":{"gitID":"Sisyphus25"},"content":"    public void changeCurrentActiveListType(String itemType) {"},{"lineNumber":287,"author":{"gitID":"Sisyphus25"},"content":"        currentActiveListType \u003d itemType;"},{"lineNumber":288,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":293,"author":{"gitID":"randypx"},"content":"        filteredContacts.setPredicate(predicate);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":311,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 filteredContacts.equals(other.filteredContacts);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Sisyphus25":65,"randypx":74,"LimShiMinJonathan":7,"-":127,"shanmu9898":40}},{"path":"src/main/java/seedu/address/model/event/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Represent an appointment in the schedule, contains time of the appointment as well as details and personMeet."},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class Appointment {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    private final Title title;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    private final Time startTime;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    private final Time endTime;"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    private final PersonToMeet personToMeet;"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(Title title, Time startTime, Time endTime) {"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"        this(title, startTime, endTime, null);"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    //Every field except personToMeet must be present and not null"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    public Appointment(Title title, Time startTime, Time endTime, PersonToMeet personToMeet) {"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, startTime, endTime);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(Time.isValidTime(startTime, endTime), Time.MESSAGE_TIME_PERIOD_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.personToMeet \u003d personToMeet;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    public Title getTitle() {"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    public Time getStartTime() {"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"        return startTime;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public Time getEndTime() {"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        return endTime;"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public PersonToMeet getPersonToMeet() {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        return personToMeet;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"        return otherAppointment.getTitle().equals(this.getTitle())"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getStartTime().equals(this.getStartTime())"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherAppointment.getEndTime().equals(this.getEndTime());"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"        builder.append(getTitle())"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"                .append(\", Start Time: \")"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"                .append(getStartTime().toString())"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"                .append(\", End Time: \")"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"                .append(getEndTime().toString());"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        if (personToMeet !\u003d null) {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            builder.append(\", With: \")"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"                    .append(personToMeet.getName());"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":"        return builder.toString();"},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":78}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.UniqueClassList;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.UniqueEventList;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.UniqueContactList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.UniqueStudentList;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    private final UniqueContactList contacts;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    private final UniqueStudentList students;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    private final UniqueEventList\u003cAppointment\u003e appointments;"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"    private final UniqueEventList\u003cTask\u003e tasks;"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    private final UniqueShortcutDoublesList shortcutCommands;"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    private final UniqueClassList classes;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"        students \u003d new UniqueStudentList();"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        contacts \u003d new UniqueContactList(persons, students);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        appointments \u003d new UniqueEventList\u003c\u003e();"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        tasks \u003d new UniqueEventList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        shortcutCommands \u003d new UniqueShortcutDoublesList();"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        classes \u003d new UniqueClassList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"    public void setStudents(List\u003cStudent\u003e students) throws DuplicatePersonException {"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"        this.students.setStudents(students);"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"randypx"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments)"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"            throws DuplicateEventException {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        this.appointments.setEvents(appointments);"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"     *Sets the shortcuts list."},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"    public void setShorcutCommands(List\u003cShortcutDoubles\u003e shorcutCommands) {"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"        this.shortcutCommands.setCommandsList(shorcutCommands);"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":105,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"    public void setTasks(List\u003cTask\u003e tasks)"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"            throws DuplicateEventException {"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":"        this.tasks.setEvents(tasks);"},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author LimShiMinJonathan"},{"lineNumber":111,"author":{"gitID":"LimShiMinJonathan"},"content":"    public void sortContacts() {"},{"lineNumber":112,"author":{"gitID":"LimShiMinJonathan"},"content":"        contacts.sortList();"},{"lineNumber":113,"author":{"gitID":"LimShiMinJonathan"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"LimShiMinJonathan"},"content":"    //@@author"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"    //@@author randypx"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"    public void setClasses(List\u003cClass\u003e classes) throws DuplicateClassException {"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"        this.classes.setClasses(classes);"},{"lineNumber":118,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":""},{"lineNumber":120,"author":{"gitID":"randypx"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":127,"author":{"gitID":"shanmu9898"},"content":"        List\u003cShortcutDoubles\u003e commandsList \u003d newData.getCommandsList();"},{"lineNumber":128,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cAppointment\u003e appointmentList \u003d newData.getAppointmentList();"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":"        List\u003cTask\u003e taskList \u003d newData.getTaskList();"},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"        List\u003cClass\u003e classList \u003d newData.getClassList();"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"        List\u003cPerson\u003e syncedContactList \u003d newData.getContactList().stream()"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":"                .map(this::syncWithMasterTagList).collect(Collectors.toList());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"shanmu9898"},"content":"            setShorcutCommands(commandsList);"},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"            setAppointments(appointmentList);"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"            setTasks(taskList);"},{"lineNumber":138,"author":{"gitID":"randypx"},"content":"            setClasses(classList);"},{"lineNumber":139,"author":{"gitID":"randypx"},"content":"            persons.setPersons(new UniquePersonList());"},{"lineNumber":140,"author":{"gitID":"randypx"},"content":"            students.setStudents(new UniqueStudentList());"},{"lineNumber":141,"author":{"gitID":"randypx"},"content":"            for (Person contact : syncedContactList) {"},{"lineNumber":142,"author":{"gitID":"randypx"},"content":"                if (contact instanceof Student) {"},{"lineNumber":143,"author":{"gitID":"randypx"},"content":"                    addStudent((Student) contact);"},{"lineNumber":144,"author":{"gitID":"randypx"},"content":"                } else {"},{"lineNumber":145,"author":{"gitID":"randypx"},"content":"                    addPerson(contact);"},{"lineNumber":146,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":147,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":149,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"TeachConnect should not have duplicate persons\");"},{"lineNumber":150,"author":{"gitID":"randypx"},"content":"        } catch (DuplicateEventException e) {"},{"lineNumber":151,"author":{"gitID":"shanmu9898"},"content":"            throw new AssertionError(\"TeachConnect should not have duplicate events\");"},{"lineNumber":152,"author":{"gitID":"randypx"},"content":"        } catch (DuplicateClassException e) {"},{"lineNumber":153,"author":{"gitID":"randypx"},"content":"            throw new AssertionError(\"TeachConnect should not have duplicate classes\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":166,"author":{"gitID":"randypx"},"content":"        if (!students.contains(new Student(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":167,"author":{"gitID":"randypx"},"content":"                person.getAddress(), person.getTags()))) {"},{"lineNumber":168,"author":{"gitID":"randypx"},"content":"            try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                persons.add(person);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":171,"author":{"gitID":"randypx"},"content":"                removeUnusedTags();"},{"lineNumber":172,"author":{"gitID":"randypx"},"content":"                throw e;"},{"lineNumber":173,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"randypx"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":176,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"randypx"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":194,"author":{"gitID":"randypx"},"content":"        if (!students.contains(new Student(syncedEditedPerson.getName(), syncedEditedPerson.getPhone(),"},{"lineNumber":195,"author":{"gitID":"randypx"},"content":"                syncedEditedPerson.getEmail(), syncedEditedPerson.getAddress(), syncedEditedPerson.getTags()))) {"},{"lineNumber":196,"author":{"gitID":"randypx"},"content":"            try {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":198,"author":{"gitID":"randypx"},"content":"            } finally {"},{"lineNumber":199,"author":{"gitID":"shanmu9898"},"content":"                removeUnusedTags();"},{"lineNumber":200,"author":{"gitID":"shanmu9898"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":202,"author":{"gitID":"randypx"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":203,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"randypx"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"randypx"},"content":"    //author randypx-reused"},{"lineNumber":219,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"randypx"},"content":"     * Adds a student to the address book."},{"lineNumber":221,"author":{"gitID":"randypx"},"content":"     * Also checks the new student\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":222,"author":{"gitID":"randypx"},"content":"     * and updates the Tag objects in the student to point to those in {@link #tags}."},{"lineNumber":223,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"randypx"},"content":"     * @throws DuplicatePersonException if an equivalent student already exists."},{"lineNumber":225,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"randypx"},"content":"    public void addStudent(Student s) throws DuplicatePersonException {"},{"lineNumber":227,"author":{"gitID":"randypx"},"content":"        Student student \u003d (Student) syncWithMasterTagList(s);"},{"lineNumber":228,"author":{"gitID":"randypx"},"content":"        if (!persons.contains(student)) {"},{"lineNumber":229,"author":{"gitID":"randypx"},"content":"            try {"},{"lineNumber":230,"author":{"gitID":"randypx"},"content":"                students.add(student);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":232,"author":{"gitID":"randypx"},"content":"                removeUnusedTags();"},{"lineNumber":233,"author":{"gitID":"randypx"},"content":"                throw e;"},{"lineNumber":234,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":235,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":236,"author":{"gitID":"randypx"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":237,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"randypx"},"content":""},{"lineNumber":240,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"randypx"},"content":"     * Replaces the given student {@code target} in the list with {@code editedStudent}."},{"lineNumber":242,"author":{"gitID":"randypx"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedStudent}."},{"lineNumber":243,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":244,"author":{"gitID":"randypx"},"content":"     * @throws DuplicatePersonException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"randypx"},"content":"    public void updateStudent(Student target, Student editedStudent)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":252,"author":{"gitID":"randypx"},"content":"        requireNonNull(editedStudent);"},{"lineNumber":253,"author":{"gitID":"randypx"},"content":""},{"lineNumber":254,"author":{"gitID":"randypx"},"content":"        Student syncedEditedStudent \u003d (Student) syncWithMasterTagList(editedStudent);"},{"lineNumber":255,"author":{"gitID":"randypx"},"content":"        if (!persons.contains(syncedEditedStudent)) {"},{"lineNumber":256,"author":{"gitID":"randypx"},"content":"            try {"},{"lineNumber":257,"author":{"gitID":"randypx"},"content":"                students.setStudent(target, syncedEditedStudent);"},{"lineNumber":258,"author":{"gitID":"randypx"},"content":"                for (Class group: classes) {"},{"lineNumber":259,"author":{"gitID":"randypx"},"content":"                    if (group.containStudent(target)) {"},{"lineNumber":260,"author":{"gitID":"randypx"},"content":"                        group.removeStudent(target);"},{"lineNumber":261,"author":{"gitID":"randypx"},"content":"                        group.addStudent(syncedEditedStudent);"},{"lineNumber":262,"author":{"gitID":"randypx"},"content":"                    }"},{"lineNumber":263,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":264,"author":{"gitID":"randypx"},"content":"            } finally {"},{"lineNumber":265,"author":{"gitID":"randypx"},"content":"                removeUnusedTags();"},{"lineNumber":266,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":267,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":268,"author":{"gitID":"randypx"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":269,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"randypx"},"content":"    public boolean removeStudent(Student key) throws PersonNotFoundException {"},{"lineNumber":277,"author":{"gitID":"randypx"},"content":"        if (students.remove(key)) {"},{"lineNumber":278,"author":{"gitID":"randypx"},"content":"            for (Class group: classes) {"},{"lineNumber":279,"author":{"gitID":"randypx"},"content":"                if (group.containStudent(key)) {"},{"lineNumber":280,"author":{"gitID":"randypx"},"content":"                    group.removeStudent(key);"},{"lineNumber":281,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":282,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"randypx"},"content":""},{"lineNumber":289,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":290,"author":{"gitID":"shanmu9898"},"content":"    public void addShortcutDoubles(ShortcutDoubles s)"},{"lineNumber":291,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException {"},{"lineNumber":292,"author":{"gitID":"shanmu9898"},"content":"        shortcutCommands.add(s);"},{"lineNumber":293,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":295,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"shanmu9898"},"content":"     * Removes a command shortcut from the UniqueShortcutDoubles list or throws a suitable exeption otherwise."},{"lineNumber":297,"author":{"gitID":"shanmu9898"},"content":"     * @param commandShortcut - which is a shortcut Double"},{"lineNumber":298,"author":{"gitID":"shanmu9898"},"content":"     * @return a boolean variable"},{"lineNumber":299,"author":{"gitID":"shanmu9898"},"content":"     * @throws UniqueShortcutDoublesList.CommandShortcutNotFoundException"},{"lineNumber":300,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"shanmu9898"},"content":"    public boolean removeShortcutDouble(ShortcutDoubles commandShortcut)"},{"lineNumber":302,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":303,"author":{"gitID":"shanmu9898"},"content":"        if (shortcutCommands.remove(commandShortcut)) {"},{"lineNumber":304,"author":{"gitID":"shanmu9898"},"content":"            return true;"},{"lineNumber":305,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":306,"author":{"gitID":"shanmu9898"},"content":"            throw new UniqueShortcutDoublesList.CommandShortcutNotFoundException();"},{"lineNumber":307,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":310,"author":{"gitID":"shanmu9898"},"content":"    //@@author"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":315,"author":{"gitID":"shanmu9898"},"content":"    //@@author shanmu9898"},{"lineNumber":316,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"shanmu9898"},"content":"     * Removes the particular tag for all people in the AddressBook."},{"lineNumber":318,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"shanmu9898"},"content":"    public void removeTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":320,"author":{"gitID":"shanmu9898"},"content":"        for (Person person : persons) {"},{"lineNumber":321,"author":{"gitID":"shanmu9898"},"content":"            removeTagFromPerson(tag, person);"},{"lineNumber":322,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"shanmu9898"},"content":"        for (Student student : students) {"},{"lineNumber":324,"author":{"gitID":"shanmu9898"},"content":"            removeTagFromStudent(tag, student);"},{"lineNumber":325,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":326,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":327,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":329,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":330,"author":{"gitID":"shanmu9898"},"content":"     * Removes all {@code Tag}s that are not used by any {@code Person} or {@code Student} in this {@code AddressBook}."},{"lineNumber":331,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":332,"author":{"gitID":"shanmu9898"},"content":"    private void removeUnusedTags() {"},{"lineNumber":333,"author":{"gitID":"shanmu9898"},"content":"        Set\u003cTag\u003e tagsInContacts \u003d contacts.asObservableList().stream().map(Person::getTags).flatMap(Set::stream)"},{"lineNumber":334,"author":{"gitID":"shanmu9898"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":335,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":336,"author":{"gitID":"shanmu9898"},"content":"        tags.setTags(tagsInContacts);"},{"lineNumber":337,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":339,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":340,"author":{"gitID":"shanmu9898"},"content":"     * Removes the particular tag for that particular person in the AddressBook."},{"lineNumber":341,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"shanmu9898"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":343,"author":{"gitID":"shanmu9898"},"content":"        Set\u003cTag\u003e listOfTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":344,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":345,"author":{"gitID":"shanmu9898"},"content":"        if (listOfTags.contains(tag)) {"},{"lineNumber":346,"author":{"gitID":"shanmu9898"},"content":"            listOfTags.remove(tag);"},{"lineNumber":347,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":348,"author":{"gitID":"shanmu9898"},"content":"            return;"},{"lineNumber":349,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":351,"author":{"gitID":"shanmu9898"},"content":"        Person updatedPerson \u003d new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":352,"author":{"gitID":"shanmu9898"},"content":"                person.getAddress(), listOfTags);"},{"lineNumber":353,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":354,"author":{"gitID":"shanmu9898"},"content":"        updatePerson(person, updatedPerson);"},{"lineNumber":355,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":357,"author":{"gitID":"shanmu9898"},"content":"    //@@author randypx-reused"},{"lineNumber":358,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":359,"author":{"gitID":"randypx"},"content":"     * Removes the particular tag for that particular student in the AddressBook."},{"lineNumber":360,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":361,"author":{"gitID":"randypx"},"content":"    private void removeTagFromStudent(Tag tag, Student student)"},{"lineNumber":362,"author":{"gitID":"randypx"},"content":"            throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":363,"author":{"gitID":"randypx"},"content":"        Set\u003cTag\u003e listOfTags \u003d new HashSet\u003c\u003e(student.getTags());"},{"lineNumber":364,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":365,"author":{"gitID":"shanmu9898"},"content":"        if (listOfTags.contains(tag)) {"},{"lineNumber":366,"author":{"gitID":"shanmu9898"},"content":"            listOfTags.remove(tag);"},{"lineNumber":367,"author":{"gitID":"shanmu9898"},"content":"        } else {"},{"lineNumber":368,"author":{"gitID":"shanmu9898"},"content":"            return;"},{"lineNumber":369,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":370,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":371,"author":{"gitID":"randypx"},"content":"        Student updatedStudent \u003d new Student(student.getName(), student.getPhone(), student.getEmail(),"},{"lineNumber":372,"author":{"gitID":"randypx"},"content":"                student.getAddress(), listOfTags);"},{"lineNumber":373,"author":{"gitID":"randypx"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"        updateStudent(student, updatedStudent);"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"randypx"},"content":""},{"lineNumber":377,"content":"    //@@author"},{"lineNumber":378,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":379,"author":{"gitID":"randypx"},"content":"     *  Updates the master tag list to include tags in {@code person} or {@code student} that are not in the list."},{"lineNumber":380,"author":{"gitID":"randypx"},"content":"     *  @return a copy of this {@code person} or {@code student} such that every tag in this person points to a Tag"},{"lineNumber":381,"author":{"gitID":"randypx"},"content":"     *  object in the master list."},{"lineNumber":382,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":389,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":390,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":393,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":394,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":395,"author":{"gitID":"randypx"},"content":""},{"lineNumber":396,"author":{"gitID":"randypx"},"content":"        if (person instanceof Student) {"},{"lineNumber":397,"author":{"gitID":"randypx"},"content":"            List\u003cSubject\u003e subjectList \u003d ((Student) person).getSubjectList();"},{"lineNumber":398,"author":{"gitID":"randypx"},"content":"            return new Student("},{"lineNumber":399,"author":{"gitID":"randypx"},"content":"                    person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences,"},{"lineNumber":400,"author":{"gitID":"randypx"},"content":"                    subjectList);"},{"lineNumber":401,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":402,"author":{"gitID":"-"},"content":"            return new Person("},{"lineNumber":403,"author":{"gitID":"-"},"content":"                    person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":404,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"Sisyphus25"},"content":"    //@@author Sisyphus25"},{"lineNumber":408,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":409,"author":{"gitID":"Sisyphus25"},"content":"     * Adds an appointment to the address book."},{"lineNumber":410,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":411,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if an equivalent appointment already exists."},{"lineNumber":412,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":413,"author":{"gitID":"Sisyphus25"},"content":"    public void addAppointment(Appointment e) throws DuplicateEventException {"},{"lineNumber":414,"author":{"gitID":"Sisyphus25"},"content":"        appointments.add(e);"},{"lineNumber":415,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":416,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":417,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":418,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":419,"author":{"gitID":"Sisyphus25"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":420,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":421,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":422,"author":{"gitID":"Sisyphus25"},"content":"    public boolean removeAppointment(Appointment key) throws EventNotFoundException {"},{"lineNumber":423,"author":{"gitID":"Sisyphus25"},"content":"        if (appointments.remove(key)) {"},{"lineNumber":424,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":425,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":426,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":427,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":428,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":429,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":430,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":431,"author":{"gitID":"Sisyphus25"},"content":"     * Adds a task to the address book."},{"lineNumber":432,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":433,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if an equivalent appointment already exists."},{"lineNumber":434,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":435,"author":{"gitID":"Sisyphus25"},"content":"    public void addTask(Task e) throws DuplicateEventException {"},{"lineNumber":436,"author":{"gitID":"Sisyphus25"},"content":"        tasks.add(e);"},{"lineNumber":437,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":438,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":439,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":440,"author":{"gitID":"Sisyphus25"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":441,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":442,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":443,"author":{"gitID":"Sisyphus25"},"content":"    public boolean removeTask(Task key) throws EventNotFoundException  {"},{"lineNumber":444,"author":{"gitID":"Sisyphus25"},"content":"        if (tasks.remove(key)) {"},{"lineNumber":445,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":446,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":447,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":448,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":449,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":450,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":451,"author":{"gitID":"Sisyphus25"},"content":"    //// class-level operations"},{"lineNumber":452,"author":{"gitID":"Sisyphus25"},"content":"    //@@author randypx-reused"},{"lineNumber":453,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":454,"author":{"gitID":"randypx"},"content":"     * Adds a class to the address book."},{"lineNumber":455,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":456,"author":{"gitID":"randypx"},"content":"     * @throws DuplicateClassException if an equivalent class already exists."},{"lineNumber":457,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":458,"author":{"gitID":"randypx"},"content":"    public void addClass(Class c) throws DuplicateClassException {"},{"lineNumber":459,"author":{"gitID":"randypx"},"content":"        classes.add(c);"},{"lineNumber":460,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":463,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":464,"author":{"gitID":"randypx"},"content":"     * @throws StudentClassNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":465,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":466,"author":{"gitID":"randypx"},"content":"    public boolean removeClass(Class key) throws StudentClassNotFoundException {"},{"lineNumber":467,"author":{"gitID":"randypx"},"content":"        if (classes.remove(key)) {"},{"lineNumber":468,"author":{"gitID":"randypx"},"content":"            for (Student student: students) {"},{"lineNumber":469,"author":{"gitID":"randypx"},"content":"                if (student.isAttending(key)) {"},{"lineNumber":470,"author":{"gitID":"randypx"},"content":"                    student.exitClass(key);"},{"lineNumber":471,"author":{"gitID":"randypx"},"content":"                }"},{"lineNumber":472,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":473,"author":{"gitID":"randypx"},"content":"            return true;"},{"lineNumber":474,"author":{"gitID":"randypx"},"content":"        } else {"},{"lineNumber":475,"author":{"gitID":"randypx"},"content":"            throw new StudentClassNotFoundException();"},{"lineNumber":476,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":477,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":478,"author":{"gitID":"randypx"},"content":""},{"lineNumber":479,"author":{"gitID":"randypx"},"content":"    //// util methods"},{"lineNumber":480,"content":"    //@@author"},{"lineNumber":481,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":482,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":483,"author":{"gitID":"Sisyphus25"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":484,"author":{"gitID":"-"},"content":"                + students.asObservableList().size() + \" students, \""},{"lineNumber":485,"author":{"gitID":"Sisyphus25"},"content":"                + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":486,"author":{"gitID":"Sisyphus25"},"content":"                + appointments.asObservableList().size() + \" appointments, \""},{"lineNumber":487,"author":{"gitID":"randypx"},"content":"                + tasks.asObservableList().size() +  \" tasks, \""},{"lineNumber":488,"author":{"gitID":"randypx"},"content":"                + classes.asObservableList().size() + \" classes\";"},{"lineNumber":489,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":490,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":493,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":494,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":495,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":498,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cStudent\u003e getStudentList() {"},{"lineNumber":499,"author":{"gitID":"randypx"},"content":"        return students.asObservableList();"},{"lineNumber":500,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":501,"author":{"gitID":"randypx"},"content":""},{"lineNumber":502,"author":{"gitID":"randypx"},"content":"    @Override"},{"lineNumber":503,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cPerson\u003e getContactList() {"},{"lineNumber":504,"author":{"gitID":"randypx"},"content":"        return contacts.asObservableList();"},{"lineNumber":505,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":506,"author":{"gitID":"randypx"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":508,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":509,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":510,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":513,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e getCommandsList() {"},{"lineNumber":514,"author":{"gitID":"randypx"},"content":"        return shortcutCommands.asObservableList();"},{"lineNumber":515,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":516,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":517,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":518,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":519,"author":{"gitID":"Sisyphus25"},"content":"        return appointments.asObservableList();"},{"lineNumber":520,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":521,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":522,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":523,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":524,"author":{"gitID":"Sisyphus25"},"content":"        return tasks.asObservableList();"},{"lineNumber":525,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":526,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":528,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cClass\u003e getClassList() {"},{"lineNumber":529,"author":{"gitID":"randypx"},"content":"        return classes.asObservableList();"},{"lineNumber":530,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":531,"author":{"gitID":"randypx"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":533,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":534,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":535,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":536,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":537,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.students.equals(((AddressBook) other).students)"},{"lineNumber":538,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":539,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks)"},{"lineNumber":540,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags)"},{"lineNumber":541,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.shortcutCommands.equals(((AddressBook) other).shortcutCommands)"},{"lineNumber":542,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.classes.equals(((AddressBook) other).classes));"},{"lineNumber":543,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":546,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":547,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":548,"author":{"gitID":"randypx"},"content":"        return Objects.hash(persons, appointments, tasks, tags, shortcutCommands, classes);"},{"lineNumber":549,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":550,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Sisyphus25":78,"randypx":189,"LimShiMinJonathan":5,"-":180,"shanmu9898":96}},{"path":"src/main/java/seedu/address/logic/commands/FormCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":5,"author":{"gitID":"randypx"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":""},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":16,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Subject;"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.Time;"},{"lineNumber":19,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":""},{"lineNumber":23,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"randypx"},"content":" * Forms a class in TeachConnect."},{"lineNumber":25,"author":{"gitID":"randypx"},"content":" */"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"public class FormCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":""},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    public static final String COMMAND_WORD \u003d \"form\";"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":""},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": forms a class in TeachConnect.\\n\""},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"            + \"SUBJECT \""},{"lineNumber":33,"author":{"gitID":"randypx"},"content":"            + PREFIX_NAME + \"CLASS-NAME \""},{"lineNumber":34,"author":{"gitID":"randypx"},"content":"            + PREFIX_START_TIME + \"START-DATE \""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"            + PREFIX_END_TIME + \"END-DATE \""},{"lineNumber":36,"author":{"gitID":"randypx"},"content":"            + PREFIX_INDEX + \"INDEX,...\\n\""},{"lineNumber":37,"author":{"gitID":"randypx"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"            + \"Physics \""},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"            + PREFIX_NAME + \"class1 \""},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"            + PREFIX_START_TIME + \"10/01/2019 \""},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"            + PREFIX_END_TIME + \"12/07/2019 \""},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"            + PREFIX_INDEX + \"1,9,20,4\";"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":""},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New class %1$s formed.\";"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"    public static final String MESSAGE_DUPLICATE_CLASS \u003d \"This class already exists\";"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":""},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    private final Name className;"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    private final Subject subject;"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":"    private final Time startTime;"},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    private final Time endTime;"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"    private final List\u003cIndex\u003e indexList;"},{"lineNumber":52,"author":{"gitID":"randypx"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    private List\u003cStudent\u003e studentList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    private List\u003cName\u003e studentNames \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"    private Class toAdd;"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":""},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"     * Creates an FormCommand to form the specified {@code Class}"},{"lineNumber":59,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"randypx"},"content":"    public FormCommand(Name name, Subject subj, Time start, Time end, List\u003cIndex\u003e indexes) {"},{"lineNumber":61,"author":{"gitID":"randypx"},"content":"        requireNonNull(name);"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"        requireNonNull(subj);"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        requireNonNull(start);"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":"        requireNonNull(end);"},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        requireNonNull(indexes);"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"        className \u003d name;"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        subject \u003d subj;"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":"        startTime \u003d start;"},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        endTime \u003d end;"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"        indexList \u003d indexes;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"            model.addClass(toAdd, studentList);"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"        } catch (DuplicateClassException e) {"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLASS);"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":""},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, className));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"randypx"},"content":"        for (Index targetIndex: indexList) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"                throw new CommandException(String.format(Messages.MESSAGE_INVALID_INDEX, targetIndex.getOneBased()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"            if (lastShownList.get(targetIndex.getZeroBased()) instanceof Student) {"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"                Student enteringStudent \u003d (Student) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"                studentList.add(enteringStudent);"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":"                studentNames.add(enteringStudent.getName());"},{"lineNumber":98,"author":{"gitID":"randypx"},"content":"            } else {"},{"lineNumber":99,"author":{"gitID":"randypx"},"content":"                throw new CommandException(String.format(Messages.MESSAGE_INVALID_STUDENT_INDEX,"},{"lineNumber":100,"author":{"gitID":"randypx"},"content":"                        targetIndex.getOneBased()));"},{"lineNumber":101,"author":{"gitID":"randypx"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"randypx"},"content":""},{"lineNumber":104,"author":{"gitID":"randypx"},"content":"        toAdd \u003d new Class(className, subject, startTime, endTime, studentNames);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"randypx"},"content":"                || (other instanceof FormCommand // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.className.equals(((FormCommand) other).className)"},{"lineNumber":112,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.subject.equals(((FormCommand) other).subject)"},{"lineNumber":113,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.startTime.equals(((FormCommand) other).startTime)"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.endTime.equals(((FormCommand) other).endTime)"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.indexList.equals(((FormCommand) other).indexList));"},{"lineNumber":116,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"Sisyphus25":7,"randypx":85,"-":25}},{"path":"src/main/java/seedu/address/model/event/Title.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Represents an event\u0027s title in the address book."},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"public class Title {"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d \"Title must be non empty\";"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"     * The title can not be empty string or spaces only"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TITLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code Title}."},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     * @param title A valid title."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public Title(String title) {"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(title);"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"        this.value \u003d title;"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid title."},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof Title // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.value.equals(((Title) other).value)); // state check"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":36,"-":14}},{"path":"src/main/java/seedu/address/model/shortcuts/UniqueShortcutDoublesList.java","lines":[{"lineNumber":1,"author":{"gitID":"shanmu9898"},"content":"//@@author shanmu9898"},{"lineNumber":2,"author":{"gitID":"shanmu9898"},"content":"package seedu.address.model.shortcuts;"},{"lineNumber":3,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":4,"author":{"gitID":"shanmu9898"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":6,"author":{"gitID":"shanmu9898"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":8,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"shanmu9898"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":11,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":13,"author":{"gitID":"shanmu9898"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"shanmu9898"},"content":" *"},{"lineNumber":15,"author":{"gitID":"shanmu9898"},"content":" */"},{"lineNumber":16,"author":{"gitID":"shanmu9898"},"content":"public class UniqueShortcutDoublesList {"},{"lineNumber":17,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"    private final ObservableList\u003cShortcutDoubles\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"    public UniqueShortcutDoublesList(){"},{"lineNumber":21,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":22,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":24,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shanmu9898"},"content":"     * Adds Shortcut Doubles to the internal list"},{"lineNumber":26,"author":{"gitID":"shanmu9898"},"content":"     * @param toAdd"},{"lineNumber":27,"author":{"gitID":"shanmu9898"},"content":"     * @throws DuplicateShortcutDoublesException"},{"lineNumber":28,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shanmu9898"},"content":"    public void add(ShortcutDoubles toAdd) throws DuplicateShortcutDoublesException {"},{"lineNumber":30,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(toAdd);"},{"lineNumber":31,"author":{"gitID":"shanmu9898"},"content":"        if (contains(toAdd)) {"},{"lineNumber":32,"author":{"gitID":"shanmu9898"},"content":"            throw new DuplicateShortcutDoublesException();"},{"lineNumber":33,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"shanmu9898"},"content":"        internalList.add(toAdd);"},{"lineNumber":35,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":36,"author":{"gitID":"shanmu9898"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":37,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":39,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"shanmu9898"},"content":"     * Returns an ObservableList of the internallist"},{"lineNumber":41,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":42,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"shanmu9898"},"content":"    public ObservableList\u003cShortcutDoubles\u003e asObservableList() {"},{"lineNumber":44,"author":{"gitID":"shanmu9898"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":45,"author":{"gitID":"shanmu9898"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":46,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":48,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"shanmu9898"},"content":"     * Gives a DuplicateDataException"},{"lineNumber":50,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"shanmu9898"},"content":"    public static class DuplicateShortcutDoublesException extends DuplicateDataException {"},{"lineNumber":52,"author":{"gitID":"shanmu9898"},"content":"        protected DuplicateShortcutDoublesException() {"},{"lineNumber":53,"author":{"gitID":"shanmu9898"},"content":"            super(\"Operation would result in duplicate Doubles\");"},{"lineNumber":54,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"     * Helps in checking if there are duplicates"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":"     * @param toCheck"},{"lineNumber":60,"author":{"gitID":"shanmu9898"},"content":"     * @return"},{"lineNumber":61,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"shanmu9898"},"content":"    public boolean contains(ShortcutDoubles toCheck) {"},{"lineNumber":63,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(toCheck);"},{"lineNumber":64,"author":{"gitID":"shanmu9898"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":65,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":67,"author":{"gitID":"shanmu9898"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"shanmu9898"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"shanmu9898"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"shanmu9898"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"shanmu9898"},"content":"                || (other instanceof UniqueShortcutDoublesList // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueShortcutDoublesList) other).internalList));"},{"lineNumber":73,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":75,"author":{"gitID":"shanmu9898"},"content":"    public void setCommandsList(List\u003cShortcutDoubles\u003e commandsList) {"},{"lineNumber":76,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(commandsList);"},{"lineNumber":77,"author":{"gitID":"shanmu9898"},"content":"        internalList.setAll(commandsList);"},{"lineNumber":78,"author":{"gitID":"shanmu9898"},"content":"        assert CollectionUtil.elementsAreUnique(internalList) : \"List must contain only unique elements\";"},{"lineNumber":79,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":81,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"shanmu9898"},"content":"     * Removes the equvivalent command shortcut from the list."},{"lineNumber":83,"author":{"gitID":"shanmu9898"},"content":"     * @param shortcutDoubles"},{"lineNumber":84,"author":{"gitID":"shanmu9898"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"shanmu9898"},"content":"     * @throws UniqueShortcutDoublesList.CommandShortcutNotFoundException"},{"lineNumber":86,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"shanmu9898"},"content":"    public boolean remove(ShortcutDoubles shortcutDoubles)"},{"lineNumber":88,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException {"},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"        requireNonNull(shortcutDoubles);"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"        final boolean shortcutToBeDeleted \u003d internalList.remove(shortcutDoubles);"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":"        if (!shortcutToBeDeleted) {"},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"            throw new UniqueShortcutDoublesList.CommandShortcutNotFoundException();"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":"        return shortcutToBeDeleted;"},{"lineNumber":95,"author":{"gitID":"shanmu9898"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":97,"author":{"gitID":"shanmu9898"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"shanmu9898"},"content":"     * Exception when the command shortcut is not present in the list of stored commands"},{"lineNumber":99,"author":{"gitID":"shanmu9898"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"shanmu9898"},"content":"    public static class CommandShortcutNotFoundException extends Exception {}"},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"}"}],"authorContributionMap":{"shanmu9898":101}},{"path":"src/main/java/seedu/address/model/event/PersonToMeet.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.person.Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.model.person.Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":" * Represents an Appointment\u0027s personToMeet in the address book."},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable;"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"public class PersonToMeet {"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"    public static final String EMAIL_SPLITTER \u003d \" Email: \";"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private final String name;"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    private final String email;"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public PersonToMeet(String name, String email) {"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(name, email);"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(Name.isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(Email.isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"        this.name \u003d name;"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"        this.email \u003d email;"},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"    public String getName() {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        return name;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    public String getEmail() {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"        return email;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"        return name + EMAIL_SPLITTER + email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof PersonToMeet // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.name.equals(((PersonToMeet) other).name))"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.name.equals(((PersonToMeet) other).email); // state check"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":40,"-":10}},{"path":"src/main/java/seedu/address/model/event/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":" * Represent a Task in the schedule, contains deadline as well as the title"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"public class Task {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"    private Title title;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    private Time time;"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"    //Every field must be present and not null"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public Task(Title title, Time deadline) {"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(title, deadline);"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"        this.title \u003d title;"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"        this.time \u003d deadline;"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public Title getTitle() {"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"        return title;"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"    public Time getTime() {"},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"        return time;"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"            return true;"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"        if (!(other instanceof Task)) {"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"            return false;"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        Task otherTask \u003d (Task) other;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        return otherTask.getTitle().equals(this.getTitle())"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 otherTask.getTime().equals(this.getTime());"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"        return title + \", Deadline: \" + time;"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":45,"-":2}},{"path":"src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"public class DuplicateEventException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"    public DuplicateEventException() {"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"        super(\"Operation would result in duplicate events\");"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":4,"randypx":3,"-":5}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.event.exceptions;"},{"lineNumber":2,"author":{"gitID":"randypx"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":" * Signals that an operation is looking for an appointment doesn\u0027t exist."},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"public class EventNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"    public EventNotFoundException() {"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"        super(\"Event not found\");"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":7,"randypx":3}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_NAME_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS \u003d \"Tag color style is invalid or not supported\";"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":"    private static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":17,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\","},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"        \"green\", \"pink\", \"black\", \"grey\"};"},{"lineNumber":21,"content":"    //@@author"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"    public final String tagColorStyle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":"        this(tagName, \"default\");"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"     * @param tagColorStyle A valid tag color style"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    public Tag(String tagName, String tagColorStyle) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(tagColorStyle);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"        if (tagColorStyle.equals(\"default\")) {"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"            tagColorStyle \u003d getTagColorStyle(tagName);"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_NAME_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        checkArgument(isValidTagColorStyle(tagColorStyle), MESSAGE_TAG_COLOR_STYLE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        this.tagColorStyle \u003d tagColorStyle;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if a given string is a valid tag color style."},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTagColorStyle(String tagColorStyle) {"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        return Arrays.asList(TAG_COLOR_STYLES).contains(tagColorStyle);"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":72,"author":{"gitID":"shanmu9898"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"content":"    //@@author Sisyphus25-reused"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/167b3d0b4f7ad34296d2fbf505f9ae71f983f53c"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"     * Returns a color style for {@code tagName}"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":"    private String getTagColorStyle(String tagName) {"},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"Sisyphus25":41,"-":54,"shanmu9898":1}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"randypx"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.Class;"},{"lineNumber":8,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":9,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Appointment;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":"import seedu.address.model.event.Task;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":"import seedu.address.model.person.Student;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.ShortcutDoubles;"},{"lineNumber":19,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.shortcuts.UniqueShortcutDoublesList;"},{"lineNumber":20,"author":{"gitID":"shanmu9898"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":"    String LIST_TYPE_CONTACT \u003d \"contacts\";"},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    String LIST_TYPE_APPOINTMENT \u003d \"appointments\";"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":"    String LIST_TYPE_TASK \u003d \"tasks\";"},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    String LIST_TYPE_CLASS \u003d \"classes\";"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"    String LIST_TYPE_SHORTCUT \u003d \"shortcuts\";"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"randypx"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ONLY_STUDENTS \u003d person -\u003e person instanceof Student;"},{"lineNumber":36,"author":{"gitID":"randypx"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"    /** Deletes the given student. */"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"    void deleteStudent(Student target) throws PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"    /** Adds the given student */"},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"    void addStudent(Student student) throws DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"randypx"},"content":""},{"lineNumber":56,"author":{"gitID":"shanmu9898"},"content":"    /** Adds the given shortcut */"},{"lineNumber":57,"author":{"gitID":"shanmu9898"},"content":"    void addCommandShortcut(ShortcutDoubles shortcutDoubles)"},{"lineNumber":58,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.DuplicateShortcutDoublesException;"},{"lineNumber":59,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":"     * Replaces the given student {@code target} with {@code editedStudent}."},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"     * @throws DuplicatePersonException if updating the student\u0027s details causes the student to be equivalent to"},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"     *      another existing student in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    void updateStudent(Student target, Student editedStudent)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":89,"author":{"gitID":"shanmu9898"},"content":"    /** Returns an unmodifiable view of the filtered commands list */"},{"lineNumber":90,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cShortcutDoubles\u003e getFilteredCommandsList();"},{"lineNumber":91,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":92,"author":{"gitID":"shanmu9898"},"content":"    /** Returns an unmodifiable view of the filtered students list */"},{"lineNumber":93,"author":{"gitID":"shanmu9898"},"content":"    ObservableList\u003cStudent\u003e getFilteredStudentsList();"},{"lineNumber":94,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"    /** Returns an unmodifiable view of the filtered class list */"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"    ObservableList\u003cClass\u003e getFilteredClassList();"},{"lineNumber":97,"author":{"gitID":"randypx"},"content":""},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"    /** Returns the item type of the curent active list being shown in the GUI */"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"    String getCurrentActiveListType();"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":101,"author":{"gitID":"shanmu9898"},"content":"    /** Deletes the given command shortcut */"},{"lineNumber":102,"author":{"gitID":"shanmu9898"},"content":"    void deleteCommandShortcut(ShortcutDoubles commandShortcut)"},{"lineNumber":103,"author":{"gitID":"shanmu9898"},"content":"            throws UniqueShortcutDoublesList.CommandShortcutNotFoundException;"},{"lineNumber":104,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    /** Returns a sorted list of contacts*/"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    void sortByNameFilteredPersonList();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"    /** Delete the given tag */"},{"lineNumber":116,"author":{"gitID":"shanmu9898"},"content":"    void deleteTag(Tag tag) throws PersonNotFoundException, DuplicatePersonException;"},{"lineNumber":117,"author":{"gitID":"shanmu9898"},"content":""},{"lineNumber":118,"author":{"gitID":"Sisyphus25"},"content":"    /** Adds the given appointment */"},{"lineNumber":119,"author":{"gitID":"randypx"},"content":"    void addAppointment(Appointment appointment) throws DuplicateEventException;"},{"lineNumber":120,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":121,"author":{"gitID":"Sisyphus25"},"content":"    /** Deletes the given appointment. */"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":"    void deleteAppointment(Appointment appointment) throws EventNotFoundException;"},{"lineNumber":123,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":124,"author":{"gitID":"Sisyphus25"},"content":"    /** Adds the given task */"},{"lineNumber":125,"author":{"gitID":"randypx"},"content":"    void addTask(Task task) throws DuplicateEventException;"},{"lineNumber":126,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":127,"author":{"gitID":"Sisyphus25"},"content":"    /** Deletes the given task */"},{"lineNumber":128,"author":{"gitID":"randypx"},"content":"    void deleteTask(Task task) throws EventNotFoundException;"},{"lineNumber":129,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":130,"author":{"gitID":"randypx"},"content":"    /** Adds the given class group */"},{"lineNumber":131,"author":{"gitID":"randypx"},"content":"    void addClass(Class group, List\u003cStudent\u003e studentList) throws DuplicateClassException;"},{"lineNumber":132,"author":{"gitID":"randypx"},"content":""},{"lineNumber":133,"author":{"gitID":"randypx"},"content":"    /** Deletes the given class */"},{"lineNumber":134,"author":{"gitID":"randypx"},"content":"    void deleteClass(Class target) throws StudentClassNotFoundException;"},{"lineNumber":135,"author":{"gitID":"randypx"},"content":""},{"lineNumber":136,"author":{"gitID":"Sisyphus25"},"content":"    /** Change the current active list that is being displayed in the model */"},{"lineNumber":137,"author":{"gitID":"Sisyphus25"},"content":"    void changeCurrentActiveListType(String itemType);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"Sisyphus25"},"content":"    /** Raises an event to indicate the appointment list has changed */"},{"lineNumber":140,"author":{"gitID":"Sisyphus25"},"content":"    void indicateAppointmentListChanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Sisyphus25":24,"randypx":40,"-":57,"shanmu9898":20}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Sisyphus25"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.DuplicateEventException;"},{"lineNumber":12,"author":{"gitID":"randypx"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" *"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"public class UniqueEventList\u003cA\u003e implements Iterable\u003cA\u003e {"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    private final ObservableList\u003cA\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the list contains an equivalent Event as the given argument."},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":"    public boolean contains(A toCheck) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"     * Adds an Event to the list."},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"     * @throws DuplicateEventException if the event to add"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"     * is a duplicate of an existing Event in the list."},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public void add(A toAdd) throws DuplicateEventException {"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toAdd);"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":"        if (contains(toAdd)) {"},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"            throw new DuplicateEventException();"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"        internalList.add(toAdd);"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"     * Removes the equivalent Event from the list."},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"     * @throws EventNotFoundException if no such event could be found in the list."},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"    public boolean remove(A toRemove) throws EventNotFoundException {"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(toRemove);"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"        final boolean eventFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"        if (!eventFoundAndDeleted) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"            throw new EventNotFoundException();"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        return eventFoundAndDeleted;"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(UniqueEventList\u003cA\u003e replacement) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"    public void setEvents(List\u003cA\u003e events) throws DuplicateEventException {"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"        requireAllNonNull(events);"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":"        final UniqueEventList\u003cA\u003e replacement \u003d new UniqueEventList\u003cA\u003e();"},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"        for (final A event : events) {"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"            replacement.add(event);"},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"        setEvents(replacement);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    public ObservableList\u003cA\u003e asObservableList() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    public Iterator\u003cA\u003e iterator() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueEventList) other).internalList));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":61,"randypx":3,"-":31}},{"path":"src/main/java/seedu/address/model/event/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"Sisyphus25"},"content":"package seedu.address.model.event;"},{"lineNumber":2,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":3,"author":{"gitID":"Sisyphus25"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":6,"author":{"gitID":"Sisyphus25"},"content":"import java.text.DateFormat;"},{"lineNumber":7,"author":{"gitID":"Sisyphus25"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"Sisyphus25"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Calendar;"},{"lineNumber":10,"author":{"gitID":"Sisyphus25"},"content":"import java.util.Date;"},{"lineNumber":11,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":12,"author":{"gitID":"Sisyphus25"},"content":"//@@author Sisyphus25"},{"lineNumber":13,"author":{"gitID":"Sisyphus25"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Sisyphus25"},"content":" * Represents an event\u0027s time stamp in the address book."},{"lineNumber":15,"author":{"gitID":"Sisyphus25"},"content":" * Guarantees: immutable"},{"lineNumber":16,"author":{"gitID":"Sisyphus25"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Sisyphus25"},"content":"public class Time {"},{"lineNumber":18,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DATE_TIME_CONSTRAINTS \u003d \"Date and time must be in the format: DD/MM/YYYY HH:MM\";"},{"lineNumber":19,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d \"Date must be in the format: DD/MM/YYYY\";"},{"lineNumber":20,"author":{"gitID":"Sisyphus25"},"content":"    public static final String MESSAGE_TIME_PERIOD_CONSTRAINTS \u003d \"The end time should be after the start time\";"},{"lineNumber":21,"author":{"gitID":"Sisyphus25"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"((^(((0[1-9]|1[0-9]|2[0-8])[\\\\/](0[1-9]|1[012]))|\""},{"lineNumber":22,"author":{"gitID":"Sisyphus25"},"content":"            + \"((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](19|\""},{"lineNumber":23,"author":{"gitID":"Sisyphus25"},"content":"            + \"[2-9][0-9])\\\\d\\\\d)|(^29[\\\\/]02[\\\\/](19|[2-9][0-9])\""},{"lineNumber":24,"author":{"gitID":"Sisyphus25"},"content":"            + \"(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)))\""},{"lineNumber":25,"author":{"gitID":"Sisyphus25"},"content":"            + \"[ ]([0-1]?[0-9]|2[0-3]):[0-5][0-9]\";"},{"lineNumber":26,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":27,"author":{"gitID":"Sisyphus25"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"((^(((0[1-9]|1[0-9]|2[0-8])[\\\\/](0[1-9]|1[012]))|\""},{"lineNumber":28,"author":{"gitID":"Sisyphus25"},"content":"            + \"((29|30|31)[\\\\/](0[13578]|1[02]))|((29|30)[\\\\/](0[4,6,9]|11)))[\\\\/](19|\""},{"lineNumber":29,"author":{"gitID":"Sisyphus25"},"content":"            + \"[2-9][0-9])\\\\d\\\\d)|(^29[\\\\/]02[\\\\/](19|[2-9][0-9])\""},{"lineNumber":30,"author":{"gitID":"Sisyphus25"},"content":"            + \"(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)))\";"},{"lineNumber":31,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":32,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_FORMAT \u003d \"dd/MM/yyyy HH:mm\";"},{"lineNumber":33,"author":{"gitID":"Sisyphus25"},"content":"    private static final String DATE_ONLY_FORMAT \u003d \"dd/MM/yyyy\";"},{"lineNumber":34,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_FORMATTER \u003d new SimpleDateFormat(DATE_FORMAT);"},{"lineNumber":35,"author":{"gitID":"Sisyphus25"},"content":"    private static final DateFormat DATE_ONLY_FORMATTER \u003d new SimpleDateFormat(DATE_ONLY_FORMAT);"},{"lineNumber":36,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":37,"author":{"gitID":"Sisyphus25"},"content":"    public final Calendar value;"},{"lineNumber":38,"author":{"gitID":"Sisyphus25"},"content":"    private final boolean isOnlyDate;"},{"lineNumber":39,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":40,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Sisyphus25"},"content":"     * Constructs a {@code Time} with the given timestamp."},{"lineNumber":42,"author":{"gitID":"Sisyphus25"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"Sisyphus25"},"content":"     * @param timeStamp date and/or time argument given by the user."},{"lineNumber":44,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Sisyphus25"},"content":"    public Time(String timeStamp, boolean b) {"},{"lineNumber":46,"author":{"gitID":"Sisyphus25"},"content":"        requireNonNull(timeStamp);"},{"lineNumber":47,"author":{"gitID":"Sisyphus25"},"content":"        value \u003d Calendar.getInstance();"},{"lineNumber":48,"author":{"gitID":"Sisyphus25"},"content":"        isOnlyDate \u003d b;"},{"lineNumber":49,"author":{"gitID":"Sisyphus25"},"content":"        if (!isOnlyDate) {"},{"lineNumber":50,"author":{"gitID":"Sisyphus25"},"content":"            checkArgument(isValidTimeStamp(timeStamp), MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":52,"author":{"gitID":"Sisyphus25"},"content":"                this.value.setTime(DATE_FORMATTER.parse(timeStamp));"},{"lineNumber":53,"author":{"gitID":"Sisyphus25"},"content":"            } catch (ParseException e) {"},{"lineNumber":54,"author":{"gitID":"Sisyphus25"},"content":"                throw new IllegalArgumentException(MESSAGE_DATE_TIME_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":57,"author":{"gitID":"Sisyphus25"},"content":"            checkArgument(isValidTimeStamp(timeStamp), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"Sisyphus25"},"content":"            try {"},{"lineNumber":59,"author":{"gitID":"Sisyphus25"},"content":"                this.value.setTime(DATE_ONLY_FORMATTER.parse(timeStamp));"},{"lineNumber":60,"author":{"gitID":"Sisyphus25"},"content":"            } catch (ParseException e) {"},{"lineNumber":61,"author":{"gitID":"Sisyphus25"},"content":"                throw new IllegalArgumentException(MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":62,"author":{"gitID":"Sisyphus25"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":66,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Sisyphus25"},"content":"     * Returns if a given string is a valid time stamp."},{"lineNumber":68,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Sisyphus25"},"content":"    public boolean isValidTimeStamp(String time) {"},{"lineNumber":70,"author":{"gitID":"Sisyphus25"},"content":"        if (!isOnlyDate) {"},{"lineNumber":71,"author":{"gitID":"Sisyphus25"},"content":"            return time.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":72,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":73,"author":{"gitID":"Sisyphus25"},"content":"            return time.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":74,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":77,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given time has already passed the current time"},{"lineNumber":79,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Sisyphus25"},"content":"    public boolean isExpired() {"},{"lineNumber":81,"author":{"gitID":"Sisyphus25"},"content":"        Calendar currentTime \u003d Calendar.getInstance();"},{"lineNumber":82,"author":{"gitID":"Sisyphus25"},"content":"        currentTime.setTime(new Date());"},{"lineNumber":83,"author":{"gitID":"Sisyphus25"},"content":"        return value.before(currentTime);"},{"lineNumber":84,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":86,"author":{"gitID":"Sisyphus25"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"Sisyphus25"},"content":"     * Returns true if the given times is valid"},{"lineNumber":88,"author":{"gitID":"Sisyphus25"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Sisyphus25"},"content":"    public static boolean isValidTime(Time startTime, Time endTime) {"},{"lineNumber":90,"author":{"gitID":"Sisyphus25"},"content":"        return endTime.value.after(startTime.value);"},{"lineNumber":91,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":93,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"Sisyphus25"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitID":"Sisyphus25"},"content":"        if (isOnlyDate) {"},{"lineNumber":96,"author":{"gitID":"Sisyphus25"},"content":"            return DATE_ONLY_FORMATTER.format(value.getTime());"},{"lineNumber":97,"author":{"gitID":"Sisyphus25"},"content":"        } else {"},{"lineNumber":98,"author":{"gitID":"Sisyphus25"},"content":"            return DATE_FORMATTER.format(value.getTime());"},{"lineNumber":99,"author":{"gitID":"Sisyphus25"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":102,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"Sisyphus25"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"Sisyphus25"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitID":"Sisyphus25"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":106,"author":{"gitID":"Sisyphus25"},"content":"                \u0026\u0026 this.value.equals(((Time) other).value)); // state check"},{"lineNumber":107,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":109,"author":{"gitID":"Sisyphus25"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"Sisyphus25"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitID":"Sisyphus25"},"content":"        return value.hashCode();"},{"lineNumber":112,"author":{"gitID":"Sisyphus25"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"Sisyphus25"},"content":""},{"lineNumber":114,"author":{"gitID":"Sisyphus25"},"content":"}"}],"authorContributionMap":{"Sisyphus25":113,"-":1}},{"path":"src/main/java/seedu/address/model/education/UniqueClassList.java","lines":[{"lineNumber":1,"author":{"gitID":"randypx"},"content":"package seedu.address.model.education;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"randypx"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.DuplicateClassException;"},{"lineNumber":14,"author":{"gitID":"randypx"},"content":"import seedu.address.model.education.exceptions.StudentClassNotFoundException;"},{"lineNumber":15,"author":{"gitID":"randypx"},"content":""},{"lineNumber":16,"content":"//@@author randypx-reused"},{"lineNumber":17,"author":{"gitID":"randypx"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"randypx"},"content":" * A list of class that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"randypx"},"content":" * \u003cp\u003e"},{"lineNumber":20,"author":{"gitID":"randypx"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"randypx"},"content":" *"},{"lineNumber":22,"author":{"gitID":"randypx"},"content":" * @see Class#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"randypx"},"content":"public class UniqueClassList implements Iterable\u003cClass\u003e {"},{"lineNumber":26,"author":{"gitID":"randypx"},"content":""},{"lineNumber":27,"author":{"gitID":"randypx"},"content":"    private final ObservableList\u003cClass\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"randypx"},"content":""},{"lineNumber":29,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"randypx"},"content":"     * Returns true if the list contains an equivalent class as the given argument."},{"lineNumber":31,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"randypx"},"content":"    public boolean contains(Class toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"randypx"},"content":"     * Adds a class to the list."},{"lineNumber":39,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"randypx"},"content":"     * @throws DuplicateClassException if the class to add is a duplicate of an existing class in the list."},{"lineNumber":41,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"randypx"},"content":"    public void add(Class toAdd) throws DuplicateClassException {"},{"lineNumber":43,"author":{"gitID":"randypx"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"randypx"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"randypx"},"content":"            throw new DuplicateClassException();"},{"lineNumber":46,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"randypx"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"randypx"},"content":""},{"lineNumber":50,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"randypx"},"content":"     * Replaces the class {@code target} in the list with {@code editedClass}."},{"lineNumber":52,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"randypx"},"content":"     * @throws DuplicateClassException if the replacement is equivalent to another existing class in the list."},{"lineNumber":54,"author":{"gitID":"randypx"},"content":"     * @throws StudentClassNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"randypx"},"content":"    public void setClass(Class target, Class editedClass)"},{"lineNumber":57,"author":{"gitID":"randypx"},"content":"            throws DuplicateClassException, StudentClassNotFoundException {"},{"lineNumber":58,"author":{"gitID":"randypx"},"content":"        requireNonNull(editedClass);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"randypx"},"content":"            throw new StudentClassNotFoundException();"},{"lineNumber":63,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"randypx"},"content":""},{"lineNumber":65,"author":{"gitID":"randypx"},"content":"        if (!target.equals(editedClass) \u0026\u0026 internalList.contains(editedClass)) {"},{"lineNumber":66,"author":{"gitID":"randypx"},"content":"            throw new DuplicateClassException();"},{"lineNumber":67,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"randypx"},"content":""},{"lineNumber":69,"author":{"gitID":"randypx"},"content":"        internalList.set(index, editedClass);"},{"lineNumber":70,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"randypx"},"content":""},{"lineNumber":72,"author":{"gitID":"randypx"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"randypx"},"content":"     * Removes the equivalent class from the list."},{"lineNumber":74,"author":{"gitID":"randypx"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"randypx"},"content":"     * @throws StudentClassNotFoundException if no such class could be found in the list."},{"lineNumber":76,"author":{"gitID":"randypx"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"randypx"},"content":"    public boolean remove(Class toRemove) throws StudentClassNotFoundException {"},{"lineNumber":78,"author":{"gitID":"randypx"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"randypx"},"content":"        final boolean classFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"randypx"},"content":"        if (!classFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"randypx"},"content":"            throw new StudentClassNotFoundException();"},{"lineNumber":82,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"randypx"},"content":"        return classFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"randypx"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"randypx"},"content":""},{"lineNumber":86,"author":{"gitID":"randypx"},"content":"    public void setClasses(UniqueClassList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"randypx"},"content":"    public void setClasses(List\u003cClass\u003e classes) throws DuplicateClassException {"},{"lineNumber":91,"author":{"gitID":"randypx"},"content":"        requireAllNonNull(classes);"},{"lineNumber":92,"author":{"gitID":"randypx"},"content":"        final UniqueClassList replacement \u003d new UniqueClassList();"},{"lineNumber":93,"author":{"gitID":"randypx"},"content":"        for (final Class group : classes) {"},{"lineNumber":94,"author":{"gitID":"randypx"},"content":"            replacement.add(group);"},{"lineNumber":95,"author":{"gitID":"randypx"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"randypx"},"content":"        setClasses(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"randypx"},"content":"    public ObservableList\u003cClass\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"randypx"},"content":"    public Iterator\u003cClass\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"randypx"},"content":"                || (other instanceof UniqueClassList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"randypx"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueClassList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"randypx"},"content":""},{"lineNumber":123,"author":{"gitID":"randypx"},"content":"}"}],"authorContributionMap":{"null":1,"randypx":78,"-":44}}]
